
/****************************************************************************************************//**
 * @file     condor.h
 *
 * @brief    CMSIS Cortex-M0 Peripheral Access Layer Header File for
 *           condor from .
 *
 * @version  V2016-04-08 09:59:51 svn: 2016040809580602
 * @date     11. April 2016
 *
 * @note     Generated with SVDConv V2.85b 
 *           from CMSIS SVD File 'condor.xml' Version 2016-04-08 09:59:51 svn: 2016040809580602,
 *******************************************************************************************************/



/** @addtogroup (null)
  * @{
  */

/** @addtogroup condor
  * @{
  */

#ifndef CONDOR_H
#define CONDOR_H

/* IO definitions (access restrictions to peripheral registers) */
/**
    \defgroup CMSIS_glob_defs CMSIS Global Defines

    <strong>IO Type Qualifiers</strong> are used
    \li to specify the access to peripheral variables.
    \li for automatic generation of peripheral register debug information.
*/
#ifdef __cplusplus
  #define   __I     volatile             /*!< Defines 'read only' permissions                 */
#else
  #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
#endif
#define     __O     volatile             /*!< Defines 'write only' permissions                */
#define     __IO    volatile             /*!< Defines 'read / write' permissions              */

#ifdef __cplusplus
extern "C" {
#endif

#include "soc_defs.h"
/* -------------------------  Interrupt Number Definition  ------------------------ */
#if 0
typedef enum {
/* ----------------------  condor Specific Interrupt Numbers  --------------------- */
  UTimer0_IRQn                  =   0,              /*!<   0  UTimer0                                                          */
  UTimer1_IRQn                  =   1,              /*!<   1  UTimer1                                                          */
  MTimer0_IRQn                  =   2,              /*!<   2  MTimer0                                                          */
  MTimer1_IRQn                  =   3,              /*!<   3  MTimer1                                                          */
  FENCE_IRQn                    =   4,              /*!<   4  FENCE                                                            */
  FLASH_DMA_IRQn                =   5,              /*!<   5  FLASH_DMA                                                        */
  DBG_TX_IRQn                   =   6,              /*!<   6  DBG_TX                                                           */
  DBG_RX_IRQn                   =   7,              /*!<   7  DBG_RX                                                           */
  UART_4W_TX_IRQn               =   8,              /*!<   8  UART_4W_TX                                                       */
  UART_4W_RX_IRQn               =   9,              /*!<   9  UART_4W_RX                                                       */
  UART_2W_TX_IRQn               =  10,              /*!<  10  UART_2W_TX                                                       */
  UART_2W_RX_IRQn               =  11,              /*!<  11  UART_2W_RX                                                       */
  I2C_IRQn                      =  12,              /*!<  12  I2C                                                              */
  SPI_IRQn                      =  13,              /*!<  13  SPI                                                              */
  DMA_IRQn                      =  14,              /*!<  14  DMA                                                              */
  GPIO_IRQn                     =  15,              /*!<  15  GPIO                                                             */
  EXT_INT_IRQn                  =  16,              /*!<  16  EXT_INT                                                          */
  ADDR_OVERFLOW_IRQn            =  17,              /*!<  17  ADDR_OVERFLOW                                                    */
  ILL_ADDR_IRQn                 =  18,              /*!<  18  ILL_ADDR                                                         */
  CMD_DONE_IRQn                 =  19,              /*!<  19  CMD_DONE                                                         */
  RF_EARLY_IRQn                 =  20,              /*!<  20  SW define as RF_EARLY_IRQ                                        */
  RF_END_IRQn                   =  21,              /*!<  21  SW define as RF_END_IRQ                                          */
  LL_0_IRQn                     =  22,              /*!<  22  LL_0                                                             */
  LL_1_IRQn                     =  23,              /*!<  23  LL_1                                                             */
  LL_2_IRQn                     =  24,              /*!<  24  LL_2                                                             */
  LL_3_IRQn                     =  25,              /*!<  25  LL_3                                                             */
  LL_4_IRQn                     =  26,              /*!<  26  LL_4                                                             */
  AES_IRQn                      =  27,              /*!<  27  AES                                                              */
  VOK_IRQn                      =  28,              /*!<  28  VOK                                                              */
  IPC_1_IRQn                    =  29,              /*!<  29  IPC_1                                                            */
  IPC_2_IRQn                    =  30,              /*!<  30  IPC_2                                                            */
  TX_NOT_FULL_IRQn              =  31               /*!<  31  TX_NOT_FULL                                                      */
} IRQn_Type;
#endif

/** @addtogroup Configuration_of_CMSIS
  * @{
  */


/* ================================================================================ */
/* ================      Processor and Core Peripheral Section     ================ */
/* ================================================================================ */

/* ----------------Configuration of the Cortex-M0 Processor and Core Peripherals---------------- */
#define __CM0_REV                 0x0000            /*!< Cortex-M0 Core Revision                                               */
#define __MPU_PRESENT                  0            /*!< MPU present or not                                                    */
#define __NVIC_PRIO_BITS               2            /*!< Number of Bits used for Priority Levels                               */
#define __Vendor_SysTickConfig         0            /*!< Set to 1 if different SysTick Config is used                          */
/** @} */ /* End of group Configuration_of_CMSIS */

#include <stdint.h>                      /* standard types definitions                      */
#include "system_condor.h"                          /*!< condor System                                                         */


/* ================================================================================ */
/* ================       Device Specific Peripheral Section       ================ */
/* ================================================================================ */


/** @addtogroup Device_Peripheral_Registers
  * @{
  */


/* -------------------  Start of section using anonymous unions  ------------------ */
#if defined(__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined(__ICCARM__)
  #pragma language=extended
#elif defined(__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined(__TMS470__)
/* anonymous unions are enabled by default */
#elif defined(__TASKING__)
  #pragma warning 586
#else
  #warning Not supported compiler type
#endif



/* ================================================================================ */
/* ================                     SYS_REG                    ================ */
/* ================================================================================ */


/**
  * @brief SYS_REG  (SYS_REG)
  */

typedef struct {                                    /*!< SYS_REG Structure                                                     */
  
  union {
    __IO uint32_t  BRG_SW_RST;                      /*!< BRG_SW_RST                                                            */
    
    struct {
           uint32_t             :  1;
      __IO uint32_t  MCU_SW_RST :  1;               /*!< mcu_sw_rst                                                            */
      __IO uint32_t  SYS_ALL_RST:  1;               /*!< sys_all_rst                                                           */
      __IO uint32_t  SPI_SLV_SW_RST:  1;            /*!< spi_slv_sw_rst                                                        */
      __IO uint32_t  PHY_SW_RST :  1;               /*!< phy_sw_rst                                                            */
      __IO uint32_t  EFS_TOP_SW_RST:  1;            /*!< efs_top_sw_rst                                                        */
      __IO uint32_t  LL_REG_SW_RST:  1;             /*!< ll_reg_sw_rst                                                         */
      __IO uint32_t  LL_TOP_SW_RST:  1;             /*!< ll_top_sw_rst                                                         */
      __IO uint32_t  MS0TMR_SW_RST:  1;             /*!< ms0tmr_sw_rst                                                         */
      __IO uint32_t  MS1TMR_SW_RST:  1;             /*!< ms1tmr_sw_rst                                                         */
      __IO uint32_t  INT_CTRL_SW_RST:  1;           /*!< int_ctrl_sw_rst                                                       */
      __IO uint32_t  WDT_SW_RST :  1;               /*!< wdt_sw_rst                                                            */
      __IO uint32_t  ROM_SW_RST :  1;               /*!< rom_sw_rst                                                            */
      __IO uint32_t  INT_REG_SW_RST:  1;            /*!< int_reg_sw_rst                                                        */
      __IO uint32_t  SPI_EXTFLASH_REG_SW_RST:  1;   /*!< spi_extflash_reg_sw_rst                                               */
      __IO uint32_t  SPI_EXTFLASH_SW_RST:  1;       /*!< spi_extflash_sw_rst                                                   */
      __IO uint32_t  TAS_SW_RST :  1;               /*!< tas_sw_rst                                                            */
      __IO uint32_t  AES_TOP_SW_RST:  1;            /*!< aes_top_sw_rst                                                        */
      __IO uint32_t  DMA_SW_RST :  1;               /*!< dma_sw_rst                                                            */
      __IO uint32_t  DBG_UART_REG_SW_RST:  1;       /*!< dbg_uart_reg_sw_rst                                                   */
      __IO uint32_t  ICOM_UART_REG_SW_RST:  1;      /*!< icom_uart_reg_sw_rst                                                  */
      __IO uint32_t  DAT_UART_REG_SW_RST:  1;       /*!< dat_uart_reg_sw_rst                                                   */
      __IO uint32_t  US0TMR_SW_RST:  1;             /*!< us0tmr_sw_rst                                                         */
      __IO uint32_t  US1TMR_SW_RST:  1;             /*!< us1tmr_sw_rst                                                         */
      __IO uint32_t  SPIM_SW_RST:  1;               /*!< spim_sw_rst                                                           */
      __IO uint32_t  SPIM_REG_SW_RST:  1;           /*!< spim_reg_sw_rst                                                       */
      __IO uint32_t  I2CM_SW_RST:  1;               /*!< i2cm_sw_rst                                                           */
      __IO uint32_t  APP_ROM_SW_RST:  1;            /*!< app_rom_sw_rst                                                        */
      __IO uint32_t  LFSR_SW_RST:  1;               /*!< lfsr_sw_rst                                                           */
      __IO uint32_t  PWM_SW_RST :  1;               /*!< pwm_sw_rst                                                            */
      __IO uint32_t  REMAP_ICE_SW_RST:  1;          /*!< remap_ice_sw_rst                                                      */
    } BRG_SW_RST_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  BOOT;                            /*!< BOOT                                                                  */
    
    struct {
           uint32_t             : 16;
      __I  uint32_t  ROM_SEL    :  1;               /*!< 1: addr 0x0000 mapping to rom                                         */
      __I  uint32_t  UART_SEL   :  1;               /*!< 0: trapping bit to indicate reboot is not necessary 1: trapping
                                                         bit to indicate reboot is necessary                                   */
      __I  uint32_t  SPI_SEL    :  1;               /*!< 0: trapping bit to indicate the boot code is from ROM 1: trapping
                                                         bit to indicate the boot code is from flash                           */
      __I  uint32_t  SRAM_SEL   :  1;               /*!< 1: addr 0x0000 mapping to sram                                        */
    } BOOT_b;                                       /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  IC_TAG_0;                        /*!< IC_TAG_0                                                              */
    
    struct {
      __I  uint32_t  IC_TAG_31_0: 32;               /*!< ic_tag[31:0]                                                          */
    } IC_TAG_0_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  IC_TAG_1;                        /*!< see the description in 'IC TAG 0'                                     */
    
    struct {
      __I  uint32_t  IC_TAG_63_32: 32;              /*!< ic_tag[63:32]                                                         */
    } IC_TAG_1_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  ASIC_TAG;                        /*!< ASIC_TAG                                                              */
    
    struct {
      __I  uint32_t  ASIC_TAG   :  8;               /*!< asic_tag[7:0]                                                         */
    } ASIC_TAG_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AHB_BRG_STATUS;                  /*!< AHB_BRG_STATUS                                                        */
    
    struct {
      __IO uint32_t  AHB_SW_RST :  1;               /*!< ahb_brg software reset.                                               */
      __IO uint32_t  AHB_ERR_RST:  1;               /*!< ahb_brg error flag software reset.                                    */
           uint32_t             :  2;
      __IO uint32_t  ARB_SEL    :  2;               /*!< ahb_brg sel mux selection.                                            */
           uint32_t             : 10;
      __I  uint32_t  AHB_STATUS : 16;               /*!< ahb_brg status.                                                       */
    } AHB_BRG_STATUS_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  AHB_ILL_ADDR;                    /*!< AHB_ILL_ADDR                                                          */
    
    struct {
      __I  uint32_t  AHB_ILL_ADDR: 32;              /*!< illegal address.                                                      */
    } AHB_ILL_ADDR_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AHB_FEN_ADDR;                    /*!< AHB_FEN_ADDR                                                          */
    
    struct {
      __IO uint32_t  AHB_FEN_ADDR: 32;              /*!< fence hit address.                                                    */
    } AHB_FEN_ADDR_b;                               /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED[2];
  
  union {
    __I  uint32_t  ANDESN7_DEBUG_PC;                /*!< andesn7_debug_pc                                                      */
    
    struct {
      __I  uint32_t  CORE_CURRENT_PC: 24;           /*!< andesn7 program counter for readout                                   */
      __I  uint32_t  CORE_DEBUG_MODE:  1;           /*!< 1 if andesn7 is in debug mode                                         */
           uint32_t             :  3;
      __I  uint32_t  CORE_STANDBY_MODE:  1;         /*!< 1 if andesn7 is in standby mode                                       */
    } ANDESN7_DEBUG_PC_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AHB_CPU_SETUP;                   /*!< ahb_cpu_setup                                                         */
    
    struct {
      __IO uint32_t  SRAM_PREFETCH:  1;             /*!< sram_prefetch                                                         */
           uint32_t             :  7;
      __IO uint32_t  DEFAULT_DIMB: 12;              /*!< default_dimb[11:0]                                                    */
    } AHB_CPU_SETUP_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  N705S_CONFIG;                    /*!< n705s_config                                                          */
    
    struct {
      __IO uint32_t  CONDOR_CORE_ID    :  7;               /*!< core_id[6:0]                                                          */
      __IO uint32_t  MCU_ENABLE :  1;               /*!< MCU reset. level signal 1to release the MCU and the MCU starts
                                                         to run codes.                                                         */
      __IO uint32_t  INITIAL_STALL_LENGTH:  4;      /*!< initial_stall_length[3:0]                                             */
           uint32_t             :  4;
      __IO uint32_t  DEFAULT_IVB:  8;               /*!< default_ivb[7:0]                                                      */
    } N705S_CONFIG_b;                               /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED1[4];
  
  union {
    __IO uint32_t  MICROSECOND_TIMER0;              /*!< microsecond_timer0                                                    */
    
    struct {
      __IO uint32_t  US_TM0_INIT_VALUE: 24;         /*!< us time init value (in unit of micro-second) Write 0 to disable.      */
    } MICROSECOND_TIMER0_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CURRENT_MICROSECOND_TIME_VALUE_0;/*!< current_microsecond_time_value_0                                      */
    
    struct {
      __I  uint32_t  US_TM0_CUR_VALUE: 24;          /*!< us timer value (in unit of micro-second)                              */
      __IO uint32_t  US_TM0_MODE:  1;               /*!< 0: count down to 0 then stop 1: count down to 0 then auto reload
                                                         the timer value and countinue counting                                */
      __IO uint32_t  US_TM0_INT_STS_DONE:  1;       /*!< us timer interrupt status. Write 1 to clear to 0. can be used
                                                         for polling done soon after tm_value is set to non-zero value
                                                          even if tm_int_mask is asserted                                      */
      __IO uint32_t  US_TM0_INT_MASK:  1;           /*!< 0: default 1: interrupt mask                                          */
    } CURRENT_MICROSECOND_TIME_VALUE_0_b;           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  MICROSECOND_TIMER1;              /*!< microsecond_timer1                                                    */
    
    struct {
      __IO uint32_t  US_TM1_INIT_VALUE: 24;         /*!< us time init value (in unit of micro-second) Write 0 to disable.      */
    } MICROSECOND_TIMER1_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CURRENT_MICROSECOND_TIME_VALUE_1;/*!< current_microsecond_time_value_1                                      */
    
    struct {
      __I  uint32_t  US_TM1_CUR_VALUE: 24;          /*!< us timer value (in unit of micro-second)                              */
      __IO uint32_t  US_TM1_MODE:  1;               /*!< 0: count down to 0 then stop 1: count down to 0 then auto reload
                                                         the timer value and countinue counting                                */
      __IO uint32_t  US_TM1_INT_STS_DONE:  1;       /*!< us timer interrupt status. Write 1 to clear to 0. can be used
                                                         for polling done soon after tm_value is set to non-zero value
                                                          even if tm_int_mask is asserted                                      */
      __IO uint32_t  US_TM1_INT_MASK:  1;           /*!< 0: default 1: interrupt mask                                          */
    } CURRENT_MICROSECOND_TIME_VALUE_1_b;           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  MILISECOND_TIMER0;               /*!< milisecond_timer0                                                     */
    
    struct {
      __IO uint32_t  MS_TM0_INIT_VALUE: 24;         /*!< ms time init value (in unit of micro-second) Write 0 to disable.      */
    } MILISECOND_TIMER0_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CURRENT_MILISECOND_TIME_VALUE_0; /*!< current_milisecond_time_value_0                                       */
    
    struct {
      __I  uint32_t  MS_TM0_CUR_VALUE: 24;          /*!< ms timer value (in unit of micro-second)                              */
      __IO uint32_t  MS_TM0_MODE:  1;               /*!< 0: count down to 0 then stop 1: count down to 0 then auto reload
                                                         the timer value and countinue counting                                */
      __IO uint32_t  MS_TM0_INT_STS_DONE:  1;       /*!< ms timer interrupt status. Write 1 to clear to 0. can be used
                                                         for polling done soon after tm_value is set to non-zero value
                                                          even if tm_int_mask is asserted                                      */
      __IO uint32_t  MS_TM0_INT_MASK:  1;           /*!< 0: default 1: interrupt mask                                          */
    } CURRENT_MILISECOND_TIME_VALUE_0_b;            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  MILISECOND_TIMER1;               /*!< milisecond_timer1                                                     */
    
    struct {
      __IO uint32_t  MS_TM1_INIT_VALUE: 24;         /*!< ms time init value (in unit of micro-second) Write 0 to disable.      */
    } MILISECOND_TIMER1_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CURRENT_MILISECOND_TIME_VALUE_1; /*!< current_milisecond_time_value_1                                       */
    
    struct {
      __I  uint32_t  MS_TM1_CUR_VALUE: 24;          /*!< ms timer value (in unit of micro-second)                              */
      __IO uint32_t  MS_TM1_MODE:  1;               /*!< 0: count down to 0 then stop 1: count down to 0 then auto reload
                                                         the timer value and countinue counting                                */
      __IO uint32_t  MS_TM1_INT_STS_DONE:  1;       /*!< ms timer interrupt status. Write 1 to clear to 0. can be used
                                                         for polling done soon after tm_value is set to non-zero value
                                                          even if tm_int_mask is asserted                                      */
      __IO uint32_t  MS_TM1_INT_MASK:  1;           /*!< 0: default 1: interrupt mask                                          */
    } CURRENT_MILISECOND_TIME_VALUE_1_b;            /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED2[14];
  
  union {
    __IO uint32_t  GROUP_TIMER_SET;                 /*!< GROUP_TIMER_SET                                                       */
    
    struct {
      __IO uint32_t  US_TIMER_MUX:  2;              /*!< config the group us timer kick                                        */
           uint32_t             :  6;
      __IO uint32_t  MS_TIMER_MUX:  2;              /*!< config the group ms timer kick                                        */
    } GROUP_TIMER_SET_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  HBUSREQ_LOCK;                    /*!< HBUSREQ_LOCK                                                          */
    
    struct {
      __IO uint32_t  HBUSREQ_LOCK: 14;              /*!< Here bit n represents the HBUSREQ lock setting of the AHB host
                                                         n. When set to 1, AHB arbiter arbitrates after the granted AHB
                                                          host deasserts its HBUSREQ. When set to 0, AHB arbiter arbitrates
                                                          at every clock according to the fixed priority.                      */
    } HBUSREQ_LOCK_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  HBURST_LOCK;                     /*!< HBURST_LOCK                                                           */
    
    struct {
      __IO uint32_t  HBURST_LOCK: 14;               /*!< Here bit n represents the HBURST lock setting of the AHB host
                                                         n. When set to 1, AHB arbiter arbitrates after the granted AHB
                                                          host finishes its burst transaction. When set to 0, AHB arbiter
                                                          arbitrates at every clock according to the fixed priority.           */
    } HBURST_LOCK_b;                                /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED3[2];
  
  union {
    __IO uint32_t  PRESCALER_USTIMER;               /*!< PRESCALER_USTIMER                                                     */
    
    struct {
      __IO uint32_t  PRESCALER_USTIMER:  9;         /*!< prescaler for the us timer/ms timer to count for 1 us, set 31
                                                         for 32MHz                                                             */
    } PRESCALER_USTIMER_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  UART_W2B;                        /*!< UART_W2B                                                              */
    
    struct {
           uint32_t             :  4;
      __IO uint32_t  DATA_UART_W2B_EN_A:  1;        /*!< enable word to byte function.                                         */
           uint32_t             :  3;
      __IO uint32_t  DATA_UART_W2B_EN_B:  1;        /*!< enable word to byte function.                                         */
           uint32_t             :  3;
      __IO uint32_t  DATA_UART_W2B_EN_C:  1;        /*!< enable word to byte function.                                         */
    } UART_W2B_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TB_ADR_SEL;                      /*!< TB_ADR_SEL                                                            */
    
    struct {
      __IO uint32_t  TB_ADR_SEL : 16;               /*!< tb_adr_sel for test bus muxing selection.                             */
      __IO uint32_t  CRC_ENB    :  1;               /*!< crc_enb                                                               */
           uint32_t             :  3;
      __I  uint32_t  CRC_DONE   :  1;               /*!< crc_done                                                              */
           uint32_t             : 10;
      __IO uint32_t  TB_CS      :  1;               /*!< tb_cs set to 1 to enable the test bus muxing.                         */
    } TB_ADR_SEL_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  TB_RDATA;                        /*!< TB_RDATA                                                              */
    
    struct {
      __I  uint32_t  TB_RDATA   :  8;               /*!< tb_rdata for test bus muxing result                                   */
           uint32_t             :  8;
      __I  uint32_t  ROM_CRC    : 16;               /*!< rom_crc[15:0]                                                         */
    } TB_RDATA_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  GROUP_TIMER_KICK;                /*!< GROUP_TIMER_KICK                                                      */
    
    struct {
      __IO uint32_t  GRP_TIMER  :  1;               /*!< kick the group us timer                                               */
    } GROUP_TIMER_KICK_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LFSR_SEED;                       /*!< LFSR_SEED                                                             */
    
    struct {
      __IO uint32_t  SEED       : 32;               /*!< lfsr seed                                                             */
    } LFSR_SEED_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LFSR_POLYNOMIO;                  /*!< LFSR_POLYNOMIO                                                        */
    
    struct {
      __IO uint32_t  POLY       : 32;               /*!< lfsr poly                                                             */
    } LFSR_POLYNOMIO_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  LFSR_RAND;                       /*!< LFSR_RAND                                                             */
    
    struct {
      __I  uint32_t  RAND_32    : 32;               /*!< lfsr poly                                                             */
    } LFSR_RAND_b;                                  /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED4[4];
  
  union {
    __IO uint32_t  TAS0;                            /*!< TAS0                                                                  */
    
    struct {
      __IO uint32_t  TAS0       :  1;               /*!< 0: resource busy, 1: resource available , read available should
                                                         write 1 back when you finish using the resource to release the
                                                          resource for other deviece need resource                             */
    } TAS0_b;                                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TAS1;                            /*!< TAS1                                                                  */
    
    struct {
      __IO uint32_t  TAS1       :  1;               /*!< 0: resource busy, 1: resource available , read available should
                                                         write 1 back when you finish using the resource to release the
                                                          resource for other deviece need resource                             */
    } TAS1_b;                                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TAS2;                            /*!< TAS2                                                                  */
    
    struct {
      __IO uint32_t  TAS2       :  1;               /*!< 0: resource busy, 1: resource available , read available should
                                                         write 1 back when you finish using the resource to release the
                                                          resource for other deviece need resource                             */
    } TAS2_b;                                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TAS3;                            /*!< TAS3                                                                  */
    
    struct {
      __IO uint32_t  TAS3       :  1;               /*!< 0: resource busy, 1: resource available , read available should
                                                         write 1 back when you finish using the resource to release the
                                                          resource for other deviece need resource                             */
    } TAS3_b;                                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TAS4;                            /*!< TAS4                                                                  */
    
    struct {
      __IO uint32_t  TAS4       :  1;               /*!< 0: resource busy, 1: resource available , read available should
                                                         write 1 back when you finish using the resource to release the
                                                          resource for other deviece need resource                             */
    } TAS4_b;                                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TAS5;                            /*!< TAS5                                                                  */
    
    struct {
      __IO uint32_t  TAS5       :  1;               /*!< 0: resource busy, 1: resource available , read available should
                                                         write 1 back when you finish using the resource to release the
                                                          resource for other deviece need resource                             */
    } TAS5_b;                                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TAS6;                            /*!< TAS6                                                                  */
    
    struct {
      __IO uint32_t  TAS6       :  1;               /*!< 0: resource busy, 1: resource available , read available should
                                                         write 1 back when you finish using the resource to release the
                                                          resource for other deviece need resource                             */
    } TAS6_b;                                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TAS7;                            /*!< TAS7                                                                  */
    
    struct {
      __IO uint32_t  TAS7       :  1;               /*!< 0: resource busy, 1: resource available , read available should
                                                         write 1 back when you finish using the resource to release the
                                                          resource for other deviece need resource                             */
    } TAS7_b;                                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  BOOT_INFO;                       /*!< boot_info                                                             */
    
    struct {
      __IO uint32_t  WDT_INIT_SYS:  1;              /*!< the system was reboot by watch dog timer.                             */
      __IO uint32_t  WDT_INIT_MCU:  1;              /*!< the MCU was reboot by watch dog timer.                                */
    } BOOT_INFO_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  N705S_IVIC_TRIG_TYPE;            /*!< n705s_ivic_trig_type                                                  */
    
    struct {
      __IO uint32_t  IVIC_TRIG_TYPE: 32;            /*!< hardware interrupt trigger type. 0: the corresponding hardware
                                                         interrupt is level-triggered. 1: the corresponding hardware
                                                          interrupt is edge-triggered.                                         */
    } N705S_IVIC_TRIG_TYPE_b;                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_VALID;                 /*!< ROM_PATCH_VALID                                                       */
    
    struct {
      __IO uint32_t  ROM_PATCH_VALID: 17;           /*!< rom patch valid related to each sets. Here are 16 sets(original
                                                         address, target address, and length).                                 */
    } ROM_PATCH_VALID_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_BASE_ADDRESS;          /*!< ROM_PATCH_BASE_ADDRESS                                                */
    
    struct {
      __IO uint32_t  ORI_BASE_ADDR: 12;             /*!< rom patch original base address mapping.                              */
           uint32_t             :  4;
      __IO uint32_t  TAR_BASE_ADDR: 12;             /*!< rom patch target base address mapping.                                */
    } ROM_PATCH_BASE_ADDRESS_b;                     /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_BASE_ADDRESS_16;       /*!< ROM_PATCH_BASE_ADDRESS_16                                             */
    
    struct {
      __IO uint32_t  ORI_BASE_ADDR_16: 12;          /*!< the 17th rom patch original base address mapping.                     */
           uint32_t             :  4;
      __IO uint32_t  TAR_BASE_ADDR_16: 12;          /*!< the 17th rom patch target base address mapping.                       */
    } ROM_PATCH_BASE_ADDRESS_16_b;                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_TARGET_ADDRESS_0;  /*!< ROM_PATCH_SUB_TARGET_ADDRESS_0                                        */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_TAR_ADDR_0: 18;      /*!< rom_patch_tar_address_0 setting. 4 byte alignment.                    */
    } ROM_PATCH_SUB_TARGET_ADDRESS_0_b;             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_ORIGINAL_ADDRESS_0;/*!< ROM_PATCH_SUB_ORIGINAL_ADDRESS_0                                      */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_ORI_ADDR_0: 18;      /*!< rom_patch_ori_address_0 setting. When the rom_patch_ori_address_0
                                                         equal to MCU produced address, rom_patch will replace read data
                                                          from ROM to rom_patch_tar_address_0 in other memory. 4 byte
                                                          alignment.                                                           */
    } ROM_PATCH_SUB_ORIGINAL_ADDRESS_0_b;           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_LENGTH_0;              /*!< ROM_PATCH_LENGTH_0                                                    */
    
    struct {
      __IO uint32_t  ROM_PATCH_LEN_0:  6;           /*!< rom_patch_len_0 setting. User program the new memory mapping
                                                         range here. ROM patch hardware remap the area based on ROM_PATCH_ADDRESS_0
                                                         . 4 byte alignment.                                                   */
    } ROM_PATCH_LENGTH_0_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_TARGET_ADDRESS_1;  /*!< ROM_PATCH_SUB_TARGET_ADDRESS_1                                        */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_TAR_ADDR_1: 18;      /*!< rom_patch_tar_address_1 setting. 4 byte alignment.                    */
    } ROM_PATCH_SUB_TARGET_ADDRESS_1_b;             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_ORIGINAL_ADDRESS_1;/*!< ROM_PATCH_SUB_ORIGINAL_ADDRESS_1                                      */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_ORI_ADDR_1: 18;      /*!< rom_patch_ori_address_1 setting. When the rom_patch_ori_address_1
                                                         equal to MCU produced address, rom_patch will replace read data
                                                          from ROM to rom_patch_tar_address_1 in other memory. 4 byte
                                                          alignment.                                                           */
    } ROM_PATCH_SUB_ORIGINAL_ADDRESS_1_b;           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_LENGTH_1;              /*!< ROM_PATCH_LENGTH_1                                                    */
    
    struct {
      __IO uint32_t  ROM_PATCH_LEN_1:  6;           /*!< rom_patch_len_1 setting. User program the new memory mapping
                                                         range here. ROM patch hardware remap the area based on ROM_PATCH_ADDRESS_1
                                                         . 4 byte alignment.                                                   */
    } ROM_PATCH_LENGTH_1_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_TARGET_ADDRESS_2;  /*!< ROM_PATCH_SUB_TARGET_ADDRESS_2                                        */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_TAR_ADDR_2: 18;      /*!< rom_patch_tar_address_2 setting. 4 byte alignment.                    */
    } ROM_PATCH_SUB_TARGET_ADDRESS_2_b;             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_ORIGINAL_ADDRESS_2;/*!< ROM_PATCH_SUB_ORIGINAL_ADDRESS_2                                      */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_ORI_ADDR_2: 18;      /*!< rom_patch_ori_address_2 setting. When the rom_patch_ori_address_2
                                                         equal to MCU produced address, rom_patch will replace read data
                                                          from ROM to rom_patch_tar_address_2 in other memory. 4 byte
                                                          alignment.                                                           */
    } ROM_PATCH_SUB_ORIGINAL_ADDRESS_2_b;           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_LENGTH_2;              /*!< ROM_PATCH_LENGTH_2                                                    */
    
    struct {
      __IO uint32_t  ROM_PATCH_LEN_2:  6;           /*!< rom_patch_len_2 setting. User program the new memory mapping
                                                         range here. ROM patch hardware remap the area based on ROM_PATCH_ADDRESS_2
                                                         . 4 byte alignment.                                                   */
    } ROM_PATCH_LENGTH_2_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_TARGET_ADDRESS_3;  /*!< ROM_PATCH_SUB_TARGET_ADDRESS_3                                        */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_TAR_ADDR_3: 18;      /*!< rom_patch_tar_address_3 setting. 4 byte alignment.                    */
    } ROM_PATCH_SUB_TARGET_ADDRESS_3_b;             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_ORIGINAL_ADDRESS_3;/*!< ROM_PATCH_SUB_ORIGINAL_ADDRESS_3                                      */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_ORI_ADDR_3: 18;      /*!< rom_patch_ori_address_3 setting. When the rom_patch_ori_address_3
                                                         equal to MCU produced address, rom_patch will replace read data
                                                          from ROM to rom_patch_tar_address_3 in other memory. 4 byte
                                                          alignment.                                                           */
    } ROM_PATCH_SUB_ORIGINAL_ADDRESS_3_b;           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_LENGTH_3;              /*!< ROM_PATCH_LENGTH_3                                                    */
    
    struct {
      __IO uint32_t  ROM_PATCH_LEN_3:  6;           /*!< rom_patch_len_3 setting. User program the new memory mapping
                                                         range here. ROM patch hardware remap the area based on ROM_PATCH_ADDRESS_3
                                                         . 4 byte alignment.                                                   */
    } ROM_PATCH_LENGTH_3_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_TARGET_ADDRESS_4;  /*!< ROM_PATCH_SUB_TARGET_ADDRESS_4                                        */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_TAR_ADDR_4: 18;      /*!< rom_patch_tar_address_4 setting. 4 byte alignment.                    */
    } ROM_PATCH_SUB_TARGET_ADDRESS_4_b;             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_ORIGINAL_ADDRESS_4;/*!< ROM_PATCH_SUB_ORIGINAL_ADDRESS_4                                      */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_ORI_ADDR_4: 18;      /*!< rom_patch_ori_address_4 setting. When the rom_patch_ori_address_4
                                                         equal to MCU produced address, rom_patch will replace read data
                                                          from ROM to rom_patch_tar_address_4 in other memory. 4 byte
                                                          alignment.                                                           */
    } ROM_PATCH_SUB_ORIGINAL_ADDRESS_4_b;           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_LENGTH_4;              /*!< ROM_PATCH_LENGTH_4                                                    */
    
    struct {
      __IO uint32_t  ROM_PATCH_LEN_4:  6;           /*!< rom_patch_len_4 setting. User program the new memory mapping
                                                         range here. ROM patch hardware remap the area based on ROM_PATCH_ADDRESS_4
                                                         . 4 byte alignment.                                                   */
    } ROM_PATCH_LENGTH_4_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_TARGET_ADDRESS_5;  /*!< ROM_PATCH_SUB_TARGET_ADDRESS_5                                        */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_TAR_ADDR_5: 18;      /*!< rom_patch_tar_address_5 setting. 4 byte alignment.                    */
    } ROM_PATCH_SUB_TARGET_ADDRESS_5_b;             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_ORIGINAL_ADDRESS_5;/*!< ROM_PATCH_SUB_ORIGINAL_ADDRESS_5                                      */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_ORI_ADDR_5: 18;      /*!< rom_patch_ori_address_5 setting. When the rom_patch_ori_address_5
                                                         equal to MCU produced address, rom_patch will replace read data
                                                          from ROM to rom_patch_tar_address_5 in other memory. 4 byte
                                                          alignment.                                                           */
    } ROM_PATCH_SUB_ORIGINAL_ADDRESS_5_b;           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_LENGTH_5;              /*!< ROM_PATCH_LENGTH_5                                                    */
    
    struct {
      __IO uint32_t  ROM_PATCH_LEN_5:  6;           /*!< rom_patch_len_5 setting. User program the new memory mapping
                                                         range here. ROM patch hardware remap the area based on ROM_PATCH_ADDRESS_5
                                                         . 4 byte alignment.                                                   */
    } ROM_PATCH_LENGTH_5_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_TARGET_ADDRESS_6;  /*!< ROM_PATCH_SUB_TARGET_ADDRESS_6                                        */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_TAR_ADDR_6: 18;      /*!< rom_patch_tar_address_6 setting. 4 byte alignment.                    */
    } ROM_PATCH_SUB_TARGET_ADDRESS_6_b;             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_ORIGINAL_ADDRESS_6;/*!< ROM_PATCH_SUB_ORIGINAL_ADDRESS_6                                      */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_ORI_ADDR_6: 18;      /*!< rom_patch_ori_address_6 setting. When the rom_patch_ori_address_6
                                                         equal to MCU produced address, rom_patch will replace read data
                                                          from ROM to rom_patch_tar_address_6 in other memory. 4 byte
                                                          alignment.                                                           */
    } ROM_PATCH_SUB_ORIGINAL_ADDRESS_6_b;           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_LENGTH_6;              /*!< ROM_PATCH_LENGTH_6                                                    */
    
    struct {
      __IO uint32_t  ROM_PATCH_LEN_6:  6;           /*!< rom_patch_len_6 setting. User program the new memory mapping
                                                         range here. ROM patch hardware remap the area based on ROM_PATCH_ADDRESS_6
                                                         . 4 byte alignment.                                                   */
    } ROM_PATCH_LENGTH_6_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_TARGET_ADDRESS_7;  /*!< ROM_PATCH_SUB_TARGET_ADDRESS_7                                        */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_TAR_ADDR_7: 18;      /*!< rom_patch_tar_address_7 setting. 4 byte alignment.                    */
    } ROM_PATCH_SUB_TARGET_ADDRESS_7_b;             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_ORIGINAL_ADDRESS_7;/*!< ROM_PATCH_SUB_ORIGINAL_ADDRESS_7                                      */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_ORI_ADDR_7: 18;      /*!< rom_patch_ori_address_7 setting. When the rom_patch_ori_address_7
                                                         equal to MCU produced address, rom_patch will replace read data
                                                          from ROM to rom_patch_tar_address_7 in other memory. 4 byte
                                                          alignment.                                                           */
    } ROM_PATCH_SUB_ORIGINAL_ADDRESS_7_b;           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_LENGTH_7;              /*!< ROM_PATCH_LENGTH_7                                                    */
    
    struct {
      __IO uint32_t  ROM_PATCH_LEN_7:  6;           /*!< rom_patch_len_7 setting. User program the new memory mapping
                                                         range here. ROM patch hardware remap the area based on ROM_PATCH_ADDRESS_7
                                                         . 4 byte alignment.                                                   */
    } ROM_PATCH_LENGTH_7_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_TARGET_ADDRESS_8;  /*!< ROM_PATCH_SUB_TARGET_ADDRESS_8                                        */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_TAR_ADDR_8: 18;      /*!< rom_patch_tar_address_8 setting. 4 byte alignment.                    */
    } ROM_PATCH_SUB_TARGET_ADDRESS_8_b;             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_ORIGINAL_ADDRESS_8;/*!< ROM_PATCH_SUB_ORIGINAL_ADDRESS_8                                      */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_ORI_ADDR_8: 18;      /*!< rom_patch_ori_address_8 setting. When the rom_patch_ori_address_8
                                                         equal to MCU produced address, rom_patch will replace read data
                                                          from ROM to rom_patch_tar_address_8 in other memory. 4 byte
                                                          alignment.                                                           */
    } ROM_PATCH_SUB_ORIGINAL_ADDRESS_8_b;           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_LENGTH_8;              /*!< ROM_PATCH_LENGTH_8                                                    */
    
    struct {
      __IO uint32_t  ROM_PATCH_LEN_8:  6;           /*!< rom_patch_len_8 setting. User program the new memory mapping
                                                         range here. ROM patch hardware remap the area based on ROM_PATCH_ADDRESS_8
                                                         . 4 byte alignment.                                                   */
    } ROM_PATCH_LENGTH_8_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_TARGET_ADDRESS_9;  /*!< ROM_PATCH_SUB_TARGET_ADDRESS_9                                        */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_TAR_ADDR_9: 18;      /*!< rom_patch_tar_address_9 setting. 4 byte alignment.                    */
    } ROM_PATCH_SUB_TARGET_ADDRESS_9_b;             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_ORIGINAL_ADDRESS_9;/*!< ROM_PATCH_SUB_ORIGINAL_ADDRESS_9                                      */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_ORI_ADDR_9: 18;      /*!< rom_patch_ori_address_9 setting. When the rom_patch_ori_address_9
                                                         equal to MCU produced address, rom_patch will replace read data
                                                          from ROM to rom_patch_tar_address_9 in other memory. 4 byte
                                                          alignment.                                                           */
    } ROM_PATCH_SUB_ORIGINAL_ADDRESS_9_b;           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_LENGTH_9;              /*!< ROM_PATCH_LENGTH_9                                                    */
    
    struct {
      __IO uint32_t  ROM_PATCH_LEN_9:  6;           /*!< rom_patch_len_9 setting. User program the new memory mapping
                                                         range here. ROM patch hardware remap the area based on ROM_PATCH_ADDRESS_9
                                                         . 4 byte alignment.                                                   */
    } ROM_PATCH_LENGTH_9_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_TARGET_ADDRESS_10; /*!< ROM_PATCH_SUB_TARGET_ADDRESS_10                                       */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_TAR_ADDR_10: 18;     /*!< rom_patch_tar_address_10 setting. 4 byte alignment.                   */
    } ROM_PATCH_SUB_TARGET_ADDRESS_10_b;            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_ORIGINAL_ADDRESS_10;/*!< ROM_PATCH_SUB_ORIGINAL_ADDRESS_10                                    */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_ORI_ADDR_10: 18;     /*!< rom_patch_ori_address_10 setting. When the rom_patch_ori_address_10
                                                         equal to MCU produced address, rom_patch will replace read data
                                                          from ROM to rom_patch_tar_address_10 in other memory. 4 byte
                                                          alignment.                                                           */
    } ROM_PATCH_SUB_ORIGINAL_ADDRESS_10_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_LENGTH_10;             /*!< ROM_PATCH_LENGTH_10                                                   */
    
    struct {
      __IO uint32_t  ROM_PATCH_LEN_10:  6;          /*!< rom_patch_len_10 setting. User program the new memory mapping
                                                         range here. ROM patch hardware remap the area based on ROM_PATCH_ADDRESS_1
                                                         0. 4 byte alignment.                                                  */
    } ROM_PATCH_LENGTH_10_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_TARGET_ADDRESS_11; /*!< ROM_PATCH_SUB_TARGET_ADDRESS_11                                       */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_TAR_ADDR_11: 18;     /*!< rom_patch_tar_address_11 setting. 4 byte alignment.                   */
    } ROM_PATCH_SUB_TARGET_ADDRESS_11_b;            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_ORIGINAL_ADDRESS_11;/*!< ROM_PATCH_SUB_ORIGINAL_ADDRESS_11                                    */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_ORI_ADDR_11: 18;     /*!< rom_patch_ori_address_11 setting. When the rom_patch_ori_address_11
                                                         equal to MCU produced address, rom_patch will replace read data
                                                          from ROM to rom_patch_tar_address_11 in other memory. 4 byte
                                                          alignment.                                                           */
    } ROM_PATCH_SUB_ORIGINAL_ADDRESS_11_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_LENGTH_11;             /*!< ROM_PATCH_LENGTH_11                                                   */
    
    struct {
      __IO uint32_t  ROM_PATCH_LEN_11:  6;          /*!< rom_patch_len_11 setting. User program the new memory mapping
                                                         range here. ROM patch hardware remap the area based on ROM_PATCH_ADDRESS_1
                                                         1. 4 byte alignment.                                                  */
    } ROM_PATCH_LENGTH_11_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_TARGET_ADDRESS_12; /*!< ROM_PATCH_SUB_TARGET_ADDRESS_12                                       */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_TAR_ADDR_12: 18;     /*!< rom_patch_tar_address_12 setting. 4 byte alignment.                   */
    } ROM_PATCH_SUB_TARGET_ADDRESS_12_b;            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_ORIGINAL_ADDRESS_12;/*!< ROM_PATCH_SUB_ORIGINAL_ADDRESS_12                                    */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_ORI_ADDR_12: 18;     /*!< rom_patch_ori_address_12 setting. When the rom_patch_ori_address_12
                                                         equal to MCU produced address, rom_patch will replace read data
                                                          from ROM to rom_patch_tar_address_12 in other memory. 4 byte
                                                          alignment.                                                           */
    } ROM_PATCH_SUB_ORIGINAL_ADDRESS_12_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_LENGTH_12;             /*!< ROM_PATCH_LENGTH_12                                                   */
    
    struct {
      __IO uint32_t  ROM_PATCH_LEN_12:  6;          /*!< rom_patch_len_12 setting. User program the new memory mapping
                                                         range here. ROM patch hardware remap the area based on ROM_PATCH_ADDRESS_1
                                                         2. 4 byte alignment.                                                  */
    } ROM_PATCH_LENGTH_12_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_TARGET_ADDRESS_13; /*!< ROM_PATCH_SUB_TARGET_ADDRESS_13                                       */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_TAR_ADDR_13: 18;     /*!< rom_patch_tar_address_13 setting. 4 byte alignment.                   */
    } ROM_PATCH_SUB_TARGET_ADDRESS_13_b;            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_ORIGINAL_ADDRESS_13;/*!< ROM_PATCH_SUB_ORIGINAL_ADDRESS_13                                    */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_ORI_ADDR_13: 18;     /*!< rom_patch_ori_address_13 setting. When the rom_patch_ori_address_13
                                                         equal to MCU produced address, rom_patch will replace read data
                                                          from ROM to rom_patch_tar_address_13 in other memory. 4 byte
                                                          alignment.                                                           */
    } ROM_PATCH_SUB_ORIGINAL_ADDRESS_13_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_LENGTH_13;             /*!< ROM_PATCH_LENGTH_13                                                   */
    
    struct {
      __IO uint32_t  ROM_PATCH_LEN_13:  6;          /*!< rom_patch_len_13 setting. User program the new memory mapping
                                                         range here. ROM patch hardware remap the area based on ROM_PATCH_ADDRESS_1
                                                         3. 4 byte alignment.                                                  */
    } ROM_PATCH_LENGTH_13_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_TARGET_ADDRESS_14; /*!< ROM_PATCH_SUB_TARGET_ADDRESS_14                                       */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_TAR_ADDR_14: 18;     /*!< rom_patch_tar_address_14 setting. 4 byte alignment.                   */
    } ROM_PATCH_SUB_TARGET_ADDRESS_14_b;            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_ORIGINAL_ADDRESS_14;/*!< ROM_PATCH_SUB_ORIGINAL_ADDRESS_14                                    */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_ORI_ADDR_14: 18;     /*!< rom_patch_ori_address_14 setting. When the rom_patch_ori_address_14
                                                         equal to MCU produced address, rom_patch will replace read data
                                                          from ROM to rom_patch_tar_address_14 in other memory. 4 byte
                                                          alignment.                                                           */
    } ROM_PATCH_SUB_ORIGINAL_ADDRESS_14_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_LENGTH_14;             /*!< ROM_PATCH_LENGTH_14                                                   */
    
    struct {
      __IO uint32_t  ROM_PATCH_LEN_14:  6;          /*!< rom_patch_len_14 setting. User program the new memory mapping
                                                         range here. ROM patch hardware remap the area based on ROM_PATCH_ADDRESS_1
                                                         4. 4 byte alignment.                                                  */
    } ROM_PATCH_LENGTH_14_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_TARGET_ADDRESS_15; /*!< ROM_PATCH_SUB_TARGET_ADDRESS_15                                       */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_TAR_ADDR_15: 18;     /*!< rom_patch_tar_address_15 setting. 4 byte alignment.                   */
    } ROM_PATCH_SUB_TARGET_ADDRESS_15_b;            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_ORIGINAL_ADDRESS_15;/*!< ROM_PATCH_SUB_ORIGINAL_ADDRESS_15                                    */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_ORI_ADDR_15: 18;     /*!< rom_patch_ori_address_15 setting. When the rom_patch_ori_address_15
                                                         equal to MCU produced address, rom_patch will replace read data
                                                          from ROM to rom_patch_tar_address_15 in other memory. 4 byte
                                                          alignment.                                                           */
    } ROM_PATCH_SUB_ORIGINAL_ADDRESS_15_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_LENGTH_15;             /*!< ROM_PATCH_LENGTH_15                                                   */
    
    struct {
      __IO uint32_t  ROM_PATCH_LEN_15:  6;          /*!< rom_patch_len_15 setting. User program the new memory mapping
                                                         range here. ROM patch hardware remap the area based on ROM_PATCH_ADDRESS_1
                                                         5. 4 byte alignment.                                                  */
    } ROM_PATCH_LENGTH_15_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_TARGET_ADDRESS_16; /*!< ROM_PATCH_SUB_TARGET_ADDRESS_16                                       */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_TAR_ADDR_16: 18;     /*!< rom_patch_tar_address_16 setting. 4 byte alignment.                   */
    } ROM_PATCH_SUB_TARGET_ADDRESS_16_b;            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_SUB_ORIGINAL_ADDRESS_16;/*!< ROM_PATCH_SUB_ORIGINAL_ADDRESS_16                                    */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  ROM_PATCH_ORI_ADDR_16: 18;     /*!< rom_patch_ori_address_16 setting. When the rom_patch_ori_address_16
                                                         equal to MCU produced address, rom_patch will replace read data
                                                          from ROM to rom_patch_tar_address_16 in other memory. 4 byte
                                                          alignment.                                                           */
    } ROM_PATCH_SUB_ORIGINAL_ADDRESS_16_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_PATCH_LENGTH_16;             /*!< ROM_PATCH_LENGTH_16                                                   */
    
    struct {
      __IO uint32_t  ROM_PATCH_LEN_16: 18;          /*!< rom_patch_len_16 setting. User program the new memory mapping
                                                         range here. ROM patch hardware remap the area based on ROM_PATCH_ADDRESS_1
                                                         6. 4 byte alignment.                                                  */
    } ROM_PATCH_LENGTH_16_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  BUS_MONITOR_STOP;                /*!< (manually added by Bernie)                                            */
    
    struct {
      __IO uint32_t  HADDR_STOP : 1;
    } BUS_MONITOR_STOP_b;
  };
  
  union {
    __IO uint32_t  BUS_MONITOR_TRIG;                /*!< BUS_MONITOR_TRIG                                                      */
    
    struct {
      __IO uint32_t  HADDR_TRIG : 24;               /*!< bus monitor trigger. if haddr_trig value = bus address, bus
                                                         monitor will keep the record.                                         */
      __IO uint32_t  HADDR_TRIG_VALID:  1;          /*!< (manually added by Bernie)                                            */
    } BUS_MONITOR_TRIG_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __O  uint32_t  BUS_MONITOR_0;                   /*!< (manually added by Bernie)                                            */
    struct {
      __O  uint32_t HADDR_MONITOR_0     : 24;
      __O  uint32_t HMASTER_MONITOR_0   : 4;
    } BUS_MONITOR_0_b;
  };
  
  union {
    __O  uint32_t  BUS_MONITOR_1;                   /*!< (manually added by Bernie)                                            */
    struct {
      __O  uint32_t HADDR_MONITOR_1     : 24;
      __O  uint32_t HMASTER_MONITOR_1   : 4;
    } BUS_MONITOR_1_b;
  };
  
  union {
    __O  uint32_t  BUS_MONITOR_2;                   /*!< (manually added by Bernie)                                            */
    struct {
      __O  uint32_t HADDR_MONITOR_2     : 24;
      __O  uint32_t HMASTER_MONITOR_2   : 4;
    } BUS_MONITOR_2_b;
  };
  
  union {
    __O  uint32_t  BUS_MONITOR_3;                   /*!< (manually added by Bernie)                                            */
    struct {
      __O  uint32_t HADDR_MONITOR_3     : 24;
      __O  uint32_t HMASTER_MONITOR_3   : 4;
    } BUS_MONITOR_3_b;
  };
  
  union {
    __O  uint32_t  BUS_MONITOR_4;                   /*!< (manually added by Bernie)                                            */
    struct {
      __O  uint32_t HADDR_MONITOR_4     : 24;
      __O  uint32_t HMASTER_MONITOR_4   : 4;
    } BUS_MONITOR_4_b;
  };
  
  union {
    __O  uint32_t  BUS_MONITOR_5;                   /*!< (manually added by Bernie)                                            */
    struct {
      __O  uint32_t HADDR_MONITOR_5     : 24;
      __O  uint32_t HMASTER_MONITOR_5   : 4;
    } BUS_MONITOR_5_b;
  };
  
  union {
    __O  uint32_t  BUS_MONITOR_6;                   /*!< (manually added by Bernie)                                            */
    struct {
      __O  uint32_t HADDR_MONITOR_6     : 24;
      __O  uint32_t HMASTER_MONITOR_6   : 4;
    } BUS_MONITOR_6_b;
  };
  
  union {
    __O  uint32_t  BUS_MONITOR_7;                   /*!< (manually added by Bernie)                                            */
    struct {
      __O  uint32_t HADDR_MONITOR_7     : 24;
      __O  uint32_t HMASTER_MONITOR_7   : 4;
    } BUS_MONITOR_7_b;
  };
  
  union {
    __O  uint32_t  BUS_MONITOR_8;                   /*!< (manually added by Bernie)                                            */
    struct {
      __O  uint32_t HADDR_MONITOR_8     : 24;
      __O  uint32_t HMASTER_MONITOR_8   : 4;
    } BUS_MONITOR_8_b;
  };
  
  union {
    __O  uint32_t  BUS_MONITOR_9;                   /*!< (manually added by Bernie)                                            */
    struct {
      __O  uint32_t HADDR_MONITOR_9     : 24;
      __O  uint32_t HMASTER_MONITOR_9   : 4;
    } BUS_MONITOR_9_b;
  };
  
  union {
    __O  uint32_t  BUS_MONITOR_10;                  /*!< (manually added by Bernie)                                            */
    struct {
      __O  uint32_t HADDR_MONITOR_10    : 24;
      __O  uint32_t HMASTER_MONITOR_10  : 4;
    } BUS_MONITOR_10_b;
  };
  
  union {
    __O  uint32_t  BUS_MONITOR_11;                  /*!< (manually added by Bernie)                                            */
    struct {
      __O  uint32_t HADDR_MONITOR_11    : 24;
      __O  uint32_t HMASTER_MONITOR_11  : 4;
    } BUS_MONITOR_11_b;
  };
  
  union {
    __O  uint32_t  BUS_MONITOR_12;                  /*!< (manually added by Bernie)                                            */
    struct {
      __O  uint32_t HADDR_MONITOR_12    : 24;
      __O  uint32_t HMASTER_MONITOR_12  : 4;
    } BUS_MONITOR_12_b;
  };
  
  union {
    __O  uint32_t  BUS_MONITOR_13;                  /*!< (manually added by Bernie)                                            */
    struct {
      __O  uint32_t HADDR_MONITOR_13    : 24;
      __O  uint32_t HMASTER_MONITOR_13  : 4;
    } BUS_MONITOR_13_b;
  };
  
  union {
    __O  uint32_t  BUS_MONITOR_14;                  /*!< (manually added by Bernie)                                            */
    struct {
      __O  uint32_t HADDR_MONITOR_14    : 24;
      __O  uint32_t HMASTER_MONITOR_14  : 4;
    } BUS_MONITOR_14_b;
  };
  
  union {
    __O  uint32_t  BUS_MONITOR_15;                  /*!< (manually added by Bernie)                                            */
    struct {
      __O  uint32_t HADDR_MONITOR_15    : 24;
      __O  uint32_t HMASTER_MONITOR_15  : 4;
    } BUS_MONITOR_15_b;
  };
  
  union {
    __IO uint32_t CSR_TOP_CLK_ALWAYS_ON;             /*!< (manually added by Bernie)                                            */
    struct {
      __IO uint32_t CSR_CLK_ALWAYS_ON   : 1;
    } CSR_TOP_CLK_ALWAYS_ON_b;
  };
  
  __I  uint32_t  RESERVED5[43];
  
  union {
    __IO uint32_t  ROM_TEST_MODE;                   /*!< ROM_TEST_MODE                                                         */
    
    struct {
      __IO uint32_t  ROM_TEST_MODE: 16;             /*!< rom_test_mode.                                                        */
    } ROM_TEST_MODE_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_BIST_CTRL;                   /*!< ROM_BIST_CTRL                                                         */
    
    struct {
      __IO uint32_t  ROM_BIST_ENABLE:  1;           /*!< rom_bist enable kick signal.                                          */
      __I  uint32_t  ROM_BIST_READY_TO_READ:  1;    /*!< rom_bist is ready to read.                                            */
           uint32_t             : 10;
      __I  uint32_t  ROM_BIST_ADDR: 20;             /*!< monitor rom_bist address status.                                      */
    } ROM_BIST_CTRL_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ROM_BIST_ADDR_SET;               /*!< ROM_BIST_ADDR_SET                                                     */
    
    struct {
      __IO uint32_t  ROM_BIST_TAR_ADDR: 32;         /*!< the rom bist result store space setting. default is PATCH_SRAM
                                                         space.                                                                */
    } ROM_BIST_ADDR_SET_b;                          /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED6[3];
  
  union {
    __IO uint32_t  READ_PROT;                       /*!< READ_PROT                                                             */
    
    struct {
      __IO uint32_t  READ_PROT  :  1;               /*!< Read protection, to avoid ICE or I2C try to get SRAM or ROM
                                                         data.                                                                 */
    } READ_PROT_b;                                  /*!< BitSize                                                               */
  };
} CONDOR_SYS_REG_Type;


/* ================================================================================ */
/* ================                      Timer                     ================ */
/* ================================================================================ */


/**
  * @brief Timer General Type (Timer)
  */

typedef struct {                                    /*!< Timer Structure                                                       */
  
  union {
    __IO uint32_t  TIMER;                           /*!< timer                                                                 */
    
    struct {
      __IO uint32_t  TM_INIT_VALUE: 24;             /*!< time init value Write 0 to disable.                                   */
    } TIMER_b;                                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CFG_TIME;                        /*!< config_time_and_value                                                 */
    
    struct {
      __I  uint32_t  TM_CNT_VALUE: 24;              /*!< timer value                                                           */
      __IO uint32_t  TM_MODE    :  1;               /*!< 0: count down to 0 then stop 1: count down to 0 then auto reload
                                                         the timer value and countinue counting                                */
      __IO uint32_t  TM_INT_STS_DONE:  1;           /*!< timer interrupt status. Write 1 to clear to 0. can be used for
                                                         polling done soon after tm_value is set to non-zero value even
                                                          if tm_int_mask is asserted                                           */
      __IO uint32_t  TM_INT_MASK:  1;               /*!< 0: default 1: interrupt mask                                          */
    } CFG_TIME_b;                                   /*!< BitSize                                                               */
  };
} CONDOR_Timer_Type;


/* ================================================================================ */
/* ================                   ON0_SYS_REG                  ================ */
/* ================================================================================ */

/**
  * @brief ON0_SYS_REG  (ON0_SYS_REG)
  */

typedef struct {                                    /*!< ON0_SYS_REG Structure                                                 */
  
  union {
    __IO uint32_t  CONDOR_CHIP_ID;                         /*!< CHIP_ID                                                               */
    
    struct {
      __IO uint32_t  CONDOR_CHIP_ID    : 32;               /*!< chip_id[31:0]                                                         */
    } CHIP_ID_b;                                    /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED;
  
  union {
    __IO uint32_t  SYS_CLK_SEL;                     /*!< SYS_CLK_SEL                                                           */
    
    struct {
      __IO uint32_t  SYS_CK_SEL :  2;               /*!< MAC and MCU clock selection : 00 : 32MHz clock (divide by analog
                                                         64MHz) 01 : 16MHz clock (divide by analog 64MHz) 10 : 8MHz clock
                                                          (divide by analog 64MHz) 11 : 32MHz clock (analog 32MHz)             */
    } SYS_CLK_SEL_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ON1_SYS_CLK_SEL;                 /*!< ON1_SYS_CLK_SEL                                                       */
    
    struct {
      __IO uint32_t  ON1_SYS_CK_SEL:  2;            /*!< power domain 1 system clock selection : 00 : 32MHz clock (divide
                                                         by analog 64MHz) 01 : 16MHz clock (divide by analog 64MHz) 10
                                                          : 8MHz clock (divide by analog 64MHz) 11 : 64MHz clock (analog
                                                          64MHz)                                                               */
    } ON1_SYS_CLK_SEL_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  SPI_FLASH_CLK_SEL;               /*!< SPI_FLASH_CLK_SEL                                                     */
    
    struct {
      __IO uint32_t  SPI_FLASH_CK_SEL:  2;          /*!< link layer clock selection : 00 : 32MHz clock (divide by analog
                                                         64MHz) 01 : 16MHz clock (divide by analog 64MHz) 10 : 8MHz clock
                                                          (divide by analog 64MHz) 11 : 64MHz clock (analog 64MHz)             */
    } SPI_FLASH_CLK_SEL_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_CLK_ASYN_EN;                  /*!< LL_CLK_ASYN_EN                                                        */
    
    struct {
      __IO uint32_t  LL_CLK_ASYNC_EN:  1;           /*!< link layer clock asynchronous to system clock enable                  */
    } LL_CLK_ASYN_EN_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  GROUP_1_CLOCK_ENABLE;            /*!< group_1_clock_enable                                                  */
    
    struct {
      __IO uint32_t  MCU_CLK_EN :  1;               /*!< mcu clock enable                                                      */
      __IO uint32_t  INT_CTRL_CLK_EN:  1;           /*!< int_ctrl clock enable                                                 */
      __IO uint32_t  ROM_CLK_EN :  1;               /*!< rom clock enable                                                      */
      __IO uint32_t  AES_CLK_EN :  1;               /*!< aes_top clock enable                                                  */
      __IO uint32_t  SPI_SLV_CLK_EN:  1;            /*!< spi slave interface clock enable                                      */
      __IO uint32_t  EFS_TOP_CLK_EN:  1;            /*!< efuse clock enable                                                    */
      __IO uint32_t  APP_ROM_CLK_EN:  1;            /*!< app rom clock enable                                                  */
      __IO uint32_t  SPI_FLASH_SYS_CLK_EN:  1;      /*!< spi flash using system clock enable                                   */
      __IO uint32_t  TAS_CLK_EN :  1;               /*!< tas clock enable                                                      */
      __IO uint32_t  LFSR_CLK_EN:  1;               /*!< lfsr clock enable                                                     */
    } GROUP_1_CLOCK_ENABLE_b;                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  GROUP_2_CLOCK_ENABLE;            /*!< group_2_clock_enable                                                  */
    
    struct {
      __IO uint32_t  DBG_UART_REG_CLK_EN:  1;       /*!< debug uart clock enable                                               */
      __IO uint32_t  ICOM_UART_REG_CLK_EN:  1;      /*!< icommand uart clock enable                                            */
      __IO uint32_t  DAT_UART_REG_CLK_EN:  1;       /*!< dat uart clock enable                                                 */
      __IO uint32_t  SPIM_CLK_EN:  1;               /*!< spi_mas clock enable                                                  */
      __IO uint32_t  I2CM_CLK_EN:  1;               /*!< i2cm clock enable                                                     */
      __IO uint32_t  DMA_CLK_EN :  1;               /*!< dma clock enable                                                      */
    } GROUP_2_CLOCK_ENABLE_b;                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  GROUP_3_CLOCK_ENABLE;            /*!< group_3_clock_enable                                                  */
    
    struct {
      __IO uint32_t  MS0TMR_CLK_EN:  1;             /*!< ms timer 0 clock enable                                               */
      __IO uint32_t  MS1TMR_CLK_EN:  1;             /*!< ms timer 1 clock enable                                               */
      __IO uint32_t  US0TMR_CLK_EN:  1;             /*!< us timer 0 clock enable                                               */
      __IO uint32_t  US1TMR_CLK_EN:  1;             /*!< us timer 0 clock enable                                               */
      __IO uint32_t  PWM0_CLK_EN:  1;               /*!< pwm0 clock enable                                                     */
      __IO uint32_t  PWM1_CLK_EN:  1;               /*!< pwm1 clock enable                                                     */
      __IO uint32_t  PWM2_CLK_EN:  1;               /*!< pwm2 clock enable                                                     */
      __IO uint32_t  PWM3_CLK_EN:  1;               /*!< pwm3 clock enable                                                     */
      __IO uint32_t  PWM4_CLK_EN:  1;               /*!< pwm4 clock enable                                                     */
    } GROUP_3_CLOCK_ENABLE_b;                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  GROUP_4_CLOCK_ENABLE;            /*!< group_4_clock_enable                                                  */
    
    struct {
      __IO uint32_t  WDT_CLK_EN :  1;               /*!< wdt 0 an 1 clock enable                                               */
    } GROUP_4_CLOCK_ENABLE_b;                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ON0_CLOCK_ENABLE;                /*!< on0_clock_enable                                                      */
    
    struct {
      __IO uint32_t  I2C_SLV_CLK_EN:  1;            /*!< i2c_slv clock enable                                                  */
      __IO uint32_t  ON0_GPIO_CLK_EN:  1;           /*!< on0_gpio clock enable                                                 */
    } ON0_CLOCK_ENABLE_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_TOP_CLOCK_ENABLE;             /*!< ll_top_clock_enable                                                   */
    
    struct {
      __IO uint32_t  LL_TOP_CLK_EN:  1;             /*!< ll_top clock enable                                                   */
    } LL_TOP_CLOCK_ENABLE_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ON0_SW_RST;                      /*!< ON0_SW_RST                                                            */
    
    struct {
      __IO uint32_t  GPIO_ON0_SW_RST:  1;           /*!< gpio_on0_sw_rst                                                       */
      __IO uint32_t  U0_SRAM_SW_RST:  1;            /*!< u0_sram_sw_rst                                                        */
      __IO uint32_t  ON0_SYS_REG_SW_RST:  1;        /*!< on0_sys_reg_sw_rst                                                    */
      __IO uint32_t  I2C_SLV_REG_SW_RST:  1;        /*!< i2c_slv_reg_sw_rst                                                    */
    } ON0_SW_RST_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  BLE_ON3_SW_RST;                  /*!< BLE_ON3_SW_RST                                                        */
    
    struct {
      __IO uint32_t  BLE_ON3_SW_RST:  1;            /*!< ble_on3_sw_rst                                                        */
    } BLE_ON3_SW_RST_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  BLE_ON4_SW_RST;                  /*!< BLE_ON4_SW_RST                                                        */
    
    struct {
      __IO uint32_t  BLE_ON4_SW_RST:  1;            /*!< ble_on4_sw_rst                                                        */
    } BLE_ON4_SW_RST_b;                             /*!< BitSize                                                               */
  };
  __IO uint32_t  DESIGN_FOR_TEST_ASSERTION;         /*!< Design_For_Test_Assertion                                             */
  
  union {
    __I  uint32_t  CHIP_TAG_0;                      /*!< Chip_Tag_0                                                            */
    
    struct {
      __I  uint32_t  VERSION_CODE_31_0: 32;         /*!< compile date with last 4 digital svn number                           */
    } CHIP_TAG_0_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  CHIP_TAG_1;                      /*!< see the description in 'Chip Tag 0'                                   */
    
    struct {
      __I  uint32_t  VERSION_CODE_63_32: 32;        /*!< compile date with last 4 digital svn number                           */
    } CHIP_TAG_1_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  MANUFATURE_TAG;                  /*!< Manufature_Tag                                                        */
    
    struct {
      __I  uint32_t  COMPILE_TYPE:  8;              /*!< 8h0a denotes ASIC, 8h0f denotes FPGA                                  */
    } MANUFATURE_TAG_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  SID_TAG;                         /*!< SID_Tag                                                               */
    
    struct {
      __I  uint32_t  SID        : 16;               /*!< sid                                                                   */
    } SID_TAG_b;                                    /*!< BitSize                                                               */
  };
  __IO uint32_t  SRAM_BIST_MODE;                    /*!< SRAM_BIST_MODE                                                        */
  __IO uint32_t  SRAM_BIST_ENABLE;                  /*!< SRAM_BIST_ENABLE                                                      */
  __IO uint32_t  SRAM_BIST_STATUS;                  /*!< SRAM_BIST_STATUS                                                      */
  __IO uint32_t  DEBUG_GATING;                      /*!< Debug_Gating                                                          */
} CONDOR_ON0_SYS_REG_Type;

/* ================================================================================ */
/* ================                     INT_REG                    ================ */
/* ================================================================================ */


/**
  * @brief INT_REG  (INT_REG)
  */

typedef struct {                                    /*!< INT_REG Structure                                                     */
  
  union {
    __IO uint32_t  INT1_MASK;                       /*!< INT1_MASK                                                             */
    
    struct {
      __IO uint32_t  MASK1_US_TIMER_0:  1;          /*!< mask of us_timer_0, 0: un-mask , 1: mask                              */
      __IO uint32_t  MASK1_US_TIMER_1:  1;          /*!< mask of us_timer_1, 0: un-mask , 1: mask                              */
      __IO uint32_t  MASK1_MS_TIMER_0:  1;          /*!< mask of ms_timer_0, 0: un-mask , 1: mask                              */
      __IO uint32_t  MASK1_MS_TIMER_1:  1;          /*!< mask of ms_timer_1, 0: un-mask , 1: mask                              */
      __IO uint32_t  MASK1_FENCE_HIT_INT:  1;       /*!< mask of fence_hit_int, 0: un-mask , 1: mask                           */
      __IO uint32_t  MASK1_FLASH_DMA_DONE:  1;      /*!< mask of flash_dma_done, 0: un-mask , 1: mask                          */
      __IO uint32_t  MASK1_DBG_UART_TX:  1;         /*!< mask of dbg_uart_tx, 0: un-mask , 1: mask                             */
      __IO uint32_t  MASK1_DBG_UART_RX:  1;         /*!< mask of dbg_uart_rx, 0: un-mask , 1: mask                             */
      __IO uint32_t  MASK1_ICOM_UART_TX:  1;        /*!< mask of icom_uart_tx, 0: un-mask , 1: mask                            */
      __IO uint32_t  MASK1_ICOM_UART_RX:  1;        /*!< mask of icom_uart_rx, 0: un-mask , 1: mask                            */
      __IO uint32_t  MASK1_DAT_UART_TX:  1;         /*!< mask of dat_uart_tx, 0: un-mask , 1: mask                             */
      __IO uint32_t  MASK1_DAT_UART_RX:  1;         /*!< mask of dat_uart_rx, 0: un-mask , 1: mask                             */
      __IO uint32_t  MASK1_I2CM_INTR:  1;           /*!< mask of i2cm_intr, 0: un-mask , 1: mask                               */
      __IO uint32_t  MASK1_SPI_M_DONE_INT:  1;      /*!< mask of spi_m_done_int, 0: un-mask , 1: mask                          */
      __IO uint32_t  MASK1_SYS_DMA_DONE:  1;        /*!< mask of sys_dma_done, 0: un-mask , 1: mask                            */
      __IO uint32_t  MASK1_GPIO_INT:  1;            /*!< mask of gpio_int, 0: un-mask , 1: mask                                */
      __IO uint32_t  MASK1_EXT_INTR_I:  1;          /*!< mask of ext_intr_i, 0: un-mask , 1: mask                              */
      __IO uint32_t  MASK1_SRAM_ADDR_OVERFLOW:  1;  /*!< mask of sram_addr_overflow, 0: un-mask , 1: mask                      */
      __IO uint32_t  MASK1_ILL_ADDR_INT:  1;        /*!< mask of ill_addr_int, 0: un-mask , 1: mask                            */
      __IO uint32_t  MASK1_CMD_DONE_INT:  1;        /*!< mask of cmd_done_int, 0: un-mask , 1: mask                            */
      __IO uint32_t  MASK1_TX_FIFO_NOT_EMPTY_INT:  1;/*!< mask of tx_fifo_not_empty_int, 0: un-mask , 1: mask                  */
      __IO uint32_t  MASK1_RX_FIFO_NOT_EMPTY_INT:  1;/*!< mask of rx_fifo_not_empty_int, 0: un-mask , 1: mask                  */
      __IO uint32_t  MASK1_LL_INT0:  1;             /*!< mask of ll_int0, 0: un-mask , 1: mask                                 */
      __IO uint32_t  MASK1_LL_INT1:  1;             /*!< mask of ll_int1, 0: un-mask , 1: mask                                 */
      __IO uint32_t  MASK1_LL_INT2:  1;             /*!< mask of ll_int2, 0: un-mask , 1: mask                                 */
      __IO uint32_t  MASK1_LL_INT3:  1;             /*!< mask of ll_int3, 0: un-mask , 1: mask                                 */
      __IO uint32_t  MASK1_LL_INT4:  1;             /*!< mask of ll_int4, 0: un-mask , 1: mask                                 */
      __IO uint32_t  MASK1_AES_INT:  1;             /*!< mask of aes_int, 0: un-mask , 1: mask                                 */
      __IO uint32_t  MASK1_IRQ33_IRQ12_INT:  1;     /*!< mask of irq33_irq12_int, 0: un-mask , 1: mask                         */
      __IO uint32_t  MASK1_IPC1 :  1;               /*!< mask of ipc1, 0: un-mask , 1: mask                                    */
      __IO uint32_t  MASK1_IPC2 :  1;               /*!< mask of ipc2, 0: un-mask , 1: mask                                    */
      __IO uint32_t  MASK1_TX_FIFO_NOT_FULL_INT:  1;/*!< mask of tx_fifo_not_full_int, 0: un-mask , 1: mask                    */
    } INT1_MASK_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  INT1_RAW;                        /*!< INT1_RAW                                                              */
    
    struct {
      __I  uint32_t  RAW_US_TIMER_0_1:  1;          /*!< raw of us_timer_0                                                     */
      __I  uint32_t  RAW_US_TIMER_1_1:  1;          /*!< raw of us_timer_1                                                     */
      __I  uint32_t  RAW_MS_TIMER_0_1:  1;          /*!< raw of ms_timer_0                                                     */
      __I  uint32_t  RAW_MS_TIMER_1_1:  1;          /*!< raw of ms_timer_1                                                     */
      __I  uint32_t  RAW_FENCE_HIT_INT_1:  1;       /*!< raw of fence_hit_int                                                  */
      __I  uint32_t  RAW_FLASH_DMA_DONE_1:  1;      /*!< raw of flash_dma_done                                                 */
      __I  uint32_t  RAW_DBG_UART_TX_1:  1;         /*!< raw of dbg_uart_tx                                                    */
      __I  uint32_t  RAW_DBG_UART_RX_1:  1;         /*!< raw of dbg_uart_rx                                                    */
      __I  uint32_t  RAW_ICOM_UART_TX_1:  1;        /*!< raw of icom_uart_tx                                                   */
      __I  uint32_t  RAW_ICOM_UART_RX_1:  1;        /*!< raw of icom_uart_rx                                                   */
      __I  uint32_t  RAW_DAT_UART_TX_1:  1;         /*!< raw of dat_uart_tx                                                    */
      __I  uint32_t  RAW_DAT_UART_RX_1:  1;         /*!< raw of dat_uart_rx                                                    */
      __I  uint32_t  RAW_I2CM_INTR_1:  1;           /*!< raw of i2cm_intr                                                      */
      __I  uint32_t  RAW_SPI_M_DONE_INT_1:  1;      /*!< raw of spi_m_done_int                                                 */
      __I  uint32_t  RAW_SYS_DMA_DONE_1:  1;        /*!< raw of sys_dma_done                                                   */
      __I  uint32_t  RAW_GPIO_INT_1:  1;            /*!< raw of gpio_int                                                       */
      __I  uint32_t  RAW_EXT_INTR_I_1:  1;          /*!< raw of ext_intr_i                                                     */
      __I  uint32_t  RAW_SRAM_ADDR_OVERFLOW_1:  1;  /*!< raw of sram_addr_overflow                                             */
      __I  uint32_t  RAW_ILL_ADDR_INT_1:  1;        /*!< raw of ill_addr_int                                                   */
      __I  uint32_t  RAW_CMD_DONE_INT_1:  1;        /*!< raw of cmd_done_int                                                   */
      __I  uint32_t  RAW_TX_FIFO_NOT_EMPTY_INT_1:  1;/*!< raw of tx_fifo_not_empty_int                                         */
      __I  uint32_t  RAW_RX_FIFO_NOT_EMPTY_INT_1:  1;/*!< raw of rx_fifo_not_empty_int                                         */
      __I  uint32_t  RAW_LL_INT0_1:  1;             /*!< raw of ll_int0                                                        */
      __I  uint32_t  RAW_LL_INT1_1:  1;             /*!< raw of ll_int1                                                        */
      __I  uint32_t  RAW_LL_INT2_1:  1;             /*!< raw of ll_int2                                                        */
      __I  uint32_t  RAW_LL_INT3_1:  1;             /*!< raw of ll_int3                                                        */
      __I  uint32_t  RAW_LL_INT4_1:  1;             /*!< raw of ll_int4                                                        */
      __I  uint32_t  RAW_AES_INT_1:  1;             /*!< raw of aes_int                                                        */
      __I  uint32_t  RAW_IRQ33_IRQ12_INT_1:  1;     /*!< raw of irq33_irq12_int                                                */
      __I  uint32_t  RAW_IPC1_1 :  1;               /*!< raw of ipc1                                                           */
      __I  uint32_t  RAW_IPC2_1 :  1;               /*!< raw of ipc2                                                           */
      __I  uint32_t  RAW_TX_FIFO_NOT_FULL_INT_1:  1;/*!< raw of tx_fifo_not_full_int                                           */
    } INT1_RAW_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  INT1_STS;                        /*!< INT1_STS                                                              */
    
    struct {
      __IO uint32_t  STS1_US_TIMER_0:  1;           /*!< status of us_timer_0 after mask                                       */
      __IO uint32_t  STS1_US_TIMER_1:  1;           /*!< status of us_timer_1 after mask                                       */
      __IO uint32_t  STS1_MS_TIMER_0:  1;           /*!< status of ms_timer_0 after mask                                       */
      __IO uint32_t  STS1_MS_TIMER_1:  1;           /*!< status of ms_timer_1 after mask                                       */
      __IO uint32_t  STS1_FENCE_HIT_INT:  1;        /*!< status of fence_hit_int after mask                                    */
      __IO uint32_t  STS1_FLASH_DMA_DONE:  1;       /*!< status of flash_dma_done after mask                                   */
      __I  uint32_t  STS1_DBG_UART_TX_BUSY:  1;     /*!< status of dbg_uart_tx after mask                                      */
      __I  uint32_t  STS1_DBG_UART_RX_BUSY:  1;     /*!< status of dbg_uart_rx after mask                                      */
      __I  uint32_t  STS1_ICOM_UART_TX_BUSY:  1;    /*!< status of icom_uart_tx after mask                                     */
      __I  uint32_t  STS1_ICOM_UART_RX_BUSY:  1;    /*!< status of icom_uart_rx after mask                                     */
      __I  uint32_t  STS1_DAT_UART_TX_BUSY:  1;     /*!< status of dat_uart_tx after mask                                      */
      __I  uint32_t  STS1_DAT_UART_RX_BUSY:  1;     /*!< status of dat_uart_rx after mask                                      */
      __I  uint32_t  STS1_I2CM_INTR_BUSY:  1;       /*!< status of i2cm_intr after mask                                        */
      __IO uint32_t  STS1_SPI_M_DONE_INT:  1;       /*!< status of spi_m_done_int after mask                                   */
      __IO uint32_t  STS1_SYS_DMA_DONE:  1;         /*!< status of sys_dma_done after mask                                     */
      __I  uint32_t  STS1_GPIO_INT_BUSY:  1;        /*!< status of gpio_int after mask                                         */
      __I  uint32_t  STS1_EXT_INTR_I_BUSY:  1;      /*!< status of ext_intr_i after mask                                       */
      __IO uint32_t  STS1_SRAM_ADDR_OVERFLOW:  1;   /*!< status of sram_addr_overflow after mask                               */
      __IO uint32_t  STS1_ILL_ADDR_INT:  1;         /*!< status of ill_addr_int after mask                                     */
      __I  uint32_t  STS1_CMD_DONE_INT_BUSY:  1;    /*!< status of cmd_done_int after mask                                     */
      __I  uint32_t  STS1_TX_FIFO_NOT_EMPTY_INT_BUSY:  1;/*!< status of tx_fifo_not_empty_int after mask                       */
      __I  uint32_t  STS1_RX_FIFO_NOT_EMPTY_INT_BUSY:  1;/*!< status of rx_fifo_not_empty_int after mask                       */
      __IO uint32_t  STS1_LL_INT0:  1;              /*!< status of ll_int0 after mask                                          */
      __IO uint32_t  STS1_LL_INT1:  1;              /*!< status of ll_int1 after mask                                          */
      __IO uint32_t  STS1_LL_INT2:  1;              /*!< status of ll_int2 after mask                                          */
      __IO uint32_t  STS1_LL_INT3:  1;              /*!< status of ll_int3 after mask                                          */
      __IO uint32_t  STS1_LL_INT4:  1;              /*!< status of ll_int4 after mask                                          */
      __IO uint32_t  STS1_AES_INT:  1;              /*!< status of aes_int after mask                                          */
      __IO uint32_t  STS1_IRQ33_IRQ12_INT:  1;      /*!< status of irq33_irq12_int after mask                                  */
      __IO uint32_t  STS1_IPC1  :  1;               /*!< status of ipc1 after mask                                             */
      __IO uint32_t  STS1_IPC2  :  1;               /*!< status of ipc2 after mask                                             */
      __I  uint32_t  STS1_TX_FIFO_NOT_FULL_INT_BUSY:  1;/*!< status of tx_fifo_not_full_int after mask                         */
    } INT1_STS_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  INT2_MASK;                       /*!< INT2_MASK                                                             */
    
    struct {
           uint32_t             : 28;
      __IO uint32_t  MASK2_I2C_SDA_ID_I:  1;        /*!< mask of I2C_SDA_id_i, 0: un-mask , 1: mask                            */
      __IO uint32_t  MASK2_I2C_SCL_ID_I:  1;        /*!< mask of I2C_SCL_id_i, 0: un-mask , 1: mask                            */
      __IO uint32_t  MASK2_UART1_ID_I:  1;          /*!< mask of UART1_id_i, 0: un-mask , 1: mask                              */
      __IO uint32_t  MASK2_UART0_ID_I:  1;          /*!< mask of UART0_id_i, 0: un-mask , 1: mask                              */
    } INT2_MASK_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  INT2_RAW;                        /*!< INT2_RAW                                                              */
    
    struct {
           uint32_t             : 28;
      __I  uint32_t  RAW_I2C_SDA_ID_I_2:  1;        /*!< raw of I2C_SDA_id_i                                                   */
      __I  uint32_t  RAW_I2C_SCL_ID_I_2:  1;        /*!< raw of I2C_SCL_id_i                                                   */
      __I  uint32_t  RAW_UART1_ID_I_2:  1;          /*!< raw of UART1_id_i                                                     */
      __I  uint32_t  RAW_UART0_ID_I_2:  1;          /*!< raw of UART0_id_i                                                     */
    } INT2_RAW_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  INT2_STS;                        /*!< INT2_STS                                                              */
    
    struct {
           uint32_t             : 28;
      __IO uint32_t  STS2_I2C_SDA_ID_I:  1;         /*!< status of I2C_SDA_id_i after mask                                     */
      __IO uint32_t  STS2_I2C_SCL_ID_I:  1;         /*!< status of I2C_SCL_id_i after mask                                     */
      __IO uint32_t  STS2_UART1_ID_I:  1;           /*!< status of UART1_id_i after mask                                       */
      __IO uint32_t  STS2_UART0_ID_I:  1;           /*!< status of UART0_id_i after mask                                       */
    } INT2_STS_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  INT3_MASK;                       /*!< INT3_MASK                                                             */
    
    struct {
      __IO uint32_t  MASK3_US_TIMER_0:  1;          /*!< mask of us_timer_0, 0: un-mask , 1: mask                              */
      __IO uint32_t  MASK3_US_TIMER_1:  1;          /*!< mask of us_timer_1, 0: un-mask , 1: mask                              */
      __IO uint32_t  MASK3_MS_TIMER_0:  1;          /*!< mask of ms_timer_0, 0: un-mask , 1: mask                              */
      __IO uint32_t  MASK3_MS_TIMER_1:  1;          /*!< mask of ms_timer_1, 0: un-mask , 1: mask                              */
      __IO uint32_t  MASK3_FENCE_HIT_INT:  1;       /*!< mask of fence_hit_int, 0: un-mask , 1: mask                           */
      __IO uint32_t  MASK3_FLASH_DMA_DONE:  1;      /*!< mask of flash_dma_done, 0: un-mask , 1: mask                          */
      __IO uint32_t  MASK3_DBG_UART_TX:  1;         /*!< mask of dbg_uart_tx, 0: un-mask , 1: mask                             */
      __IO uint32_t  MASK3_DBG_UART_RX:  1;         /*!< mask of dbg_uart_rx, 0: un-mask , 1: mask                             */
      __IO uint32_t  MASK3_ICOM_UART_TX:  1;        /*!< mask of icom_uart_tx, 0: un-mask , 1: mask                            */
      __IO uint32_t  MASK3_ICOM_UART_RX:  1;        /*!< mask of icom_uart_rx, 0: un-mask , 1: mask                            */
      __IO uint32_t  MASK3_DAT_UART_TX:  1;         /*!< mask of dat_uart_tx, 0: un-mask , 1: mask                             */
      __IO uint32_t  MASK3_DAT_UART_RX:  1;         /*!< mask of dat_uart_rx, 0: un-mask , 1: mask                             */
      __IO uint32_t  MASK3_I2CM_INTR:  1;           /*!< mask of i2cm_intr, 0: un-mask , 1: mask                               */
      __IO uint32_t  MASK3_SPI_M_DONE_INT:  1;      /*!< mask of spi_m_done_int, 0: un-mask , 1: mask                          */
      __IO uint32_t  MASK3_SYS_DMA_DONE:  1;        /*!< mask of sys_dma_done, 0: un-mask , 1: mask                            */
      __IO uint32_t  MASK3_GPIO_INT:  1;            /*!< mask of gpio_int, 0: un-mask , 1: mask                                */
      __IO uint32_t  MASK3_EXT_INTR_I:  1;          /*!< mask of ext_intr_i, 0: un-mask , 1: mask                              */
      __IO uint32_t  MASK3_SRAM_ADDR_OVERFLOW:  1;  /*!< mask of sram_addr_overflow, 0: un-mask , 1: mask                      */
      __IO uint32_t  MASK3_ILL_ADDR_INT:  1;        /*!< mask of ill_addr_int, 0: un-mask , 1: mask                            */
      __IO uint32_t  MASK3_CMD_DONE_INT:  1;        /*!< mask of cmd_done_int, 0: un-mask , 1: mask                            */
      __IO uint32_t  MASK3_TX_FIFO_NOT_EMPTY_INT:  1;/*!< mask of tx_fifo_not_empty_int, 0: un-mask , 1: mask                  */
      __IO uint32_t  MASK3_RX_FIFO_NOT_EMPTY_INT:  1;/*!< mask of rx_fifo_not_empty_int, 0: un-mask , 1: mask                  */
      __IO uint32_t  MASK3_LL_INT0:  1;             /*!< mask of ll_int0, 0: un-mask , 1: mask                                 */
      __IO uint32_t  MASK3_LL_INT1:  1;             /*!< mask of ll_int1, 0: un-mask , 1: mask                                 */
      __IO uint32_t  MASK3_LL_INT2:  1;             /*!< mask of ll_int2, 0: un-mask , 1: mask                                 */
      __IO uint32_t  MASK3_LL_INT3:  1;             /*!< mask of ll_int3, 0: un-mask , 1: mask                                 */
      __IO uint32_t  MASK3_LL_INT4:  1;             /*!< mask of ll_int4, 0: un-mask , 1: mask                                 */
      __IO uint32_t  MASK3_AES_INT:  1;             /*!< mask of aes_int, 0: un-mask , 1: mask                                 */
      __IO uint32_t  MASK3_IRQ33_IRQ12_INT:  1;     /*!< mask of irq33_irq12_int, 0: un-mask , 1: mask                         */
      __IO uint32_t  MASK3_IPC1 :  1;               /*!< mask of ipc1, 0: un-mask , 1: mask                                    */
      __IO uint32_t  MASK3_IPC2 :  1;               /*!< mask of ipc2, 0: un-mask , 1: mask                                    */
      __IO uint32_t  MASK3_TX_FIFO_NOT_FULL_INT:  1;/*!< mask of tx_fifo_not_full_int, 0: un-mask , 1: mask                    */
    } INT3_MASK_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  INT3_RAW;                        /*!< INT3_RAW                                                              */
    
    struct {
      __I  uint32_t  RAW_US_TIMER_0_3:  1;          /*!< raw of us_timer_0                                                     */
      __I  uint32_t  RAW_US_TIMER_1_3:  1;          /*!< raw of us_timer_1                                                     */
      __I  uint32_t  RAW_MS_TIMER_0_3:  1;          /*!< raw of ms_timer_0                                                     */
      __I  uint32_t  RAW_MS_TIMER_1_3:  1;          /*!< raw of ms_timer_1                                                     */
      __I  uint32_t  RAW_FENCE_HIT_INT_3:  1;       /*!< raw of fence_hit_int                                                  */
      __I  uint32_t  RAW_FLASH_DMA_DONE_3:  1;      /*!< raw of flash_dma_done                                                 */
      __I  uint32_t  RAW_DBG_UART_TX_3:  1;         /*!< raw of dbg_uart_tx                                                    */
      __I  uint32_t  RAW_DBG_UART_RX_3:  1;         /*!< raw of dbg_uart_rx                                                    */
      __I  uint32_t  RAW_ICOM_UART_TX_3:  1;        /*!< raw of icom_uart_tx                                                   */
      __I  uint32_t  RAW_ICOM_UART_RX_3:  1;        /*!< raw of icom_uart_rx                                                   */
      __I  uint32_t  RAW_DAT_UART_TX_3:  1;         /*!< raw of dat_uart_tx                                                    */
      __I  uint32_t  RAW_DAT_UART_RX_3:  1;         /*!< raw of dat_uart_rx                                                    */
      __I  uint32_t  RAW_I2CM_INTR_3:  1;           /*!< raw of i2cm_intr                                                      */
      __I  uint32_t  RAW_SPI_M_DONE_INT_3:  1;      /*!< raw of spi_m_done_int                                                 */
      __I  uint32_t  RAW_SYS_DMA_DONE_3:  1;        /*!< raw of sys_dma_done                                                   */
      __I  uint32_t  RAW_GPIO_INT_3:  1;            /*!< raw of gpio_int                                                       */
      __I  uint32_t  RAW_EXT_INTR_I_3:  1;          /*!< raw of ext_intr_i                                                     */
      __I  uint32_t  RAW_SRAM_ADDR_OVERFLOW_3:  1;  /*!< raw of sram_addr_overflow                                             */
      __I  uint32_t  RAW_ILL_ADDR_INT_3:  1;        /*!< raw of ill_addr_int                                                   */
      __I  uint32_t  RAW_CMD_DONE_INT_3:  1;        /*!< raw of cmd_done_int                                                   */
      __I  uint32_t  RAW_TX_FIFO_NOT_EMPTY_INT_3:  1;/*!< raw of tx_fifo_not_empty_int                                         */
      __I  uint32_t  RAW_RX_FIFO_NOT_EMPTY_INT_3:  1;/*!< raw of rx_fifo_not_empty_int                                         */
      __I  uint32_t  RAW_LL_INT0_3:  1;             /*!< raw of ll_int0                                                        */
      __I  uint32_t  RAW_LL_INT1_3:  1;             /*!< raw of ll_int1                                                        */
      __I  uint32_t  RAW_LL_INT2_3:  1;             /*!< raw of ll_int2                                                        */
      __I  uint32_t  RAW_LL_INT3_3:  1;             /*!< raw of ll_int3                                                        */
      __I  uint32_t  RAW_LL_INT4_3:  1;             /*!< raw of ll_int4                                                        */
      __I  uint32_t  RAW_AES_INT_3:  1;             /*!< raw of aes_int                                                        */
      __I  uint32_t  RAW_IRQ33_IRQ12_INT_3:  1;     /*!< raw of irq33_irq12_int                                                */
      __I  uint32_t  RAW_IPC1_3 :  1;               /*!< raw of ipc1                                                           */
      __I  uint32_t  RAW_IPC2_3 :  1;               /*!< raw of ipc2                                                           */
      __I  uint32_t  RAW_TX_FIFO_NOT_FULL_INT_3:  1;/*!< raw of tx_fifo_not_full_int                                           */
    } INT3_RAW_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  INT3_STS;                        /*!< INT3_STS                                                              */
    
    struct {
      __IO uint32_t  STS3_US_TIMER_0:  1;           /*!< status of us_timer_0 after mask                                       */
      __IO uint32_t  STS3_US_TIMER_1:  1;           /*!< status of us_timer_1 after mask                                       */
      __IO uint32_t  STS3_MS_TIMER_0:  1;           /*!< status of ms_timer_0 after mask                                       */
      __IO uint32_t  STS3_MS_TIMER_1:  1;           /*!< status of ms_timer_1 after mask                                       */
      __IO uint32_t  STS3_FENCE_HIT_INT:  1;        /*!< status of fence_hit_int after mask                                    */
      __IO uint32_t  STS3_FLASH_DMA_DONE:  1;       /*!< status of flash_dma_done after mask                                   */
      __I  uint32_t  STS3_DBG_UART_TX_BUSY:  1;     /*!< status of dbg_uart_tx after mask                                      */
      __I  uint32_t  STS3_DBG_UART_RX_BUSY:  1;     /*!< status of dbg_uart_rx after mask                                      */
      __I  uint32_t  STS3_ICOM_UART_TX_BUSY:  1;    /*!< status of icom_uart_tx after mask                                     */
      __I  uint32_t  STS3_ICOM_UART_RX_BUSY:  1;    /*!< status of icom_uart_rx after mask                                     */
      __I  uint32_t  STS3_DAT_UART_TX_BUSY:  1;     /*!< status of dat_uart_tx after mask                                      */
      __I  uint32_t  STS3_DAT_UART_RX_BUSY:  1;     /*!< status of dat_uart_rx after mask                                      */
      __I  uint32_t  STS3_I2CM_INTR_BUSY:  1;       /*!< status of i2cm_intr after mask                                        */
      __IO uint32_t  STS3_SPI_M_DONE_INT:  1;       /*!< status of spi_m_done_int after mask                                   */
      __IO uint32_t  STS3_SYS_DMA_DONE:  1;         /*!< status of sys_dma_done after mask                                     */
      __I  uint32_t  STS3_GPIO_INT_BUSY:  1;        /*!< status of gpio_int after mask                                         */
      __I  uint32_t  STS3_EXT_INTR_I_BUSY:  1;      /*!< status of ext_intr_i after mask                                       */
      __IO uint32_t  STS3_SRAM_ADDR_OVERFLOW:  1;   /*!< status of sram_addr_overflow after mask                               */
      __IO uint32_t  STS3_ILL_ADDR_INT:  1;         /*!< status of ill_addr_int after mask                                     */
      __I  uint32_t  STS3_CMD_DONE_INT_BUSY:  1;    /*!< status of cmd_done_int after mask                                     */
      __I  uint32_t  STS3_TX_FIFO_NOT_EMPTY_INT_BUSY:  1;/*!< status of tx_fifo_not_empty_int after mask                       */
      __I  uint32_t  STS3_RX_FIFO_NOT_EMPTY_INT_BUSY:  1;/*!< status of rx_fifo_not_empty_int after mask                       */
      __IO uint32_t  STS3_LL_INT0:  1;              /*!< status of ll_int0 after mask                                          */
      __IO uint32_t  STS3_LL_INT1:  1;              /*!< status of ll_int1 after mask                                          */
      __IO uint32_t  STS3_LL_INT2:  1;              /*!< status of ll_int2 after mask                                          */
      __IO uint32_t  STS3_LL_INT3:  1;              /*!< status of ll_int3 after mask                                          */
      __IO uint32_t  STS3_LL_INT4:  1;              /*!< status of ll_int4 after mask                                          */
      __IO uint32_t  STS3_AES_INT:  1;              /*!< status of aes_int after mask                                          */
      __IO uint32_t  STS3_IRQ33_IRQ12_INT:  1;      /*!< status of irq33_irq12_int after mask                                  */
      __IO uint32_t  STS3_IPC1  :  1;               /*!< status of ipc1 after mask                                             */
      __IO uint32_t  STS3_IPC2  :  1;               /*!< status of ipc2 after mask                                             */
      __I  uint32_t  STS3_TX_FIFO_NOT_FULL_INT_BUSY:  1;/*!< status of tx_fifo_not_full_int after mask                         */
    } INT3_STS_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  INT_CNT0;                        /*!< INT_CNT0                                                              */
    
    struct {
      __IO uint32_t  REG_SRAM_ADDR_OVERFLOW:  4;    /*!< interrupt counter of sram_addr_overflow, write n to m will get
                                                         m-n , if signal is set as level, counter will only be 1 or 0
                                                                                                                               */
      __IO uint32_t  REG_LL_INT0:  4;               /*!< interrupt counter of ll_int0, write n to m will get m-n , if
                                                         signal is set as level, counter will only be 1 or 0                   */
      __IO uint32_t  REG_LL_INT1:  4;               /*!< interrupt counter of ll_int1, write n to m will get m-n , if
                                                         signal is set as level, counter will only be 1 or 0                   */
      __IO uint32_t  REG_LL_INT2:  4;               /*!< interrupt counter of ll_int2, write n to m will get m-n , if
                                                         signal is set as level, counter will only be 1 or 0                   */
      __IO uint32_t  REG_LL_INT3:  4;               /*!< interrupt counter of ll_int3, write n to m will get m-n , if
                                                         signal is set as level, counter will only be 1 or 0                   */
      __IO uint32_t  REG_LL_INT4:  4;               /*!< interrupt counter of ll_int4, write n to m will get m-n , if
                                                         signal is set as level, counter will only be 1 or 0                   */
      __IO uint32_t  REG_I2C_SDA_ID_I:  4;          /*!< interrupt counter of I2C_SDA_id_i, write n to m will get m-n
                                                         , if signal is set as level, counter will only be 1 or 0              */
      __IO uint32_t  REG_I2C_SCL_ID_I:  4;          /*!< interrupt counter of I2C_SCL_id_i, write n to m will get m-n
                                                         , if signal is set as level, counter will only be 1 or 0              */
    } INT_CNT0_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  INT_CNT1;                        /*!< INT_CNT1                                                              */
    
    struct {
      __IO uint32_t  REG_UART1_ID_I:  4;            /*!< interrupt counter of UART1_id_i, write n to m will get m-n ,
                                                         if signal is set as level, counter will only be 1 or 0                */
      __IO uint32_t  REG_UART0_ID_I:  4;            /*!< interrupt counter of UART0_id_i, write n to m will get m-n ,
                                                         if signal is set as level, counter will only be 1 or 0                */
    } INT_CNT1_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  INTN_IN_SEL0;                    /*!< INTN_IN_SEL0                                                          */
    
    struct {
      __IO uint32_t  I2C_SDA_ID_I_IN_SEL:  3;       /*!< input type selection of I2C_SDA_id_i 0:hi_lvl 1:lo_lvl 2:ri_edg
                                                         3:fl_edg 4:dl_edg                                                     */
      __IO uint32_t  I2C_SCL_ID_I_IN_SEL:  3;       /*!< input type selection of I2C_SCL_id_i 0:hi_lvl 1:lo_lvl 2:ri_edg
                                                         3:fl_edg 4:dl_edg                                                     */
      __IO uint32_t  UART1_ID_I_IN_SEL:  3;         /*!< input type selection of UART1_id_i 0:hi_lvl 1:lo_lvl 2:ri_edg
                                                         3:fl_edg 4:dl_edg                                                     */
      __IO uint32_t  UART0_ID_I_IN_SEL:  3;         /*!< input type selection of UART0_id_i 0:hi_lvl 1:lo_lvl 2:ri_edg
                                                         3:fl_edg 4:dl_edg                                                     */
      __IO uint32_t  SRAM_ADDR_OVERFLOW_IN_SEL:  3; /*!< input type selection of sram_addr_overflow 0:hi_pul                   */
      __IO uint32_t  LL_INT0_IN_SEL:  3;            /*!< input type selection of ll_int0 0:hi_pul 1:hi_lvl                     */
      __IO uint32_t  LL_INT1_IN_SEL:  3;            /*!< input type selection of ll_int1 0:hi_pul 1:hi_lvl                     */
      __IO uint32_t  LL_INT2_IN_SEL:  3;            /*!< input type selection of ll_int2 0:hi_pul 1:hi_lvl                     */
      __IO uint32_t  LL_INT3_IN_SEL:  3;            /*!< input type selection of ll_int3 0:hi_pul 1:hi_lvl                     */
      __IO uint32_t  LL_INT4_IN_SEL:  3;            /*!< input type selection of ll_int4 0:hi_pul 1:hi_lvl                     */
    } INTN_IN_SEL0_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  IPC_IPC2;                        /*!< IPC_ipc2                                                              */
    
    struct {
      __IO uint32_t  IPC2       : 32;               /*!< write this reg will generate the interrupt, write one clear           */
    } IPC_IPC2_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  IPC_IPC1;                        /*!< IPC_ipc1                                                              */
    
    struct {
      __IO uint32_t  IPC1       : 32;               /*!< write this reg will generate the interrupt, write one clear           */
    } IPC_IPC1_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  MCU_INT_OR_MASK;                 /*!< MCU_INT_OR_MASK                                                       */
    
    struct {
      __IO uint32_t  MCU_INT_OR_MASK: 32;           /*!< this register will force the mcu int be 1 if the bit is set
                                                         1                                                                     */
    } MCU_INT_OR_MASK_b;                            /*!< BitSize                                                               */
  };
} CONDOR_INT_REG_Type;


/* ================================================================================ */
/* ================                     CSR_DMA                    ================ */
/* ================================================================================ */


/**
  * @brief CSR_DMA  (CSR_DMA)
  */

typedef struct {                                    /*!< CSR_DMA Structure                                                     */
  
  union {
    __IO uint32_t  DMA_ADR_SRC;                     /*!< DMA_ADR_SRC                                                           */
    
    struct {
      __IO uint32_t  DMA_ADR_SRC: 32;               /*!< DMA source address                                                    */
    } DMA_ADR_SRC_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DMA_ADR_DST;                     /*!< DMA_ADR_DST                                                           */
    
    struct {
      __IO uint32_t  DMA_ADR_DST: 32;               /*!< DMA destination address                                               */
    } DMA_ADR_DST_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DMA_CTRL;                        /*!< DMA_CTRL                                                              */
    
    struct {
      __IO uint32_t  DMA_SRC_SIZE:  3;              /*!< DMA source data size 0: 1-byte 1: 2-byte 2: 4-byte others: reserved   */
      __IO uint32_t  DMA_SRC_INC:  1;               /*!< DMA source address increment 0: fixed address 1: increasing
                                                         address                                                               */
      __IO uint32_t  DMA_DST_SIZE:  3;              /*!< DMA destination data size 0: 1-byte 1: 2-byte 2: 4-byte others:
                                                         reserved                                                              */
      __IO uint32_t  DMA_DST_INC:  1;               /*!< DMA destination address incremental 0: fixed address (length
                                                         size boundry depend on destination data size) 1: increasing
                                                          address                                                              */
      __IO uint32_t  DMA_FAST_FILL:  1;             /*!< Fast fill the const value to dst. 1: enable fast fill function.
                                                         0: disable fast fill function.                                        */
           uint32_t             :  3;
      __IO uint32_t  DMA_SDIO_KICK:  1;             /*!< SDIO dma kick start pluse. 1: enable sdio dma kick function.
                                                         0: disable sdio dma kick function.                                    */
      __IO uint32_t  DMA_BADR_EN:  1;               /*!< dma byte addr incr when in dest non-incr mode. 1: enable byte
                                                         addr incr. 0: disable byte addr incr.                                 */
           uint32_t             : 10;
      __IO uint32_t  DMA_READ_ONLY:  1;             /*!< Read only to generate check sum. 1: enable read only function.
                                                         0: disable read only function.                                        */
    } DMA_CTRL_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DMA_LEN;                         /*!< DMA_LEN                                                               */
    
    struct {
      __IO uint32_t  DMA_LEN    : 16;               /*!< DMA length (in unit of byte)                                          */
    } DMA_LEN_b;                                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DMA_INT;                         /*!< DMA_INT                                                               */
    
    struct {
      __IO uint32_t  DMA_INT_MASK:  1;              /*!< mask DMA interrupt. 0: unmask 1: mask                                 */
           uint32_t             :  7;
      __IO uint32_t  DMA_STS    :  1;               /*!< status of DMA interrupt. write 1 to clear/upper layer write
                                                         1 also clear                                                          */
           uint32_t             : 22;
      __I  uint32_t  DMA_FINISH :  1;               /*!< 0: dma in busy state. 1: dma operation done.                          */
    } DMA_INT_b;                                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DMA_FILL_CONST;                  /*!< DMA_FILL_CONST                                                        */
    
    struct {
      __IO uint32_t  DMA_CONST  : 32;               /*!< The const value for DMA fast fill function use.                       */
    } DMA_FILL_CONST_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  DMA_CHECK_SUM;                   /*!< DMA_CHECK_SUM                                                         */
    
    struct {
      __I  uint32_t  DMA_CHECK_SUM: 32;             /*!< The check sum value after read only operation.                        */
    } DMA_CHECK_SUM_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DMA_ORDER;                       /*!< DMA_ORDER                                                             */
    
    struct {
      __IO uint32_t  DAT_REVERSE:  1;               /*!< '3210' change order to '0123'.                                        */
      __IO uint32_t  DAT_NIBBLE :  1;               /*!< '3210' change order to '1032'.                                        */
           uint32_t             :  2;
      __IO uint32_t  AES_16_MODE:  1;               /*!< aes len is less than 16, fill '0', only allowed in word to word
                                                         mode.                                                                 */
    } DMA_ORDER_b;                                  /*!< BitSize                                                               */
  };
} CONDOR_CSR_DMA_Type;


/* ================================================================================ */
/* ================                  FLASH_SPI_REG                 ================ */
/* ================================================================================ */


/**
  * @brief FLASH_SPI_REG  (FLASH_SPI_REG)
  */

typedef struct {                                    /*!< FLASH_SPI_REG Structure                                               */
  
  union {
    __IO uint32_t  BOOT_ADDR;                       /*!< BOOT_ADDR                                                             */
    
    struct {
      __IO uint32_t  BOOT_ADDR  : 24;               /*!< addr of reading the boot code from flash                              */
           uint32_t             :  7;
      __I  uint32_t  CHECK_SUM_FAIL:  1;            /*!< this bit is 1 if boot code have check sum error                       */
    } BOOT_ADDR_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  VERIFY_DATA;                     /*!< VERIFY_DATA                                                           */
    
    struct {
      __IO uint32_t  VERIFY_DATA: 32;               /*!< verify the data correction when spi flash boot                        */
    } VERIFY_DATA_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  FLASH_ADDR;                      /*!< FLASH_ADDR                                                            */
    
    struct {
      __IO uint32_t  FLASH_ADDR : 24;               /*!< flash_addr for destination of flash dma                               */
           uint32_t             :  4;
      __O  uint32_t  FLASH_CMD_CLR:  1;             /*!< write this bit to flush the cmd fifo                                  */
      __O  uint32_t  FLASH_DMA_CLR:  1;             /*!< write this bit to flush the dma                                       */
      __IO uint32_t  DMA_EN     :  1;               /*!< write this bit to enable the dma                                      */
      __I  uint32_t  DMA_BUSY   :  1;               /*!< read 1b1 from this bit when dma is busy                               */
    } FLASH_ADDR_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  SRAM_ADDR;                       /*!< SRAM_ADDR                                                             */
    
    struct {
      __IO uint32_t  SRAM_ADDR  : 32;               /*!< sram addr for source of flash dma                                     */
    } SRAM_ADDR_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LEN;                             /*!< LEN                                                                   */
    
    struct {
      __IO uint32_t  FLASH_DMA_LEN: 32;             /*!< length of the dma moving                                              */
    } LEN_b;                                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  SPI_PARAM;                       /*!< SPI_PARAM                                                             */
    
    struct {
      __IO uint32_t  FLASH_FRONT_DLY: 16;           /*!< the front delay of a spi transaction                                  */
      __IO uint32_t  FLASH_BACK_DLY: 16;            /*!< the back delay of a spi transaction                                   */
    } SPI_PARAM_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  SPI_PARAM2;                      /*!< SPI_PARAM2                                                            */
    
    struct {
      __IO uint32_t  FLASH_CLK_WIDTH:  2;           /*!< the speed of the spi clk                                              */
           uint32_t             : 14;
      __I  uint32_t  SPI_BUSY   :  1;               /*!< this bit will read 1b1 when spi is busy                               */
      __O  uint32_t  FLS_REMAP  :  1;               /*!< this bit will read 1b1 when spi is busy                               */
      __IO uint32_t  PBUS_SWP   :  1;               /*!< set the pbus byte swap                                                */
      __IO uint32_t  BIT_MODE1  :  1;               /*!< this bit set the flash running 1 bit mode                             */
      __IO uint32_t  BIT_MODE2  :  1;               /*!< this bit set the flash running 2 bit mode                             */
      __IO uint32_t  BIT_MODE4  :  1;               /*!< this bit set the flash running 4 bit mode                             */
      __IO uint32_t  FAST_CLK_EN:  1;               /*!< this bit enable the flash using system clk                            */
      __IO uint32_t  FLS_SRAM_EN:  1;               /*!< enable the sram mapping if dma boot mode be set                       */
      __IO uint32_t  PRG_ONLY   :  1;               /*!< enable the dma only mosi out, not miso in, used at only program
                                                                                                                               */
      __IO uint32_t  BIT_MODE2_DUALOUT:  1;         /*!< this bit set the flash running 2 bit dual out mode                    */
           uint32_t             :  5;
      __IO uint32_t  INV_DLY_SCLK:  1;              /*!< invert input sclk (delay 180 degree)                                  */
    } SPI_PARAM2_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  CHECK_SUM_RESULT;                /*!< CHECK_SUM_RESULT                                                      */
    
    struct {
      __I  uint32_t  BOOT_CHECK_SUM: 32;            /*!< the program check sum result calculate by boot flash dma              */
    } CHECK_SUM_RESULT_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  CHECK_SUM_IN_FILE;               /*!< CHECK_SUM_IN_FILE                                                     */
    
    struct {
      __I  uint32_t  CHECK_SUM_TAG: 32;             /*!< the program check sum read from file in flash                         */
    } CHECK_SUM_IN_FILE_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  COMMAND_LEN;                     /*!< COMMAND_LEN                                                           */
    
    struct {
      __IO uint32_t  CMD_LEN    : 16;               /*!< the command lenth include the data read in                            */
    } COMMAND_LEN_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  COMMAND_ADDR;                    /*!< COMMAND_ADDR                                                          */
    
    struct {
      __IO uint32_t  CMD_ADDR   : 32;               /*!< the addr you put your command out                                     */
    } COMMAND_ADDR_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CMD_SET;                         /*!< CMD_SET                                                               */
    
    struct {
      __IO uint32_t  BIT1_RD_CMD:  8;               /*!< 1 bit read command code for pbus read and dma read                    */
      __IO uint32_t  BIT1_WR_CMD:  8;               /*!< 1 bit write command code for pbus write                               */
      __IO uint32_t  BIT2_RD_CMD:  8;               /*!< 2 bit read command code for pbus read and dma read                    */
      __IO uint32_t  BIT4_RD_CMD:  8;               /*!< 4 bit read command code for pbus read and dma read                    */
    } CMD_SET_b;                                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DECRYPT_INI_ADDR;                /*!< DECRYPT_INI_ADDR                                                      */
    
    struct {
      __IO uint32_t  SCM_INI_ADDR: 24;              /*!< this will set the address dividing encrypt data and raw data,
                                                         after this address will be decrypt, data just right at this
                                                          address is raw data, will be pass but not be decrypt                 */
    } DECRYPT_INI_ADDR_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DECRYPT_END_ADDR;                /*!< DECRYPT_END_ADDR                                                      */
    
    struct {
      __IO uint32_t  SCM_END_ADDR: 24;              /*!< this will set the address dividing encrypt data and raw data,
                                                         before this address will be decrypt, data just right at this
                                                          address is raw data,will be pass but not be decrypt                  */
    } DECRYPT_END_ADDR_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DECRYPT_SEED;                    /*!< DECRYPT_SEED                                                          */
    
    struct {
      __IO uint32_t  SCM_SEED   : 32;               /*!< this is the decrypt seed                                              */
    } DECRYPT_SEED_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RELAY_MODE;                      /*!< RELAY_MODE                                                            */
    
    struct {
      __IO uint32_t  FLASH_RLY_MODE:  1;            /*!< this bit can enabel the relay mode for debug                          */
    } RELAY_MODE_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  FLASH_OFFSET;                    /*!< FLASH_OFFSET                                                          */
    
    struct {
      __IO uint32_t  FLASH_ADDR_OFSET:  9;          /*!< this can configure the flash addr ofset for new app burn to
                                                         flash                                                                 */
    } FLASH_OFFSET_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  FLASH_SIZE;                      /*!< FLASH_SIZE                                                            */
    
    struct {
      __IO uint32_t  FLASH_SIZE : 24;               /*!< this can configure the flash addr ofset for new app burn to
                                                         flash                                                                 */
    } FLASH_SIZE_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  FLASH_IO0_DLY;                   /*!< FLASH_IO0_DLY                                                         */
    
    struct {
      __IO uint32_t  FLS_CLK_IN_DLY_SEL:  3;        /*!< this set the input delay of flash clock                               */
           uint32_t             :  1;
      __IO uint32_t  FLS_CLK_OUT_DLY_SEL:  3;       /*!< this set the output delay of flash clock                              */
           uint32_t             :  1;
      __IO uint32_t  FLS_MOSI_IN_DLY_SEL:  3;       /*!< this set the input delay of flash mosi                                */
           uint32_t             :  1;
      __IO uint32_t  FLS_MOSI_OUT_DLY_SEL:  3;      /*!< this set the output delay of flash mosi                               */
           uint32_t             :  1;
      __IO uint32_t  FLS_MISO_IN_DLY_SEL:  3;       /*!< this set the input delay of flash miso                                */
           uint32_t             :  1;
      __IO uint32_t  FLS_MISO_OUT_DLY_SEL:  3;      /*!< this set the output delay of flash miso                               */
           uint32_t             :  1;
      __IO uint32_t  FLS_WP_IN_DLY_SEL:  3;         /*!< this set the input delay of flash wp                                  */
           uint32_t             :  1;
      __IO uint32_t  FLS_WP_OUT_DLY_SEL:  3;        /*!< this set the output delay of flash wp                                 */
    } FLASH_IO0_DLY_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  FLASH_IO1_DLY;                   /*!< FLASH_IO1_DLY                                                         */
    
    struct {
      __IO uint32_t  FLS_NC_IN_DLY_SEL:  3;         /*!< this set the input delay of flash wp                                  */
           uint32_t             :  1;
      __IO uint32_t  FLS_NC_OUT_DLY_SEL:  3;        /*!< this set the output delay of flash wp                                 */
    } FLASH_IO1_DLY_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CMD_SET2;                        /*!< CMD_SET2                                                              */
    
    struct {
      __IO uint32_t  BIT2_DUALOUT_RD_CMD:  8;       /*!< 2 bit dual out read command code for pbus read and dma read           */
    } CMD_SET2_b;                                   /*!< BitSize                                                               */
  };
} CONDOR_FLASH_SPI_REG_Type;


/* ================================================================================ */
/* ================                   U0_CSR_PWM                   ================ */
/* ================================================================================ */


/**
  * @brief U0_CSR_PWM  (U0_CSR_PWM)
  */

typedef struct {                                    /*!< U0_CSR_PWM Structure                                                  */
  
  union {
    __IO uint32_t  U0_PWM_CTRL;                     /*!< u0_PWM_CTRL                                                           */
    
    struct {
      __IO uint32_t  U0_PWM_POST_SCALER:  8;        /*!< period scaler value. the PWM 1 cycle period = (pwm_post_scaler+1)
                                                         * (pwm_ini_value_period+1) * 31.25ns(32MHz).                          */
           uint32_t             : 21;
      __IO uint32_t  U0_PWM_ALWAYSON:  1;           /*!< set to 1 will make PWM asserted continuously if PWM is enabled        */
      __IO uint32_t  U0_PWM_INVERT:  1;             /*!< set to 1 to will invert the PWM polarity                              */
      __IO uint32_t  U0_PWM_ENABLE:  1;             /*!< write 1 to enable PWM function                                        */
    } U0_PWM_CTRL_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  U0_PWM_SET;                      /*!< u0_PWM_SET                                                            */
    
    struct {
      __IO uint32_t  U0_PWM_INI_VALUE_PERIOD: 16;   /*!< pwm period setting. the PWM 1 cycle period = (pwm_post_scaler+1)
                                                         * (pwm_ini_value_period+1) * 31.25ns(32MHz).                          */
      __IO uint32_t  U0_PWM_INI_VALUE_P: 16;        /*!< pwm high level setting. pwm duty value = pwm_ini_value_p / (pwm_ini_value_
                                                         period+1).                                                            */
    } U0_PWM_SET_b;                                 /*!< BitSize                                                               */
  };
} CONDOR_U0_CSR_PWM_Type;


/* ================================================================================ */
/* ================                   U1_CSR_PWM                   ================ */
/* ================================================================================ */


/**
  * @brief U1_CSR_PWM  (U1_CSR_PWM)
  */

typedef struct {                                    /*!< U1_CSR_PWM Structure                                                  */
  
  union {
    __IO uint32_t  U1_PWM_CTRL;                     /*!< u1_PWM_CTRL                                                           */
    
    struct {
      __IO uint32_t  U1_PWM_POST_SCALER:  8;        /*!< period scaler value. the PWM 1 cycle period = (pwm_post_scaler+1)
                                                         * (pwm_ini_value_period+1) * 31.25ns(32MHz).                          */
           uint32_t             : 21;
      __IO uint32_t  U1_PWM_ALWAYSON:  1;           /*!< set to 1 will make PWM asserted continuously if PWM is enabled        */
      __IO uint32_t  U1_PWM_INVERT:  1;             /*!< set to 1 to will invert the PWM polarity                              */
      __IO uint32_t  U1_PWM_ENABLE:  1;             /*!< write 1 to enable PWM function                                        */
    } U1_PWM_CTRL_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  U1_PWM_SET;                      /*!< u1_PWM_SET                                                            */
    
    struct {
      __IO uint32_t  U1_PWM_INI_VALUE_PERIOD: 16;   /*!< pwm period setting. the PWM 1 cycle period = (pwm_post_scaler+1)
                                                         * (pwm_ini_value_period+1) * 31.25ns(32MHz).                          */
      __IO uint32_t  U1_PWM_INI_VALUE_P: 16;        /*!< pwm high level setting. pwm duty value = pwm_ini_value_p / (pwm_ini_value_
                                                         period+1).                                                            */
    } U1_PWM_SET_b;                                 /*!< BitSize                                                               */
  };
} CONDOR_U1_CSR_PWM_Type;


/* ================================================================================ */
/* ================                   U2_CSR_PWM                   ================ */
/* ================================================================================ */


/**
  * @brief U2_CSR_PWM  (U2_CSR_PWM)
  */

typedef struct {                                    /*!< U2_CSR_PWM Structure                                                  */
  
  union {
    __IO uint32_t  U2_PWM_CTRL;                     /*!< u2_PWM_CTRL                                                           */
    
    struct {
      __IO uint32_t  U2_PWM_POST_SCALER:  8;        /*!< period scaler value. the PWM 1 cycle period = (pwm_post_scaler+1)
                                                         * (pwm_ini_value_period+1) * 31.25ns(32MHz).                          */
           uint32_t             : 21;
      __IO uint32_t  U2_PWM_ALWAYSON:  1;           /*!< set to 1 will make PWM asserted continuously if PWM is enabled        */
      __IO uint32_t  U2_PWM_INVERT:  1;             /*!< set to 1 to will invert the PWM polarity                              */
      __IO uint32_t  U2_PWM_ENABLE:  1;             /*!< write 1 to enable PWM function                                        */
    } U2_PWM_CTRL_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  U2_PWM_SET;                      /*!< u2_PWM_SET                                                            */
    
    struct {
      __IO uint32_t  U2_PWM_INI_VALUE_PERIOD: 16;   /*!< pwm period setting. the PWM 1 cycle period = (pwm_post_scaler+1)
                                                         * (pwm_ini_value_period+1) * 31.25ns(32MHz).                          */
      __IO uint32_t  U2_PWM_INI_VALUE_P: 16;        /*!< pwm high level setting. pwm duty value = pwm_ini_value_p / (pwm_ini_value_
                                                         period+1).                                                            */
    } U2_PWM_SET_b;                                 /*!< BitSize                                                               */
  };
} CONDOR_U2_CSR_PWM_Type;


/* ================================================================================ */
/* ================                   U3_CSR_PWM                   ================ */
/* ================================================================================ */


/**
  * @brief U3_CSR_PWM  (U3_CSR_PWM)
  */

typedef struct {                                    /*!< U3_CSR_PWM Structure                                                  */
  
  union {
    __IO uint32_t  U3_PWM_CTRL;                     /*!< u3_PWM_CTRL                                                           */
    
    struct {
      __IO uint32_t  U3_PWM_POST_SCALER:  8;        /*!< period scaler value. the PWM 1 cycle period = (pwm_post_scaler+1)
                                                         * (pwm_ini_value_period+1) * 31.25ns(32MHz).                          */
           uint32_t             : 21;
      __IO uint32_t  U3_PWM_ALWAYSON:  1;           /*!< set to 1 will make PWM asserted continuously if PWM is enabled        */
      __IO uint32_t  U3_PWM_INVERT:  1;             /*!< set to 1 to will invert the PWM polarity                              */
      __IO uint32_t  U3_PWM_ENABLE:  1;             /*!< write 1 to enable PWM function                                        */
    } U3_PWM_CTRL_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  U3_PWM_SET;                      /*!< u3_PWM_SET                                                            */
    
    struct {
      __IO uint32_t  U3_PWM_INI_VALUE_PERIOD: 16;   /*!< pwm period setting. the PWM 1 cycle period = (pwm_post_scaler+1)
                                                         * (pwm_ini_value_period+1) * 31.25ns(32MHz).                          */
      __IO uint32_t  U3_PWM_INI_VALUE_P: 16;        /*!< pwm high level setting. pwm duty value = pwm_ini_value_p / (pwm_ini_value_
                                                         period+1).                                                            */
    } U3_PWM_SET_b;                                 /*!< BitSize                                                               */
  };
} CONDOR_U3_CSR_PWM_Type;


/* ================================================================================ */
/* ================                   U4_CSR_PWM                   ================ */
/* ================================================================================ */


/**
  * @brief U4_CSR_PWM  (U4_CSR_PWM)
  */

typedef struct {                                    /*!< U4_CSR_PWM Structure                                                  */
  
  union {
    __IO uint32_t  U4_PWM_CTRL;                     /*!< u4_PWM_CTRL                                                           */
    
    struct {
      __IO uint32_t  U4_PWM_POST_SCALER:  8;        /*!< period scaler value. the PWM 1 cycle period = (pwm_post_scaler+1)
                                                         * (pwm_ini_value_period+1) * 31.25ns(32MHz).                          */
           uint32_t             : 21;
      __IO uint32_t  U4_PWM_ALWAYSON:  1;           /*!< set to 1 will make PWM asserted continuously if PWM is enabled        */
      __IO uint32_t  U4_PWM_INVERT:  1;             /*!< set to 1 to will invert the PWM polarity                              */
      __IO uint32_t  U4_PWM_ENABLE:  1;             /*!< write 1 to enable PWM function                                        */
    } U4_PWM_CTRL_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  U4_PWM_SET;                      /*!< u4_PWM_SET                                                            */
    
    struct {
      __IO uint32_t  U4_PWM_INI_VALUE_PERIOD: 16;   /*!< pwm period setting. the PWM 1 cycle period = (pwm_post_scaler+1)
                                                         * (pwm_ini_value_period+1) * 31.25ns(32MHz).                          */
      __IO uint32_t  U4_PWM_INI_VALUE_P: 16;        /*!< pwm high level setting. pwm duty value = pwm_ini_value_p / (pwm_ini_value_
                                                         period+1).                                                            */
    } U4_PWM_SET_b;                                 /*!< BitSize                                                               */
  };
} CONDOR_U4_CSR_PWM_Type;


/* ================================================================================ */
/* ================                      PWM0                      ================ */
/* ================================================================================ */


/**
  * @brief PWM register (PWM0)
  */

typedef struct {                                    /*!< PWM0 Structure                                                        */
  
  union {
    __IO uint32_t  CTRL;                            /*!< CTRL                                                                  */
    
    struct {
      __IO uint32_t  POST_SCALER:  8;               /*!< period scaler value. the PWM 1 cycle period = (pwm_post_scaler+1)
                                                         * (pwm_ini_value_period+1) * 31.25ns(32MHz).                          */
           uint32_t             : 21;
      __IO uint32_t  ALWAYSON   :  1;               /*!< set to 1 will make PWM asserted continuously if PWM is enabled        */
      __IO uint32_t  INVERT     :  1;               /*!< set to 1 to will invert the PWM polarity                              */
      __IO uint32_t  ENABLE     :  1;               /*!< write 1 to enable PWM function                                        */
    } CTRL_b;                                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  SET;                             /*!< SET                                                                   */
    
    struct {
      __IO uint32_t  INI_VALUE_PERIOD: 16;          /*!< pwm period setting. the PWM 1 cycle period = (pwm_post_scaler+1)
                                                         * (pwm_ini_value_period+1) * 31.25ns(32MHz).                          */
      __IO uint32_t  INI_VALUE_P: 16;               /*!< pwm high level setting. pwm duty value = pwm_ini_value_p / (pwm_ini_value_
                                                         period+1).                                                            */
    } SET_b;                                        /*!< BitSize                                                               */
  };
} CONDOR_PWM0_Type;


/* ================================================================================ */
/* ================                   CSR_I2C_MST                  ================ */
/* ================================================================================ */


/**
  * @brief CSR_I2C_MST  (CSR_I2C_MST)
  */

typedef struct {                                    /*!< CSR_I2C_MST Structure                                                 */
  
  union {
    __IO uint32_t  TWIM_EN;                         /*!< TWIM_EN                                                               */
    
    struct {
      __IO uint32_t  TWI_START_TRIG:  1;            /*!< send start trigger to start transmit or receive flow.                 */
      __IO uint32_t  TWI_STOP_TRIG:  1;             /*!< send stop trigger to stop flow. When 'twi_int_txd_stall'=1,
                                                         set 'twi_stop_trig'=1, the twi bus will be terminated immediately.
                                                          When 'twi_int_rxd_stall'=1, twi_bus will be terminated after
                                                          receiving one more byte.                                             */
      __IO uint32_t  TWI_TRANS_CONTINUE:  1;        /*!< send continue to transmittion or receive one byte data.               */
    } TWIM_EN_b;                                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TWIM_STATUS_SETTING;             /*!< TWIM_STATUS_SETTING                                                   */
    
    struct {
      __IO uint32_t  TWI_DEV_A_10B:  1;             /*!< set 0, select slave ID 7bits address. Set 1, slave ID 10bits
                                                         address. default use slave ID 7bits address.                          */
      __IO uint32_t  TWI_MODE   :  1;               /*!< select i2c_mst = 0 or twi_mst = 1. default use twi_mst.               */
           uint32_t             : 14;
      __I  uint32_t  SCL        :  1;               /*!< SCL status of twi_bus, this signal after sync by system clock.        */
      __I  uint32_t  SDA        :  1;               /*!< SDA status of twi_bus, this signal after sync by system clock.        */
    } TWIM_STATUS_SETTING_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TWIM_INTERRUPT_EN;               /*!< TWIM_INTERRUPT_EN                                                     */
    
    struct {
      __IO uint32_t  TWI_INT_TXD_STALL_EN:  1;      /*!< 'int_txd_stall' enable.                                               */
      __IO uint32_t  TWI_INT_RXD_STALL_EN:  1;      /*!< 'int_rxd_stall' enable.                                               */
      __IO uint32_t  TWI_INT_TRANS_FINISH_EN:  1;   /*!< 'twi_int_trans_finish' enable.                                        */
      __IO uint32_t  TWI_INT_MISMATCH_EN:  1;       /*!< 'twi_int_mismatch' enable.                                            */
      __IO uint32_t  TWI_INT_TRANS_FAIL_EN:  1;     /*!< 'twi_int_trans_fail' enable.                                          */
      __IO uint32_t  TWI_INT_HOLD_BUS_EN:  1;       /*!< 'twi_int_hold_bus' enable.                                            */
    } TWIM_INTERRUPT_EN_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TWIM_INTERRUPT;                  /*!< TWIM_INTERRUPT                                                        */
    
    struct {
      __IO uint32_t  TWI_INT_TXD_STALL:  1;         /*!< Interrupt, write one clear. when this bit = 1, twi_bus need
                                                         user provide another one byte for transmit. the byte will transmit
                                                          after user clears this interrupt.                                    */
      __IO uint32_t  TWI_INT_RXD_STALL:  1;         /*!< Interrupt. when this bit = 1, twi_bus need user read one received
                                                         byte. the byte will receive another one byte after user clears
                                                          this interrupt.                                                      */
      __IO uint32_t  TWI_INT_TRANS_FINISH:  1;      /*!< Interrupt, write one clear. when this bit = 1, twi_bus send
                                                         stop to slave.                                                        */
      __IO uint32_t  TWI_INT_MISMATCH:  1;          /*!< Interrupt, write one clear. when this bit = 1, twi_master cant
                                                         find the slave ID address as user provided.                           */
      __IO uint32_t  TWI_INT_TRANS_FAIL:  1;        /*!< Interrupt, write one clear. when this bit = 1, twi_master runs
                                                         TX flow and gets nack from slave.                                     */
      __IO uint32_t  TWI_INT_HOLD_BUS:  1;          /*!< Interrupt, write one clear. when this bit = 1, twi_master detect
                                                         twi_bus held by slave, twi_master stalls task until 'hold_bus'
                                                          disappeared.                                                         */
    } TWIM_INTERRUPT_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  TWIM_INTERRUPT_STATUS;           /*!< TWIM_INTERRUPT_STATUS                                                 */
    
    struct {
      __I  uint32_t  TWI_INT_TXD_STALL_ST:  1;      /*!< 'int_txd_stall' status.                                               */
      __I  uint32_t  TWI_INT_RXD_STALL_ST:  1;      /*!< 'int_rxd_stall' status.                                               */
      __I  uint32_t  TWI_INT_TRANS_FINISH_ST:  1;   /*!< 'twi_int_trans_finish' status.                                        */
      __I  uint32_t  TWI_INT_MISMATCH_ST:  1;       /*!< 'twi_int_mismatch' status.                                            */
      __I  uint32_t  TWI_INT_TRANS_FAIL_ST:  1;     /*!< 'twi_int_trans_fail' status.                                          */
      __I  uint32_t  TWI_INT_HOLD_BUS_ST:  1;       /*!< 'twi_int_hold_bus' status.                                            */
    } TWIM_INTERRUPT_STATUS_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  TWIM_STATUS_RECORD_0;            /*!< TWIM_STATUS_RECORD_0                                                  */
    
    struct {
      __I  uint32_t  TWI_STATUS_RECORD_0: 32;       /*!< twi_master state mechine record. shift 4bits from 'twi_status_record_0'
                                                         low 4bits to high 4bits, then from 'twi_status_record_1' low
                                                          4bits to high 4bits. It can record the 16 status.                    */
    } TWIM_STATUS_RECORD_0_b;                       /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  TWIM_STATUS_RECORD_1;            /*!< TWIM_STATUS_RECORD_1                                                  */
    
    struct {
      __I  uint32_t  TWI_STATUS_RECORD_1: 32;       /*!< twi_master state mechine record. shift 4bits from 'twi_status_record_0'
                                                         low 4bits to high 4bits, then from 'twi_status_record_1' low
                                                          4bits to high 4bits. It can record the 16 status.                    */
    } TWIM_STATUS_RECORD_1_b;                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TWIM_DEV_A;                      /*!< TWIM_DEV_A                                                            */
    
    struct {
      __IO uint32_t  TWI_RX     :  1;               /*!< set 0, twi_bus in receive mode. set 1, twi_bus in transmit mode.
                                                         twi_rx = 1 as default.                                                */
      __IO uint32_t  TWI_DEV_A10B: 10;              /*!< slave ID address. When 'twi_dev_a_10b' = 0, use 7bits ID address.
                                                         When 'twi_dev_a_10b' = 1, use 10bits ID address.                      */
    } TWIM_DEV_A_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TWIM_TXD_DATA;                   /*!< TWIM_TXD_DATA                                                         */
    
    struct {
      __IO uint32_t  TWI_TXD_DATA:  8;              /*!< TXD data buffer. when 'int_txd_stall' = 1, twi_bus need one
                                                         more byte data to send.                                               */
    } TWIM_TXD_DATA_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  TWIM_RXD_DATA;                   /*!< TWIM_RXD_DATA                                                         */
    
    struct {
      __I  uint32_t  TWI_RXD_DATA:  8;              /*!< RXD data buffer. when 'int_rxd_stall' = 1, twi_bus have received
                                                         one byte data for user read.                                          */
    } TWIM_RXD_DATA_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TWIM_PSCL;                       /*!< TWIM_PSCL                                                             */
    
    struct {
      __IO uint32_t  TWI_PSCL   : 10;               /*!< prescaler of twi_master SCL half cycle by system clock, frequency
                                                         = default value (64*2)T(sys_clk=32MHz) = 250KHz                       */
           uint32_t             :  6;
      __IO uint32_t  TWI_STA_STO_PSCL: 10;          /*!< start and stop hold time setting, default value = 20T (sys_clk=32MHz)
                                                         = 625ns                                                               */
    } TWIM_PSCL_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TWIM_TRANS_PSDA;                 /*!< TWIM_TRANS_PSDA                                                       */
    
    struct {
      __IO uint32_t  TWI_TRANS_PSDA: 10;            /*!< SDA transmission time, default value = 5T (sys_clk=32MHz) =
                                                         156.25ns                                                              */
    } TWIM_TRANS_PSDA_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TWIM_DELAY_ACK;                  /*!< TWIM_DELAY_ACK                                                        */
    
    struct {
      __IO uint32_t  TWI_DELAY_ACK: 10;             /*!< set delay cycle before receive/transmit ACK. default value =
                                                         0T (sys_clk=32MHz) = 0ns                                              */
    } TWIM_DELAY_ACK_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  I2CM_EN;                         /*!< I2CM_EN                                                               */
    
    struct {
      __IO uint32_t  I2CM_INT_WDONE:  1;            /*!< interrupt of I2C master write done                                    */
      __IO uint32_t  I2CM_INT_RDONE:  1;            /*!< interrupt of I2C master read done                                     */
      __I  uint32_t  I2CM_IDLE  :  1;               /*!< I2C master in idle state                                              */
      __IO uint32_t  I2CM_INT_MISMATCH:  1;         /*!< find slave device ID fail                                             */
      __IO uint32_t  I2CM_PSCL  : 10;               /*!< prescaler of I2C master SCL half cycle by system clock, default
                                                         value=63T+3T(latancy) (sys_clk=32MHz) = 246KHz                        */
           uint32_t             :  2;
      __IO uint32_t  I2CM_MANUAL_MODE:  1;          /*!< send waveform as sda when scl = high and scl = low                    */
      __IO uint32_t  I2CM_INT_WDATA_NEED:  1;       /*!< need to write next wdata to 'I2CM_WDAT'                               */
      __IO uint32_t  I2CM_INT_RDATA_NEED:  1;       /*!< need to read current rdata from 'I2CM_RDAT'                           */
    } I2CM_EN_b;                                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  I2CM_DEV_A;                      /*!< I2CM_DEV_A                                                            */
    
    struct {
      __IO uint32_t  I2CM_DEV_A : 10;               /*!< device address to I2C slave                                           */
           uint32_t             :  4;
      __IO uint32_t  I2CM_DEV_A10B:  1;             /*!< device address of I2C slave is 10-bit                                 */
      __IO uint32_t  I2CM_RX    :  1;               /*!< I2C master does receive transfer                                      */
    } I2CM_DEV_A_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  I2CM_LEN;                        /*!< I2CM_LEN                                                              */
    
    struct {
      __IO uint32_t  I2CM_LEN   : 16;               /*!< the byte length (remained) of the transfer. Write will also
                                                         start the device address trasnfer. Read will get the remained
                                                          byte count of the transfer.                                          */
      __I  uint32_t  I2CM_T_LEFT:  3;               /*!< the byte count of TX data left                                        */
           uint32_t             :  5;
      __I  uint32_t  I2CM_R_GET :  3;               /*!< the byte count of RX data got                                         */
    } I2CM_LEN_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  I2CM_WDAT;                       /*!< I2CM_WDAT                                                             */
    
    struct {
      __IO uint32_t  I2CM_WDAT  : 32;               /*!< the data of the transmit transfer                                     */
    } I2CM_WDAT_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  I2CM_RDAT;                       /*!< I2CM_RDAT                                                             */
    
    struct {
      __IO uint32_t  I2CM_RDAT  : 32;               /*!< the data of the receive transfer                                      */
    } I2CM_RDAT_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  I2CM_EN_2;                       /*!< I2CM_EN_2                                                             */
    
    struct {
      __IO uint32_t  I2CM_SR_LEN: 16;               /*!< When repeat_start, the byte length (remained) of the transfer.
                                                         Write will also trig the second start the device address trasnfer.
                                                          Read will get the remained byte count of the transfer.               */
      __IO uint32_t  I2CM_SR_RX :  1;               /*!< When repeat_start I2C master does receive transfer                    */
      __IO uint32_t  I2CM_REPEAT_START:  1;         /*!< Send repeat_start once and auto clear this bit                        */
    } I2CM_EN_2_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  I2CM_START_STOP_PERIOD;          /*!< I2CM_START_STOP_PERIOD                                                */
    
    struct {
      __IO uint32_t  I2CM_STA_STO_PSCL: 10;         /*!< start and stop hold time setting, default value = 20T (sys_clk=32MHz)
                                                         = 625ns                                                               */
    } I2CM_START_STOP_PERIOD_b;                     /*!< BitSize                                                               */
  };
} CONDOR_CSR_I2C_MST_Type;


/* ================================================================================ */
/* ================                   CSR_I2C_SLV                  ================ */
/* ================================================================================ */


/**
  * @brief CSR_I2C_SLV  (CSR_I2C_SLV)
  */

typedef struct {                                    /*!< CSR_I2C_SLV Structure                                                 */
  
  union {
    __IO uint32_t  I2CS_ID_ADDR;                    /*!< I2CS_ID_ADDR                                                          */
    
    struct {
      __IO uint32_t  I2CS_ADDR_DC:  1;              /*!< I2C slaves device address is dont-care                                */
      __IO uint32_t  I2CS_ADDR  :  7;               /*!< I2C slaves device address. if ID address setting are the same(i2cs_addr=i2
                                                         cs_addr_reset=i2c_addr_wakeup), priority is 1.i2cs_addr_wakeup
                                                         2.i2cs_addr_reset 3.i2cs_addr.                                        */
           uint32_t             :  1;
      __IO uint32_t  I2CS_ADDR_RESET:  7;           /*!< slave device address. the main function is to generate reset
                                                         signal. if ID address setting are the same(i2cs_addr=i2cs_addr_reset=i2c_a
                                                         ddr_wakeup), priority is 1.i2cs_addr_wakeup 2.i2cs_addr_reset
                                                          3.i2cs_addr.                                                         */
           uint32_t             :  1;
      __IO uint32_t  I2CS_ADDR_WAKEUP:  7;          /*!< slave device address. the main function is to generate wake-up
                                                         signal. if ID address setting are the same(i2cs_addr=i2cs_addr_reset=i2c_a
                                                         ddr_wakeup), priority is 1.i2cs_addr_wakeup 2.i2cs_addr_reset
                                                          3.i2cs_addr.                                                         */
           uint32_t             :  1;
      __IO uint32_t  I2CS_ADDR_NONCLK:  7;          /*!< slvae device address. when system clock is disable, this ID
                                                         address will read data without system clock latched. this function
                                                          is read only and just for debug.                                     */
    } I2CS_ID_ADDR_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  I2CS_STATUS;                     /*!< I2CS_STATUS                                                           */
    
    struct {
      __IO uint32_t  I2CS_INT   :  5;               /*!< 00001: i2cs_int_rloss---interrupt of I2C slave loss of AHB read
                                                         00010: i2cs_int_wloss---interrupt of I2C slave loss of AHB write
                                                          00100: i2cs_int_id_mismatch---interrupt of I2C slave ID address
                                                          mismatch by I2C master 01000: i2cs_int_bus_err---interrupt of
                                                          bus error on I2C bus 10000: i2cs_int_time_err---interrupt of
                                                          time out error on I2C bus                                            */
           uint32_t             :  5;
      __I  uint32_t  I2CS_IDLE  :  1;               /*!< I2C slave is in idle (free) state                                     */
    } I2CS_STATUS_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  I2CS_TIME_CNT;                   /*!< I2CS_TIME_CNT                                                         */
    
    struct {
      __IO uint32_t  I2CS_TIME_OUT_CNT: 16;         /*!< I2C time out counter maxium value                                     */
    } I2CS_TIME_CNT_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  I2CS_STATE;                      /*!< I2CS_STATE                                                            */
    
    struct {
      __I  uint32_t  I2CS_STATE :  8;               /*!< Current I2C state                                                     */
    } I2CS_STATE_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  I2CS_CTRL;                       /*!< I2CS_CTRL                                                             */
    
    struct {
      __IO uint32_t  I2CS_DATA_CONFIG:  1;          /*!< I2C data config, 1b1---LSB to MSB, 1b0---MSB to LSB                   */
      __IO uint32_t  I2CS_HOLD_BUS_EN:  1;          /*!< I2C hold bus enable, default 1b0                                      */
    } I2CS_CTRL_b;                                  /*!< BitSize                                                               */
  };
} CONDOR_CSR_I2C_SLV_Type;


/* ================================================================================ */
/* ================                  DBG_UART_REG                  ================ */
/* ================================================================================ */


/**
  * @brief DBG_UART_REG  (DBG_UART_REG)
  */

typedef struct {                                    /*!< DBG_UART_REG Structure                                                */
  
  union {
    __IO uint32_t  DBG_UART_DATA;                   /*!< dbg_UART_DATA                                                         */
    
    struct {
      __IO uint32_t  DBG_UART_DATA:  8;             /*!< When DLAB = 0, UART read/write data (byte)                            */
    } DBG_UART_DATA_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DBG_UART_IER;                    /*!< dbg_UART_IER                                                          */
    
    struct {
      __IO uint32_t  DBG_DATA_RDY_IE:  1;           /*!< When DLAB = 0, interrupt enable of RX FIFO status or time out         */
      __IO uint32_t  DBG_THR_EMPTY_IE:  1;          /*!< When DLAB = 0, interrupt enable of TX FIFO empty                      */
      __IO uint32_t  DBG_RX_LINESTS_IE:  1;         /*!< When DLAB = 0, interrupt enable of RX line status                     */
      __IO uint32_t  DBG_MDM_STS_IE:  1;            /*!< When DLAB = 0, interrupt enable of modem status                       */
      __IO uint32_t  DBG_TX_THRH_IE:  1;            /*!< When DLAB = 0, interrupt enable of TX high threshold event            */
      __IO uint32_t  DBG_TX_THRL_IE:  1;            /*!< When DLAB = 0, interrupt enable of TX low threshold event             */
    } DBG_UART_IER_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DBG_UART_FCR;                    /*!< dbg_UART_FCR                                                          */
    
    struct {
      __IO uint32_t  DBG_FIFO_EN:  1;               /*!< FIFO enable                                                           */
      __O  uint32_t  DBG_RXFIFO_RST:  1;            /*!< RX FIFO reset                                                         */
      __O  uint32_t  DBG_TXFIFO_RST:  1;            /*!< TX FIFO reset                                                         */
      __IO uint32_t  DBG_DMA_MODE:  1;              /*!< DMA mode. Accessible when fifo_en=1.                                  */
      __IO uint32_t  DBG_EN_AUTO_RTS:  1;           /*!< enable auto RTS flow control                                          */
      __IO uint32_t  DBG_EN_AUTO_CTS:  1;           /*!< enable auto CTS flow control                                          */
      __IO uint32_t  DBG_RXFIFO_TRGLVL:  2;         /*!< RX FIFO trigger level. Accessible when fifo_en=1. 00: RX FIFO
                                                         LGE 1 01: RX FIFO LGE 4 10: RX FIFO LGE 8 11: RX FIFO LGE 14          */
    } DBG_UART_FCR_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DBG_UART_LCR;                    /*!< dbg_UART_LCR                                                          */
    
    struct {
      __IO uint32_t  DBG_WORD_LEN:  2;              /*!< word length 00: 5 bits 01: 6 bits 10: 7 bits 11: 8 bits               */
      __IO uint32_t  DBG_STOP_BIT:  1;              /*!< stop bits                                                             */
      __IO uint32_t  DBG_PARITY_EN:  1;             /*!< parity enable                                                         */
      __IO uint32_t  DBG_EVEN_PARITY:  1;           /*!< even parity                                                           */
      __IO uint32_t  DBG_FORCE_PARITY:  1;          /*!< force parity                                                          */
      __IO uint32_t  DBG_SET_BREAK:  1;             /*!< set break makes the TX data output go to 0                            */
      __IO uint32_t  DBG_DLAB   :  1;               /*!< DLAB used to switch the accessibility of reg00/04/1C.                 */
    } DBG_UART_LCR_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DBG_UART_MCR;                    /*!< dbg_UART_MCR                                                          */
    
    struct {
      __IO uint32_t  DBG_DTR    :  1;               /*!< DTR                                                                   */
      __IO uint32_t  DBG_RTS    :  1;               /*!< RTS                                                                   */
      __IO uint32_t  DBG_OUT_1  :  1;               /*!< out 1                                                                 */
      __IO uint32_t  DBG_OUT_2  :  1;               /*!< out 2 or global interrupt enable mask (depending on a synthesis
                                                         option)                                                               */
      __IO uint32_t  DBG_LOOP_BACK:  1;             /*!< loop back makes the RX data comes from internal TX data (if
                                                         set_break=0)                                                          */
      __IO uint32_t  DBG_DE_RTS :  1;               /*!< force de-assert the rts signal, if set this bit as 1, rts signal
                                                         will force to 0 to make the host cannot tx if host will refer
                                                          to rts                                                               */
    } DBG_UART_MCR_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  DBG_UART_LSR;                    /*!< dbg_UART_LSR                                                          */
    
    struct {
      __I  uint32_t  DBG_DATA_RDY:  1;              /*!< data ready (RX FIFO not empty) (read cleared to 0when RX in
                                                         progress but FIFO not enabled)                                        */
      __I  uint32_t  DBG_OVERRUN_ERR:  1;           /*!< overrun error (read cleared to 0when RX in progress but FIFO
                                                         not enabled)                                                          */
      __I  uint32_t  DBG_PARITY_ERR:  1;            /*!< parity error (read cleared to 0when RX in progress but FIFO
                                                         not enabled)                                                          */
      __I  uint32_t  DBG_FRAMING_ERR:  1;           /*!< framing error (frame stop bit not equal to 1) (read cleared
                                                         to 0when RX in progress but FIFO not enabled)                         */
      __I  uint32_t  DBG_BREAK_INT:  1;             /*!< break interrupt (read cleared to 0when RX in progress but FIFO
                                                         not enabled)                                                          */
      __I  uint32_t  DBG_THR_EMPTY:  1;             /*!< THR empty                                                             */
      __I  uint32_t  DBG_TX_EMPTY:  1;              /*!< transmitter empty (THR empty {FLD_DESC}amp; TX state is idle)         */
      __I  uint32_t  DBG_FIFODATA_ERR:  1;          /*!< FIFO data still got error(s)                                          */
    } DBG_UART_LSR_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  DBG_UART_MSR;                    /*!< dbg_UART_MSR                                                          */
    
    struct {
      __I  uint32_t  DBG_DELTA_CTS:  1;             /*!< delta CTS                                                             */
      __I  uint32_t  DBG_DELTA_DSR:  1;             /*!< delta DSR                                                             */
      __I  uint32_t  DBG_TRAILEDGE_RI:  1;          /*!< trailing edge RI                                                      */
      __I  uint32_t  DBG_DELTA_CD:  1;              /*!< delta CD                                                              */
      __I  uint32_t  DBG_CTS    :  1;               /*!< CTS                                                                   */
      __I  uint32_t  DBG_DSR    :  1;               /*!< DSR                                                                   */
      __I  uint32_t  DBG_RI     :  1;               /*!< RI                                                                    */
      __I  uint32_t  DBG_CD     :  1;               /*!< CD                                                                    */
    } DBG_UART_MSR_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DBG_UART_SPR;                    /*!< dbg_UART_SPR                                                          */
    
    struct {
      __IO uint32_t  DBG_BRDC_DIV: 16;              /*!< baud rate divisor = (clock rate / baud rate ).                        */
    } DBG_UART_SPR_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DBG_UART_RTHR;                   /*!< dbg_UART_RTHR                                                         */
    
    struct {
      __IO uint32_t  DBG_RTHR_L :  4;               /*!< RX FIFO threshold low. nRTS is asserted when RX FIFO count is
                                                         equal or below RTHR_L.                                                */
      __IO uint32_t  DBG_RTHR_H :  4;               /*!< RX FIFO threshold high. nRTS is deasserted when RX FIFO count
                                                         is equal or above RTHR_H.                                             */
    } DBG_UART_RTHR_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  DBG_UART_ISR;                    /*!< dbg_UART_ISR                                                          */
    
    struct {
      __I  uint32_t  DBG_INT_IDCODE:  4;            /*!< when read : When DLAB = 0, interrupt identification code (in
                                                         order of priority high to low) 6: RX line status (break+frame
                                                          error+parity error+overrun error) C: RX FIFO time out 4: RX
                                                          FIFO status (data received in non-FIFO mode or RX FIFO above
                                                          trigger level in FIFO mode) 2: TX FIFO empty 0: modem status
                                                          (DDCD+TERI+DDSR+DCTS) 1: no interrupt status to be reported          */
      __I  uint32_t  DBG_RX_IDLE:  1;               /*!< When rx_idle = 0, no UART signal at rx                                */
      __I  uint32_t  DBG_TX_IDLE:  1;               /*!< When tx_idle = 0, no UART signal at tx                                */
      __I  uint32_t  DBG_FIFOS_ENABLED:  2;         /*!< when read : When DLAB = 0, FIFOs enabled                              */
    } DBG_UART_ISR_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DBG_UART_TTHR;                   /*!< dbg_UART_TTHR                                                         */
    
    struct {
      __IO uint32_t  DBG_TTHR_L :  4;               /*!< TX FIFO threshold low. tx interrupt is assert TX FIFO count
                                                         is equal or below TTHR_L.                                             */
      __IO uint32_t  DBG_TTHR_H :  4;               /*!< TX FIFO threshold high. tx interrupt is assert when TX FIFO
                                                         count is equal or above TTHR_H.                                       */
    } DBG_UART_TTHR_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  DBG_UART_INT_MAP;                /*!< dbg_UART_INT_MAP                                                      */
    
    struct {
      __I  uint32_t  DBG_RX_RECIEVED:  1;           /*!< rx recieved, if fifo mode this bit will assert when rx fifo
                                                         over the threshold                                                    */
      __I  uint32_t  DBG_RX_FIFO_TO:  1;            /*!< rx fifo time out, if rx fifo recieved data but isnt get for
                                                         a long time                                                           */
      __I  uint32_t  DBG_TX_L   :  1;               /*!< tx low threshold, if fifo mode this bit will assert when tx
                                                         fifo under the low threshold                                          */
      __I  uint32_t  DBG_TX_H   :  1;               /*!< tx high threshold, if fifo mode this bit will assert when tx
                                                         fifo obove the high threshold                                         */
      __I  uint32_t  DBG_TX_EMPTY2:  1;             /*!< tx fifo empty                                                         */
      __I  uint32_t  DBG_OVERRUN:  1;               /*!< overrun error, if rx fifo is full but data still come                 */
      __I  uint32_t  DBG_FRAMING:  1;               /*!< framing error, if last bit of rx is not 1                             */
      __I  uint32_t  DBG_BREAK  :  1;               /*!< break error, if all rx bit is 0                                       */
      __I  uint32_t  DBG_PARITY :  1;               /*!< parity error, if parity check fail                                    */
      __I  uint32_t  DBG_MODEN_INT:  1;             /*!< moden event                                                           */
    } DBG_UART_INT_MAP_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  DBG_UART_POINTER;                /*!< dbg_UART_POINTER                                                      */
    
    struct {
      __I  uint32_t  DBG_ROP_A  :  4;               /*!< RXD FIFO read pointer.                                                */
      __I  uint32_t  DBG_RIP_A  :  4;               /*!< RXD FIFO write pointer.                                               */
      __I  uint32_t  DBG_TOP_A  :  4;               /*!< TXD FIFO read pointer.                                                */
      __I  uint32_t  DBG_TIP_A  :  4;               /*!< TXD FIFO write pointer.                                               */
    } DBG_UART_POINTER_b;                           /*!< BitSize                                                               */
  };
} CONDOR_DBG_UART_REG_Type;


/* ================================================================================ */
/* ================                  ICOM_UART_REG                 ================ */
/* ================================================================================ */


/**
  * @brief ICOM_UART_REG  (ICOM_UART_REG)
  */

typedef struct {                                    /*!< ICOM_UART_REG Structure                                               */
  
  union {
    __IO uint32_t  ICOM_UART_DATA;                  /*!< icom_UART_DATA                                                        */
    
    struct {
      __IO uint32_t  ICOM_UART_DATA:  8;            /*!< When DLAB = 0, UART read/write data (byte)                            */
    } ICOM_UART_DATA_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ICOM_UART_IER;                   /*!< icom_UART_IER                                                         */
    
    struct {
      __IO uint32_t  ICOM_DATA_RDY_IE:  1;          /*!< When DLAB = 0, interrupt enable of RX FIFO status or time out         */
      __IO uint32_t  ICOM_THR_EMPTY_IE:  1;         /*!< When DLAB = 0, interrupt enable of TX FIFO empty                      */
      __IO uint32_t  ICOM_RX_LINESTS_IE:  1;        /*!< When DLAB = 0, interrupt enable of RX line status                     */
      __IO uint32_t  ICOM_MDM_STS_IE:  1;           /*!< When DLAB = 0, interrupt enable of modem status                       */
      __IO uint32_t  ICOM_TX_THRH_IE:  1;           /*!< When DLAB = 0, interrupt enable of TX high threshold event            */
      __IO uint32_t  ICOM_TX_THRL_IE:  1;           /*!< When DLAB = 0, interrupt enable of TX low threshold event             */
    } ICOM_UART_IER_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ICOM_UART_FCR;                   /*!< icom_UART_FCR                                                         */
    
    struct {
      __IO uint32_t  ICOM_FIFO_EN:  1;              /*!< FIFO enable                                                           */
      __O  uint32_t  ICOM_RXFIFO_RST:  1;           /*!< RX FIFO reset                                                         */
      __O  uint32_t  ICOM_TXFIFO_RST:  1;           /*!< TX FIFO reset                                                         */
      __IO uint32_t  ICOM_DMA_MODE:  1;             /*!< DMA mode. Accessible when fifo_en=1.                                  */
      __IO uint32_t  ICOM_EN_AUTO_RTS:  1;          /*!< enable auto RTS flow control                                          */
      __IO uint32_t  ICOM_EN_AUTO_CTS:  1;          /*!< enable auto CTS flow control                                          */
      __IO uint32_t  ICOM_RXFIFO_TRGLVL:  2;        /*!< RX FIFO trigger level. Accessible when fifo_en=1. 00: RX FIFO
                                                         LGE 1 01: RX FIFO LGE 4 10: RX FIFO LGE 8 11: RX FIFO LGE 14          */
    } ICOM_UART_FCR_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ICOM_UART_LCR;                   /*!< icom_UART_LCR                                                         */
    
    struct {
      __IO uint32_t  ICOM_WORD_LEN:  2;             /*!< word length 00: 5 bits 01: 6 bits 10: 7 bits 11: 8 bits               */
      __IO uint32_t  ICOM_STOP_BIT:  1;             /*!< stop bits                                                             */
      __IO uint32_t  ICOM_PARITY_EN:  1;            /*!< parity enable                                                         */
      __IO uint32_t  ICOM_EVEN_PARITY:  1;          /*!< even parity                                                           */
      __IO uint32_t  ICOM_FORCE_PARITY:  1;         /*!< force parity                                                          */
      __IO uint32_t  ICOM_SET_BREAK:  1;            /*!< set break makes the TX data output go to 0                            */
      __IO uint32_t  ICOM_DLAB  :  1;               /*!< DLAB used to switch the accessibility of reg00/04/1C.                 */
    } ICOM_UART_LCR_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ICOM_UART_MCR;                   /*!< icom_UART_MCR                                                         */
    
    struct {
      __IO uint32_t  ICOM_DTR   :  1;               /*!< DTR                                                                   */
      __IO uint32_t  ICOM_RTS   :  1;               /*!< RTS                                                                   */
      __IO uint32_t  ICOM_OUT_1 :  1;               /*!< out 1                                                                 */
      __IO uint32_t  ICOM_OUT_2 :  1;               /*!< out 2 or global interrupt enable mask (depending on a synthesis
                                                         option)                                                               */
      __IO uint32_t  ICOM_LOOP_BACK:  1;            /*!< loop back makes the RX data comes from internal TX data (if
                                                         set_break=0)                                                          */
      __IO uint32_t  ICOM_DE_RTS:  1;               /*!< force de-assert the rts signal, if set this bit as 1, rts signal
                                                         will force to 0 to make the host cannot tx if host will refer
                                                          to rts                                                               */
    } ICOM_UART_MCR_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  ICOM_UART_LSR;                   /*!< icom_UART_LSR                                                         */
    
    struct {
      __I  uint32_t  ICOM_DATA_RDY:  1;             /*!< data ready (RX FIFO not empty) (read cleared to 0when RX in
                                                         progress but FIFO not enabled)                                        */
      __I  uint32_t  ICOM_OVERRUN_ERR:  1;          /*!< overrun error (read cleared to 0when RX in progress but FIFO
                                                         not enabled)                                                          */
      __I  uint32_t  ICOM_PARITY_ERR:  1;           /*!< parity error (read cleared to 0when RX in progress but FIFO
                                                         not enabled)                                                          */
      __I  uint32_t  ICOM_FRAMING_ERR:  1;          /*!< framing error (frame stop bit not equal to 1) (read cleared
                                                         to 0when RX in progress but FIFO not enabled)                         */
      __I  uint32_t  ICOM_BREAK_INT:  1;            /*!< break interrupt (read cleared to 0when RX in progress but FIFO
                                                         not enabled)                                                          */
      __I  uint32_t  ICOM_THR_EMPTY:  1;            /*!< THR empty                                                             */
      __I  uint32_t  ICOM_TX_EMPTY:  1;             /*!< transmitter empty (THR empty {FLD_DESC}amp; TX state is idle)         */
      __I  uint32_t  ICOM_FIFODATA_ERR:  1;         /*!< FIFO data still got error(s)                                          */
    } ICOM_UART_LSR_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  ICOM_UART_MSR;                   /*!< icom_UART_MSR                                                         */
    
    struct {
      __I  uint32_t  ICOM_DELTA_CTS:  1;            /*!< delta CTS                                                             */
      __I  uint32_t  ICOM_DELTA_DSR:  1;            /*!< delta DSR                                                             */
      __I  uint32_t  ICOM_TRAILEDGE_RI:  1;         /*!< trailing edge RI                                                      */
      __I  uint32_t  ICOM_DELTA_CD:  1;             /*!< delta CD                                                              */
      __I  uint32_t  ICOM_CTS   :  1;               /*!< CTS                                                                   */
      __I  uint32_t  ICOM_DSR   :  1;               /*!< DSR                                                                   */
      __I  uint32_t  ICOM_RI    :  1;               /*!< RI                                                                    */
      __I  uint32_t  ICOM_CD    :  1;               /*!< CD                                                                    */
    } ICOM_UART_MSR_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ICOM_UART_SPR;                   /*!< icom_UART_SPR                                                         */
    
    struct {
      __IO uint32_t  ICOM_BRDC_DIV: 16;             /*!< baud rate divisor = (clock rate / baud rate ).                        */
    } ICOM_UART_SPR_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ICOM_UART_RTHR;                  /*!< icom_UART_RTHR                                                        */
    
    struct {
      __IO uint32_t  ICOM_RTHR_L:  4;               /*!< RX FIFO threshold low. nRTS is asserted when RX FIFO count is
                                                         equal or below RTHR_L.                                                */
      __IO uint32_t  ICOM_RTHR_H:  4;               /*!< RX FIFO threshold high. nRTS is deasserted when RX FIFO count
                                                         is equal or above RTHR_H.                                             */
    } ICOM_UART_RTHR_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  ICOM_UART_ISR;                   /*!< icom_UART_ISR                                                         */
    
    struct {
      __I  uint32_t  ICOM_INT_IDCODE:  4;           /*!< when read : When DLAB = 0, interrupt identification code (in
                                                         order of priority high to low) 6: RX line status (break+frame
                                                          error+parity error+overrun error) C: RX FIFO time out 4: RX
                                                          FIFO status (data received in non-FIFO mode or RX FIFO above
                                                          trigger level in FIFO mode) 2: TX FIFO empty 0: modem status
                                                          (DDCD+TERI+DDSR+DCTS) 1: no interrupt status to be reported          */
      __I  uint32_t  ICOM_RX_IDLE:  1;              /*!< When rx_idle = 0, no UART signal at rx                                */
      __I  uint32_t  ICOM_TX_IDLE:  1;              /*!< When tx_idle = 0, no UART signal at tx                                */
      __I  uint32_t  ICOM_FIFOS_ENABLED:  2;        /*!< when read : When DLAB = 0, FIFOs enabled                              */
    } ICOM_UART_ISR_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ICOM_UART_TTHR;                  /*!< icom_UART_TTHR                                                        */
    
    struct {
      __IO uint32_t  ICOM_TTHR_L:  4;               /*!< TX FIFO threshold low. tx interrupt is assert TX FIFO count
                                                         is equal or below TTHR_L.                                             */
      __IO uint32_t  ICOM_TTHR_H:  4;               /*!< TX FIFO threshold high. tx interrupt is assert when TX FIFO
                                                         count is equal or above TTHR_H.                                       */
    } ICOM_UART_TTHR_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  ICOM_UART_INT_MAP;               /*!< icom_UART_INT_MAP                                                     */
    
    struct {
      __I  uint32_t  ICOM_RX_RECIEVED:  1;          /*!< rx recieved, if fifo mode this bit will assert when rx fifo
                                                         over the threshold                                                    */
      __I  uint32_t  ICOM_RX_FIFO_TO:  1;           /*!< rx fifo time out, if rx fifo recieved data but isnt get for
                                                         a long time                                                           */
      __I  uint32_t  ICOM_TX_L  :  1;               /*!< tx low threshold, if fifo mode this bit will assert when tx
                                                         fifo under the low threshold                                          */
      __I  uint32_t  ICOM_TX_H  :  1;               /*!< tx high threshold, if fifo mode this bit will assert when tx
                                                         fifo obove the high threshold                                         */
      __I  uint32_t  ICOM_TX_EMPTY2:  1;            /*!< tx fifo empty                                                         */
      __I  uint32_t  ICOM_OVERRUN:  1;              /*!< overrun error, if rx fifo is full but data still come                 */
      __I  uint32_t  ICOM_FRAMING:  1;              /*!< framing error, if last bit of rx is not 1                             */
      __I  uint32_t  ICOM_BREAK :  1;               /*!< break error, if all rx bit is 0                                       */
      __I  uint32_t  ICOM_PARITY:  1;               /*!< parity error, if parity check fail                                    */
      __I  uint32_t  ICOM_MODEN_INT:  1;            /*!< moden event                                                           */
    } ICOM_UART_INT_MAP_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  ICOM_UART_POINTER;               /*!< icom_UART_POINTER                                                     */
    
    struct {
      __I  uint32_t  ICOM_ROP_A :  4;               /*!< RXD FIFO read pointer.                                                */
      __I  uint32_t  ICOM_RIP_A :  4;               /*!< RXD FIFO write pointer.                                               */
      __I  uint32_t  ICOM_TOP_A :  4;               /*!< TXD FIFO read pointer.                                                */
      __I  uint32_t  ICOM_TIP_A :  4;               /*!< TXD FIFO write pointer.                                               */
    } ICOM_UART_POINTER_b;                          /*!< BitSize                                                               */
  };
} CONDOR_ICOM_UART_REG_Type;


/* ================================================================================ */
/* ================                  DAT_UART_REG                  ================ */
/* ================================================================================ */


/**
  * @brief DAT_UART_REG  (DAT_UART_REG)
  */

typedef struct {                                    /*!< DAT_UART_REG Structure                                                */
  
  union {
    __IO uint32_t  DAT_UART_DATA;                   /*!< dat_UART_DATA                                                         */
    
    struct {
      __IO uint32_t  DAT_UART_DATA:  8;             /*!< When DLAB = 0, UART read/write data (byte)                            */
    } DAT_UART_DATA_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DAT_UART_IER;                    /*!< dat_UART_IER                                                          */
    
    struct {
      __IO uint32_t  DAT_DATA_RDY_IE:  1;           /*!< When DLAB = 0, interrupt enable of RX FIFO status or time out         */
      __IO uint32_t  DAT_THR_EMPTY_IE:  1;          /*!< When DLAB = 0, interrupt enable of TX FIFO empty                      */
      __IO uint32_t  DAT_RX_LINESTS_IE:  1;         /*!< When DLAB = 0, interrupt enable of RX line status                     */
      __IO uint32_t  DAT_MDM_STS_IE:  1;            /*!< When DLAB = 0, interrupt enable of modem status                       */
      __IO uint32_t  DAT_TX_THRH_IE:  1;            /*!< When DLAB = 0, interrupt enable of TX high threshold event            */
      __IO uint32_t  DAT_TX_THRL_IE:  1;            /*!< When DLAB = 0, interrupt enable of TX low threshold event             */
    } DAT_UART_IER_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DAT_UART_FCR;                    /*!< dat_UART_FCR                                                          */
    
    struct {
      __IO uint32_t  DAT_FIFO_EN:  1;               /*!< FIFO enable                                                           */
      __O  uint32_t  DAT_RXFIFO_RST:  1;            /*!< RX FIFO reset                                                         */
      __O  uint32_t  DAT_TXFIFO_RST:  1;            /*!< TX FIFO reset                                                         */
      __IO uint32_t  DAT_DMA_MODE:  1;              /*!< DMA mode. Accessible when fifo_en=1.                                  */
      __IO uint32_t  DAT_EN_AUTO_RTS:  1;           /*!< enable auto RTS flow control                                          */
      __IO uint32_t  DAT_EN_AUTO_CTS:  1;           /*!< enable auto CTS flow control                                          */
      __IO uint32_t  DAT_RXFIFO_TRGLVL:  2;         /*!< RX FIFO trigger level. Accessible when fifo_en=1. 00: RX FIFO
                                                         LGE 1 01: RX FIFO LGE 4 10: RX FIFO LGE 8 11: RX FIFO LGE 14          */
    } DAT_UART_FCR_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DAT_UART_LCR;                    /*!< dat_UART_LCR                                                          */
    
    struct {
      __IO uint32_t  DAT_WORD_LEN:  2;              /*!< word length 00: 5 bits 01: 6 bits 10: 7 bits 11: 8 bits               */
      __IO uint32_t  DAT_STOP_BIT:  1;              /*!< stop bits                                                             */
      __IO uint32_t  DAT_PARITY_EN:  1;             /*!< parity enable                                                         */
      __IO uint32_t  DAT_EVEN_PARITY:  1;           /*!< even parity                                                           */
      __IO uint32_t  DAT_FORCE_PARITY:  1;          /*!< force parity                                                          */
      __IO uint32_t  DAT_SET_BREAK:  1;             /*!< set break makes the TX data output go to 0                            */
      __IO uint32_t  DAT_DLAB   :  1;               /*!< DLAB used to switch the accessibility of reg00/04/1C.                 */
    } DAT_UART_LCR_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DAT_UART_MCR;                    /*!< dat_UART_MCR                                                          */
    
    struct {
      __IO uint32_t  DAT_DTR    :  1;               /*!< DTR                                                                   */
      __IO uint32_t  DAT_RTS    :  1;               /*!< RTS                                                                   */
      __IO uint32_t  DAT_OUT_1  :  1;               /*!< out 1                                                                 */
      __IO uint32_t  DAT_OUT_2  :  1;               /*!< out 2 or global interrupt enable mask (depending on a synthesis
                                                         option)                                                               */
      __IO uint32_t  DAT_LOOP_BACK:  1;             /*!< loop back makes the RX data comes from internal TX data (if
                                                         set_break=0)                                                          */
      __IO uint32_t  DAT_DE_RTS :  1;               /*!< force de-assert the rts signal, if set this bit as 1, rts signal
                                                         will force to 0 to make the host cannot tx if host will refer
                                                          to rts                                                               */
    } DAT_UART_MCR_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  DAT_UART_LSR;                    /*!< dat_UART_LSR                                                          */
    
    struct {
      __I  uint32_t  DAT_DATA_RDY:  1;              /*!< data ready (RX FIFO not empty) (read cleared to 0when RX in
                                                         progress but FIFO not enabled)                                        */
      __I  uint32_t  DAT_OVERRUN_ERR:  1;           /*!< overrun error (read cleared to 0when RX in progress but FIFO
                                                         not enabled)                                                          */
      __I  uint32_t  DAT_PARITY_ERR:  1;            /*!< parity error (read cleared to 0when RX in progress but FIFO
                                                         not enabled)                                                          */
      __I  uint32_t  DAT_FRAMING_ERR:  1;           /*!< framing error (frame stop bit not equal to 1) (read cleared
                                                         to 0when RX in progress but FIFO not enabled)                         */
      __I  uint32_t  DAT_BREAK_INT:  1;             /*!< break interrupt (read cleared to 0when RX in progress but FIFO
                                                         not enabled)                                                          */
      __I  uint32_t  DAT_THR_EMPTY:  1;             /*!< THR empty                                                             */
      __I  uint32_t  DAT_TX_EMPTY:  1;              /*!< transmitter empty (THR empty {FLD_DESC}amp; TX state is idle)         */
      __I  uint32_t  DAT_FIFODATA_ERR:  1;          /*!< FIFO data still got error(s)                                          */
    } DAT_UART_LSR_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  DAT_UART_MSR;                    /*!< dat_UART_MSR                                                          */
    
    struct {
      __I  uint32_t  DAT_DELTA_CTS:  1;             /*!< delta CTS                                                             */
      __I  uint32_t  DAT_DELTA_DSR:  1;             /*!< delta DSR                                                             */
      __I  uint32_t  DAT_TRAILEDGE_RI:  1;          /*!< trailing edge RI                                                      */
      __I  uint32_t  DAT_DELTA_CD:  1;              /*!< delta CD                                                              */
      __I  uint32_t  DAT_CTS    :  1;               /*!< CTS                                                                   */
      __I  uint32_t  DAT_DSR    :  1;               /*!< DSR                                                                   */
      __I  uint32_t  DAT_RI     :  1;               /*!< RI                                                                    */
      __I  uint32_t  DAT_CD     :  1;               /*!< CD                                                                    */
    } DAT_UART_MSR_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DAT_UART_SPR;                    /*!< dat_UART_SPR                                                          */
    
    struct {
      __IO uint32_t  DAT_BRDC_DIV: 16;              /*!< baud rate divisor = (clock rate / baud rate ).                        */
    } DAT_UART_SPR_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DAT_UART_RTHR;                   /*!< dat_UART_RTHR                                                         */
    
    struct {
      __IO uint32_t  DAT_RTHR_L :  4;               /*!< RX FIFO threshold low. nRTS is asserted when RX FIFO count is
                                                         equal or below RTHR_L.                                                */
      __IO uint32_t  DAT_RTHR_H :  4;               /*!< RX FIFO threshold high. nRTS is deasserted when RX FIFO count
                                                         is equal or above RTHR_H.                                             */
    } DAT_UART_RTHR_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  DAT_UART_ISR;                    /*!< dat_UART_ISR                                                          */
    
    struct {
      __I  uint32_t  DAT_INT_IDCODE:  4;            /*!< when read : When DLAB = 0, interrupt identification code (in
                                                         order of priority high to low) 6: RX line status (break+frame
                                                          error+parity error+overrun error) C: RX FIFO time out 4: RX
                                                          FIFO status (data received in non-FIFO mode or RX FIFO above
                                                          trigger level in FIFO mode) 2: TX FIFO empty 0: modem status
                                                          (DDCD+TERI+DDSR+DCTS) 1: no interrupt status to be reported          */
      __I  uint32_t  DAT_RX_IDLE:  1;               /*!< When rx_idle = 0, no UART signal at rx                                */
      __I  uint32_t  DAT_TX_IDLE:  1;               /*!< When tx_idle = 0, no UART signal at tx                                */
      __I  uint32_t  DAT_FIFOS_ENABLED:  2;         /*!< when read : When DLAB = 0, FIFOs enabled                              */
    } DAT_UART_ISR_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DAT_UART_TTHR;                   /*!< dat_UART_TTHR                                                         */
    
    struct {
      __IO uint32_t  DAT_TTHR_L :  4;               /*!< TX FIFO threshold low. tx interrupt is assert TX FIFO count
                                                         is equal or below TTHR_L.                                             */
      __IO uint32_t  DAT_TTHR_H :  4;               /*!< TX FIFO threshold high. tx interrupt is assert when TX FIFO
                                                         count is equal or above TTHR_H.                                       */
    } DAT_UART_TTHR_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  DAT_UART_INT_MAP;                /*!< dat_UART_INT_MAP                                                      */
    
    struct {
      __I  uint32_t  DAT_RX_RECIEVED:  1;           /*!< rx recieved, if fifo mode this bit will assert when rx fifo
                                                         over the threshold                                                    */
      __I  uint32_t  DAT_RX_FIFO_TO:  1;            /*!< rx fifo time out, if rx fifo recieved data but isnt get for
                                                         a long time                                                           */
      __I  uint32_t  DAT_TX_L   :  1;               /*!< tx low threshold, if fifo mode this bit will assert when tx
                                                         fifo under the low threshold                                          */
      __I  uint32_t  DAT_TX_H   :  1;               /*!< tx high threshold, if fifo mode this bit will assert when tx
                                                         fifo obove the high threshold                                         */
      __I  uint32_t  DAT_TX_EMPTY2:  1;             /*!< tx fifo empty                                                         */
      __I  uint32_t  DAT_OVERRUN:  1;               /*!< overrun error, if rx fifo is full but data still come                 */
      __I  uint32_t  DAT_FRAMING:  1;               /*!< framing error, if last bit of rx is not 1                             */
      __I  uint32_t  DAT_BREAK  :  1;               /*!< break error, if all rx bit is 0                                       */
      __I  uint32_t  DAT_PARITY :  1;               /*!< parity error, if parity check fail                                    */
      __I  uint32_t  DAT_MODEN_INT:  1;             /*!< moden event                                                           */
    } DAT_UART_INT_MAP_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  DAT_UART_POINTER;                /*!< dat_UART_POINTER                                                      */
    
    struct {
      __I  uint32_t  DAT_ROP_A  :  4;               /*!< RXD FIFO read pointer.                                                */
      __I  uint32_t  DAT_RIP_A  :  4;               /*!< RXD FIFO write pointer.                                               */
      __I  uint32_t  DAT_TOP_A  :  4;               /*!< TXD FIFO read pointer.                                                */
      __I  uint32_t  DAT_TIP_A  :  4;               /*!< TXD FIFO write pointer.                                               */
    } DAT_UART_POINTER_b;                           /*!< BitSize                                                               */
  };
} CONDOR_DAT_UART_REG_Type;


/* ================================================================================ */
/* ================                      UART                      ================ */
/* ================================================================================ */


/**
  * @brief UART General Type (UART)
  */

typedef struct {                                    /*!< UART Structure                                                        */
  
  union {
    __IO uint32_t  DATA;                            /*!< UART_DATA                                                             */
    
    struct {
      __IO uint32_t  DATA       :  8;               /*!< When DLAB = 0, UART read/write data (byte)                            */
    } DATA_b;                                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  IER;                             /*!< UART_IER                                                              */
    
    struct {
      __IO uint32_t  DATA_RDY_IE:  1;               /*!< When DLAB = 0, interrupt enable of RX FIFO status or time out         */
      __IO uint32_t  THR_EMPTY_IE:  1;              /*!< When DLAB = 0, interrupt enable of TX FIFO empty                      */
      __IO uint32_t  RX_LINESTS_IE:  1;             /*!< When DLAB = 0, interrupt enable of RX line status                     */
      __IO uint32_t  MDM_STS_IE :  1;               /*!< When DLAB = 0, interrupt enable of modem status                       */
      __IO uint32_t  TX_THRH_IE :  1;               /*!< When DLAB = 0, interrupt enable of TX high threshold event            */
      __IO uint32_t  TX_THRL_IE :  1;               /*!< When DLAB = 0, interrupt enable of TX low threshold event             */
    } IER_b;                                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  FCR;                             /*!< UART_FCR                                                              */
    
    struct {
      __IO uint32_t  FIFO_EN    :  1;               /*!< FIFO enable                                                           */
      __O  uint32_t  RXFIFO_RST :  1;               /*!< RX FIFO reset                                                         */
      __O  uint32_t  TXFIFO_RST :  1;               /*!< TX FIFO reset                                                         */
      __IO uint32_t  DMA_MODE   :  1;               /*!< DMA mode. Accessible when fifo_en=1.                                  */
      __IO uint32_t  AUTO_RTS   :  1;               /*!< enable auto RTS flow control                                          */
      __IO uint32_t  AUTO_CTS   :  1;               /*!< enable auto CTS flow control                                          */
      __IO uint32_t  RXFIFO_TRGLVL:  2;             /*!< RX FIFO trigger level. Accessible when fifo_en=1. 00: RX FIFO
                                                         LGE 1 01: RX FIFO LGE 4 10: RX FIFO LGE 8 11: RX FIFO LGE 14          */
    } FCR_b;                                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LCR;                             /*!< UART_LCR                                                              */
    
    struct {
      __IO uint32_t  WORD_LEN   :  2;               /*!< word length 00: 5 bits 01: 6 bits 10: 7 bits 11: 8 bits               */
      __IO uint32_t  STOP_BIT   :  1;               /*!< stop bits                                                             */
      __IO uint32_t  PARITY_EN  :  1;               /*!< parity enable                                                         */
      __IO uint32_t  EVEN_PARITY:  1;               /*!< even parity                                                           */
      __IO uint32_t  FORCE_PARITY:  1;              /*!< force parity                                                          */
      __IO uint32_t  SET_BREAK  :  1;               /*!< set break makes the TX data output go to 0                            */
      __IO uint32_t  DLAB       :  1;               /*!< DLAB used to switch the accessibility of reg00/04/1C.                 */
    } LCR_b;                                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  MCR;                             /*!< UART_MCR                                                              */
    
    struct {
      __IO uint32_t  DTR        :  1;               /*!< DTR                                                                   */
      __IO uint32_t  RTS        :  1;               /*!< RTS                                                                   */
      __IO uint32_t  OUT_1      :  1;               /*!< out 1                                                                 */
      __IO uint32_t  OUT_2      :  1;               /*!< out 2 or global interrupt enable mask (depending on a synthesis
                                                         option)                                                               */
      __IO uint32_t  LOOP_BACK  :  1;               /*!< loop back makes the RX data comes from internal TX data (if
                                                         set_break=0)                                                          */
      __IO uint32_t  DE_RTS     :  1;               /*!< force de-assert the rts signal, if set this bit as 1, rts signal
                                                         will force to 0 to make the host cannot tx if host will refer
                                                          to rts                                                               */
    } MCR_b;                                        /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  LSR;                             /*!< UART_LSR                                                              */
    
    struct {
      __I  uint32_t  DATA_RDY   :  1;               /*!< data ready (RX FIFO not empty) (read cleared to 0when RX in
                                                         progress but FIFO not enabled)                                        */
      __I  uint32_t  OVERRUN_ERR:  1;               /*!< overrun error (read cleared to 0when RX in progress but FIFO
                                                         not enabled)                                                          */
      __I  uint32_t  PARITY_ERR :  1;               /*!< parity error (read cleared to 0when RX in progress but FIFO
                                                         not enabled)                                                          */
      __I  uint32_t  FRAMING_ERR:  1;               /*!< framing error (frame stop bit not equal to 1) (read cleared
                                                         to 0when RX in progress but FIFO not enabled)                         */
      __I  uint32_t  BREAK_INT  :  1;               /*!< break interrupt (read cleared to 0when RX in progress but FIFO
                                                         not enabled)                                                          */
      __I  uint32_t  THR_EMPTY  :  1;               /*!< THR empty                                                             */
      __I  uint32_t  TX_EMPTY   :  1;               /*!< transmitter empty (THR empty {FLD_DESC}amp; TX state is idle)         */
      __I  uint32_t  FIFODATA_ERR:  1;              /*!< FIFO data still got error(s)                                          */
    } LSR_b;                                        /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  MSR;                             /*!< UART_MSR                                                              */
    
    struct {
      __I  uint32_t  DELTA_CTS  :  1;               /*!< delta CTS                                                             */
      __I  uint32_t  DELTA_DSR  :  1;               /*!< delta DSR                                                             */
      __I  uint32_t  TRAILEDGE_RI:  1;              /*!< trailing edge RI                                                      */
      __I  uint32_t  DELTA_CD   :  1;               /*!< delta CD                                                              */
      __I  uint32_t  CTS        :  1;               /*!< CTS                                                                   */
      __I  uint32_t  DSR        :  1;               /*!< DSR                                                                   */
      __I  uint32_t  RI         :  1;               /*!< RI                                                                    */
      __I  uint32_t  CD         :  1;               /*!< CD                                                                    */
    } MSR_b;                                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  SPR;                             /*!< UART_SPR                                                              */
    
    struct {
      __IO uint32_t  BRDC_DIV   : 16;               /*!< baud rate divisor = (clock rate / baud rate / 16).                    */
    } SPR_b;                                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RTHR;                            /*!< UART_RTHR                                                             */
    
    struct {
      __IO uint32_t  RTHR_L     :  4;               /*!< RX FIFO threshold low. nRTS is asserted when RX FIFO count is
                                                         equal or below RTHR_L.                                                */
      __IO uint32_t  RTHR_H     :  4;               /*!< RX FIFO threshold high. nRTS is deasserted when RX FIFO count
                                                         is equal or above RTHR_H.                                             */
    } RTHR_b;                                       /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  ISR;                             /*!< UART_ISR                                                              */
    
    struct {
      __I  uint32_t  INT_IDCODE :  4;               /*!< when read : When DLAB = 0, interrupt identification code (in
                                                         order of priority high to low) 6: RX line status (break+frame
                                                          error+parity error+overrun error) C: RX FIFO time out 4: RX
                                                          FIFO status (data received in non-FIFO mode or RX FIFO above
                                                          trigger level in FIFO mode) 2: TX FIFO empty 0: modem status
                                                          (DDCD+TERI+DDSR+DCTS) 1: no interrupt status to be reported          */
      __I  uint32_t  RX_IDLE    :  1;               /*!< When rx_idle = 0, no UART signal at rx                                */
      __I  uint32_t  TX_IDLE    :  1;               /*!< When tx_idle = 0, no UART signal at tx                                */
      __I  uint32_t  FIFOS_ENABLED:  2;             /*!< when read : When DLAB = 0, FIFOs enabled                              */
    } ISR_b;                                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TTHR;                            /*!< UART_TTHR                                                             */
    
    struct {
      __IO uint32_t  TTHR_L     :  4;               /*!< TX FIFO threshold low. tx interrupt is assert TX FIFO count
                                                         is equal or below TTHR_L.                                             */
      __IO uint32_t  TTHR_H     :  4;               /*!< TX FIFO threshold high. tx interrupt is assert when TX FIFO
                                                         count is equal or above TTHR_H.                                       */
    } TTHR_b;                                       /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  INT_MAP;                         /*!< UART_INT_MAP                                                          */
    
    struct {
      __I  uint32_t  RX_RECIEVED:  1;               /*!< rx recieved, if fifo mode this bit will assert when rx fifo
                                                         over the threshold                                                    */
      __I  uint32_t  RX_FIFO_TO :  1;               /*!< rx fifo time out, if rx fifo recieved data but isnt get for
                                                         a long time                                                           */
      __I  uint32_t  TX_L       :  1;               /*!< tx low threshold, if fifo mode this bit will assert when tx
                                                         fifo under the low threshold                                          */
      __I  uint32_t  TX_H       :  1;               /*!< tx high threshold, if fifo mode this bit will assert when tx
                                                         fifo obove the high threshold                                         */
      __I  uint32_t  TX_EMPTY2  :  1;               /*!< tx fifo empty                                                         */
      __I  uint32_t  OVERRUN    :  1;               /*!< overrun error, if rx fifo is full but data still come                 */
      __I  uint32_t  FRAMING    :  1;               /*!< framing error, if last bit of rx is not 1                             */
      __I  uint32_t  BREAK      :  1;               /*!< break error, if all rx bit is 0                                       */
      __I  uint32_t  PARITY     :  1;               /*!< parity error, if parity check fail                                    */
      __I  uint32_t  MODEN_INT  :  1;               /*!< moden event                                                           */
    } INT_MAP_b;                                    /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  POINTER;                         /*!< UART_POINTER                                                          */
    
    struct {
      __I  uint32_t  ROP_A      :  4;               /*!< RXD FIFO read pointer.                                                */
      __I  uint32_t  RIP_A      :  4;               /*!< RXD FIFO write pointer.                                               */
      __I  uint32_t  TOP_A      :  4;               /*!< TXD FIFO read pointer.                                                */
      __I  uint32_t  TIP_A      :  4;               /*!< TXD FIFO write pointer.                                               */
    } POINTER_b;                                    /*!< BitSize                                                               */
  };
} CONDOR_UART_Type;


/* ================================================================================ */
/* ================                   SPI_SLV_REG                  ================ */
/* ================================================================================ */


/**
  * @brief SPI_SLV_REG  (SPI_SLV_REG)
  */

typedef struct {                                    /*!< SPI_SLV_REG Structure                                                 */
  
  union {
    __IO uint32_t  SPI_DATA;                        /*!< SPI_DATA                                                              */
    
    struct {
      __IO uint32_t  SPI_SLV_DATA:  8;              /*!< spi rx/tx fifo, write data will put data into tx fifo, read
                                                         can pop data from rx fifo, 16 byte depth fifo each                    */
    } SPI_DATA_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  SPI_TX_FIFO_CNT;                 /*!< SPI_TX_FIFO_CNT                                                       */
    
    struct {
      __I  uint32_t  WR_FF_CNT  :  5;               /*!< the tx fifo counter                                                   */
    } SPI_TX_FIFO_CNT_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  SPI_RX_FIFO_CNT;                 /*!< SPI_RX_FIFO_CNT                                                       */
    
    struct {
      __I  uint32_t  RD_FF_CNT  :  5;               /*!< the rx fifo counter                                                   */
    } SPI_RX_FIFO_CNT_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __O  uint32_t  SPI_TX_CLR;                      /*!< SPI_TX_CLR                                                            */
    
    struct {
      __O  uint32_t  SPI_WR_FIFO_CLR:  1;           /*!< write this bit to clear the tx fifo                                   */
    } SPI_TX_CLR_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __O  uint32_t  SPI_RX_CLR;                      /*!< SPI_RX_CLR                                                            */
    
    struct {
      __O  uint32_t  SPI_RD_FIFO_CLR:  1;           /*!< write this bit to clear the rx fifo                                   */
    } SPI_RX_CLR_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  SPI_INT;                         /*!< SPI_INT                                                               */
    
    struct {
      __I  uint32_t  RX_FIFO_NOT_EMPTY_INT:  1;     /*!< rx fifo have data to be fetch                                         */
      __I  uint32_t  TX_FIFO_NOT_EMPTY_INT:  1;     /*!< tx fifo not empty, inform the master to fetch the data                */
      __I  uint32_t  TX_FIFO_NOT_FULL_INT:  1;      /*!< tx fifo full, cannot write data into tx fifo                          */
    } SPI_INT_b;                                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  SPI_ENDIAN;                      /*!< SPI_ENDIAN                                                            */
    
    struct {
      __IO uint32_t  SPI_SLV_ENDIAN:  1;            /*!< this reg should be configured at initial procedure, dynamic
                                                         changing is not sugested                                              */
    } SPI_ENDIAN_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  SPI_ENABLE;                      /*!< SPI_ENABLE                                                            */
    
    struct {
      __IO uint32_t  CMD_MODE   :  1;               /*!< spi slave command mode enable signal                                  */
      __IO uint32_t  SPI_SLV_ENABLE:  1;            /*!< spi slave enable signal                                               */
    } SPI_ENABLE_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  SPI_NOP;                         /*!< SPI_NOP                                                               */
    
    struct {
      __IO uint32_t  SPI_SLV_NOP:  8;               /*!< spi tx will ouptu this byte if tx fifo is empty, this reg is
                                                         able to be change only at spi_slv_enable is 0                         */
    } SPI_NOP_b;                                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  SPI_ERR;                         /*!< SPI_ERR                                                               */
    
    struct {
      __IO uint32_t  SPI_SLV_RX_ERR:  1;            /*!< this bit will be 1 when rx fifo overflow, write one clear             */
      __IO uint32_t  SPI_EVT_L_ERR:  1;             /*!< this bit will be 1 when event length error, write one clear           */
      __IO uint32_t  SPI_CMD_L_ERR:  1;             /*!< this bit will be 1 when command length error, write one clear         */
    } SPI_ERR_b;                                    /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED;
  
  union {
    __IO uint32_t  SPI_EVT_TRIG;                    /*!< SPI_EVT_TRIG                                                          */
    
    struct {
      __IO uint32_t  EVT_TRIG   :  1;               /*!< set this bit 1 to trig dma move event data from sram                  */
           uint32_t             :  3;
      __I  uint32_t  EVT_STATE  :  1;               /*!< this bit can show the event is done or not by polling                 */
    } SPI_EVT_TRIG_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  SPI_INFO;                        /*!< SPI_INFO                                                              */
    
    struct {
      __IO uint32_t  SLV_INFO   : 32;               /*!< slave can use this register to set message and host can use
                                                         register command to get this information                              */
    } SPI_INFO_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  HOST_4_BYTE;                     /*!< HOST_4_BYTE                                                           */
    
    struct {
      __I  uint32_t  HOST_4_BYTE: 32;               /*!< this register is used to keep host commnad information,IND,
                                                         OP, LENGTH                                                            */
    } HOST_4_BYTE_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  W_ADDR;                          /*!< W_ADDR                                                                */
    
    struct {
      __IO uint32_t  W_ADDR     : 32;               /*!< host command data address                                             */
    } W_ADDR_b;                                     /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  R_ADDR;                          /*!< R_ADDR                                                                */
    
    struct {
      __IO uint32_t  R_ADDR     : 32;               /*!< slave event data address                                              */
    } R_ADDR_b;                                     /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  COMMAND_SET_INT_CLEAR;           /*!< COMMAND_SET_INT_CLEAR                                                 */
    
    struct {
      __IO uint32_t  CMD_DONE_INT:  1;              /*!< set this bit 1 to clear command done interrupt                        */
      __IO uint32_t  CMD_SET    :  1;               /*!< set this bit 1 to make sure the command data has been recived
                                                         by mcu & host can send next command if dont set this bit to
                                                          1, the host commnad data will be ingored                             */
    } COMMAND_SET_INT_CLEAR_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CMD_MAX_LENGTH;                  /*!< CMD_MAX_LENGTH                                                        */
    
    struct {
      __IO uint32_t  MAX_CMD_LENGTH:  9;            /*!< host command max length, if spi byte count > max_length, the
                                                         data will not be written to command sram and set command error
                                                          flag                                                                 */
    } CMD_MAX_LENGTH_b;                             /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED1;
  
  union {
    __IO uint32_t  SPI_EVT_LENGTH;                  /*!< SPI_EVT_LENGTH                                                        */
    
    struct {
      __IO uint32_t  EVT_LENGTH :  8;               /*!< spi event length                                                      */
    } SPI_EVT_LENGTH_b;                             /*!< BitSize                                                               */
  };
} CONDOR_SPI_SLV_REG_Type;


/* ================================================================================ */
/* ================                   SPI_MST_REG                  ================ */
/* ================================================================================ */


/**
  * @brief SPI_MST_REG  (SPI_MST_REG)
  */

typedef struct {                                    /*!< SPI_MST_REG Structure                                                 */
  
  union {
    __IO uint32_t  SPI_DELAY;                       /*!< SPI_DELAY                                                             */
    
    struct {
      __IO uint32_t  SPI_M_FRONT_DLY: 16;           /*!< the front delay of a spi transaction                                  */
      __IO uint32_t  SPI_M_BACK_DLY: 16;            /*!< the back delay of a spi transaction                                   */
    } SPI_DELAY_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  SPI_CLK_DIV;                     /*!< SPI_CLK_DIV                                                           */
    
    struct {
      __IO uint32_t  SPI_CLK_DIV: 16;               /*!< the speed of the spi clk                                              */
    } SPI_CLK_DIV_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  SPI_BUSY;                        /*!< SPI_BUSY                                                              */
    
    struct {
      __I  uint32_t  SPI_M_BUSY :  1;               /*!< this bit will read 1b1 when spi is busy                               */
    } SPI_BUSY_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __O  uint32_t  SPI_CLR;                         /*!< SPI_CLR                                                               */
    
    struct {
      __O  uint32_t  SPI_CLR    :  1;               /*!< write this bit to flush the cmd fifo                                  */
    } SPI_CLR_b;                                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  SPI_MODE;                        /*!< SPI_MODE                                                              */
    
    struct {
      __IO uint32_t  CPOL       :  1;               /*!< polarity of clk                                                       */
      __IO uint32_t  CPHA       :  1;               /*!< phase of data                                                         */
    } SPI_MODE_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  SPI_M_CFG;                       /*!< SPI_M_CFG                                                             */
    
    struct {
      __IO uint32_t  CSPOL      :  1;               /*!< polarity of csn                                                       */
      __IO uint32_t  INV_DATA   :  1;               /*!< polarity of data                                                      */
      __IO uint32_t  FAST_CLK   :  1;               /*!< this bit enable the flash using system clk                            */
      __IO uint32_t  AUTO_CSN   :  1;               /*!< this bit can enable the csn auto mode                                 */
      __IO uint32_t  THREE_WIRE :  6;               /*!< spi three wire mode setting, fill in any number will enable
                                                         three wire mode, and will trans the data line to input after
                                                          the number you fill in, ex. write this reg 3, data line will
                                                          output 3 bit then input after 3 bit                                  */
      __IO uint32_t  CONDOE_ENDIAN     :  1;               /*!< data endian, transmit MSB first is default                            */
      __IO uint32_t  EARLY_SAMPLE:  1;              /*!< can make the mosi transion at posative edge, only work at cpha
                                                         = 0                                                                   */
    } SPI_M_CFG_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  SPI_CFG;                         /*!< SPI_CFG                                                               */
    
    struct {
      __IO uint32_t  SPI_CSN    :  1;               /*!< if csn auto mode is disnable, this bit can configure the value
                                                         of csn                                                                */
    } SPI_CFG_b;                                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  SPI_MOSI_BUF;                    /*!< SPI_MOSI_BUF                                                          */
    
    struct {
      __IO uint32_t  SPI_MOSI_DATA:  8;             /*!< mosi data, write this register will trigger the SPI master transaction */
    } SPI_MOSI_BUF_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  SPI_MISO_BUF;                    /*!< SPI_MISO_BUF                                                          */
    
    struct {
      __I  uint32_t  SPI_MISO_DATA:  8;             /*!< miso data, can read the mosi data here                                */
    } SPI_MISO_BUF_b;                               /*!< BitSize                                                               */
  };
} CONDOR_SPI_MST_REG_Type;


/* ================================================================================ */
/* ================                 CSR_PAD_MUX_REG                ================ */
/* ================================================================================ */


/**
  * @brief CSR_PAD_MUX_REG  (CSR_PAD_MUX_REG)
  */

typedef struct {                                    /*!< CSR_PAD_MUX_REG Structure                                             */
  
  union {
    __IO uint32_t  PAD_INT1;                        /*!< PAD_INT1                                                              */
    
    struct {
      __IO uint32_t  INT1_SEL   :  4;               /*!< INT1pad mux select setting, 0: ext_intr_i, ds = 1b0, pue = 1b0,
                                                         pde = 1b1, ie = 1b1, oe = 1b0, od = 1b0. 1: vddq_25volt_en,
                                                          ds = 1b0, pue = 1b0, pde = 1b1, ie = 1b1, oe = 1b0, od = vddq_25volt_en_od
                                                         . 2: ext_intr_i, ds = 1b0, pue = 1b0, pde = 1b1, ie = 1b1, oe
                                                          = 1b0, od = 1b0. 3: no used, select to GPIO setting. 4: no used,
                                                          select to GPIO setting. 5: no used, select to GPIO setting.
                                                          6: spi_rly_nc, ds = 1b0, pue = 1b0, pde = 1b1, ie = spi_rly_nc_ie,
                                                          oe = spi_rly_nc_oe, od = spi_rly_nc_od. 7: no used, select           */
           uint32_t             : 12;
      __IO uint32_t  INT1_GPIO_OE:  1;              /*!< GPIO oe setting.                                                      */
      __IO uint32_t  INT1_GPIO_IE:  1;              /*!< GPIO ie setting.                                                      */
      __IO uint32_t  INT1_GPIO_PDE:  1;             /*!< GPIO pde setting.                                                     */
      __IO uint32_t  INT1_GPIO_PUE:  1;             /*!< GPIO pue setting.                                                     */
      __IO uint32_t  INT1_GPIO_DS:  1;              /*!< GPIO ds setting.                                                      */
           uint32_t             :  3;
      __IO uint32_t  INT1_OD_MANUAL_EN:  1;         /*!< enable INT1_od, use GPIO od setting.                                  */
      __IO uint32_t  INT1_OE_MANUAL_EN:  1;         /*!< enable INT1_oe, use GPIO oe setting.                                  */
      __IO uint32_t  INT1_IE_MANUAL_EN:  1;         /*!< enable INT1_ie, use GPIO ie setting.                                  */
      __IO uint32_t  INT1_PDE_MANUAL_EN:  1;        /*!< enable INT1_pde, use GPIO pde setting.                                */
      __IO uint32_t  INT1_PUE_MANUAL_EN:  1;        /*!< enable INT1_pue, use GPIO pue setting.                                */
      __IO uint32_t  INT1_DS_MANUAL_EN:  1;         /*!< enable INT1_ds, use GPIO ds setting.                                  */
    } PAD_INT1_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_INT0;                        /*!< PAD_INT0                                                              */
    
    struct {
      __IO uint32_t  INT0_SEL   :  4;               /*!< INT0pad mux select setting, 0: ext_intr_o, ds = 1b0, pue = 1b0,
                                                         pde = 1b0, ie = 1b0, oe = 1b1, od = ext_intr_o_od. 1: no used,
                                                          select to GPIO setting. 2: ext_intr_o, ds = 1b0, pue = 1b0,
                                                          pde = 1b0, ie = 1b0, oe = 1b1, od = ext_intr_o_od. 3: no used,
                                                          select to GPIO setting. 4: pwm0, ds = 1b1, pue = 1b0, pde =
                                                          1b0, ie = 1b0, oe = 1b1, od = pwm0_od. 5: no used, select to
                                                          GPIO setting. 6: spi_rly_wp, ds = 1b0, pue = 1b0, pde = 1b0,
                                                          ie = spi_rly_wp_ie, oe = spi_rly_wp_oe, od = spi_rly_wp_od.
                                                          7: no used, select                                                   */
           uint32_t             : 12;
      __IO uint32_t  INT0_GPIO_OE:  1;              /*!< GPIO oe setting.                                                      */
      __IO uint32_t  INT0_GPIO_IE:  1;              /*!< GPIO ie setting.                                                      */
      __IO uint32_t  INT0_GPIO_PDE:  1;             /*!< GPIO pde setting.                                                     */
      __IO uint32_t  INT0_GPIO_PUE:  1;             /*!< GPIO pue setting.                                                     */
      __IO uint32_t  INT0_GPIO_DS:  1;              /*!< GPIO ds setting.                                                      */
           uint32_t             :  3;
      __IO uint32_t  INT0_OD_MANUAL_EN:  1;         /*!< enable INT0_od, use GPIO od setting.                                  */
      __IO uint32_t  INT0_OE_MANUAL_EN:  1;         /*!< enable INT0_oe, use GPIO oe setting.                                  */
      __IO uint32_t  INT0_IE_MANUAL_EN:  1;         /*!< enable INT0_ie, use GPIO ie setting.                                  */
      __IO uint32_t  INT0_PDE_MANUAL_EN:  1;        /*!< enable INT0_pde, use GPIO pde setting.                                */
      __IO uint32_t  INT0_PUE_MANUAL_EN:  1;        /*!< enable INT0_pue, use GPIO pue setting.                                */
      __IO uint32_t  INT0_DS_MANUAL_EN:  1;         /*!< enable INT0_ds, use GPIO ds setting.                                  */
    } PAD_INT0_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_CMIF0;                       /*!< PAD_CMIF0                                                             */
    
    struct {
      __IO uint32_t  CMIF0_SEL  :  4;               /*!< CMIF0pad mux select setting, 0: comm0, ds = 1b0, pue = comm0_pue,
                                                         pde = comm0_pde, ie = comm0_ie, oe = comm0_oe, od = comm0_od.
                                                          1: no used, select to GPIO setting. 2: comm0, ds = 1b0, pue
                                                          = comm0_pue, pde = comm0_pde, ie = comm0_ie, oe = comm0_oe,
                                                          od = comm0_od. 3: no used, select to GPIO setting. 4: pwm1,
                                                          ds = 1b1, pue = 1b0, pde = 1b0, ie = 1b0, oe = 1b1, od = pwm1_od.
                                                          5: spi_m_clk, ds = 1b1, pue = 1b0, pde = 1b1, ie = 1b0, oe =
                                                          1b1, od = spi_m_clk_od. 6: spi_rly_clk, ds = 1b0, pue = 1b0,
                                                          pde = 1b1, ie =                                                      */
           uint32_t             : 12;
      __IO uint32_t  CMIF0_GPIO_OE:  1;             /*!< GPIO oe setting.                                                      */
      __IO uint32_t  CMIF0_GPIO_IE:  1;             /*!< GPIO ie setting.                                                      */
      __IO uint32_t  CMIF0_GPIO_PDE:  1;            /*!< GPIO pde setting.                                                     */
      __IO uint32_t  CMIF0_GPIO_PUE:  1;            /*!< GPIO pue setting.                                                     */
      __IO uint32_t  CMIF0_GPIO_DS:  1;             /*!< GPIO ds setting.                                                      */
           uint32_t             :  3;
      __IO uint32_t  CMIF0_OD_MANUAL_EN:  1;        /*!< enable CMIF0_od, use GPIO od setting.                                 */
      __IO uint32_t  CMIF0_OE_MANUAL_EN:  1;        /*!< enable CMIF0_oe, use GPIO oe setting.                                 */
      __IO uint32_t  CMIF0_IE_MANUAL_EN:  1;        /*!< enable CMIF0_ie, use GPIO ie setting.                                 */
      __IO uint32_t  CMIF0_PDE_MANUAL_EN:  1;       /*!< enable CMIF0_pde, use GPIO pde setting.                               */
      __IO uint32_t  CMIF0_PUE_MANUAL_EN:  1;       /*!< enable CMIF0_pue, use GPIO pue setting.                               */
      __IO uint32_t  CMIF0_DS_MANUAL_EN:  1;        /*!< enable CMIF0_ds, use GPIO ds setting.                                 */
    } PAD_CMIF0_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_CMIF1;                       /*!< PAD_CMIF1                                                             */
    
    struct {
      __IO uint32_t  CMIF1_SEL  :  4;               /*!< CMIF1pad mux select setting, 0: comm1, ds = 1b0, pue = comm1_pue,
                                                         pde = comm1_pde, ie = comm1_ie, oe = comm1_oe, od = comm1_od.
                                                          1: no used, select to GPIO setting. 2: comm1, ds = 1b0, pue
                                                          = comm1_pue, pde = comm1_pde, ie = comm1_ie, oe = comm1_oe,
                                                          od = comm1_od. 3: no used, select to GPIO setting. 4: pwm2,
                                                          ds = 1b1, pue = 1b0, pde = 1b0, ie = 1b0, oe = 1b1, od = pwm2_od.
                                                          5: spi_m_miso, ds = 1b0, pue = 1b0, pde = 1b1, ie = 1b1, oe
                                                          = 1b0, od = 1b0. 6: spi_rly_csn, ds = 1b0, pue = 1b1, pde =
                                                          1b0, ie = spi_rly                                                    */
           uint32_t             : 12;
      __IO uint32_t  CMIF1_GPIO_OE:  1;             /*!< GPIO oe setting.                                                      */
      __IO uint32_t  CMIF1_GPIO_IE:  1;             /*!< GPIO ie setting.                                                      */
      __IO uint32_t  CMIF1_GPIO_PDE:  1;            /*!< GPIO pde setting.                                                     */
      __IO uint32_t  CMIF1_GPIO_PUE:  1;            /*!< GPIO pue setting.                                                     */
      __IO uint32_t  CMIF1_GPIO_DS:  1;             /*!< GPIO ds setting.                                                      */
           uint32_t             :  3;
      __IO uint32_t  CMIF1_OD_MANUAL_EN:  1;        /*!< enable CMIF1_od, use GPIO od setting.                                 */
      __IO uint32_t  CMIF1_OE_MANUAL_EN:  1;        /*!< enable CMIF1_oe, use GPIO oe setting.                                 */
      __IO uint32_t  CMIF1_IE_MANUAL_EN:  1;        /*!< enable CMIF1_ie, use GPIO ie setting.                                 */
      __IO uint32_t  CMIF1_PDE_MANUAL_EN:  1;       /*!< enable CMIF1_pde, use GPIO pde setting.                               */
      __IO uint32_t  CMIF1_PUE_MANUAL_EN:  1;       /*!< enable CMIF1_pue, use GPIO pue setting.                               */
      __IO uint32_t  CMIF1_DS_MANUAL_EN:  1;        /*!< enable CMIF1_ds, use GPIO ds setting.                                 */
    } PAD_CMIF1_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_CMIF2;                       /*!< PAD_CMIF2                                                             */
    
    struct {
      __IO uint32_t  CMIF2_SEL  :  4;               /*!< CMIF2pad mux select setting, 0: comm2, ds = 1b1, pue = comm2_pue,
                                                         pde = comm2_pde, ie = comm2_ie, oe = comm2_oe, od = comm2_od.
                                                          1: no used, select to GPIO setting. 2: comm2, ds = 1b1, pue
                                                          = comm2_pue, pde = comm2_pde, ie = comm2_ie, oe = comm2_oe,
                                                          od = comm2_od. 3: no used, select to GPIO setting. 4: pwm3,
                                                          ds = 1b1, pue = 1b0, pde = 1b0, ie = 1b0, oe = 1b1, od = pwm3_od.
                                                          5: spi_m_csn, ds = 1b1, pue = 1b1, pde = 1b0, ie = 1b0, oe =
                                                          1b1, od = spi_m_csn_od. 6: spi_rly_miso, ds = 1b0, pue = 1b0,
                                                          pde = 1b1, ie                                                        */
           uint32_t             : 12;
      __IO uint32_t  CMIF2_GPIO_OE:  1;             /*!< GPIO oe setting.                                                      */
      __IO uint32_t  CMIF2_GPIO_IE:  1;             /*!< GPIO ie setting.                                                      */
      __IO uint32_t  CMIF2_GPIO_PDE:  1;            /*!< GPIO pde setting.                                                     */
      __IO uint32_t  CMIF2_GPIO_PUE:  1;            /*!< GPIO pue setting.                                                     */
      __IO uint32_t  CMIF2_GPIO_DS:  1;             /*!< GPIO ds setting.                                                      */
           uint32_t             :  3;
      __IO uint32_t  CMIF2_OD_MANUAL_EN:  1;        /*!< enable CMIF2_od, use GPIO od setting.                                 */
      __IO uint32_t  CMIF2_OE_MANUAL_EN:  1;        /*!< enable CMIF2_oe, use GPIO oe setting.                                 */
      __IO uint32_t  CMIF2_IE_MANUAL_EN:  1;        /*!< enable CMIF2_ie, use GPIO ie setting.                                 */
      __IO uint32_t  CMIF2_PDE_MANUAL_EN:  1;       /*!< enable CMIF2_pde, use GPIO pde setting.                               */
      __IO uint32_t  CMIF2_PUE_MANUAL_EN:  1;       /*!< enable CMIF2_pue, use GPIO pue setting.                               */
      __IO uint32_t  CMIF2_DS_MANUAL_EN:  1;        /*!< enable CMIF2_ds, use GPIO ds setting.                                 */
    } PAD_CMIF2_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_CMIF3;                       /*!< PAD_CMIF3                                                             */
    
    struct {
      __IO uint32_t  CMIF3_SEL  :  4;               /*!< CMIF3pad mux select setting, 0: comm3, ds = 1b0, pue = comm3_pue,
                                                         pde = comm3_pde, ie = comm3_ie, oe = comm3_oe, od = comm3_od.
                                                          1: no used, select to GPIO setting. 2: comm3, ds = 1b0, pue
                                                          = comm3_pue, pde = comm3_pde, ie = comm3_ie, oe = comm3_oe,
                                                          od = comm3_od. 3: no used, select to GPIO setting. 4: pwm4,
                                                          ds = 1b1, pue = 1b0, pde = 1b0, ie = 1b0, oe = 1b1, od = pwm4_od.
                                                          5: spi_m_mosi, ds = 1b1, pue = 1b0, pde = 1b1, ie = spi_m_mosi_ie,
                                                          oe = spi_m_mosi_oe, od = spi_m_mosi_od. 6: spi_rly_mosi, ds
                                                          = 1b0, pue                                                           */
           uint32_t             : 12;
      __IO uint32_t  CMIF3_GPIO_OE:  1;             /*!< GPIO oe setting.                                                      */
      __IO uint32_t  CMIF3_GPIO_IE:  1;             /*!< GPIO ie setting.                                                      */
      __IO uint32_t  CMIF3_GPIO_PDE:  1;            /*!< GPIO pde setting.                                                     */
      __IO uint32_t  CMIF3_GPIO_PUE:  1;            /*!< GPIO pue setting.                                                     */
      __IO uint32_t  CMIF3_GPIO_DS:  1;             /*!< GPIO ds setting.                                                      */
           uint32_t             :  3;
      __IO uint32_t  CMIF3_OD_MANUAL_EN:  1;        /*!< enable CMIF3_od, use GPIO od setting.                                 */
      __IO uint32_t  CMIF3_OE_MANUAL_EN:  1;        /*!< enable CMIF3_oe, use GPIO oe setting.                                 */
      __IO uint32_t  CMIF3_IE_MANUAL_EN:  1;        /*!< enable CMIF3_ie, use GPIO ie setting.                                 */
      __IO uint32_t  CMIF3_PDE_MANUAL_EN:  1;       /*!< enable CMIF3_pde, use GPIO pde setting.                               */
      __IO uint32_t  CMIF3_PUE_MANUAL_EN:  1;       /*!< enable CMIF3_pue, use GPIO pue setting.                               */
      __IO uint32_t  CMIF3_DS_MANUAL_EN:  1;        /*!< enable CMIF3_ds, use GPIO ds setting.                                 */
    } PAD_CMIF3_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_SPIF_DI;                     /*!< PAD_SPIF_DI                                                           */
    
    struct {
      __IO uint32_t  SPIF_DI_SEL:  4;               /*!< SPIF_DIpad mux select setting, 0: spi_f_miso, ds = 1b0, pue
                                                         = 1b0, pde = 1b1, ie = spi_f_miso_ie, oe = spi_f_miso_oe, od
                                                          = spi_f_miso_od. 1: no used, select to GPIO setting. 2: spi_f_miso,
                                                          ds = 1b0, pue = 1b0, pde = 1b1, ie = spi_f_miso_ie, oe = spi_f_miso_oe,
                                                          od = spi_f_miso_od. 3: no used, select to GPIO setting. 4: no
                                                          used, select to GPIO setting. 5: no used, select to GPIO setting.
                                                          6: no used, select to GPIO setting. 7: no used, select to GPIO
                                                          setting. 8: no used, select to GPIO setting. 9: no used, se          */
           uint32_t             : 12;
      __IO uint32_t  SPIF_DI_GPIO_OE:  1;           /*!< GPIO oe setting.                                                      */
      __IO uint32_t  SPIF_DI_GPIO_IE:  1;           /*!< GPIO ie setting.                                                      */
      __IO uint32_t  SPIF_DI_GPIO_PDE:  1;          /*!< GPIO pde setting.                                                     */
      __IO uint32_t  SPIF_DI_GPIO_PUE:  1;          /*!< GPIO pue setting.                                                     */
      __IO uint32_t  SPIF_DI_GPIO_DS:  1;           /*!< GPIO ds setting.                                                      */
           uint32_t             :  3;
      __IO uint32_t  SPIF_DI_OD_MANUAL_EN:  1;      /*!< enable SPIF_DI_od, use GPIO od setting.                               */
      __IO uint32_t  SPIF_DI_OE_MANUAL_EN:  1;      /*!< enable SPIF_DI_oe, use GPIO oe setting.                               */
      __IO uint32_t  SPIF_DI_IE_MANUAL_EN:  1;      /*!< enable SPIF_DI_ie, use GPIO ie setting.                               */
      __IO uint32_t  SPIF_DI_PDE_MANUAL_EN:  1;     /*!< enable SPIF_DI_pde, use GPIO pde setting.                             */
      __IO uint32_t  SPIF_DI_PUE_MANUAL_EN:  1;     /*!< enable SPIF_DI_pue, use GPIO pue setting.                             */
      __IO uint32_t  SPIF_DI_DS_MANUAL_EN:  1;      /*!< enable SPIF_DI_ds, use GPIO ds setting.                               */
    } PAD_SPIF_DI_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_SPIF_CLK;                    /*!< PAD_SPIF_CLK                                                          */
    
    struct {
      __IO uint32_t  SPIF_CLK_SEL:  4;              /*!< SPIF_CLKpad mux select setting, 0: spi_f_clk, ds = 1b1, pue
                                                         = 1b0, pde = 1b1, ie = 1b1, oe = spi_f_clk_oe, od = spi_f_clk_od.
                                                          1: no used, select to GPIO setting. 2: spi_f_clk, ds = 1b1,
                                                          pue = 1b0, pde = 1b1, ie = 1b1, oe = spi_f_clk_oe, od = spi_f_clk_od.
                                                          3: no used, select to GPIO setting. 4: no used, select to GPIO
                                                          setting. 5: no used, select to GPIO setting. 6: no used, select
                                                          to GPIO setting. 7: no used, select to GPIO setting. 8: no used,
                                                          select to GPIO setting. 9: no used, select to GPIO setting.          */
           uint32_t             : 12;
      __IO uint32_t  SPIF_CLK_GPIO_OE:  1;          /*!< GPIO oe setting.                                                      */
      __IO uint32_t  SPIF_CLK_GPIO_IE:  1;          /*!< GPIO ie setting.                                                      */
      __IO uint32_t  SPIF_CLK_GPIO_PDE:  1;         /*!< GPIO pde setting.                                                     */
      __IO uint32_t  SPIF_CLK_GPIO_PUE:  1;         /*!< GPIO pue setting.                                                     */
      __IO uint32_t  SPIF_CLK_GPIO_DS:  1;          /*!< GPIO ds setting.                                                      */
           uint32_t             :  3;
      __IO uint32_t  SPIF_CLK_OD_MANUAL_EN:  1;     /*!< enable SPIF_CLK_od, use GPIO od setting.                              */
      __IO uint32_t  SPIF_CLK_OE_MANUAL_EN:  1;     /*!< enable SPIF_CLK_oe, use GPIO oe setting.                              */
      __IO uint32_t  SPIF_CLK_IE_MANUAL_EN:  1;     /*!< enable SPIF_CLK_ie, use GPIO ie setting.                              */
      __IO uint32_t  SPIF_CLK_PDE_MANUAL_EN:  1;    /*!< enable SPIF_CLK_pde, use GPIO pde setting.                            */
      __IO uint32_t  SPIF_CLK_PUE_MANUAL_EN:  1;    /*!< enable SPIF_CLK_pue, use GPIO pue setting.                            */
      __IO uint32_t  SPIF_CLK_DS_MANUAL_EN:  1;     /*!< enable SPIF_CLK_ds, use GPIO ds setting.                              */
    } PAD_SPIF_CLK_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_SPIF_HOLD;                   /*!< PAD_SPIF_HOLD                                                         */
    
    struct {
      __IO uint32_t  SPIF_HOLD_SEL:  4;             /*!< SPIF_HOLDpad mux select setting, 0: spi_f_hold, ds = 1b0, pue
                                                         = 1b1, pde = 1b0, ie = spi_f_hold_ie, oe = spi_f_hold_oe, od
                                                          = spi_f_hold_od. 1: no used, select to GPIO setting. 2: spi_f_hold,
                                                          ds = 1b0, pue = 1b0, pde = 1b1, ie = spi_f_hold_ie, oe = spi_f_hold_oe,
                                                          od = spi_f_hold_od. 3: no used, select to GPIO setting. 4: no
                                                          used, select to GPIO setting. 5: no used, select to GPIO setting.
                                                          6: no used, select to GPIO setting. 7: no used, select to GPIO
                                                          setting. 8: no used, select to GPIO setting. 9: no used,             */
           uint32_t             : 12;
      __IO uint32_t  SPIF_HOLD_GPIO_OE:  1;         /*!< GPIO oe setting.                                                      */
      __IO uint32_t  SPIF_HOLD_GPIO_IE:  1;         /*!< GPIO ie setting.                                                      */
      __IO uint32_t  SPIF_HOLD_GPIO_PDE:  1;        /*!< GPIO pde setting.                                                     */
      __IO uint32_t  SPIF_HOLD_GPIO_PUE:  1;        /*!< GPIO pue setting.                                                     */
      __IO uint32_t  SPIF_HOLD_GPIO_DS:  1;         /*!< GPIO ds setting.                                                      */
           uint32_t             :  3;
      __IO uint32_t  SPIF_HOLD_OD_MANUAL_EN:  1;    /*!< enable SPIF_HOLD_od, use GPIO od setting.                             */
      __IO uint32_t  SPIF_HOLD_OE_MANUAL_EN:  1;    /*!< enable SPIF_HOLD_oe, use GPIO oe setting.                             */
      __IO uint32_t  SPIF_HOLD_IE_MANUAL_EN:  1;    /*!< enable SPIF_HOLD_ie, use GPIO ie setting.                             */
      __IO uint32_t  SPIF_HOLD_PDE_MANUAL_EN:  1;   /*!< enable SPIF_HOLD_pde, use GPIO pde setting.                           */
      __IO uint32_t  SPIF_HOLD_PUE_MANUAL_EN:  1;   /*!< enable SPIF_HOLD_pue, use GPIO pue setting.                           */
      __IO uint32_t  SPIF_HOLD_DS_MANUAL_EN:  1;    /*!< enable SPIF_HOLD_ds, use GPIO ds setting.                             */
    } PAD_SPIF_HOLD_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_I2C0;                        /*!< PAD_I2C0                                                              */
    
    struct {
      __IO uint32_t  I2C0_SEL   :  4;               /*!< I2C0pad mux select setting, 0: no used, select to GPIO setting.
                                                         1: no used, select to GPIO setting. 2: i2c_m_sda, ds = 1b1,
                                                          pue = 1b1, pde = 1b0, ie = 1b1, oe = i2c_m_sda_oe, od = i2c_m_sda_od.
                                                          3: i2c_m_scl, ds = 1b1, pue = 1b1, pde = 1b0, ie = 1b1, oe =
                                                          i2c_m_scl_oe, od = i2c_m_scl_od. 4: no used, select to GPIO
                                                          setting. 5: no used, select to GPIO setting. 6: no used, select
                                                          to GPIO setting. 7: no used, select to GPIO setting. 8: phy_tbus_o[1],
                                                          ds = 1b0, pue = 1b0, pde = 1b0, ie = 1b0, oe = 1b1, od = phy_        */
           uint32_t             : 12;
      __IO uint32_t  I2C0_GPIO_OE:  1;              /*!< GPIO oe setting.                                                      */
      __IO uint32_t  I2C0_GPIO_IE:  1;              /*!< GPIO ie setting.                                                      */
      __IO uint32_t  I2C0_GPIO_PDE:  1;             /*!< GPIO pde setting.                                                     */
      __IO uint32_t  I2C0_GPIO_PUE:  1;             /*!< GPIO pue setting.                                                     */
      __IO uint32_t  I2C0_GPIO_DS:  1;              /*!< GPIO ds setting.                                                      */
           uint32_t             :  3;
      __IO uint32_t  I2C0_OD_MANUAL_EN:  1;         /*!< enable I2C0_od, use GPIO od setting.                                  */
      __IO uint32_t  I2C0_OE_MANUAL_EN:  1;         /*!< enable I2C0_oe, use GPIO oe setting.                                  */
      __IO uint32_t  I2C0_IE_MANUAL_EN:  1;         /*!< enable I2C0_ie, use GPIO ie setting.                                  */
      __IO uint32_t  I2C0_PDE_MANUAL_EN:  1;        /*!< enable I2C0_pde, use GPIO pde setting.                                */
      __IO uint32_t  I2C0_PUE_MANUAL_EN:  1;        /*!< enable I2C0_pue, use GPIO pue setting.                                */
      __IO uint32_t  I2C0_DS_MANUAL_EN:  1;         /*!< enable I2C0_ds, use GPIO ds setting.                                  */
    } PAD_I2C0_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_I2C1;                        /*!< PAD_I2C1                                                              */
    
    struct {
      __IO uint32_t  I2C1_SEL   :  4;               /*!< I2C1pad mux select setting, 0: no used, select to GPIO setting.
                                                         1: no used, select to GPIO setting. 2: i2c_m_scl, ds = 1b1,
                                                          pue = 1b1, pde = 1b0, ie = 1b1, oe = i2c_m_scl_oe, od = i2c_m_scl_od.
                                                          3: i2c_m_sda, ds = 1b1, pue = 1b1, pde = 1b0, ie = 1b1, oe =
                                                          i2c_m_sda_oe, od = i2c_m_sda_od. 4: no used, select to GPIO
                                                          setting. 5: no used, select to GPIO setting. 6: no used, select
                                                          to GPIO setting. 7: no used, select to GPIO setting. 8: phy_tbus_o[2],
                                                          ds = 1b0, pue = 1b0, pde = 1b0, ie = 1b0, oe = 1b1, od = phy_        */
           uint32_t             : 12;
      __IO uint32_t  I2C1_GPIO_OE:  1;              /*!< GPIO oe setting.                                                      */
      __IO uint32_t  I2C1_GPIO_IE:  1;              /*!< GPIO ie setting.                                                      */
      __IO uint32_t  I2C1_GPIO_PDE:  1;             /*!< GPIO pde setting.                                                     */
      __IO uint32_t  I2C1_GPIO_PUE:  1;             /*!< GPIO pue setting.                                                     */
      __IO uint32_t  I2C1_GPIO_DS:  1;              /*!< GPIO ds setting.                                                      */
           uint32_t             :  3;
      __IO uint32_t  I2C1_OD_MANUAL_EN:  1;         /*!< enable I2C1_od, use GPIO od setting.                                  */
      __IO uint32_t  I2C1_OE_MANUAL_EN:  1;         /*!< enable I2C1_oe, use GPIO oe setting.                                  */
      __IO uint32_t  I2C1_IE_MANUAL_EN:  1;         /*!< enable I2C1_ie, use GPIO ie setting.                                  */
      __IO uint32_t  I2C1_PDE_MANUAL_EN:  1;        /*!< enable I2C1_pde, use GPIO pde setting.                                */
      __IO uint32_t  I2C1_PUE_MANUAL_EN:  1;        /*!< enable I2C1_pue, use GPIO pue setting.                                */
      __IO uint32_t  I2C1_DS_MANUAL_EN:  1;         /*!< enable I2C1_ds, use GPIO ds setting.                                  */
    } PAD_I2C1_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_I2C_SDA;                     /*!< PAD_I2C_SDA                                                           */
    
    struct {
      __IO uint32_t  I2C_SDA_SEL:  4;               /*!< I2C_SDApad mux select setting, 0: i2c_s_sda, ds = 1b1, pue =
                                                         1b1, pde = 1b0, ie = 1b1, oe = i2c_s_sda_oe, od = i2c_s_sda_od.
                                                          1: no used, select to GPIO setting. 2: i2c_s_sda, ds = 1b1,
                                                          pue = 1b1, pde = 1b0, ie = 1b1, oe = i2c_s_sda_oe, od = i2c_s_sda_od.
                                                          3: no used, select to GPIO setting. 4: no used, select to GPIO
                                                          setting. 5: no used, select to GPIO setting. 6: no used, select
                                                          to GPIO setting. 7: no used, select to GPIO setting. 8: no used,
                                                          select to GPIO setting. 9: no used, select to GPIO setting.          */
           uint32_t             : 12;
      __IO uint32_t  I2C_SDA_GPIO_OE:  1;           /*!< GPIO oe setting.                                                      */
      __IO uint32_t  I2C_SDA_GPIO_IE:  1;           /*!< GPIO ie setting.                                                      */
      __IO uint32_t  I2C_SDA_GPIO_PDE:  1;          /*!< GPIO pde setting.                                                     */
      __IO uint32_t  I2C_SDA_GPIO_PUE:  1;          /*!< GPIO pue setting.                                                     */
      __IO uint32_t  I2C_SDA_GPIO_DS:  1;           /*!< GPIO ds setting.                                                      */
           uint32_t             :  3;
      __IO uint32_t  I2C_SDA_OD_MANUAL_EN:  1;      /*!< enable I2C_SDA_od, use GPIO od setting.                               */
      __IO uint32_t  I2C_SDA_OE_MANUAL_EN:  1;      /*!< enable I2C_SDA_oe, use GPIO oe setting.                               */
      __IO uint32_t  I2C_SDA_IE_MANUAL_EN:  1;      /*!< enable I2C_SDA_ie, use GPIO ie setting.                               */
      __IO uint32_t  I2C_SDA_PDE_MANUAL_EN:  1;     /*!< enable I2C_SDA_pde, use GPIO pde setting.                             */
      __IO uint32_t  I2C_SDA_PUE_MANUAL_EN:  1;     /*!< enable I2C_SDA_pue, use GPIO pue setting.                             */
      __IO uint32_t  I2C_SDA_DS_MANUAL_EN:  1;      /*!< enable I2C_SDA_ds, use GPIO ds setting.                               */
    } PAD_I2C_SDA_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_I2C_SCL;                     /*!< PAD_I2C_SCL                                                           */
    
    struct {
      __IO uint32_t  I2C_SCL_SEL:  4;               /*!< I2C_SCLpad mux select setting, 0: i2c_s_scl, ds = 1b1, pue =
                                                         1b1, pde = 1b0, ie = 1b1, oe = i2c_s_scl_oe, od = i2c_s_scl_od.
                                                          1: no used, select to GPIO setting. 2: i2c_s_scl, ds = 1b1,
                                                          pue = 1b1, pde = 1b0, ie = 1b1, oe = i2c_s_scl_oe, od = i2c_s_scl_od.
                                                          3: no used, select to GPIO setting. 4: no used, select to GPIO
                                                          setting. 5: no used, select to GPIO setting. 6: no used, select
                                                          to GPIO setting. 7: no used, select to GPIO setting. 8: no used,
                                                          select to GPIO setting. 9: no used, select to GPIO setting.          */
           uint32_t             : 12;
      __IO uint32_t  I2C_SCL_GPIO_OE:  1;           /*!< GPIO oe setting.                                                      */
      __IO uint32_t  I2C_SCL_GPIO_IE:  1;           /*!< GPIO ie setting.                                                      */
      __IO uint32_t  I2C_SCL_GPIO_PDE:  1;          /*!< GPIO pde setting.                                                     */
      __IO uint32_t  I2C_SCL_GPIO_PUE:  1;          /*!< GPIO pue setting.                                                     */
      __IO uint32_t  I2C_SCL_GPIO_DS:  1;           /*!< GPIO ds setting.                                                      */
           uint32_t             :  3;
      __IO uint32_t  I2C_SCL_OD_MANUAL_EN:  1;      /*!< enable I2C_SCL_od, use GPIO od setting.                               */
      __IO uint32_t  I2C_SCL_OE_MANUAL_EN:  1;      /*!< enable I2C_SCL_oe, use GPIO oe setting.                               */
      __IO uint32_t  I2C_SCL_IE_MANUAL_EN:  1;      /*!< enable I2C_SCL_ie, use GPIO ie setting.                               */
      __IO uint32_t  I2C_SCL_PDE_MANUAL_EN:  1;     /*!< enable I2C_SCL_pde, use GPIO pde setting.                             */
      __IO uint32_t  I2C_SCL_PUE_MANUAL_EN:  1;     /*!< enable I2C_SCL_pue, use GPIO pue setting.                             */
      __IO uint32_t  I2C_SCL_DS_MANUAL_EN:  1;      /*!< enable I2C_SCL_ds, use GPIO ds setting.                               */
    } PAD_I2C_SCL_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_UART0;                       /*!< PAD_UART0                                                             */
    
    struct {
      __IO uint32_t  UART0_SEL  :  4;               /*!< UART0pad mux select setting, 0: no used, select to GPIO setting.
                                                         1: no used, select to GPIO setting. 2: dat_uart_txd, ds = 1b0,
                                                          pue = 1b1, pde = 1b0, ie = 1b0, oe = 1b1, od = dat_uart_txd_od.
                                                          3: dat_uart_rxd, ds = 1b0, pue = 1b1, pde = 1b0, ie = 1b1, oe
                                                          = 1b0, od = 1b0. 4: no used, select to GPIO setting. 5: no used,
                                                          select to GPIO setting. 6: no used, select to GPIO setting.
                                                          7: no used, select to GPIO setting. 8: phy_tbus_o[3], ds = 1b0,
                                                          pue = 1b0, pde = 1b0, ie = 1b0, oe = 1b1, od = phy_tbus_o_3_od.
                                                          9: t                                                                 */
           uint32_t             : 12;
      __IO uint32_t  UART0_GPIO_OE:  1;             /*!< GPIO oe setting.                                                      */
      __IO uint32_t  UART0_GPIO_IE:  1;             /*!< GPIO ie setting.                                                      */
      __IO uint32_t  UART0_GPIO_PDE:  1;            /*!< GPIO pde setting.                                                     */
      __IO uint32_t  UART0_GPIO_PUE:  1;            /*!< GPIO pue setting.                                                     */
      __IO uint32_t  UART0_GPIO_DS:  1;             /*!< GPIO ds setting.                                                      */
           uint32_t             :  3;
      __IO uint32_t  UART0_OD_MANUAL_EN:  1;        /*!< enable UART0_od, use GPIO od setting.                                 */
      __IO uint32_t  UART0_OE_MANUAL_EN:  1;        /*!< enable UART0_oe, use GPIO oe setting.                                 */
      __IO uint32_t  UART0_IE_MANUAL_EN:  1;        /*!< enable UART0_ie, use GPIO ie setting.                                 */
      __IO uint32_t  UART0_PDE_MANUAL_EN:  1;       /*!< enable UART0_pde, use GPIO pde setting.                               */
      __IO uint32_t  UART0_PUE_MANUAL_EN:  1;       /*!< enable UART0_pue, use GPIO pue setting.                               */
      __IO uint32_t  UART0_DS_MANUAL_EN:  1;        /*!< enable UART0_ds, use GPIO ds setting.                                 */
    } PAD_UART0_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_UART1;                       /*!< PAD_UART1                                                             */
    
    struct {
      __IO uint32_t  UART1_SEL  :  4;               /*!< UART1pad mux select setting, 0: no used, select to GPIO setting.
                                                         1: no used, select to GPIO setting. 2: dat_uart_rxd, ds = 1b0,
                                                          pue = 1b1, pde = 1b0, ie = 1b1, oe = 1b0, od = 1b0. 3: dat_uart_txd,
                                                          ds = 1b0, pue = 1b1, pde = 1b0, ie = 1b0, oe = 1b1, od = dat_uart_txd_od.
                                                          4: no used, select to GPIO setting. 5: no used, select to GPIO
                                                          setting. 6: no used, select to GPIO setting. 7: int_gpio_irq,
                                                          ds = 1b0, pue = 1b0, pde = 1b0, ie = 1b0, oe = 1b1, od = int_gpio_irq_od.
                                                          8: phy_tbus_o[4], ds = 1b0, pue = 1b0, pd                            */
           uint32_t             : 12;
      __IO uint32_t  UART1_GPIO_OE:  1;             /*!< GPIO oe setting.                                                      */
      __IO uint32_t  UART1_GPIO_IE:  1;             /*!< GPIO ie setting.                                                      */
      __IO uint32_t  UART1_GPIO_PDE:  1;            /*!< GPIO pde setting.                                                     */
      __IO uint32_t  UART1_GPIO_PUE:  1;            /*!< GPIO pue setting.                                                     */
      __IO uint32_t  UART1_GPIO_DS:  1;             /*!< GPIO ds setting.                                                      */
           uint32_t             :  3;
      __IO uint32_t  UART1_OD_MANUAL_EN:  1;        /*!< enable UART1_od, use GPIO od setting.                                 */
      __IO uint32_t  UART1_OE_MANUAL_EN:  1;        /*!< enable UART1_oe, use GPIO oe setting.                                 */
      __IO uint32_t  UART1_IE_MANUAL_EN:  1;        /*!< enable UART1_ie, use GPIO ie setting.                                 */
      __IO uint32_t  UART1_PDE_MANUAL_EN:  1;       /*!< enable UART1_pde, use GPIO pde setting.                               */
      __IO uint32_t  UART1_PUE_MANUAL_EN:  1;       /*!< enable UART1_pue, use GPIO pue setting.                               */
      __IO uint32_t  UART1_DS_MANUAL_EN:  1;        /*!< enable UART1_ds, use GPIO ds setting.                                 */
    } PAD_UART1_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_SPIF_CS;                     /*!< PAD_SPIF_CS                                                           */
    
    struct {
      __IO uint32_t  SPIF_CS_SEL:  4;               /*!< SPIF_CSpad mux select setting, 0: spi_f_csn, ds = 1b1, pue =
                                                         1b1, pde = 1b0, ie = 1b0, oe = spi_f_csn_oe, od = spi_f_csn_od.
                                                          1: no used, select to GPIO setting. 2: spi_f_csn, ds = 1b1,
                                                          pue = 1b1, pde = 1b0, ie = 1b0, oe = spi_f_csn_oe, od = spi_f_csn_od.
                                                          3: no used, select to GPIO setting. 4: no used, select to GPIO
                                                          setting. 5: no used, select to GPIO setting. 6: no used, select
                                                          to GPIO setting. 7: no used, select to GPIO setting. 8: no used,
                                                          select to GPIO setting. 9: no used, select to GPIO setting.          */
           uint32_t             : 12;
      __IO uint32_t  SPIF_CS_GPIO_OE:  1;           /*!< GPIO oe setting.                                                      */
      __IO uint32_t  SPIF_CS_GPIO_IE:  1;           /*!< GPIO ie setting.                                                      */
      __IO uint32_t  SPIF_CS_GPIO_PDE:  1;          /*!< GPIO pde setting.                                                     */
      __IO uint32_t  SPIF_CS_GPIO_PUE:  1;          /*!< GPIO pue setting.                                                     */
      __IO uint32_t  SPIF_CS_GPIO_DS:  1;           /*!< GPIO ds setting.                                                      */
           uint32_t             :  3;
      __IO uint32_t  SPIF_CS_OD_MANUAL_EN:  1;      /*!< enable SPIF_CS_od, use GPIO od setting.                               */
      __IO uint32_t  SPIF_CS_OE_MANUAL_EN:  1;      /*!< enable SPIF_CS_oe, use GPIO oe setting.                               */
      __IO uint32_t  SPIF_CS_IE_MANUAL_EN:  1;      /*!< enable SPIF_CS_ie, use GPIO ie setting.                               */
      __IO uint32_t  SPIF_CS_PDE_MANUAL_EN:  1;     /*!< enable SPIF_CS_pde, use GPIO pde setting.                             */
      __IO uint32_t  SPIF_CS_PUE_MANUAL_EN:  1;     /*!< enable SPIF_CS_pue, use GPIO pue setting.                             */
      __IO uint32_t  SPIF_CS_DS_MANUAL_EN:  1;      /*!< enable SPIF_CS_ds, use GPIO ds setting.                               */
    } PAD_SPIF_CS_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_SPIF_DO;                     /*!< PAD_SPIF_DO                                                           */
    
    struct {
      __IO uint32_t  SPIF_DO_SEL:  4;               /*!< SPIF_DOpad mux select setting, 0: spi_f_mosi, ds = 1b1, pue
                                                         = 1b0, pde = 1b1, ie = spi_f_mosi_ie, oe = spi_f_mosi_oe, od
                                                          = spi_f_mosi_od. 1: no used, select to GPIO setting. 2: spi_f_mosi,
                                                          ds = 1b1, pue = 1b0, pde = 1b1, ie = spi_f_mosi_ie, oe = spi_f_mosi_oe,
                                                          od = spi_f_mosi_od. 3: no used, select to GPIO setting. 4: no
                                                          used, select to GPIO setting. 5: no used, select to GPIO setting.
                                                          6: no used, select to GPIO setting. 7: no used, select to GPIO
                                                          setting. 8: no used, select to GPIO setting. 9: no used, se          */
           uint32_t             : 12;
      __IO uint32_t  SPIF_DO_GPIO_OE:  1;           /*!< GPIO oe setting.                                                      */
      __IO uint32_t  SPIF_DO_GPIO_IE:  1;           /*!< GPIO ie setting.                                                      */
      __IO uint32_t  SPIF_DO_GPIO_PDE:  1;          /*!< GPIO pde setting.                                                     */
      __IO uint32_t  SPIF_DO_GPIO_PUE:  1;          /*!< GPIO pue setting.                                                     */
      __IO uint32_t  SPIF_DO_GPIO_DS:  1;           /*!< GPIO ds setting.                                                      */
           uint32_t             :  3;
      __IO uint32_t  SPIF_DO_OD_MANUAL_EN:  1;      /*!< enable SPIF_DO_od, use GPIO od setting.                               */
      __IO uint32_t  SPIF_DO_OE_MANUAL_EN:  1;      /*!< enable SPIF_DO_oe, use GPIO oe setting.                               */
      __IO uint32_t  SPIF_DO_IE_MANUAL_EN:  1;      /*!< enable SPIF_DO_ie, use GPIO ie setting.                               */
      __IO uint32_t  SPIF_DO_PDE_MANUAL_EN:  1;     /*!< enable SPIF_DO_pde, use GPIO pde setting.                             */
      __IO uint32_t  SPIF_DO_PUE_MANUAL_EN:  1;     /*!< enable SPIF_DO_pue, use GPIO pue setting.                             */
      __IO uint32_t  SPIF_DO_DS_MANUAL_EN:  1;      /*!< enable SPIF_DO_ds, use GPIO ds setting.                               */
    } PAD_SPIF_DO_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_SPIF_WP;                     /*!< PAD_SPIF_WP                                                           */
    
    struct {
      __IO uint32_t  SPIF_WP_SEL:  4;               /*!< SPIF_WPpad mux select setting, 0: spi_f_wp, ds = 1b0, pue =
                                                         1b1, pde = 1b0, ie = spi_f_wp_ie, oe = spi_f_wp_oe, od = spi_f_wp_od.
                                                          1: no used, select to GPIO setting. 2: spi_f_wp, ds = 1b0, pue
                                                          = 1b0, pde = 1b1, ie = spi_f_wp_ie, oe = spi_f_wp_oe, od = spi_f_wp_od.
                                                          3: no used, select to GPIO setting. 4: no used, select to GPIO
                                                          setting. 5: no used, select to GPIO setting. 6: no used, select
                                                          to GPIO setting. 7: no used, select to GPIO setting. 8: no used,
                                                          select to GPIO setting. 9: no used, select to GPIO set               */
           uint32_t             : 12;
      __IO uint32_t  SPIF_WP_GPIO_OE:  1;           /*!< GPIO oe setting.                                                      */
      __IO uint32_t  SPIF_WP_GPIO_IE:  1;           /*!< GPIO ie setting.                                                      */
      __IO uint32_t  SPIF_WP_GPIO_PDE:  1;          /*!< GPIO pde setting.                                                     */
      __IO uint32_t  SPIF_WP_GPIO_PUE:  1;          /*!< GPIO pue setting.                                                     */
      __IO uint32_t  SPIF_WP_GPIO_DS:  1;           /*!< GPIO ds setting.                                                      */
           uint32_t             :  3;
      __IO uint32_t  SPIF_WP_OD_MANUAL_EN:  1;      /*!< enable SPIF_WP_od, use GPIO od setting.                               */
      __IO uint32_t  SPIF_WP_OE_MANUAL_EN:  1;      /*!< enable SPIF_WP_oe, use GPIO oe setting.                               */
      __IO uint32_t  SPIF_WP_IE_MANUAL_EN:  1;      /*!< enable SPIF_WP_ie, use GPIO ie setting.                               */
      __IO uint32_t  SPIF_WP_PDE_MANUAL_EN:  1;     /*!< enable SPIF_WP_pde, use GPIO pde setting.                             */
      __IO uint32_t  SPIF_WP_PUE_MANUAL_EN:  1;     /*!< enable SPIF_WP_pue, use GPIO pue setting.                             */
      __IO uint32_t  SPIF_WP_DS_MANUAL_EN:  1;      /*!< enable SPIF_WP_ds, use GPIO ds setting.                               */
    } PAD_SPIF_WP_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_DBG1;                        /*!< PAD_DBG1                                                              */
    
    struct {
      __IO uint32_t  DBG1_SEL   :  4;               /*!< DBG1pad mux select setting, 0: dbg_uart_txd, ds = 1b1, pue =
                                                         1b1, pde = 1b0, ie = 1b0, oe = 1b1, od = dbg_uart_txd_od. 1:
                                                          no used, select to GPIO setting. 2: dbg_uart_txd, ds = 1b1,
                                                          pue = 1b1, pde = 1b0, ie = 1b0, oe = 1b1, od = dbg_uart_txd_od.
                                                          3: no used, select to GPIO setting. 4: no used, select to GPIO
                                                          setting. 5: no used, select to GPIO setting. 6: no used, select
                                                          to GPIO setting. 7: no used, select to GPIO setting. 8: phy_tbus_o[5],
                                                          ds = 1b0, pue = 1b0, pde = 1b0, ie = 1b0, oe = 1b1, od = phy_tbus_o  */
           uint32_t             : 12;
      __IO uint32_t  DBG1_GPIO_OE:  1;              /*!< GPIO oe setting.                                                      */
      __IO uint32_t  DBG1_GPIO_IE:  1;              /*!< GPIO ie setting.                                                      */
      __IO uint32_t  DBG1_GPIO_PDE:  1;             /*!< GPIO pde setting.                                                     */
      __IO uint32_t  DBG1_GPIO_PUE:  1;             /*!< GPIO pue setting.                                                     */
      __IO uint32_t  DBG1_GPIO_DS:  1;              /*!< GPIO ds setting.                                                      */
           uint32_t             :  3;
      __IO uint32_t  DBG1_OD_MANUAL_EN:  1;         /*!< enable DBG1_od, use GPIO od setting.                                  */
      __IO uint32_t  DBG1_OE_MANUAL_EN:  1;         /*!< enable DBG1_oe, use GPIO oe setting.                                  */
      __IO uint32_t  DBG1_IE_MANUAL_EN:  1;         /*!< enable DBG1_ie, use GPIO ie setting.                                  */
      __IO uint32_t  DBG1_PDE_MANUAL_EN:  1;        /*!< enable DBG1_pde, use GPIO pde setting.                                */
      __IO uint32_t  DBG1_PUE_MANUAL_EN:  1;        /*!< enable DBG1_pue, use GPIO pue setting.                                */
      __IO uint32_t  DBG1_DS_MANUAL_EN:  1;         /*!< enable DBG1_ds, use GPIO ds setting.                                  */
    } PAD_DBG1_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_DBG0;                        /*!< PAD_DBG0                                                              */
    
    struct {
      __IO uint32_t  DBG0_SEL   :  4;               /*!< DBG0pad mux select setting, 0: dbg_uart_rxd, ds = 1b0, pue =
                                                         1b1, pde = 1b0, ie = 1b1, oe = 1b0, od = 1b0. 1: no used, select
                                                          to GPIO setting. 2: dbg_uart_rxd, ds = 1b0, pue = 1b1, pde =
                                                          1b0, ie = 1b1, oe = 1b0, od = 1b0. 3: no used, select to GPIO
                                                          setting. 4: no used, select to GPIO setting. 5: no used, select
                                                          to GPIO setting. 6: no used, select to GPIO setting. 7: no used,
                                                          select to GPIO setting. 8: phy_tbus_o[6], ds = 1b0, pue = 1b0,
                                                          pde = 1b0, ie = 1b0, oe = 1b1, od = phy_tbus_o_6_od. 9: tb_rdata[7],
                                                          d                                                                    */
           uint32_t             : 12;
      __IO uint32_t  DBG0_GPIO_OE:  1;              /*!< GPIO oe setting.                                                      */
      __IO uint32_t  DBG0_GPIO_IE:  1;              /*!< GPIO ie setting.                                                      */
      __IO uint32_t  DBG0_GPIO_PDE:  1;             /*!< GPIO pde setting.                                                     */
      __IO uint32_t  DBG0_GPIO_PUE:  1;             /*!< GPIO pue setting.                                                     */
      __IO uint32_t  DBG0_GPIO_DS:  1;              /*!< GPIO ds setting.                                                      */
           uint32_t             :  3;
      __IO uint32_t  DBG0_OD_MANUAL_EN:  1;         /*!< enable DBG0_od, use GPIO od setting.                                  */
      __IO uint32_t  DBG0_OE_MANUAL_EN:  1;         /*!< enable DBG0_oe, use GPIO oe setting.                                  */
      __IO uint32_t  DBG0_IE_MANUAL_EN:  1;         /*!< enable DBG0_ie, use GPIO ie setting.                                  */
      __IO uint32_t  DBG0_PDE_MANUAL_EN:  1;        /*!< enable DBG0_pde, use GPIO pde setting.                                */
      __IO uint32_t  DBG0_PUE_MANUAL_EN:  1;        /*!< enable DBG0_pue, use GPIO pue setting.                                */
      __IO uint32_t  DBG0_DS_MANUAL_EN:  1;         /*!< enable DBG0_ds, use GPIO ds setting.                                  */
    } PAD_DBG0_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_ICE_RSTN;                    /*!< PAD_ICE_RSTN                                                          */
    
    struct {
      __IO uint32_t  ICE_RSTN_SEL:  4;              /*!< ICE_RSTNpad mux select setting, 0: ICERSTn, ds = 1b0, pue =
                                                         1b1, pde = 1b0, ie = 1b1, oe = 1b0, od = 1b0. 1: no used, select
                                                          to GPIO setting. 2: ICERSTn, ds = 1b0, pue = 1b1, pde = 1b0,
                                                          ie = 1b1, oe = 1b0, od = 1b0. 3: no used, select to GPIO setting.
                                                          4: no used, select to GPIO setting. 5: no used, select to GPIO
                                                          setting. 6: no used, select to GPIO setting. 7: no used, select
                                                          to GPIO setting. 8: no used, select to GPIO setting. 9: no used,
                                                          select to GPIO setting.                                              */
           uint32_t             : 12;
      __IO uint32_t  ICE_RSTN_GPIO_OE:  1;          /*!< GPIO oe setting.                                                      */
      __IO uint32_t  ICE_RSTN_GPIO_IE:  1;          /*!< GPIO ie setting.                                                      */
      __IO uint32_t  ICE_RSTN_GPIO_PDE:  1;         /*!< GPIO pde setting.                                                     */
      __IO uint32_t  ICE_RSTN_GPIO_PUE:  1;         /*!< GPIO pue setting.                                                     */
      __IO uint32_t  ICE_RSTN_GPIO_DS:  1;          /*!< GPIO ds setting.                                                      */
           uint32_t             :  3;
      __IO uint32_t  ICE_RSTN_OD_MANUAL_EN:  1;     /*!< enable ICE_RSTN_od, use GPIO od setting.                              */
      __IO uint32_t  ICE_RSTN_OE_MANUAL_EN:  1;     /*!< enable ICE_RSTN_oe, use GPIO oe setting.                              */
      __IO uint32_t  ICE_RSTN_IE_MANUAL_EN:  1;     /*!< enable ICE_RSTN_ie, use GPIO ie setting.                              */
      __IO uint32_t  ICE_RSTN_PDE_MANUAL_EN:  1;    /*!< enable ICE_RSTN_pde, use GPIO pde setting.                            */
      __IO uint32_t  ICE_RSTN_PUE_MANUAL_EN:  1;    /*!< enable ICE_RSTN_pue, use GPIO pue setting.                            */
      __IO uint32_t  ICE_RSTN_DS_MANUAL_EN:  1;     /*!< enable ICE_RSTN_ds, use GPIO ds setting.                              */
    } PAD_ICE_RSTN_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_SWCLK;                       /*!< PAD_SWCLK                                                             */
    
    struct {
      __IO uint32_t  SWCLK_SEL  :  4;               /*!< SWCLKpad mux select setting, 0: ice_ck, ds = 1b0, pue = 1b0,
                                                         pde = 1b1, ie = 1b1, oe = 1b0, od = 1b0. 1: no used, select
                                                          to GPIO setting. 2: ice_ck, ds = 1b0, pue = 1b0, pde = 1b1,
                                                          ie = 1b1, oe = 1b0, od = 1b0. 3: no used, select to GPIO setting.
                                                          4: no used, select to GPIO setting. 5: no used, select to GPIO
                                                          setting. 6: no used, select to GPIO setting. 7: no used, select
                                                          to GPIO setting. 8: no used, select to GPIO setting. 9: no used,
                                                          select to GPIO setting.                                              */
           uint32_t             : 12;
      __IO uint32_t  SWCLK_GPIO_OE:  1;             /*!< GPIO oe setting.                                                      */
      __IO uint32_t  SWCLK_GPIO_IE:  1;             /*!< GPIO ie setting.                                                      */
      __IO uint32_t  SWCLK_GPIO_PDE:  1;            /*!< GPIO pde setting.                                                     */
      __IO uint32_t  SWCLK_GPIO_PUE:  1;            /*!< GPIO pue setting.                                                     */
      __IO uint32_t  SWCLK_GPIO_DS:  1;             /*!< GPIO ds setting.                                                      */
           uint32_t             :  3;
      __IO uint32_t  SWCLK_OD_MANUAL_EN:  1;        /*!< enable SWCLK_od, use GPIO od setting.                                 */
      __IO uint32_t  SWCLK_OE_MANUAL_EN:  1;        /*!< enable SWCLK_oe, use GPIO oe setting.                                 */
      __IO uint32_t  SWCLK_IE_MANUAL_EN:  1;        /*!< enable SWCLK_ie, use GPIO ie setting.                                 */
      __IO uint32_t  SWCLK_PDE_MANUAL_EN:  1;       /*!< enable SWCLK_pde, use GPIO pde setting.                               */
      __IO uint32_t  SWCLK_PUE_MANUAL_EN:  1;       /*!< enable SWCLK_pue, use GPIO pue setting.                               */
      __IO uint32_t  SWCLK_DS_MANUAL_EN:  1;        /*!< enable SWCLK_ds, use GPIO ds setting.                                 */
    } PAD_SWCLK_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_SWD;                         /*!< PAD_SWD                                                               */
    
    struct {
      __IO uint32_t  SWD_SEL    :  4;               /*!< SWDpad mux select setting, 0: ice, ds = 1b1, pue = 1b1, pde
                                                         = 1b0, ie = 1b1, oe = ice_oe, od = ice_od. 1: no used, select
                                                          to GPIO setting. 2: ice, ds = 1b1, pue = 1b1, pde = 1b0, ie
                                                          = 1b1, oe = ice_oe, od = ice_od. 3: no used, select to GPIO
                                                          setting. 4: no used, select to GPIO setting. 5: no used, select
                                                          to GPIO setting. 6: no used, select to GPIO setting. 7: no used,
                                                          select to GPIO setting. 8: no used, select to GPIO setting.
                                                          9: no used, select to GPIO setting.                                  */
           uint32_t             : 12;
      __IO uint32_t  SWD_GPIO_OE:  1;               /*!< GPIO oe setting.                                                      */
      __IO uint32_t  SWD_GPIO_IE:  1;               /*!< GPIO ie setting.                                                      */
      __IO uint32_t  SWD_GPIO_PDE:  1;              /*!< GPIO pde setting.                                                     */
      __IO uint32_t  SWD_GPIO_PUE:  1;              /*!< GPIO pue setting.                                                     */
      __IO uint32_t  SWD_GPIO_DS:  1;               /*!< GPIO ds setting.                                                      */
           uint32_t             :  3;
      __IO uint32_t  SWD_OD_MANUAL_EN:  1;          /*!< enable SWD_od, use GPIO od setting.                                   */
      __IO uint32_t  SWD_OE_MANUAL_EN:  1;          /*!< enable SWD_oe, use GPIO oe setting.                                   */
      __IO uint32_t  SWD_IE_MANUAL_EN:  1;          /*!< enable SWD_ie, use GPIO ie setting.                                   */
      __IO uint32_t  SWD_PDE_MANUAL_EN:  1;         /*!< enable SWD_pde, use GPIO pde setting.                                 */
      __IO uint32_t  SWD_PUE_MANUAL_EN:  1;         /*!< enable SWD_pue, use GPIO pue setting.                                 */
      __IO uint32_t  SWD_DS_MANUAL_EN:  1;          /*!< enable SWD_ds, use GPIO ds setting.                                   */
    } PAD_SWD_b;                                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_MUX_OD_GROUP;                /*!< PAD_MUX_OD_GROUP                                                      */
    
    struct {
      __IO uint32_t  INT1_GPIO_OD:  1;              /*!< pad INT1_gpio_od od setting.                                          */
      __IO uint32_t  INT0_GPIO_OD:  1;              /*!< pad INT0_gpio_od od setting.                                          */
      __IO uint32_t  CMIF0_GPIO_OD:  1;             /*!< pad CMIF0_gpio_od od setting.                                         */
      __IO uint32_t  CMIF1_GPIO_OD:  1;             /*!< pad CMIF1_gpio_od od setting.                                         */
      __IO uint32_t  CMIF2_GPIO_OD:  1;             /*!< pad CMIF2_gpio_od od setting.                                         */
      __IO uint32_t  CMIF3_GPIO_OD:  1;             /*!< pad CMIF3_gpio_od od setting.                                         */
      __IO uint32_t  SPIF_DI_GPIO_OD:  1;           /*!< pad SPIF_DI_gpio_od od setting.                                       */
      __IO uint32_t  SPIF_CLK_GPIO_OD:  1;          /*!< pad SPIF_CLK_gpio_od od setting.                                      */
      __IO uint32_t  SPIF_HOLD_GPIO_OD:  1;         /*!< pad SPIF_HOLD_gpio_od od setting.                                     */
      __IO uint32_t  I2C0_GPIO_OD:  1;              /*!< pad I2C0_gpio_od od setting.                                          */
      __IO uint32_t  I2C1_GPIO_OD:  1;              /*!< pad I2C1_gpio_od od setting.                                          */
      __IO uint32_t  I2C_SDA_GPIO_OD:  1;           /*!< pad I2C_SDA_gpio_od od setting.                                       */
      __IO uint32_t  I2C_SCL_GPIO_OD:  1;           /*!< pad I2C_SCL_gpio_od od setting.                                       */
      __IO uint32_t  UART0_GPIO_OD:  1;             /*!< pad UART0_gpio_od od setting.                                         */
      __IO uint32_t  UART1_GPIO_OD:  1;             /*!< pad UART1_gpio_od od setting.                                         */
      __IO uint32_t  SPIF_CS_GPIO_OD:  1;           /*!< pad SPIF_CS_gpio_od od setting.                                       */
      __IO uint32_t  SPIF_DO_GPIO_OD:  1;           /*!< pad SPIF_DO_gpio_od od setting.                                       */
      __IO uint32_t  SPIF_WP_GPIO_OD:  1;           /*!< pad SPIF_WP_gpio_od od setting.                                       */
      __IO uint32_t  DBG1_GPIO_OD:  1;              /*!< pad DBG1_gpio_od od setting.                                          */
      __IO uint32_t  DBG0_GPIO_OD:  1;              /*!< pad DBG0_gpio_od od setting.                                          */
      __IO uint32_t  ICE_RSTN_GPIO_OD:  1;          /*!< pad ICE_RSTN_gpio_od od setting.                                      */
      __IO uint32_t  SWCLK_GPIO_OD:  1;             /*!< pad SWCLK_gpio_od od setting.                                         */
      __IO uint32_t  SWD_GPIO_OD:  1;               /*!< pad SWD_gpio_od od setting.                                           */
    } PAD_MUX_OD_GROUP_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_MUX_OD_SET_GROUP;            /*!< PAD_MUX_OD_SET_GROUP                                                  */
    
    struct {
      __IO uint32_t  INT1_GPIO_OD_SET:  1;          /*!< pad INT1_gpio_od od set 1.                                            */
      __IO uint32_t  INT0_GPIO_OD_SET:  1;          /*!< pad INT0_gpio_od od set 1.                                            */
      __IO uint32_t  CMIF0_GPIO_OD_SET:  1;         /*!< pad CMIF0_gpio_od od set 1.                                           */
      __IO uint32_t  CMIF1_GPIO_OD_SET:  1;         /*!< pad CMIF1_gpio_od od set 1.                                           */
      __IO uint32_t  CMIF2_GPIO_OD_SET:  1;         /*!< pad CMIF2_gpio_od od set 1.                                           */
      __IO uint32_t  CMIF3_GPIO_OD_SET:  1;         /*!< pad CMIF3_gpio_od od set 1.                                           */
      __IO uint32_t  SPIF_DI_GPIO_OD_SET:  1;       /*!< pad SPIF_DI_gpio_od od set 1.                                         */
      __IO uint32_t  SPIF_CLK_GPIO_OD_SET:  1;      /*!< pad SPIF_CLK_gpio_od od set 1.                                        */
      __IO uint32_t  SPIF_HOLD_GPIO_OD_SET:  1;     /*!< pad SPIF_HOLD_gpio_od od set 1.                                       */
      __IO uint32_t  I2C0_GPIO_OD_SET:  1;          /*!< pad I2C0_gpio_od od set 1.                                            */
      __IO uint32_t  I2C1_GPIO_OD_SET:  1;          /*!< pad I2C1_gpio_od od set 1.                                            */
      __IO uint32_t  I2C_SDA_GPIO_OD_SET:  1;       /*!< pad I2C_SDA_gpio_od od set 1.                                         */
      __IO uint32_t  I2C_SCL_GPIO_OD_SET:  1;       /*!< pad I2C_SCL_gpio_od od set 1.                                         */
      __IO uint32_t  UART0_GPIO_OD_SET:  1;         /*!< pad UART0_gpio_od od set 1.                                           */
      __IO uint32_t  UART1_GPIO_OD_SET:  1;         /*!< pad UART1_gpio_od od set 1.                                           */
      __IO uint32_t  SPIF_CS_GPIO_OD_SET:  1;       /*!< pad SPIF_CS_gpio_od od set 1.                                         */
      __IO uint32_t  SPIF_DO_GPIO_OD_SET:  1;       /*!< pad SPIF_DO_gpio_od od set 1.                                         */
      __IO uint32_t  SPIF_WP_GPIO_OD_SET:  1;       /*!< pad SPIF_WP_gpio_od od set 1.                                         */
      __IO uint32_t  DBG1_GPIO_OD_SET:  1;          /*!< pad DBG1_gpio_od od set 1.                                            */
      __IO uint32_t  DBG0_GPIO_OD_SET:  1;          /*!< pad DBG0_gpio_od od set 1.                                            */
      __IO uint32_t  ICE_RSTN_GPIO_OD_SET:  1;      /*!< pad ICE_RSTN_gpio_od od set 1.                                        */
      __IO uint32_t  SWCLK_GPIO_OD_SET:  1;         /*!< pad SWCLK_gpio_od od set 1.                                           */
      __IO uint32_t  SWD_GPIO_OD_SET:  1;           /*!< pad SWD_gpio_od od set 1.                                             */
    } PAD_MUX_OD_SET_GROUP_b;                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PAD_MUX_OD_CLEAR_GROUP;          /*!< PAD_MUX_OD_CLEAR_GROUP                                                */
    
    struct {
      __IO uint32_t  INT1_GPIO_OD_CLR:  1;          /*!< pad INT1_gpio_od od clear to 0.                                       */
      __IO uint32_t  INT0_GPIO_OD_CLR:  1;          /*!< pad INT0_gpio_od od clear to 0.                                       */
      __IO uint32_t  CMIF0_GPIO_OD_CLR:  1;         /*!< pad CMIF0_gpio_od od clear to 0.                                      */
      __IO uint32_t  CMIF1_GPIO_OD_CLR:  1;         /*!< pad CMIF1_gpio_od od clear to 0.                                      */
      __IO uint32_t  CMIF2_GPIO_OD_CLR:  1;         /*!< pad CMIF2_gpio_od od clear to 0.                                      */
      __IO uint32_t  CMIF3_GPIO_OD_CLR:  1;         /*!< pad CMIF3_gpio_od od clear to 0.                                      */
      __IO uint32_t  SPIF_DI_GPIO_OD_CLR:  1;       /*!< pad SPIF_DI_gpio_od od clear to 0.                                    */
      __IO uint32_t  SPIF_CLK_GPIO_OD_CLR:  1;      /*!< pad SPIF_CLK_gpio_od od clear to 0.                                   */
      __IO uint32_t  SPIF_HOLD_GPIO_OD_CLR:  1;     /*!< pad SPIF_HOLD_gpio_od od clear to 0.                                  */
      __IO uint32_t  I2C0_GPIO_OD_CLR:  1;          /*!< pad I2C0_gpio_od od clear to 0.                                       */
      __IO uint32_t  I2C1_GPIO_OD_CLR:  1;          /*!< pad I2C1_gpio_od od clear to 0.                                       */
      __IO uint32_t  I2C_SDA_GPIO_OD_CLR:  1;       /*!< pad I2C_SDA_gpio_od od clear to 0.                                    */
      __IO uint32_t  I2C_SCL_GPIO_OD_CLR:  1;       /*!< pad I2C_SCL_gpio_od od clear to 0.                                    */
      __IO uint32_t  UART0_GPIO_OD_CLR:  1;         /*!< pad UART0_gpio_od od clear to 0.                                      */
      __IO uint32_t  UART1_GPIO_OD_CLR:  1;         /*!< pad UART1_gpio_od od clear to 0.                                      */
      __IO uint32_t  SPIF_CS_GPIO_OD_CLR:  1;       /*!< pad SPIF_CS_gpio_od od clear to 0.                                    */
      __IO uint32_t  SPIF_DO_GPIO_OD_CLR:  1;       /*!< pad SPIF_DO_gpio_od od clear to 0.                                    */
      __IO uint32_t  SPIF_WP_GPIO_OD_CLR:  1;       /*!< pad SPIF_WP_gpio_od od clear to 0.                                    */
      __IO uint32_t  DBG1_GPIO_OD_CLR:  1;          /*!< pad DBG1_gpio_od od clear to 0.                                       */
      __IO uint32_t  DBG0_GPIO_OD_CLR:  1;          /*!< pad DBG0_gpio_od od clear to 0.                                       */
      __IO uint32_t  ICE_RSTN_GPIO_OD_CLR:  1;      /*!< pad ICE_RSTN_gpio_od od clear to 0.                                   */
      __IO uint32_t  SWCLK_GPIO_OD_CLR:  1;         /*!< pad SWCLK_gpio_od od clear to 0.                                      */
      __IO uint32_t  SWD_GPIO_OD_CLR:  1;           /*!< pad SWD_gpio_od od clear to 0.                                        */
    } PAD_MUX_OD_CLEAR_GROUP_b;                     /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  PAD_MUX_ID_GROUP;                /*!< PAD_MUX_ID_GROUP                                                      */
    
    struct {
      __I  uint32_t  INT1_ID    :  1;               /*!< pad INT1_id id monitor.                                               */
      __I  uint32_t  INT0_ID    :  1;               /*!< pad INT0_id id monitor.                                               */
      __I  uint32_t  CMIF0_ID   :  1;               /*!< pad CMIF0_id id monitor.                                              */
      __I  uint32_t  CMIF1_ID   :  1;               /*!< pad CMIF1_id id monitor.                                              */
      __I  uint32_t  CMIF2_ID   :  1;               /*!< pad CMIF2_id id monitor.                                              */
      __I  uint32_t  CMIF3_ID   :  1;               /*!< pad CMIF3_id id monitor.                                              */
      __I  uint32_t  SPIF_DI_ID :  1;               /*!< pad SPIF_DI_id id monitor.                                            */
      __I  uint32_t  SPIF_CLK_ID:  1;               /*!< pad SPIF_CLK_id id monitor.                                           */
      __I  uint32_t  SPIF_HOLD_ID:  1;              /*!< pad SPIF_HOLD_id id monitor.                                          */
      __I  uint32_t  I2C0_ID    :  1;               /*!< pad I2C0_id id monitor.                                               */
      __I  uint32_t  I2C1_ID    :  1;               /*!< pad I2C1_id id monitor.                                               */
      __I  uint32_t  I2C_SDA_ID :  1;               /*!< pad I2C_SDA_id id monitor.                                            */
      __I  uint32_t  I2C_SCL_ID :  1;               /*!< pad I2C_SCL_id id monitor.                                            */
      __I  uint32_t  UART0_ID   :  1;               /*!< pad UART0_id id monitor.                                              */
      __I  uint32_t  UART1_ID   :  1;               /*!< pad UART1_id id monitor.                                              */
      __I  uint32_t  SPIF_CS_ID :  1;               /*!< pad SPIF_CS_id id monitor.                                            */
      __I  uint32_t  SPIF_DO_ID :  1;               /*!< pad SPIF_DO_id id monitor.                                            */
      __I  uint32_t  SPIF_WP_ID :  1;               /*!< pad SPIF_WP_id id monitor.                                            */
      __I  uint32_t  DBG1_ID    :  1;               /*!< pad DBG1_id id monitor.                                               */
      __I  uint32_t  DBG0_ID    :  1;               /*!< pad DBG0_id id monitor.                                               */
      __I  uint32_t  ICE_RSTN_ID:  1;               /*!< pad ICE_RSTN_id id monitor.                                           */
      __I  uint32_t  SWCLK_ID   :  1;               /*!< pad SWCLK_id id monitor.                                              */
      __I  uint32_t  SWD_ID     :  1;               /*!< pad SWD_id id monitor.                                                */
    } PAD_MUX_ID_GROUP_b;                           /*!< BitSize                                                               */
  };
} CONDOR_CSR_PAD_MUX_REG_Type;


/* ================================================================================ */
/* ================                    GPIO_REG                    ================ */
/* ================================================================================ */


/**
  * @brief GPIO_REG (GPIO_REG)
  */

typedef struct {                                    /*!< GPIO_REG Structure                                                    */
  
  union {
    __IO uint32_t  PAD_IO[24];                      /*!< pad array setup.                                                      */
    
    struct {
      __IO uint32_t  SEL        :  4;               /*!< 0: Reset Status. 2: PAD default function. 3: PAD exchange. 10:
                                                         GPIO.                                                                 */
           uint32_t             : 12;
      __IO uint32_t  OE         :  1;               /*!< output enable setting.                                                */
      __IO uint32_t  IE         :  1;               /*!< input enable.                                                         */
      __IO uint32_t  PDE        :  1;               /*!< Pull down.                                                            */
      __IO uint32_t  PUE        :  1;               /*!< Pull Up.                                                              */
      __IO uint32_t  DS         :  1;               /*!< driving strength setting.                                             */
           uint32_t             :  3;
      __IO uint32_t  OD_MANUAL_EN:  1;              /*!< manual output data, use GPIO od setting.                              */
      __IO uint32_t  OE_MANUAL_EN:  1;              /*!< manual output enable, use GPIO oe setting.                            */
      __IO uint32_t  IE_MANUAL_EN:  1;              /*!< manual input enable, use GPIO ie setting.                             */
      __IO uint32_t  PDE_MANUAL_EN:  1;             /*!< manual pull down, use GPIO pde setting.                               */
      __IO uint32_t  PUE_MANUAL_EN:  1;             /*!< manual pull up, use GPIO pue setting.                                 */
      __IO uint32_t  DS_MANUAL_EN:  1;              /*!< manual driving strength, use GPIO ds setting.                         */
    } PAD_IO_b[24];                                 /*!< BitSize                                                               */
  };
} CONDOR_GPIO_REG_Type;


/* ================================================================================ */
/* ================                  STRAP_MUX_REG                 ================ */
/* ================================================================================ */


/**
  * @brief STRAP_MUX_REG  (STRAP_MUX_REG)
  */

typedef struct {                                    /*!< STRAP_MUX_REG Structure                                               */
  
  union {
    __IO uint32_t  STRAP0;                          /*!< STRAP0                                                                */
    
    struct {
           uint32_t             : 28;
      __I  uint32_t  OUT____DBG1____1_IN:  1;       /*!< out____DBG1____1_in                                                   */
      __IO uint32_t  OUT____DBG1____1:  1;          /*!< out____DBG1____1                                                      */
      __I  uint32_t  OUT____DBG1____0_IN:  1;       /*!< out____DBG1____0_in                                                   */
      __IO uint32_t  OUT____DBG1____0:  1;          /*!< out____DBG1____0                                                      */
    } STRAP0_b;                                     /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  MUX_SEL;                         /*!< MUX_SEL                                                               */
    
    struct {
      __IO uint32_t  STRP_SEL   :  1;               /*!< strp_sel                                                              */
    } MUX_SEL_b;                                    /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  STRAP_READ;                      /*!< STRAP_READ                                                            */
    
    struct {
           uint32_t             : 29;
      __I  uint32_t  STRAP2     :  1;               /*!< strap2                                                                */
      __I  uint32_t  STRAP1     :  1;               /*!< strap1                                                                */
      __I  uint32_t  STRAP0     :  1;               /*!< strap0                                                                */
    } STRAP_READ_b;                                 /*!< BitSize                                                               */
  };
} CONDOR_STRAP_MUX_REG_Type;


/* ================================================================================ */
/* ================                   MCU_WDT_REG                  ================ */
/* ================================================================================ */


/**
  * @brief MCU_WDT_REG  (MCU_WDT_REG)
  */

typedef struct {                                    /*!< MCU_WDT_REG Structure                                                 */
  
  union {
    __IO uint32_t  MCU_WDOG_ENABLE;                 /*!< mcu_wdog_enable                                                       */
    
    struct {
      __IO uint32_t  MCU_WDOG_ENA:  1;              /*!< watchdog timer enable. wdt_timer_cnt shall be set before seting
                                                         enable timer kick off right after the enable is set 0: watchdog
                                                          timer disable 1: watchdog timer enable                               */
    } MCU_WDOG_ENABLE_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  MCU_WDOG_STATUS;                 /*!< mcu_wdog_status                                                       */
    
    struct {
      __IO uint32_t  MCU_WDT_STATUS:  1;            /*!< watchdog reset status 0: watchdog no reset trigger 1: watchdog
                                                         reset trigger                                                         */
    } MCU_WDOG_STATUS_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  MCU_WDOG_CNT;                    /*!< mcu_wdog_cnt                                                          */
    
    struct {
      __IO uint32_t  MCU_WDT_TIME_CNT: 32;          /*!< watchdog timer value (in unit of mili-second) writing this register
                                                         will auto reload watch dog timer write all zero to disable watch
                                                          dog timer                                                            */
    } MCU_WDOG_CNT_b;                               /*!< BitSize                                                               */
  };
} CONDOR_MCU_WDT_REG_Type;


/* ================================================================================ */
/* ================                   SYS_WDT_REG                  ================ */
/* ================================================================================ */


/**
  * @brief SYS_WDT_REG  (SYS_WDT_REG)
  */

typedef struct {                                    /*!< SYS_WDT_REG Structure                                                 */
  
  union {
    __IO uint32_t  SYS_WDOG_ENABLE;                 /*!< sys_wdog_enable                                                       */
    
    struct {
      __IO uint32_t  SYS_WDOG_ENA:  1;              /*!< watchdog timer enable. wdt_timer_cnt shall be set before seting
                                                         enable timer kick off right after the enable is set 0: watchdog
                                                          timer disable 1: watchdog timer enable                               */
    } SYS_WDOG_ENABLE_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  SYS_WDOG_STATUS;                 /*!< sys_wdog_status                                                       */
    
    struct {
      __IO uint32_t  SYS_WDT_STATUS:  1;            /*!< watchdog reset status 0: watchdog no reset trigger 1: watchdog
                                                         reset trigger                                                         */
    } SYS_WDOG_STATUS_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  SYS_WDOG_CNT;                    /*!< sys_wdog_cnt                                                          */
    
    struct {
      __IO uint32_t  SYS_WDT_TIME_CNT: 32;          /*!< watchdog timer value (in unit of mili-second) writing this register
                                                         will auto reload watch dog timer write all zero to disable watch
                                                          dog timer                                                            */
    } SYS_WDOG_CNT_b;                               /*!< BitSize                                                               */
  };
} CONDOR_SYS_WDT_REG_Type;


/* ================================================================================ */
/* ================                     AES_REG                    ================ */
/* ================================================================================ */


/**
  * @brief AES_REG  (AES_REG)
  */

typedef struct {                                    /*!< AES_REG Structure                                                     */
  
  union {
    __IO uint32_t  AES_ENG_EN;                      /*!< AES_ENG_EN                                                            */
    
    struct {
      __IO uint32_t  AES_ENG_EN :  1;               /*!< AES engine enable. If the aes_eng_en is set to 0, the aes engine
                                                         will be set to reset status                                           */
           uint32_t             :  3;
      __IO uint32_t  AES_MODE   :  2;               /*!< 2b00: AES engine is inactive 2b01: AES encryption mode 2b10:
                                                         AES-CCM encryption mode 2b11: AES-CCM decrption mode                  */
    } AES_ENG_EN_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __O  uint32_t  AES_TRIG;                        /*!< AES_TRIG                                                              */
    
    struct {
      __O  uint32_t  AES_START  :  1;               /*!< AES engine start trigger. All AES data registers must be ready
                                                         before the aes_start is set.                                          */
    } AES_TRIG_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  AES_STATUS;                      /*!< AES_STATUS                                                            */
    
    struct {
      __I  uint32_t  AES_ACTIVE :  1;               /*!< AES active will be set to 1 when AES engine is actively encrypting
                                                         or decrypting data.                                                   */
           uint32_t             :  3;
      __I  uint32_t  AES_FINISH :  1;               /*!< aes_finish is used for indicating that the AES engine is finished
                                                         encrypting or decrypting data.                                        */
    } AES_STATUS_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  MIC_STATUS;                      /*!< MIC_STATUS                                                            */
    
    struct {
      __I  uint32_t  MIC_STATUS :  1;               /*!< If the mic is correct, mic_status will be set to 1.                   */
    } MIC_STATUS_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  MIC_CCM;                         /*!< MIC_CCM                                                               */
    
    struct {
      __I  uint32_t  MIC_CCM_OUT: 32;               /*!< This mic_ccm_out read only register is used for checking that
                                                         the decrypted MIC is correct. If the MIC is incorrect the decrypted
                                                          data will not be written to the data registers. This mic_ccm_out
                                                          is showed in big endian order.                                       */
    } MIC_CCM_b;                                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AES_SET0;                        /*!< AES_SET0                                                              */
    
    struct {
      __IO uint32_t  AES_MASTER_MODE:  1;           /*!< This register is only used in AES-CCM encryption or decrption
                                                         mode. 0:slave mode 1:master mode                                      */
    } AES_SET0_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AES_NONCE0_0;                    /*!< AES_NONCE0_0                                                          */
    
    struct {
      __IO uint32_t  AES_PKT_CNT_31_0: 32;          /*!< aes packet counter. This aes_pkt_length is only used in AES-CCM
                                                         encryption or decrption mode. It should be set to the correct
                                                          value before aes_start is set. aes_pkt_cnt[39] is the direction
                                                          bit aes_pkt_cnt[38] is the most significant bit Endian Type
                                                          : Little endian                                                      */
    } AES_NONCE0_0_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AES_NONCE0_1;                    /*!< see the description in 'AES_NONCE0 0'                                 */
    
    struct {
      __IO uint32_t  AES_PKT_CNT_39_32:  8;         /*!< aes packet counter. This aes_pkt_length is only used in AES-CCM
                                                         encryption or decrption mode. It should be set to the correct
                                                          value before aes_start is set. aes_pkt_cnt[39] is the direction
                                                          bit aes_pkt_cnt[38] is the most significant bit Endian Type
                                                          : Little endian                                                      */
    } AES_NONCE0_1_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AES_KEY_0;                       /*!< AES_KEY_0                                                             */
    
    struct {
      __IO uint32_t  AES_KEY_31_0: 32;              /*!< Endian Type : Big endian, the most significant byte is placed
                                                         in the highest address.                                               */
    } AES_KEY_0_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AES_KEY_1;                       /*!< see the description in 'AES_KEY 0'                                    */
    
    struct {
      __IO uint32_t  AES_KEY_63_32: 32;             /*!< Endian Type : Big endian, the most significant byte is placed
                                                         in the highest address.                                               */
    } AES_KEY_1_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AES_KEY_2;                       /*!< see the description in 'AES_KEY 0'                                    */
    
    struct {
      __IO uint32_t  AES_KEY_95_64: 32;             /*!< Endian Type : Big endian, the most significant byte is placed
                                                         in the highest address.                                               */
    } AES_KEY_2_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AES_KEY_3;                       /*!< see the description in 'AES_KEY 0'                                    */
    
    struct {
      __IO uint32_t  AES_KEY_127_96: 32;            /*!< Endian Type : Big endian, the most significant byte is placed
                                                         in the highest address.                                               */
    } AES_KEY_3_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AES_IV_0;                        /*!< AES_IV_0                                                              */
    
    struct {
      __IO uint32_t  AES_IV_31_0: 32;               /*!< Endian Type : Big endian, the most significant byte is placed
                                                         in the lowest address.                                                */
    } AES_IV_0_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AES_IV_1;                        /*!< see the description in 'AES_IV 0'                                     */
    
    struct {
      __IO uint32_t  AES_IV_63_32: 32;              /*!< Endian Type : Big endian, the most significant byte is placed
                                                         in the lowest address.                                                */
    } AES_IV_1_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AES_IV_2;                        /*!< see the description in 'AES_IV 0'                                     */
    
    struct {
      __IO uint32_t  AES_IV_95_64: 32;              /*!< Endian Type : Big endian, the most significant byte is placed
                                                         in the lowest address.                                                */
    } AES_IV_2_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AES_IV_3;                        /*!< see the description in 'AES_IV 0'                                     */
    
    struct {
      __IO uint32_t  AES_IV_127_96: 32;             /*!< Endian Type : Big endian, the most significant byte is placed
                                                         in the lowest address.                                                */
    } AES_IV_3_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AES_INT;                         /*!< AES_INT                                                               */
    
    struct {
      __IO uint32_t  AES_INTR   :  1;               /*!< aes interrupt. Write 1 to clear aes_intr                              */
    } AES_INT_b;                                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AES_DATA0;                       /*!< AES_DATA0                                                             */
    
    struct {
      __IO uint32_t  AES_PKT_LLID:  2;              /*!< aes packet LLID This aes_pkt_length is only used in AES-CCM
                                                         encryption or decrption mode. It should be set to the correct
                                                          value before aes_start is set. Endian Type : big endianThis
                                                          register stores the data to be encrypted or decrpted depending
                                                          on the expected use of the AES/AES-CCM engine. When encrption/decryption
                                                          is done, the resulting data is written to this register. When
                                                          this register is used as plain text data in AES encrypt mode,
                                                          the data byte is in big endian. When in AES-CCM encryption/decrption
                                                                                                                               */
           uint32_t             :  6;
      __IO uint32_t  AES_PKT_LENGTH:  5;            /*!< This aes_pkt_length is only used in AES-CCM encryption or decrption
                                                         mode. It should be set to the correct value before aes_start
                                                          is set. The value is the total packet length including data
                                                          and the MIC and the range in value from 5 to 31. Endian Type
                                                          : big endian                                                         */
           uint32_t             :  3;
      __IO uint32_t  AES_DATA_BYTE1:  8;            /*!< aes_data_byte1[7:0]                                                   */
      __IO uint32_t  AES_DATA_BYTE2:  8;            /*!< aes_data_byte2[7:0]                                                   */
    } AES_DATA0_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AES_DATA1_0;                     /*!< AES_DATA1_0                                                           */
    
    struct {
      __IO uint32_t  AES_DATA_BYTE3:  8;            /*!< aes_data_byte3[7:0]                                                   */
      __IO uint32_t  AES_DATA_BYTE4:  8;            /*!< aes_data_byte4[7:0]                                                   */
      __IO uint32_t  AES_DATA_BYTE5:  8;            /*!< aes_data_byte5[7:0]                                                   */
      __IO uint32_t  AES_DATA_BYTE6:  8;            /*!< aes_data_byte6[7:0]                                                   */
    } AES_DATA1_0_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AES_DATA1_1;                     /*!< see the description in 'AES_DATA1 0'                                  */
    
    struct {
      __IO uint32_t  AES_DATA_BYTE7:  8;            /*!< aes_data_byte7[7:0]                                                   */
      __IO uint32_t  AES_DATA_BYTE8:  8;            /*!< aes_data_byte8[7:0]                                                   */
      __IO uint32_t  AES_DATA_BYTE9:  8;            /*!< aes_data_byte9[7:0]                                                   */
      __IO uint32_t  AES_DATA_BYTE10:  8;           /*!< aes_data_byte10[7:0]                                                  */
    } AES_DATA1_1_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AES_DATA1_2;                     /*!< see the description in 'AES_DATA1 0'                                  */
    
    struct {
      __IO uint32_t  AES_DATA_BYTE11:  8;           /*!< aes_data_byte11[7:0]                                                  */
      __IO uint32_t  AES_DATA_BYTE12:  8;           /*!< aes_data_byte12[7:0]                                                  */
      __IO uint32_t  AES_DATA_BYTE13:  8;           /*!< aes_data_byte13[7:0]                                                  */
      __IO uint32_t  AES_DATA_BYTE14:  8;           /*!< aes_data_byte14[7:0]                                                  */
    } AES_DATA1_2_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AES_DATA1_3;                     /*!< see the description in 'AES_DATA1 0'                                  */
    
    struct {
      __IO uint32_t  AES_DATA_BYTE15:  8;           /*!< aes_data_byte15[7:0]                                                  */
      __IO uint32_t  AES_DATA_BYTE16:  8;           /*!< aes_data_byte16[7:0]                                                  */
      __IO uint32_t  AES_DATA_BYTE17:  8;           /*!< aes_data_byte17[7:0]                                                  */
      __IO uint32_t  AES_DATA_BYTE18:  8;           /*!< aes_data_byte18[7:0]                                                  */
    } AES_DATA1_3_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AES_DATA1_4;                     /*!< see the description in 'AES_DATA1 0'                                  */
    
    struct {
      __IO uint32_t  AES_DATA_BYTE19:  8;           /*!< aes_data_byte19[7:0]                                                  */
      __IO uint32_t  AES_DATA_BYTE20:  8;           /*!< aes_data_byte20[7:0]                                                  */
      __IO uint32_t  AES_DATA_BYTE21:  8;           /*!< aes_data_byte21[7:0]                                                  */
      __IO uint32_t  AES_DATA_BYTE22:  8;           /*!< aes_data_byte22[7:0]                                                  */
    } AES_DATA1_4_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AES_DATA1_5;                     /*!< see the description in 'AES_DATA1 0'                                  */
    
    struct {
      __IO uint32_t  AES_DATA_BYTE23:  8;           /*!< aes_data_byte23[7:0]                                                  */
      __IO uint32_t  AES_DATA_BYTE24:  8;           /*!< aes_data_byte24[7:0]                                                  */
      __IO uint32_t  AES_DATA_BYTE25:  8;           /*!< aes_data_byte25[7:0]                                                  */
      __IO uint32_t  AES_DATA_BYTE26:  8;           /*!< aes_data_byte26[7:0]                                                  */
    } AES_DATA1_5_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AES_DATA1_6;                     /*!< see the description in 'AES_DATA1 0'                                  */
    
    struct {
      __IO uint32_t  AES_DATA_BYTE27:  8;           /*!< aes_data_byte27[7:0]                                                  */
    } AES_DATA1_6_b;                                /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED;
  
  union {
    __IO uint32_t  AES_MIC;                         /*!< AES_MIC                                                               */
    
    struct {
      __IO uint32_t  AES_MIC    : 32;               /*!< The Message integrity check register is used to read the MIC
                                                         value after AES-CCM encryption and to input the MIC value for
                                                          AES-CCM decrption. Endian Type : Big endian                          */
    } AES_MIC_b;                                    /*!< BitSize                                                               */
  };
} CONDOR_AES_REG_Type;


/* ================================================================================ */
/* ================                     EFS_REG                    ================ */
/* ================================================================================ */


/**
  * @brief EFS_REG  (EFS_REG)
  */

typedef struct {                                    /*!< EFS_REG Structure                                                     */
  
  union {
    __IO uint32_t  EFUSE_CLK_FREQ;                  /*!< EFUSE_CLK_FREQ                                                        */
    
    struct {
      __IO uint32_t  EFS_CLKFREQ: 12;               /*!< efuse clk frequncy tuning parameter. tuning the Tckhp and Tcklp
                                                         time. unit : system clock cycle                                       */
           uint32_t             :  4;
      __IO uint32_t  EFS_VDDQ_EN_LOW_ACTIVE:  1;    /*!< set this bit 1b1 will make the 2.5v enable signal is low active       */
           uint32_t             :  3;
      __IO uint32_t  EFS_CLKFREQ_RD:  8;            /*!< efuse clk frequncy tuning parameter unit : system clock cycle         */
      __IO uint32_t  EFS_PRE_RD :  4;               /*!< efuse clk frequncy tuning parameter. unit : system clock cycle        */
    } EFUSE_CLK_FREQ_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  EFUSE_LDO_TIME;                  /*!< EFUSE_LDO_TIME                                                        */
    
    struct {
      __IO uint32_t  EFS_LDO_ON : 16;               /*!< Tsup_pg tuning parameter = (efs_ldo_on) * efs_clkfreq unit :
                                                         system clock cycle                                                    */
      __IO uint32_t  EFS_LDO_OFF: 16;               /*!< Thp_vq tuning parameter = (efs_ldo_off) * efs_clkfreq unit :
                                                         system clock cycle                                                    */
    } EFUSE_LDO_TIME_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  EFUSE_STATUS;                    /*!< EFUSE_STATUS                                                          */
    
    struct {
      __IO uint32_t  EFS_RD_FLAG:  1;               /*!< efuse read flag. When any efuse data buffer is written by mcu,
                                                         efs_rd_flag will be set to 0. And when the efuse data is read
                                                          from efuse macro to data buffer, efs_rd_flag will be set to
                                                          1.                                                                   */
    } EFUSE_STATUS_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  EFUSE_STATUS2;                   /*!< EFUSE_STATUS2                                                         */
    
    struct {
      __I  uint32_t  EFS_PROGRESS_DONE:  1;         /*!< efuse read/write progress done. when efuse read/write progress
                                                         is done, efs_progress_done will be set to 1                           */
    } EFUSE_STATUS2_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  EFUSE_WR_KICK;                   /*!< EFUSE_WR_KICK                                                         */
    
    struct {
      __IO uint32_t  EFS_WR_KICK:  1;               /*!< Set efs_wr_kick to 1 to trigger the efuse write progress. efuse
                                                         write data need to be ready before trigger the efs_wr_kick            */
    } EFUSE_WR_KICK_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  EFUSE_RD_KICK;                   /*!< EFUSE_RD_KICK                                                         */
    
    struct {
      __IO uint32_t  EFS_RD_KICK:  1;               /*!< Set efs_rd_kick to 1 to trigger the efuse read progress.              */
    } EFUSE_RD_KICK_b;                              /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED[2];
  
  union {
    __IO uint32_t  EFUSE_WDATA_0_0;                 /*!< EFUSE_WDATA_0_0                                                       */
    
    struct {
      __IO uint32_t  EFS_BYTE_0 :  8;               /*!< efuse data byte 0                                                     */
      __IO uint32_t  EFS_BYTE_1 :  8;               /*!< efs_byte_1[7:0]                                                       */
      __IO uint32_t  EFS_BYTE_2 :  8;               /*!< efs_byte_2[7:0]                                                       */
      __IO uint32_t  EFS_BYTE_3 :  8;               /*!< efs_byte_3[7:0]                                                       */
    } EFUSE_WDATA_0_0_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  EFUSE_WDATA_0_1;                 /*!< see the description in 'EFUSE_WDATA_0 0'                              */
    
    struct {
      __IO uint32_t  EFS_BYTE_4 :  8;               /*!< efs_byte_4[7:0]                                                       */
      __IO uint32_t  EFS_BYTE_5 :  8;               /*!< efs_byte_5[7:0]                                                       */
      __IO uint32_t  EFS_BYTE_6 :  8;               /*!< efs_byte_6[7:0]                                                       */
      __IO uint32_t  EFS_BYTE_7 :  8;               /*!< efs_byte_7[7:0]                                                       */
    } EFUSE_WDATA_0_1_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  EFUSE_WDATA_0_2;                 /*!< see the description in 'EFUSE_WDATA_0 0'                              */
    
    struct {
      __IO uint32_t  EFS_BYTE_8 :  8;               /*!< efs_byte_8[7:0]                                                       */
      __IO uint32_t  EFS_BYTE_9 :  8;               /*!< efs_byte_9[7:0]                                                       */
      __IO uint32_t  EFS_BYTE_10:  8;               /*!< efs_byte_10[7:0]                                                      */
      __IO uint32_t  EFS_BYTE_11:  8;               /*!< efs_byte_11[7:0]                                                      */
    } EFUSE_WDATA_0_2_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  EFUSE_WDATA_0_3;                 /*!< see the description in 'EFUSE_WDATA_0 0'                              */
    
    struct {
      __IO uint32_t  EFS_BYTE_12:  8;               /*!< efs_byte_12[7:0]                                                      */
      __IO uint32_t  EFS_BYTE_13:  8;               /*!< efs_byte_13[7:0]                                                      */
      __IO uint32_t  EFS_BYTE_14:  8;               /*!< efs_byte_14[7:0]                                                      */
      __IO uint32_t  EFS_BYTE_15:  8;               /*!< efs_byte_15[7:0]                                                      */
    } EFUSE_WDATA_0_3_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  EFUSE_WDATA_0_4;                 /*!< see the description in 'EFUSE_WDATA_0 0'                              */
    
    struct {
      __IO uint32_t  EFS_BYTE_16:  8;               /*!< efs_byte_16[7:0]                                                      */
      __IO uint32_t  EFS_BYTE_17:  8;               /*!< efs_byte_17[7:0]                                                      */
      __IO uint32_t  EFS_BYTE_18:  8;               /*!< efs_byte_18[7:0]                                                      */
      __IO uint32_t  EFS_BYTE_19:  8;               /*!< efs_byte_19[7:0]                                                      */
    } EFUSE_WDATA_0_4_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  EFUSE_WDATA_0_5;                 /*!< see the description in 'EFUSE_WDATA_0 0'                              */
    
    struct {
      __IO uint32_t  EFS_BYTE_20:  8;               /*!< efs_byte_20[7:0]                                                      */
      __IO uint32_t  EFS_BYTE_21:  8;               /*!< efs_byte_21[7:0]                                                      */
      __IO uint32_t  EFS_BYTE_22:  8;               /*!< efs_byte_22[7:0]                                                      */
      __IO uint32_t  EFS_BYTE_23:  8;               /*!< efs_byte_23[7:0]                                                      */
    } EFUSE_WDATA_0_5_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  EFUSE_WDATA_0_6;                 /*!< see the description in 'EFUSE_WDATA_0 0'                              */
    
    struct {
      __IO uint32_t  EFS_BYTE_24:  8;               /*!< efs_byte_24[7:0]                                                      */
      __IO uint32_t  EFS_BYTE_25:  8;               /*!< efs_byte_25[7:0]                                                      */
      __IO uint32_t  EFS_BYTE_26:  8;               /*!< efs_byte_26[7:0]                                                      */
      __IO uint32_t  EFS_BYTE_27:  8;               /*!< efs_byte_27[7:0]                                                      */
    } EFUSE_WDATA_0_6_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  EFUSE_WDATA_0_7;                 /*!< see the description in 'EFUSE_WDATA_0 0'                              */
    
    struct {
      __IO uint32_t  EFS_BYTE_28:  8;               /*!< efs_byte_28[7:0]                                                      */
      __IO uint32_t  EFS_BYTE_29:  8;               /*!< efs_byte_29[7:0]                                                      */
      __IO uint32_t  EFS_BYTE_30:  8;               /*!< efs_byte_30[7:0]                                                      */
      __IO uint32_t  EFS_BYTE_31:  8;               /*!< efs_byte_31[7:0]                                                      */
    } EFUSE_WDATA_0_7_b;                            /*!< BitSize                                                               */
  };
} CONDOR_EFS_REG_Type;


/* ================================================================================ */
/* ================                  CSR_LL_REG_A2                 ================ */
/* ================================================================================ */


/**
  * @brief CSR_LL_REG_A2  (CSR_LL_REG_A2)
  */

typedef struct {                                    /*!< CSR_LL_REG_A2 Structure                                               */
  
  union {
    __IO uint32_t  LL_ENGINE_EN;                    /*!< LL_ENGINE_EN                                                          */
    
    struct {
      __IO uint32_t  ANCHOR_EN  :  1;               /*!< anchor_en                                                             */
      __IO uint32_t  AIR_PROTOCOL_EN:  1;           /*!< air_protocol_en                                                       */
      __IO uint32_t  AIR_EVENT_MANAGER_EN:  1;      /*!< air_event_manager_en                                                  */
      __IO uint32_t  ACK_MANAGER_EN:  1;            /*!< ack_manager_en                                                        */
      __IO uint32_t  PDU_ASSEMBLE_EN:  1;           /*!< pdu_assemble_en                                                       */
      __IO uint32_t  PDU_DISASSEMBLE_EN:  1;        /*!< pdu_disassemble_en                                                    */
      __IO uint32_t  TX_RING_RD_MANAGER_EN:  1;     /*!< tx_ring_rd_manager_en                                                 */
      __IO uint32_t  RX_RING_WR_MANAGER_EN:  1;     /*!< rx_ring_wr_manager_en                                                 */
      __IO uint32_t  LL_DEVFILTER_ENABLE:  1;       /*!< ll_devfilter_enable                                                   */
    } LL_ENGINE_EN_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_STATE_ROLE;                   /*!< LL_STATE_ROLE                                                         */
    
    struct {
      __IO uint32_t  LL_ROLE    :  4;               /*!< {ll_state, ll_role]} = 8h0x: advertising state 8h10: scanning
                                                         state, passive 8h11: scanning state, active 8h2x: initiating
                                                          state 8h40: connected as slave 8h41: connected as master             */
      __IO uint32_t  LL_STATE   :  4;               /*!< ll_state[3:0]                                                         */
    } LL_STATE_ROLE_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_SET0;                         /*!< LL_SET0                                                               */
    
    struct {
      __IO uint32_t  LL_CH_TYPE :  1;               /*!< link layer rx channel type. Tx channel type contains in tx pdu.
                                                         1b0: adv-channel 1b1: data-channel                                    */
           uint32_t             :  3;
      __IO uint32_t  LL_CONN_ID :  4;               /*!< ll_conn_id[3:0]                                                       */
      __IO uint32_t  LL_CH      :  6;               /*!< ll_ch[5:0]                                                            */
    } LL_SET0_b;                                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_LONG_PDU_EN;                  /*!< LL_LONG_PDU_EN                                                        */
    
    struct {
      __IO uint32_t  LONG_PDU_EN:  1;               /*!< long_pdu_en                                                           */
    } LL_LONG_PDU_EN_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_TX_ADDR_VALUE_0;              /*!< LL_TX_ADDR_VALUE_0                                                    */
    
    struct {
      __IO uint32_t  TX_ADDR_VALUE_31_0: 32;        /*!< tx_addr_value[31:0]                                                   */
    } LL_TX_ADDR_VALUE_0_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_TX_ADDR_VALUE_1;              /*!< see the description in 'LL_TX_ADDR_VALUE 0'                           */
    
    struct {
      __IO uint32_t  TX_ADDR_VALUE_47_32: 16;       /*!< tx_addr_value[47:32]                                                  */
      __IO uint32_t  TX_ADDR_TYPE:  1;              /*!< tx_addr_type                                                          */
    } LL_TX_ADDR_VALUE_1_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_PHY_INFO0;                    /*!< LL_PHY_INFO0                                                          */
    
    struct {
      __IO uint32_t  PHY_ACC_ADDR: 32;              /*!< phy_acc_addr[31:0]                                                    */
    } LL_PHY_INFO0_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_PHY_INFO1;                    /*!< LL_PHY_INFO1                                                          */
    
    struct {
      __IO uint32_t  PHY_CRC_INIT: 24;              /*!< phy_crc_init[23:0]                                                    */
      __IO uint32_t  PHY_DWLFSR_SEED:  7;           /*!< phy_dwlfsr_seed[6:0]                                                  */
    } LL_PHY_INFO1_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_PHY_INFO2;                    /*!< LL_PHY_INFO2                                                          */
    
    struct {
      __IO uint32_t  MANUAL_RF_CH_SW_EN:  1;        /*!< rf channel switch manual enable                                       */
           uint32_t             :  3;
      __IO uint32_t  MANUAL_RF_CH_SW:  1;           /*!< set 1 to do long rf switch calibration in manual mode. set 0
                                                         to do short rf switch calibration in manual mode.                     */
    } LL_PHY_INFO2_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_TX_PHY_INFO;                  /*!< LL_TX_PHY_INFO                                                        */
    
    struct {
      __IO uint32_t  PHY_TX_PWR :  8;               /*!< phy_tx_pwr[7:0]                                                       */
    } LL_TX_PHY_INFO_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  LL_RX_RSSI_INFO;                 /*!< LL_RX_RSSI_INFO                                                       */
    
    struct {
      __I  uint32_t  RX_RSSI_1ST:  8;               /*!< rx_rssi_1st[7:0]                                                      */
    } LL_RX_RSSI_INFO_b;                            /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED[453];
  
  union {
    __IO uint32_t  RF_PHY_EN;                       /*!< RF_PHY_EN                                                             */
    
    struct {
      __IO uint32_t  PHY_RX_ENA :  1;               /*!< phy rx enable. Set phy_rx_ena and phy_rx_ena before RX transmission.
                                                         phy_rx_ena will be auto disabled after RX transmission.               */
           uint32_t             :  3;
      __IO uint32_t  RF_RX_ENA  :  1;               /*!< rf rx enable. Set rf_rx_ena and phy_rx_ena before RX transmission.
                                                         rf_rx_ena will be auto disabled after RX transmission.                */
    } RF_PHY_EN_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TXQ_PHY_EN;                      /*!< TXQ_PHY_EN                                                            */
    
    struct {
      __IO uint32_t  PHY_TX_ENA :  1;               /*!< phy tx enable. Set phy_tx_ena and phy_tx_ena before TX transmission.
                                                         phy_tx_ena will be auto disabled after TX transmission.               */
           uint32_t             :  3;
      __IO uint32_t  RF_TX_ENA  :  1;               /*!< rf tx enable. Set rf_tx_ena and phy_tx_ena before TX transmission.
                                                         rf_tx_ena will be auto disabled after TX transmission.                */
    } TXQ_PHY_EN_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RF_PHY_AUTO_DISA_EN;             /*!< RF_PHY_AUTO_DISA_EN                                                   */
    
    struct {
      __IO uint32_t  RF_PHY_AUTO_DISA:  1;          /*!< rf_tx_en, phy_tx_en auto disable bit. If rf_phy_auto_disa is
                                                         set, these bits will be auto disabled after tx transmission
                                                          is done.                                                             */
    } RF_PHY_AUTO_DISA_EN_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  OTHER_MANUAL_SET;                /*!< OTHER_MANUAL_SET                                                      */
    
    struct {
      __IO uint32_t  MANUAL_TX_RING_ACKED_NOTIFY:  1;/*!< manual_tx_ring_acked_notify                                          */
    } OTHER_MANUAL_SET_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_PRESCALER_USTIMER;            /*!< LL_PRESCALER_USTIMER                                                  */
    
    struct {
      __IO uint32_t  PRESCALER_LLTIMER:  9;         /*!< prescaler for the link layer timer to count for 1 us, set 32
                                                         for 32MHz                                                             */
    } LL_PRESCALER_USTIMER_b;                       /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  LL_DBG_INFO;                     /*!< LL_DBG_INFO                                                           */
    
    struct {
      __I  uint32_t  TX_PDU_LEN :  8;               /*!< tx_pdu_len[7:0]                                                       */
      __I  uint32_t  RX_PAYLOAD_LEN:  8;            /*!< rx_payload_len[7:0]                                                   */
    } LL_DBG_INFO_b;                                /*!< BitSize                                                               */
  };
} CONDOR_CSR_LL_REG_A2_Type;


/* ================================================================================ */
/* ================                   LL_TRX_REG                   ================ */
/* ================================================================================ */


/**
  * @brief LL_TRX_REG  (LL_TRX_REG)
  */

typedef struct {                                    /*!< LL_TRX_REG Structure                                                  */
  
  union {
    __IO uint32_t  LL_RX_PDU_RAW_MODE;              /*!< LL_RX_PDU_RAW_MODE                                                    */
    
    struct {
      __IO uint32_t  LL_RX_RAW_MODE:  1;            /*!< enable link layer pdu disassemble raw mode                            */
           uint32_t             :  7;
      __IO uint32_t  LL_RX_RAW_MODE_PDU_LENG:  8;   /*!< ll_rx_raw_mode_pdu_leng[7:0]                                          */
    } LL_RX_PDU_RAW_MODE_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_DISASSEMBLE_SET0;             /*!< LL_DISASSEMBLE_SET0                                                   */
    
    struct {
      __IO uint32_t  LL_RX_CRC_BIT_CORRECT_EN:  1;  /*!< link layer rx pdu disassembler crc 1 bit correct enable               */
    } LL_DISASSEMBLE_SET0_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_DISASSEMBLE_POLICY0;          /*!< LL_DISASSEMBLE_POLICY0                                                */
    
    struct {
      __IO uint32_t  LL_PDU_DISA_FILTER_POLICY_ADV: 14;/*!< ll_pdu_disa_filter_policy_adv[13:0]                                */
           uint32_t             :  2;
      __IO uint32_t  LL_PDU_DISA_FILTER_POLICY_SCAN: 14;/*!< ll_pdu_disa_filter_policy_scan[13:0]                              */
    } LL_DISASSEMBLE_POLICY0_b;                     /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_DISASSEMBLE_POLICY1;          /*!< LL_DISASSEMBLE_POLICY1                                                */
    
    struct {
      __IO uint32_t  LL_PDU_DISA_FILTER_POLICY_INIT: 14;/*!< ll_pdu_disa_filter_policy_init[13:0]                              */
    } LL_DISASSEMBLE_POLICY1_b;                     /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_RX_INTERPRET_SET0;            /*!< LL_RX_INTERPRET_SET0                                                  */
    
    struct {
      __IO uint32_t  CFG_INTERPRET_HDR:  1;         /*!< cfg_interpret_hdr                                                     */
      __IO uint32_t  CFG_INTERPRET_PAYLOAD:  1;     /*!< cfg_interpret_payload                                                 */
      __IO uint32_t  CFG_INTERPRET_LOG:  1;         /*!< cfg_interpret_log                                                     */
      __IO uint32_t  CFG_INTERPRET_NOTIFY:  1;      /*!< cfg_interpret_notify                                                  */
    } LL_RX_INTERPRET_SET0_b;                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_RX_PDU_COMPOSE;               /*!< LL_RX_PDU_COMPOSE                                                     */
    
    struct {
      __IO uint32_t  LL_PDU_TYPE_COMPOSE_EN:  1;    /*!< ll_pdu_type_compose_en                                                */
           uint32_t             :  3;
      __IO uint32_t  LL_PDU_TYPE_CONSTANT_EN:  1;   /*!< ll_pdu_type_constant_en                                               */
           uint32_t             : 11;
      __IO uint32_t  LL_PDU_TYPE_CONSTANT_VALUE: 12;/*!< ll_pdu_type_constant_value[11:0]                                      */
    } LL_RX_PDU_COMPOSE_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_LOG_SET0;                     /*!< LL_LOG_SET0                                                           */
    
    struct {
      __IO uint32_t  LL_RX_PDU_LOG_EN:  7;          /*!< [6]: [5]: [4]: [3]: [2]: tx_addr_filter_result [1]: rx_ch [0]:
                                                         conn_id                                                               */
    } LL_LOG_SET0_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_HASH_SET_0;                   /*!< LL_HASH_SET_0                                                         */
    
    struct {
      __IO uint32_t  LL_RX_HASH_VALID:  8;          /*!< set 1 to enable rx hash. set ll_rx_hash_valid[0] to enable rx
                                                         hash[0] set ll_rx_hash_valid[1] to enable rx hash[1]                  */
    } LL_HASH_SET_0_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_HASH_KEY_MASK;                /*!< LL_HASH_KEY_MASK                                                      */
    
    struct {
      __IO uint32_t  LL_RX_HASH_KEY_MASK_DAT_CH:  8;/*!< ll_rx_hash_key_mask_dat_ch[7:0]                                       */
           uint32_t             :  8;
      __IO uint32_t  LL_RX_HASH_KEY_MASK_ADV_CH:  8;/*!< ll_rx_hash_key_mask_adv_ch[7:0]                                       */
    } LL_HASH_KEY_MASK_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_HASH_KEY0;                    /*!< LL_HASH_KEY0                                                          */
    
    struct {
      __IO uint32_t  LL_RX_HASH_ENTRY0_KEY: 16;     /*!< ll_rx_hash_entry0_key[15:0]                                           */
      __IO uint32_t  LL_RX_HASH_ENTRY0_ACTION:  8;  /*!< ll_rx_hash_entry0_action[7:0]                                         */
    } LL_HASH_KEY0_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_HASH_KEY1;                    /*!< LL_HASH_KEY1                                                          */
    
    struct {
      __IO uint32_t  LL_RX_HASH_ENTRY1_KEY: 16;     /*!< ll_rx_hash_entry1_key[15:0]                                           */
      __IO uint32_t  LL_RX_HASH_ENTRY1_ACTION:  8;  /*!< ll_rx_hash_entry1_action[7:0]                                         */
    } LL_HASH_KEY1_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_HASH_KEY2;                    /*!< LL_HASH_KEY2                                                          */
    
    struct {
      __IO uint32_t  LL_RX_HASH_ENTRY2_KEY: 16;     /*!< ll_rx_hash_entry2_key[15:0]                                           */
      __IO uint32_t  LL_RX_HASH_ENTRY2_ACTION:  8;  /*!< ll_rx_hash_entry2_action[7:0]                                         */
    } LL_HASH_KEY2_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_HASH_KEY3;                    /*!< LL_HASH_KEY3                                                          */
    
    struct {
      __IO uint32_t  LL_RX_HASH_ENTRY3_KEY: 16;     /*!< ll_rx_hash_entry3_key[15:0]                                           */
      __IO uint32_t  LL_RX_HASH_ENTRY3_ACTION:  8;  /*!< ll_rx_hash_entry3_action[7:0]                                         */
    } LL_HASH_KEY3_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_HASH_KEY4;                    /*!< LL_HASH_KEY4                                                          */
    
    struct {
      __IO uint32_t  LL_RX_HASH_ENTRY4_KEY: 16;     /*!< ll_rx_hash_entry4_key[15:0]                                           */
      __IO uint32_t  LL_RX_HASH_ENTRY4_ACTION:  8;  /*!< ll_rx_hash_entry4_action[7:0]                                         */
    } LL_HASH_KEY4_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_HASH_KEY5;                    /*!< LL_HASH_KEY5                                                          */
    
    struct {
      __IO uint32_t  LL_RX_HASH_ENTRY5_KEY: 16;     /*!< ll_rx_hash_entry5_key[15:0]                                           */
      __IO uint32_t  LL_RX_HASH_ENTRY5_ACTION:  8;  /*!< ll_rx_hash_entry5_action[7:0]                                         */
    } LL_HASH_KEY5_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_HASH_KEY6;                    /*!< LL_HASH_KEY6                                                          */
    
    struct {
      __IO uint32_t  LL_RX_HASH_ENTRY6_KEY: 16;     /*!< ll_rx_hash_entry6_key[15:0]                                           */
      __IO uint32_t  LL_RX_HASH_ENTRY6_ACTION:  8;  /*!< ll_rx_hash_entry6_action[7:0]                                         */
    } LL_HASH_KEY6_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_HASH_KEY7;                    /*!< LL_HASH_KEY7                                                          */
    
    struct {
      __IO uint32_t  LL_RX_HASH_ENTRY7_KEY: 16;     /*!< ll_rx_hash_entry7_key[15:0]                                           */
      __IO uint32_t  LL_RX_HASH_ENTRY7_ACTION:  8;  /*!< ll_rx_hash_entry7_action[7:0]                                         */
    } LL_HASH_KEY7_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ACCUM_TX_NO_ACK_CNT;             /*!< ACCUM_TX_NO_ACK_CNT                                                   */
    
    struct {
      __IO uint32_t  ACCUM_TX_NO_ACK_CNT_EN:  1;    /*!< accum_tx_no_ack_cnt_en                                                */
           uint32_t             :  3;
      __IO uint32_t  TX_NO_ACK_CNT_AUTO_CLR_EN:  1; /*!< tx_no_ack counter will be auto cleared when tx_no_ack_cnt_auto_clr_en
                                                         is set to 1 and get a tx_ack packet                                   */
           uint32_t             :  3;
      __IO uint32_t  ACCUM_TX_NO_ACK_CNT_INIT_VALUE:  8;/*!< accum_tx_no_ack_cnt_init_value[7:0]                               */
    } ACCUM_TX_NO_ACK_CNT_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AEM_TX_NO_ACK_CON;               /*!< AEM_TX_NO_ACK_CON                                                     */
    
    struct {
      __IO uint32_t  AEM_TX_NO_ACK_CNT_MINUEND:  8; /*!< aem_tx_no_ack_cnt_minuend[7:0]                                        */
      __IO uint32_t  AEM_TX_NO_ACK_CNT_SUB_BIT_MASK:  8;/*!< ack manager condition tx no ack count substrahend bit mask        */
      __IO uint32_t  AEM_TX_NO_ACK_CNT_LESS:  1;    /*!< aem_tx_no_ack_cnt_less                                                */
      __IO uint32_t  AEM_TX_NO_ACK_CNT_EQUAL:  1;   /*!< aem_tx_no_ack_cnt_equal                                               */
      __IO uint32_t  AEM_TX_NO_ACK_CNT_LARGE:  1;   /*!< aem_tx_no_ack_cnt_large                                               */
    } AEM_TX_NO_ACK_CON_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ACCUM_RX_CRC_ERROR_CNT;          /*!< ACCUM_RX_CRC_ERROR_CNT                                                */
    
    struct {
      __IO uint32_t  ACCUM_RX_CRC_ERROR_CNT_EN:  1; /*!< accum_rx_crc_error_cnt_en                                             */
           uint32_t             :  3;
      __IO uint32_t  RX_CRC_ERROR_CNT_AUTO_CLR_EN:  1;/*!< rx_crc_error counter will be auto cleared when rx_crc_error_cnt_auto_clr_e
                                                         n is set to 1 and get a packet with valid crc                         */
           uint32_t             :  3;
      __IO uint32_t  ACCUM_RX_CRC_ERROR_CNT_INIT_VALUE:  8;/*!< accum_rx_crc_error_cnt_init_value[7:0]                         */
    } ACCUM_RX_CRC_ERROR_CNT_b;                     /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AEM_RX_CRC_ERR_CON;              /*!< AEM_RX_CRC_ERR_CON                                                    */
    
    struct {
      __IO uint32_t  AEM_RX_CRC_ERROR_CNT_MINUEND:  8;/*!< aem_rx_crc_error_cnt_minuend[7:0]                                   */
      __IO uint32_t  AEM_RX_CRC_ERROR_CNT_SUB_BIT_MASK:  8;/*!< aem_rx_crc_error_cnt_sub_bit_mask[7:0]                         */
      __IO uint32_t  AEM_RX_CRC_ERROR_CNT_LESS:  1; /*!< aem_rx_crc_error_cnt_less                                             */
      __IO uint32_t  AEM_RX_CRC_ERROR_CNT_EQUAL:  1;/*!< aem_rx_crc_error_cnt_equal                                            */
      __IO uint32_t  AEM_RX_CRC_ERROR_CNT_LARGE:  1;/*!< aem_rx_crc_error_cnt_large                                            */
    } AEM_RX_CRC_ERR_CON_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_PDU_VALID_POLICY_0;           /*!< RX_PDU_VALID_POLICY_0                                                 */
    
    struct {
      __IO uint32_t  RX_PDU_VALID_POLICY_SIG0_SEL:  6;/*!< rx_pdu_valid_policy_sig0_sel[5:0]                                   */
           uint32_t             :  2;
      __IO uint32_t  RX_PDU_VALID_POLICY_SIG1_SEL:  6;/*!< rx_pdu_valid_policy_sig1_sel[5:0]                                   */
           uint32_t             :  2;
      __IO uint32_t  RX_PDU_VALID_POLICY_SIG2_SEL:  6;/*!< rx_pdu_valid_policy_sig2_sel[5:0]                                   */
           uint32_t             :  2;
      __IO uint32_t  RX_PDU_VALID_POLICY_SIG3_SEL:  6;/*!< rx_pdu_valid_policy_sig3_sel[5:0]                                   */
      __IO uint32_t  RX_PDU_VALID_POLICY_MANUAL_VALUE:  1;/*!< rx_pdu_valid_policy_manual_value                                */
      __IO uint32_t  RX_PDU_VALID_POLICY_MANUAL_EN:  1;/*!< rx_pdu_valid_policy_manual_en                                      */
    } RX_PDU_VALID_POLICY_0_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_PDU_VALID_POLICY_1;           /*!< RX_PDU_VALID_POLICY_1                                                 */
    
    struct {
      __IO uint32_t  RX_PDU_VALID_POLICY_W1C:  1;   /*!< rx_pdu_valid_policy_w1c                                               */
      __IO uint32_t  RX_PDU_VALID_POLICY_W1S:  1;   /*!< rx_pdu_valid_policy_w1s                                               */
    } RX_PDU_VALID_POLICY_1_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_PDU_VALID_POLICY_2;           /*!< RX_PDU_VALID_POLICY_2                                                 */
    
    struct {
      __IO uint32_t  RX_PDU_VALID_POLICY: 32;       /*!< rx_pdu_valid_policy[31:0]                                             */
    } RX_PDU_VALID_POLICY_2_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  XPDU_IRQ_POLICY_0;               /*!< XPDU_IRQ_POLICY_0                                                     */
    
    struct {
      __IO uint32_t  XPDU_IRQ_POLICY_SIG0_SEL:  6;  /*!< xpdu_irq_policy_sig0_sel[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  XPDU_IRQ_POLICY_SIG1_SEL:  6;  /*!< xpdu_irq_policy_sig1_sel[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  XPDU_IRQ_POLICY_SIG2_SEL:  6;  /*!< xpdu_irq_policy_sig2_sel[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  XPDU_IRQ_POLICY_SIG3_SEL:  6;  /*!< xpdu_irq_policy_sig3_sel[5:0]                                         */
      __IO uint32_t  XPDU_IRQ_POLICY_MANUAL_VALUE:  1;/*!< xpdu_irq_policy_manual_value                                        */
      __IO uint32_t  XPDU_IRQ_POLICY_MANUAL_EN:  1; /*!< xpdu_irq_policy_manual_en                                             */
    } XPDU_IRQ_POLICY_0_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  XPDU_IRQ_POLICY_1;               /*!< XPDU_IRQ_POLICY_1                                                     */
    
    struct {
      __IO uint32_t  XPDU_IRQ_POLICY_W1C:  1;       /*!< xpdu_irq_policy_w1c                                                   */
      __IO uint32_t  XPDU_IRQ_POLICY_W1S:  1;       /*!< xpdu_irq_policy_w1s                                                   */
    } XPDU_IRQ_POLICY_1_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  XPDU_IRQ_POLICY_2;               /*!< XPDU_IRQ_POLICY_2                                                     */
    
    struct {
      __IO uint32_t  XPDU_IRQ_POLICY: 32;           /*!< xpdu_irq_policy[31:0]                                                 */
    } XPDU_IRQ_POLICY_2_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DUMY_POLICY_0;                   /*!< DUMY_POLICY_0                                                         */
    
    struct {
      __IO uint32_t  DUMY_POLICY_SIG0_SEL:  6;      /*!< dumy_policy_sig0_sel[5:0]                                             */
           uint32_t             :  2;
      __IO uint32_t  DUMY_POLICY_SIG1_SEL:  6;      /*!< dumy_policy_sig1_sel[5:0]                                             */
           uint32_t             :  2;
      __IO uint32_t  DUMY_POLICY_SIG2_SEL:  6;      /*!< dumy_policy_sig2_sel[5:0]                                             */
           uint32_t             :  2;
      __IO uint32_t  DUMY_POLICY_SIG3_SEL:  6;      /*!< dumy_policy_sig3_sel[5:0]                                             */
      __IO uint32_t  DUMY_POLICY_MANUAL_VALUE:  1;  /*!< dumy_policy_manual_value                                              */
      __IO uint32_t  DUMY_POLICY_MANUAL_EN:  1;     /*!< dumy_policy_manual_en                                                 */
    } DUMY_POLICY_0_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DUMY_IRQ_POLICY_1;               /*!< DUMY_IRQ_POLICY_1                                                     */
    
    struct {
      __IO uint32_t  DUMY_POLICY_W1C:  1;           /*!< dumy_policy_w1c                                                       */
      __IO uint32_t  DUMY_POLICY_W1S:  1;           /*!< dumy_policy_w1s                                                       */
    } DUMY_IRQ_POLICY_1_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DUMY_IRQ_POLICY_2;               /*!< DUMY_IRQ_POLICY_2                                                     */
    
    struct {
      __IO uint32_t  DUMY_POLICY: 32;               /*!< dumy_policy[31:0]                                                     */
    } DUMY_IRQ_POLICY_2_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  NEW_DATA_INFO;                   /*!< NEW_DATA_INFO                                                         */
    
    struct {
      __IO uint32_t  NEW_DATA_MANUAL_INVALID:  1;   /*!< new_data_manual_invalid                                               */
      __IO uint32_t  NEW_DATA_MANUAL_SET:  1;       /*!< new_data_manual_set                                                   */
      __IO uint32_t  NEW_DATA_MANUAL_OVERWRITE:  1; /*!< new_data_manual_overwrite                                             */
           uint32_t             :  1;
      __IO uint32_t  NEW_DATA_MANUAL_VALID:  1;     /*!< new_data_manual_valid                                                 */
           uint32_t             :  3;
      __IO uint32_t  NEW_DATA_MANUAL_VALUE:  1;     /*!< new_data_manual_value                                                 */
           uint32_t             :  7;
      __I  uint32_t  NEW_DATA_INFO_VALID:  1;       /*!< new_data_info_valid                                                   */
           uint32_t             :  7;
      __I  uint32_t  NEW_DATA_INFO_VALUE:  1;       /*!< new_data_info_value                                                   */
    } NEW_DATA_INFO_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_ADDR_FILT_DECISION_INFO;      /*!< TX_ADDR_FILT_DECISION_INFO                                            */
    
    struct {
      __IO uint32_t  TX_ADDR_FILTER_DECISION_MANUAL_INVALID:  1;/*!< tx_addr_filter_decision_manual_invalid                    */
      __IO uint32_t  TX_ADDR_FILTER_DECISION_MANUAL_SET:  1;/*!< tx_addr_filter_decision_manual_set                            */
      __IO uint32_t  TX_ADDR_FILTER_DECISION_MANUAL_OVERWRITE:  1;/*!< tx_addr_filter_decision_manual_overwrite                */
           uint32_t             :  1;
      __IO uint32_t  TX_ADDR_FILTER_DECISION_MANUAL_VALID:  1;/*!< tx_addr_filter_decision_manual_valid                        */
           uint32_t             :  3;
      __IO uint32_t  TX_ADDR_FILTER_DECISION_MANUAL_VALUE:  1;/*!< tx_addr_filter_decision_manual_value                        */
           uint32_t             :  7;
      __I  uint32_t  TX_ADDR_FILTER_DECISION_INFO_VALID:  1;/*!< tx_addr_filter_decision_info_valid                            */
           uint32_t             :  7;
      __I  uint32_t  TX_ADDR_FILTER_DECISION_INFO_VALUE:  1;/*!< tx_addr_filter_decision_info_value                            */
    } TX_ADDR_FILT_DECISION_INFO_b;                 /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_ADDR_FILT_DECISION_INFO;      /*!< RX_ADDR_FILT_DECISION_INFO                                            */
    
    struct {
      __IO uint32_t  RX_ADDR_FILTER_DECISION_MANUAL_INVALID:  1;/*!< rx_addr_filter_decision_manual_invalid                    */
      __IO uint32_t  RX_ADDR_FILTER_DECISION_MANUAL_SET:  1;/*!< rx_addr_filter_decision_manual_set                            */
      __IO uint32_t  RX_ADDR_FILTER_DECISION_MANUAL_OVERWRITE:  1;/*!< rx_addr_filter_decision_manual_overwrite                */
           uint32_t             :  1;
      __IO uint32_t  RX_ADDR_FILTER_DECISION_MANUAL_VALID:  1;/*!< rx_addr_filter_decision_manual_valid                        */
           uint32_t             :  3;
      __IO uint32_t  RX_ADDR_FILTER_DECISION_MANUAL_VALUE:  1;/*!< rx_addr_filter_decision_manual_value                        */
           uint32_t             :  7;
      __I  uint32_t  RX_ADDR_FILTER_DECISION_INFO_VALID:  1;/*!< rx_addr_filter_decision_info_valid                            */
           uint32_t             :  7;
      __I  uint32_t  RX_ADDR_FILTER_DECISION_INFO_VALUE:  1;/*!< rx_addr_filter_decision_info_value                            */
    } RX_ADDR_FILT_DECISION_INFO_b;                 /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AS_ACK_ADV_INFO;                 /*!< AS_ACK_ADV_INFO                                                       */
    
    struct {
      __IO uint32_t  AS_ACK_ADV_MANUAL_INVALID:  1; /*!< as_ack_adv_manual_invalid                                             */
      __IO uint32_t  AS_ACK_ADV_MANUAL_SET:  1;     /*!< as_ack_adv_manual_set                                                 */
      __IO uint32_t  AS_ACK_ADV_MANUAL_OVERWRITE:  1;/*!< as_ack_adv_manual_overwrite                                          */
           uint32_t             :  1;
      __IO uint32_t  AS_ACK_ADV_MANUAL_VALID:  1;   /*!< as_ack_adv_manual_valid                                               */
           uint32_t             :  3;
      __IO uint32_t  AS_ACK_ADV_MANUAL_VALUE:  1;   /*!< as_ack_adv_manual_value                                               */
           uint32_t             :  7;
      __I  uint32_t  AS_ACK_ADV_INFO_VALID:  1;     /*!< as_ack_adv_info_valid                                                 */
           uint32_t             :  7;
      __I  uint32_t  AS_ACK_ADV_INFO_VALUE:  1;     /*!< as_ack_adv_info_value                                                 */
    } AS_ACK_ADV_INFO_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AS_ACK_DATA_INFO;                /*!< AS_ACK_DATA_INFO                                                      */
    
    struct {
      __IO uint32_t  AS_ACK_DATA_MANUAL_INVALID:  1;/*!< as_ack_data_manual_invalid                                            */
      __IO uint32_t  AS_ACK_DATA_MANUAL_SET:  1;    /*!< as_ack_data_manual_set                                                */
      __IO uint32_t  AS_ACK_DATA_MANUAL_OVERWRITE:  1;/*!< as_ack_data_manual_overwrite                                        */
           uint32_t             :  1;
      __IO uint32_t  AS_ACK_DATA_MANUAL_VALID:  1;  /*!< as_ack_data_manual_valid                                              */
           uint32_t             :  3;
      __IO uint32_t  AS_ACK_DATA_MANUAL_VALUE:  1;  /*!< as_ack_data_manual_value                                              */
           uint32_t             :  7;
      __I  uint32_t  AS_ACK_DATA_INFO_VALID:  1;    /*!< as_ack_data_info_valid                                                */
           uint32_t             :  7;
      __I  uint32_t  AS_ACK_DATA_INFO_VALUE:  1;    /*!< as_ack_data_info_value                                                */
    } AS_ACK_DATA_INFO_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  NON_NULL_INFO;                   /*!< NON_NULL_INFO                                                         */
    
    struct {
      __IO uint32_t  NON_NULL_MANUAL_INVALID:  1;   /*!< non_null_manual_invalid                                               */
      __IO uint32_t  NON_NULL_MANUAL_SET:  1;       /*!< non_null_manual_set                                                   */
      __IO uint32_t  NON_NULL_MANUAL_OVERWRITE:  1; /*!< non_null_manual_overwrite                                             */
           uint32_t             :  1;
      __IO uint32_t  NON_NULL_MANUAL_VALID:  1;     /*!< non_null_manual_valid                                                 */
           uint32_t             :  3;
      __IO uint32_t  NON_NULL_MANUAL_VALUE:  1;     /*!< non_null_manual_value                                                 */
           uint32_t             :  7;
      __I  uint32_t  NON_NULL_INFO_VALID:  1;       /*!< non_null_info_valid                                                   */
           uint32_t             :  7;
      __I  uint32_t  NON_NULL_INFO_VALUE:  1;       /*!< non_null_info_value                                                   */
    } NON_NULL_INFO_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_ADDR_FILTER_HIT_INFO;         /*!< TX_ADDR_FILTER_HIT_INFO                                               */
    
    struct {
      __IO uint32_t  TX_ADDR_FILTER_HIT_MANUAL_INVALID:  1;/*!< tx_addr_filter_hit_manual_invalid                              */
      __IO uint32_t  TX_ADDR_FILTER_HIT_MANUAL_SET:  1;/*!< tx_addr_filter_hit_manual_set                                      */
      __IO uint32_t  TX_ADDR_FILTER_HIT_MANUAL_OVERWRITE:  1;/*!< tx_addr_filter_hit_manual_overwrite                          */
           uint32_t             :  1;
      __IO uint32_t  TX_ADDR_FILTER_HIT_MANUAL_VALID:  1;/*!< tx_addr_filter_hit_manual_valid                                  */
           uint32_t             :  3;
      __IO uint32_t  TX_ADDR_FILTER_HIT_MANUAL_VALUE:  1;/*!< tx_addr_filter_hit_manual_value                                  */
           uint32_t             :  7;
      __I  uint32_t  TX_ADDR_FILTER_HIT_INFO_VALID:  1;/*!< tx_addr_filter_hit_info_valid                                      */
           uint32_t             :  7;
      __I  uint32_t  TX_ADDR_FILTER_HIT_INFO_VALUE:  1;/*!< tx_addr_filter_hit_info_value                                      */
    } TX_ADDR_FILTER_HIT_INFO_b;                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_ADDR_FILTER_HIT_INFO;         /*!< RX_ADDR_FILTER_HIT_INFO                                               */
    
    struct {
      __IO uint32_t  RX_ADDR_FILTER_HIT_MANUAL_INVALID:  1;/*!< rx_addr_filter_hit_manual_invalid                              */
      __IO uint32_t  RX_ADDR_FILTER_HIT_MANUAL_SET:  1;/*!< rx_addr_filter_hit_manual_set                                      */
      __IO uint32_t  RX_ADDR_FILTER_HIT_MANUAL_OVERWRITE:  1;/*!< rx_addr_filter_hit_manual_overwrite                          */
           uint32_t             :  1;
      __IO uint32_t  RX_ADDR_FILTER_HIT_MANUAL_VALID:  1;/*!< rx_addr_filter_hit_manual_valid                                  */
           uint32_t             :  3;
      __IO uint32_t  RX_ADDR_FILTER_HIT_MANUAL_VALUE:  1;/*!< rx_addr_filter_hit_manual_value                                  */
           uint32_t             :  7;
      __I  uint32_t  RX_ADDR_FILTER_HIT_INFO_VALID:  1;/*!< rx_addr_filter_hit_info_valid                                      */
           uint32_t             :  7;
      __I  uint32_t  RX_ADDR_FILTER_HIT_INFO_VALUE:  1;/*!< rx_addr_filter_hit_info_value                                      */
    } RX_ADDR_FILTER_HIT_INFO_b;                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_ADDR_FILTER_RESULT_INFO;      /*!< TX_ADDR_FILTER_RESULT_INFO                                            */
    
    struct {
      __IO uint32_t  TX_ADDR_FILTER_RESULT_MANUAL_INVALID:  1;/*!< tx_addr_filter_result_manual_invalid                        */
      __IO uint32_t  TX_ADDR_FILTER_RESULT_MANUAL_SET:  1;/*!< tx_addr_filter_result_manual_set                                */
      __IO uint32_t  TX_ADDR_FILTER_RESULT_MANUAL_OVERWRITE:  1;/*!< tx_addr_filter_result_manual_overwrite                    */
           uint32_t             :  1;
      __IO uint32_t  TX_ADDR_FILTER_RESULT_MANUAL_VALID:  1;/*!< tx_addr_filter_result_manual_valid                            */
           uint32_t             :  3;
      __IO uint32_t  TX_ADDR_FILTER_RESULT_MANUAL_VALUE:  8;/*!< tx_addr_filter_result_manual_value[7:0]                       */
      __I  uint32_t  TX_ADDR_FILTER_RESULT_INFO_VALID:  1;/*!< tx_addr_filter_result_info_valid                                */
           uint32_t             :  7;
      __I  uint32_t  TX_ADDR_FILTER_RESULT_INFO_VALUE:  8;/*!< tx_addr_filter_result_info_value[7:0]                           */
    } TX_ADDR_FILTER_RESULT_INFO_b;                 /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ADDR_TYPE_PEER_INFO_1;           /*!< ADDR_TYPE_PEER_INFO_1                                                 */
    
    struct {
      __IO uint32_t  ADDR_TYPE_PEER_MANUAL_INVALID:  1;/*!< addr_type_peer_manual_invalid                                      */
      __IO uint32_t  ADDR_TYPE_PEER_MANUAL_SET:  1; /*!< addr_type_peer_manual_set                                             */
      __IO uint32_t  ADDR_TYPE_PEER_MANUAL_OVERWRITE:  1;/*!< addr_type_peer_manual_overwrite                                  */
           uint32_t             :  1;
      __IO uint32_t  ADDR_TYPE_PEER_MANUAL_VALID:  1;/*!< addr_type_peer_manual_valid                                          */
           uint32_t             : 11;
      __I  uint32_t  ADDR_TYPE_PEER_INFO_VALID:  1; /*!< addr_type_peer_info_valid                                             */
    } ADDR_TYPE_PEER_INFO_1_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ADDR_TYPE_PEER_INFO_2_0;         /*!< ADDR_TYPE_PEER_INFO_2_0                                               */
    
    struct {
      __IO uint32_t  ADDR_TYPE_PEER_MANUAL_VALUE_31_0: 32;/*!< addr_type_peer_manual_value[31:0]                               */
    } ADDR_TYPE_PEER_INFO_2_0_b;                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ADDR_TYPE_PEER_INFO_2_1;         /*!< see the description in 'ADDR_TYPE_PEER_INFO_2 0'                      */
    
    struct {
      __IO uint32_t  ADDR_TYPE_PEER_MANUAL_VALUE_48_32: 17;/*!< addr_type_peer_manual_value[48:32]                             */
    } ADDR_TYPE_PEER_INFO_2_1_b;                    /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  ADDR_TYPE_PEER_INFO_3_0;         /*!< ADDR_TYPE_PEER_INFO_3_0                                               */
    
    struct {
      __I  uint32_t  ADDR_TYPE_PEER_INFO_VALUE_31_0: 32;/*!< addr_type_peer_info_value = {type_peer, addr_peer}                */
    } ADDR_TYPE_PEER_INFO_3_0_b;                    /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  ADDR_TYPE_PEER_INFO_3_1;         /*!< see the description in 'ADDR_TYPE_PEER_INFO_3 0'                      */
    
    struct {
      __I  uint32_t  ADDR_TYPE_PEER_INFO_VALUE_48_32: 17;/*!< addr_type_peer_info_value = {type_peer, addr_peer}               */
    } ADDR_TYPE_PEER_INFO_3_1_b;                    /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  DISASSEBLER_POLICY_SRC_SRC_0;    /*!< DISASSEBLER_POLICY_SRC_SRC_0                                          */
    
    struct {
      __I  uint32_t  DISASSEMBLER_POLICY_SRC_BUS_31_0: 32;/*!< disassembler policy src signal bus                              */
    } DISASSEBLER_POLICY_SRC_SRC_0_b;               /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  DISASSEBLER_POLICY_SRC_SRC_1;    /*!< see the description in 'DISASSEBLER_POLICY_SRC_SRC 0'                 */
    
    struct {
      __I  uint32_t  DISASSEMBLER_POLICY_SRC_BUS_63_32: 32;/*!< disassembler policy src signal bus                             */
    } DISASSEBLER_POLICY_SRC_SRC_1_b;               /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  RX_CRC_STATUS_0;                 /*!< RX_CRC_STATUS_0                                                       */
    
    struct {
      __I  uint32_t  RX_CRC_INFO: 24;               /*!< rx_crc_info[23:0]                                                     */
    } RX_CRC_STATUS_0_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_CRC_STATUS_1;                 /*!< RX_CRC_STATUS_1                                                       */
    
    struct {
      __IO uint32_t  RX_CRC_OK  :  1;               /*!< rx_crc_ok                                                             */
           uint32_t             :  3;
      __I  uint32_t  RX_CRC_ERR_BF:  1;             /*!< rx_crc_err_bf                                                         */
           uint32_t             :  3;
      __I  uint32_t  RX_CRC_ERR_BN: 12;             /*!< rx_crc_err_bn[11:0]                                                   */
    } RX_CRC_STATUS_1_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  RX_PWR_STATUS;                   /*!< RX_PWR_STATUS                                                         */
    
    struct {
      __I  uint32_t  RX_PWR     :  8;               /*!< rx_pwr[7:0]                                                           */
    } RX_PWR_STATUS_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_BUF_MANUAL_MODE;              /*!< RX_BUF_MANUAL_MODE                                                    */
    
    struct {
      __IO uint32_t  RX_BUF_LOAD_MANUAL_EN:  1;     /*!< rx buffer load manaual mode enable. Set 1 to trigger the buffer
                                                         load function. This bit will be auto cleared after trigger the
                                                          buffer load function.                                                */
    } RX_BUF_MANUAL_MODE_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  RX_INFO;                         /*!< RX_INFO                                                               */
    
    struct {
      __I  uint32_t  RX_HASH_NO_HIT:  1;            /*!< rx_hash_no_hit                                                        */
           uint32_t             :  3;
      __I  uint32_t  RX_HASH_HIT_NUM:  4;           /*!< rx_hash_hit_num[3:0]                                                  */
    } RX_INFO_b;                                    /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  ACCUM_INFO;                      /*!< ACCUM_INFO                                                            */
    
    struct {
      __I  uint32_t  TX_NO_ACK_CNT:  8;             /*!< tx_no_ack_cnt[7:0]                                                    */
      __I  uint32_t  RX_CRC_ERROR_CNT:  8;          /*!< rx_crc_error_cnt[7:0]                                                 */
    } ACCUM_INFO_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  RX_LONG_PDU_EXCEED;              /*!< RX_LONG_PDU_EXCEED                                                    */
    
    struct {
      __I  uint32_t  RX_LONG_PDU_LEN_EXCEED:  1;    /*!< when phy receive pdu length exceed the rx_long_pdu_max_len,
                                                         rx_long_pdu_len_exceed will be set to 1                               */
    } RX_LONG_PDU_EXCEED_b;                         /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED[35];
  
  union {
    __IO uint32_t  CSR_RX_RING_CTRL_0;              /*!< CSR_RX_RING_CTRL_0                                                    */
    
    struct {
      __IO uint32_t  RX_RING_DESC_BASE_ADDR: 32;    /*!< sets the base address of rx_ring descriptor source addr;              */
    } CSR_RX_RING_CTRL_0_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_RX_RING_CTRL_1;              /*!< CSR_RX_RING_CTRL_1                                                    */
    
    struct {
      __IO uint32_t  RX_RING_ENTRY_BASE_ADDR: 32;   /*!< sets the base address of rx_ring source addr; so only 16-bit
                                                         offset address is required in each ring entry; BL_addr=32             */
    } CSR_RX_RING_CTRL_1_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_RX_RING_CTRL_2;              /*!< CSR_RX_RING_CTRL_2                                                    */
    
    struct {
      __IO uint32_t  RX_RING_RD_VPTR:  8;           /*!< rx ring read pointer; would be updated by MCU via CSR write
                                                         BL_ring_size = roundup(log2(BL_addr)) = 8                             */
      __IO uint32_t  RX_RING_WR_VPTR:  8;           /*!< rx ring write pointer. set rx_ring_wr_vptr initial value before
                                                         rx_ring is enabled. when rx_ring is enabled, rx_ring_wr_vptr
                                                          shows current rx ring write pointer                                  */
    } CSR_RX_RING_CTRL_2_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_RX_RING_CTRL_3;              /*!< CSR_RX_RING_CTRL_3                                                    */
    
    struct {
      __IO uint32_t  RX_RING_SIZE:  8;              /*!< 8b1111 for a ring size of 16 8b11111 for a ring size of 32 valid
                                                         ring sizes are 1,2,4,8,16,32,64,128                                   */
    } CSR_RX_RING_CTRL_3_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_RING_LONG_PDU_BUF_ADDR;       /*!< RX_RING_LONG_PDU_BUF_ADDR                                             */
    
    struct {
      __IO uint32_t  RX_LONG_PDU_BUF_ADDR: 32;      /*!< rx long pdu buffer sram base address                                  */
    } RX_RING_LONG_PDU_BUF_ADDR_b;                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_RING_LONG_PDU_MAX_LEN;        /*!< RX_RING_LONG_PDU_MAX_LEN                                              */
    
    struct {
      __IO uint32_t  RX_LONG_PDU_MAX_LEN:  8;       /*!< rx_long_pdu_max_len[7:0]                                              */
    } RX_RING_LONG_PDU_MAX_LEN_b;                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_RX_RING_CTRL_4;              /*!< CSR_RX_RING_CTRL_4                                                    */
    
    struct {
      __IO uint32_t  RX_RING_RX_DMA_SRC: 32;        /*!< rx_ring_rx_dma_src[31:0]                                              */
    } CSR_RX_RING_CTRL_4_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_RX_RING_TXQ_DMA;             /*!< CSR_RX_RING_TXQ_DMA                                                   */
    
    struct {
      __IO uint32_t  RXQ_DMA_BADR_EN:  1;           /*!< for original rxq_dma                                                  */
      __IO uint32_t  RXQ_DMA_DST_INC:  1;           /*!< for original rxq_dma                                                  */
      __IO uint32_t  RXQ_DMA_SRC_INC:  1;           /*!< for original rxq_dma                                                  */
      __IO uint32_t  RXQ_DMA_DST_SIZE:  3;          /*!< for original rxq_dma                                                  */
      __IO uint32_t  RXQ_DMA_SRC_SIZE:  3;          /*!< for original rxq_dma                                                  */
    } CSR_RX_RING_TXQ_DMA_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_RX_RING_INT;                 /*!< CSR_RX_RING_INT                                                       */
    
    struct {
      __IO uint32_t  RX_RING_FULL_MASKINT:  1;      /*!< mask int <<@@@351,csr_ll_rx_ring.txt/{main},57,,0x0%ll_trx_reg.txt/{main}%
                                                         -0x160%csr_ll_rx_ring.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : rx_ring_full_en
                                                         d                                                                     */
      __IO uint32_t  RX_RING_FULL_CLRINT:  1;       /*!< clear int <<@@@349,csr_ll_rx_ring.txt/{main},55,,0x0%ll_trx_reg.txt/{main}
                                                         %-0x160%csr_ll_rx_ring.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> :
                                                         rx_ring_full_end                                                      */
      __IO uint32_t  RX_RING_STORE_END_MASKINT:  1; /*!< mask int <<@@@347,csr_ll_rx_ring.txt/{main},53,,0x0%ll_trx_reg.txt/{main}%
                                                         -0x160%csr_ll_rx_ring.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : rx_ring_store_e
                                                         nd                                                                    */
      __IO uint32_t  RX_RING_STORE_END_CLRINT:  1;  /*!< clear int <<@@@345,csr_ll_rx_ring.txt/{main},51,,0x0%ll_trx_reg.txt/{main}
                                                         %-0x160%csr_ll_rx_ring.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> :
                                                         rx_ring_store_end                                                     */
    } CSR_RX_RING_INT_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  INT_RX_RING;                     /*!< INT_RX_RING                                                           */
    
    struct {
      __I  uint32_t  LL_RX_RING_STORE_END_INT:  1;  /*!< interrupt; indicates the requested packet-store has completed         */
           uint32_t             :  7;
      __I  uint32_t  LL_RX_RING_FULL_INT:  1;       /*!< interrupt; indicates rx_ring_full                                     */
    } INT_RX_RING_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  DBG_RX_RING_CNT;                 /*!< DBG_RX_RING_CNT                                                       */
    
    struct {
      __I  uint32_t  RO_LL_RX_RING_ENTRY_CNT:  8;   /*!< dbg                                                                   */
    } DBG_RX_RING_CNT_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  DBG_RX_RING_WR_ADDR;             /*!< DBG_RX_RING_WR_ADDR                                                   */
    
    struct {
      __I  uint32_t  RO_LL_RX_RING_WR_ENTRY_ADDR: 32;/*!< dbg                                                                  */
    } DBG_RX_RING_WR_ADDR_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_WHITELIST_ADDR0_0;        /*!< CSR_TX_WHITELIST_ADDR0_0                                              */
    
    struct {
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV0_ADDR_31_0: 32;/*!< device address of tx filter whitelist no.0                 */
    } CSR_TX_WHITELIST_ADDR0_0_b;                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_WHITELIST_ADDR0_1;        /*!< see the description in 'CSR_TX_WHITELIST_ADDR0 0'                     */
    
    struct {
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV0_ADDR_47_32: 16;/*!< device address of tx filter whitelist no.0                */
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV0_TYPE:  1;/*!< device type of tx filter whitelist no.0                         */
    } CSR_TX_WHITELIST_ADDR0_1_b;                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_WHITELIST_ADDR1_0;        /*!< CSR_TX_WHITELIST_ADDR1_0                                              */
    
    struct {
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV1_ADDR_31_0: 32;/*!< device address of tx filter whitelist no.0                 */
    } CSR_TX_WHITELIST_ADDR1_0_b;                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_WHITELIST_ADDR1_1;        /*!< see the description in 'CSR_TX_WHITELIST_ADDR1 0'                     */
    
    struct {
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV1_ADDR_47_32: 16;/*!< device address of tx filter whitelist no.0                */
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV1_TYPE:  1;/*!< device type of tx filter whitelist no.0                         */
    } CSR_TX_WHITELIST_ADDR1_1_b;                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_WHITELIST_ADDR2_0;        /*!< CSR_TX_WHITELIST_ADDR2_0                                              */
    
    struct {
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV2_ADDR_31_0: 32;/*!< device address of tx filter whitelist no.0                 */
    } CSR_TX_WHITELIST_ADDR2_0_b;                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_WHITELIST_ADDR2_1;        /*!< see the description in 'CSR_TX_WHITELIST_ADDR2 0'                     */
    
    struct {
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV2_ADDR_47_32: 16;/*!< device address of tx filter whitelist no.0                */
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV2_TYPE:  1;/*!< device type of tx filter whitelist no.0                         */
    } CSR_TX_WHITELIST_ADDR2_1_b;                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_WHITELIST_ADDR3_0;        /*!< CSR_TX_WHITELIST_ADDR3_0                                              */
    
    struct {
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV3_ADDR_31_0: 32;/*!< device address of tx filter whitelist no.0                 */
    } CSR_TX_WHITELIST_ADDR3_0_b;                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_WHITELIST_ADDR3_1;        /*!< see the description in 'CSR_TX_WHITELIST_ADDR3 0'                     */
    
    struct {
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV3_ADDR_47_32: 16;/*!< device address of tx filter whitelist no.0                */
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV3_TYPE:  1;/*!< device type of tx filter whitelist no.0                         */
    } CSR_TX_WHITELIST_ADDR3_1_b;                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_WHITELIST_ADDR4_0;        /*!< CSR_TX_WHITELIST_ADDR4_0                                              */
    
    struct {
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV4_ADDR_31_0: 32;/*!< device address of tx filter whitelist no.0                 */
    } CSR_TX_WHITELIST_ADDR4_0_b;                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_WHITELIST_ADDR4_1;        /*!< see the description in 'CSR_TX_WHITELIST_ADDR4 0'                     */
    
    struct {
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV4_ADDR_47_32: 16;/*!< device address of tx filter whitelist no.0                */
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV4_TYPE:  1;/*!< device type of tx filter whitelist no.0                         */
    } CSR_TX_WHITELIST_ADDR4_1_b;                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_WHITELIST_ADDR5_0;        /*!< CSR_TX_WHITELIST_ADDR5_0                                              */
    
    struct {
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV5_ADDR_31_0: 32;/*!< device address of tx filter whitelist no.0                 */
    } CSR_TX_WHITELIST_ADDR5_0_b;                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_WHITELIST_ADDR5_1;        /*!< see the description in 'CSR_TX_WHITELIST_ADDR5 0'                     */
    
    struct {
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV5_ADDR_47_32: 16;/*!< device address of tx filter whitelist no.0                */
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV5_TYPE:  1;/*!< device type of tx filter whitelist no.0                         */
    } CSR_TX_WHITELIST_ADDR5_1_b;                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_WHITELIST_ADDR6_0;        /*!< CSR_TX_WHITELIST_ADDR6_0                                              */
    
    struct {
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV6_ADDR_31_0: 32;/*!< device address of tx filter whitelist no.0                 */
    } CSR_TX_WHITELIST_ADDR6_0_b;                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_WHITELIST_ADDR6_1;        /*!< see the description in 'CSR_TX_WHITELIST_ADDR6 0'                     */
    
    struct {
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV6_ADDR_47_32: 16;/*!< device address of tx filter whitelist no.0                */
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV6_TYPE:  1;/*!< device type of tx filter whitelist no.0                         */
    } CSR_TX_WHITELIST_ADDR6_1_b;                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_WHITELIST_ADDR7_0;        /*!< CSR_TX_WHITELIST_ADDR7_0                                              */
    
    struct {
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV7_ADDR_31_0: 32;/*!< device address of tx filter whitelist no.0                 */
    } CSR_TX_WHITELIST_ADDR7_0_b;                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_WHITELIST_ADDR7_1;        /*!< see the description in 'CSR_TX_WHITELIST_ADDR7 0'                     */
    
    struct {
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV7_ADDR_47_32: 16;/*!< device address of tx filter whitelist no.0                */
      __IO uint32_t  LL_DEVFILTER_WHITELIST_DEV7_TYPE:  1;/*!< device type of tx filter whitelist no.0                         */
    } CSR_TX_WHITELIST_ADDR7_1_b;                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_WHITELIST_BASE0;          /*!< CSR_TX_WHITELIST_BASE0                                                */
    
    struct {
      __IO uint32_t  LL_DEVFILTER_WHITELIST_ENABLE:  8;/*!< pa_tx_white_num=8                                                  */
    } CSR_TX_WHITELIST_BASE0_b;                     /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_WHITELIST_BASE1;          /*!< CSR_TX_WHITELIST_BASE1                                                */
    
    struct {
      __IO uint32_t  LL_DEVFILTER_WHITELIST_MASK: 20;/*!< spare certain bits from comparison by setting corresponding
                                                         mask bit to 1 [07:00]: bit-mask when compare addr-value byte[0]
                                                          (1-to-1) [15:08]: bit-mask when compare addr-value byte[5] (1-to-1)
                                                          [16]: byte-mask when compare addr-value byte[1] (1-to-8) [17]:
                                                          byte-mask when compare addr-value byte[2] (1-to-8) [18]: byte-mask
                                                          when compare addr-value byte[3] (1-to-8) [19]: byte-mask when
                                                          compare addr-value byte[4] (1-to-8)                                  */
    } CSR_TX_WHITELIST_BASE1_b;                     /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED1[2];
  
  union {
    __IO uint32_t  LL_TX_PDU_RAW_MODE;              /*!< LL_TX_PDU_RAW_MODE                                                    */
    
    struct {
      __IO uint32_t  LL_TX_RAW_MODE:  1;            /*!< enable link layer pdu assemble raw mode                               */
           uint32_t             :  7;
      __IO uint32_t  LL_TX_RAW_MODE_PDU_LENG:  8;   /*!< ll_tx_raw_mode_pdu_leng[7:0]                                          */
    } LL_TX_PDU_RAW_MODE_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_TX_TBL_SET0;                  /*!< LL_TX_TBL_SET0                                                        */
    
    struct {
      __IO uint32_t  LL_TX_ADV_HDR_TBL_VALID:  8;   /*!< ll_tx_adv_hdr_tbl_valid[7:0]                                          */
    } LL_TX_TBL_SET0_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_TX_TBL_VALUE0;                /*!< LL_TX_TBL_VALUE0                                                      */
    
    struct {
      __IO uint32_t  LL_TX_ADV_HDR_TBL_VALUE0:  8;  /*!< ll_tx_adv_hdr_tbl_value0[7:0]                                         */
      __IO uint32_t  LL_TX_ADV_HDR_TBL_VALUE1:  8;  /*!< ll_tx_adv_hdr_tbl_value1[7:0]                                         */
      __IO uint32_t  LL_TX_ADV_HDR_TBL_VALUE2:  8;  /*!< ll_tx_adv_hdr_tbl_value2[7:0]                                         */
      __IO uint32_t  LL_TX_ADV_HDR_TBL_VALUE3:  8;  /*!< ll_tx_adv_hdr_tbl_value3[7:0]                                         */
    } LL_TX_TBL_VALUE0_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_TX_TBL_VALUE1;                /*!< LL_TX_TBL_VALUE1                                                      */
    
    struct {
      __IO uint32_t  LL_TX_ADV_HDR_TBL_VALUE4:  8;  /*!< ll_tx_adv_hdr_tbl_value4[7:0]                                         */
      __IO uint32_t  LL_TX_ADV_HDR_TBL_VALUE5:  8;  /*!< ll_tx_adv_hdr_tbl_value5[7:0]                                         */
      __IO uint32_t  LL_TX_ADV_HDR_TBL_VALUE6:  8;  /*!< ll_tx_adv_hdr_tbl_value6[7:0]                                         */
      __IO uint32_t  LL_TX_ADV_HDR_TBL_VALUE7:  8;  /*!< ll_tx_adv_hdr_tbl_value7[7:0]                                         */
    } LL_TX_TBL_VALUE1_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_ADV_HDR_BUILD_SET0;           /*!< LL_ADV_HDR_BUILD_SET0                                                 */
    
    struct {
      __IO uint32_t  CFG_ADV_HDR_BUILD_RX_ADDR:  1; /*!< cfg_adv_hdr_build_rx_addr                                             */
      __IO uint32_t  CFG_ADV_HDR_BUILD_TX_ADDR:  1; /*!< cfg_adv_hdr_build_tx_addr                                             */
      __IO uint32_t  CFG_ADV_HDR_BUILD_TYPE:  1;    /*!< cfg_adv_hdr_build_type                                                */
    } LL_ADV_HDR_BUILD_SET0_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_PAYLOAD_BUILD_SET0;           /*!< LL_PAYLOAD_BUILD_SET0                                                 */
    
    struct {
      __IO uint32_t  CFG_ADV_PAYLOAD_BUILD_RX_ADDR:  1;/*!< cfg_adv_payload_build_rx_addr                                      */
      __IO uint32_t  CFG_ADV_PAYLOAD_BUILD_TX_ADDR:  1;/*!< cfg_adv_payload_build_tx_addr                                      */
    } LL_PAYLOAD_BUILD_SET0_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  LL_DAT_HDR_BUILD_SET;            /*!< LL_DAT_HDR_BUILD_SET                                                  */
    
    struct {
      __IO uint32_t  DATA_HDR_BUILD_MD_OV_VALUE:  1;/*!< data_hdr_build_md_ov_value                                            */
      __IO uint32_t  DATA_HDR_BUILD_MD_OV:  1;      /*!< data_hdr_build_md_ov                                                  */
      __IO uint32_t  DATA_HDR_BUILD_MD:  1;         /*!< data_hdr_build_md                                                     */
      __IO uint32_t  DATA_HDR_BUILD_SN_OV_VALUE:  1;/*!< data_hdr_build_sn_ov_value                                            */
      __IO uint32_t  DATA_HDR_BUILD_SN_OV:  1;      /*!< data_hdr_build_sn_ov                                                  */
      __IO uint32_t  DATA_HDR_BUILD_SN:  1;         /*!< data_hdr_build_sn                                                     */
      __IO uint32_t  DATA_HDR_BUILD_NESN_OV_VALUE:  1;/*!< data_hdr_build_nesn_ov_value                                        */
      __IO uint32_t  DATA_HDR_BUILD_NESN_OV:  1;    /*!< data_hdr_build_nesn_ov                                                */
      __IO uint32_t  DATA_HDR_BUILD_NESN:  1;       /*!< data_hdr_build_nesn                                                   */
      __IO uint32_t  DATA_HDR_BUILD_TYPE:  1;       /*!< data_hdr_build_type                                                   */
           uint32_t             :  6;
      __IO uint32_t  RG_DATA_HDR_BUILD:  1;         /*!< rg_data_hdr_build                                                     */
    } LL_DAT_HDR_BUILD_SET_b;                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_PDU_REQ_SET;                  /*!< TX_PDU_REQ_SET                                                        */
    
    struct {
      __IO uint32_t  TX_PDU_REQ_MANUAL:  1;         /*!< tx_pdu_req_manual                                                     */
    } TX_PDU_REQ_SET_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_ADV_HDR_BUILD_INFO;           /*!< TX_ADV_HDR_BUILD_INFO                                                 */
    
    struct {
      __IO uint32_t  DECISION_TX_ADV_HDR_BUILD_MANUAL_INVALID:  1;/*!< decision_tx_adv_hdr_build_manual_invalid                */
      __IO uint32_t  DECISION_TX_ADV_HDR_BUILD_MANUAL_SET:  1;/*!< decision_tx_adv_hdr_build_manual_set                        */
      __IO uint32_t  DECISION_TX_ADV_HDR_BUILD_MANUAL_OVERWRITE:  1;/*!< decision_tx_adv_hdr_build_manual_overwrite            */
           uint32_t             :  1;
      __IO uint32_t  DECISION_TX_ADV_HDR_BUILD_MANUAL_VALID:  1;/*!< decision_tx_adv_hdr_build_manual_valid                    */
           uint32_t             :  3;
      __IO uint32_t  DECISION_TX_ADV_HDR_BUILD_MANUAL_VALUE:  1;/*!< decision_tx_adv_hdr_build_manual_value                    */
           uint32_t             :  7;
      __I  uint32_t  DECISION_TX_ADV_HDR_BUILD_INFO_VALID:  1;/*!< decision_tx_adv_hdr_build_info_valid                        */
           uint32_t             :  7;
      __I  uint32_t  DECISION_TX_ADV_HDR_BUILD_INFO_VALUE:  1;/*!< decision_tx_adv_hdr_build_info_value                        */
    } TX_ADV_HDR_BUILD_INFO_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_ADV_PLOAD_TX_ADR_BUILD_INFO;  /*!< TX_ADV_PLOAD_TX_ADR_BUILD_INFO                                        */
    
    struct {
      __IO uint32_t  DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_MANUAL_INVALID:  1;/*!< decision_tx_adv_payload_tx_addr_build_manual_invalid */
      __IO uint32_t  DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_MANUAL_SET:  1;/*!< decision_tx_adv_payload_tx_addr_build_manual_set */
      __IO uint32_t  DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_MANUAL_OVERWRITE:  1;/*!< decision_tx_adv_payload_tx_addr_build_manual_overwrite */
           uint32_t             :  1;
      __IO uint32_t  DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_MANUAL_VALID:  1;/*!< decision_tx_adv_payload_tx_addr_build_manual_valid */
           uint32_t             :  3;
      __IO uint32_t  DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_MANUAL_VALUE:  1;/*!< decision_tx_adv_payload_tx_addr_build_manual_value */
           uint32_t             :  7;
      __I  uint32_t  DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_INFO_VALID:  1;/*!< decision_tx_adv_payload_tx_addr_build_info_valid */
           uint32_t             :  7;
      __I  uint32_t  DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_INFO_VALUE:  1;/*!< decision_tx_adv_payload_tx_addr_build_info_value */
    } TX_ADV_PLOAD_TX_ADR_BUILD_INFO_b;             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_ADV_PLOAD_RX_ADR_BUILD_INFO;  /*!< TX_ADV_PLOAD_RX_ADR_BUILD_INFO                                        */
    
    struct {
      __IO uint32_t  DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_MANUAL_INVALID:  1;/*!< decision_tx_adv_payload_rx_addr_build_manual_invalid */
      __IO uint32_t  DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_MANUAL_SET:  1;/*!< decision_tx_adv_payload_rx_addr_build_manual_set */
      __IO uint32_t  DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_MANUAL_OVERWRITE:  1;/*!< decision_tx_adv_payload_rx_addr_build_manual_overwrite */
           uint32_t             :  1;
      __IO uint32_t  DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_MANUAL_VALID:  1;/*!< decision_tx_adv_payload_rx_addr_build_manual_valid */
           uint32_t             :  3;
      __IO uint32_t  DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_MANUAL_VALUE:  1;/*!< decision_tx_adv_payload_rx_addr_build_manual_value */
           uint32_t             :  7;
      __I  uint32_t  DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_INFO_VALID:  1;/*!< decision_tx_adv_payload_rx_addr_build_info_valid */
           uint32_t             :  7;
      __I  uint32_t  DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_INFO_VALUE:  1;/*!< decision_tx_adv_payload_rx_addr_build_info_value */
    } TX_ADV_PLOAD_RX_ADR_BUILD_INFO_b;             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_ADV_PLOAD_RX_ADR_SRC_INFO;    /*!< TX_ADV_PLOAD_RX_ADR_SRC_INFO                                          */
    
    struct {
      __IO uint32_t  DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_MANUAL_INVALID:  1;/*!< decision_tx_adv_payload_rx_addr_src_manual_invalid */
      __IO uint32_t  DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_MANUAL_SET:  1;/*!< decision_tx_adv_payload_rx_addr_src_manual_set    */
      __IO uint32_t  DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_MANUAL_OVERWRITE:  1;/*!< decision_tx_adv_payload_rx_addr_src_manual_overwrite */
           uint32_t             :  1;
      __IO uint32_t  DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_MANUAL_VALID:  1;/*!< decision_tx_adv_payload_rx_addr_src_manual_valid */
           uint32_t             :  3;
      __IO uint32_t  DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_MANUAL_VALUE:  1;/*!< decision_tx_adv_payload_rx_addr_src_manual_value */
           uint32_t             :  7;
      __I  uint32_t  DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_INFO_VALID:  1;/*!< decision_tx_adv_payload_rx_addr_src_info_valid    */
           uint32_t             :  7;
      __I  uint32_t  DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_INFO_VALUE:  1;/*!< decision_tx_adv_payload_rx_addr_src_info_value    */
    } TX_ADV_PLOAD_RX_ADR_SRC_INFO_b;               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DATA_SN_OWN_INFO;                /*!< DATA_SN_OWN_INFO                                                      */
    
    struct {
      __IO uint32_t  DATA_SN_OWN_MANUAL_INVALID:  1;/*!< data_sn_own_manual_invalid                                            */
      __IO uint32_t  DATA_SN_OWN_MANUAL_SET:  1;    /*!< data_sn_own_manual_set                                                */
      __IO uint32_t  DATA_SN_OWN_MANUAL_OVERWRITE:  1;/*!< data_sn_own_manual_overwrite                                        */
           uint32_t             :  1;
      __IO uint32_t  DATA_SN_OWN_MANUAL_VALID:  1;  /*!< data_sn_own_manual_valid                                              */
           uint32_t             :  3;
      __IO uint32_t  DATA_SN_OWN_MANUAL_VALUE:  1;  /*!< data_sn_own_manual_value                                              */
           uint32_t             :  7;
      __I  uint32_t  DATA_SN_OWN_INFO_VALID:  1;    /*!< data_sn_own_info_valid                                                */
           uint32_t             :  7;
      __I  uint32_t  DATA_SN_OWN_INFO_VALUE:  1;    /*!< data_sn_own_info_value                                                */
    } DATA_SN_OWN_INFO_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DATA_MD_INFO;                    /*!< DATA_MD_INFO                                                          */
    
    struct {
      __IO uint32_t  DATA_MD_OWN_MANUAL_INVALID:  1;/*!< data_md_own_manual_invalid                                            */
      __IO uint32_t  DATA_MD_OWN_MANUAL_SET:  1;    /*!< data_md_own_manual_set                                                */
      __IO uint32_t  DATA_MD_OWN_MANUAL_OVERWRITE:  1;/*!< data_md_own_manual_overwrite                                        */
           uint32_t             :  1;
      __IO uint32_t  DATA_MD_OWN_MANUAL_VALID:  1;  /*!< data_md_own_manual_valid                                              */
           uint32_t             :  3;
      __IO uint32_t  DATA_MD_OWN_MANUAL_VALUE:  1;  /*!< data_md_own_manual_value                                              */
           uint32_t             :  7;
      __I  uint32_t  DATA_MD_OWN_INFO_VALID:  1;    /*!< data_md_own_info_valid                                                */
           uint32_t             :  7;
      __I  uint32_t  DATA_MD_OWN_INFO_VALUE:  1;    /*!< data_md_own_info_value                                                */
    } DATA_MD_INFO_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_DUMY_POLICY_0;                /*!< TX_DUMY_POLICY_0                                                      */
    
    struct {
      __IO uint32_t  TX_DUMY_POLICY_SIG0_SEL:  6;   /*!< tx_dumy_policy_sig0_sel[5:0]                                          */
           uint32_t             :  2;
      __IO uint32_t  TX_DUMY_POLICY_SIG1_SEL:  6;   /*!< tx_dumy_policy_sig1_sel[5:0]                                          */
           uint32_t             :  2;
      __IO uint32_t  TX_DUMY_POLICY_SIG2_SEL:  6;   /*!< tx_dumy_policy_sig2_sel[5:0]                                          */
           uint32_t             :  2;
      __IO uint32_t  TX_DUMY_POLICY_SIG3_SEL:  6;   /*!< tx_dumy_policy_sig3_sel[5:0]                                          */
      __IO uint32_t  TX_DUMY_POLICY_MANUAL_VALUE:  1;/*!< tx_dumy_policy_manual_value                                          */
      __IO uint32_t  TX_DUMY_POLICY_MANUAL_EN:  1;  /*!< tx_dumy_policy_manual_en                                              */
    } TX_DUMY_POLICY_0_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_DUMY_POLICY_1;                /*!< TX_DUMY_POLICY_1                                                      */
    
    struct {
      __IO uint32_t  TX_DUMY_POLICY_W1C:  1;        /*!< tx_dumy_policy_w1c                                                    */
      __IO uint32_t  TX_DUMY_POLICY_W1S:  1;        /*!< tx_dumy_policy_w1s                                                    */
    } TX_DUMY_POLICY_1_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_DUMY_POLICY_2;                /*!< TX_DUMY_POLICY_2                                                      */
    
    struct {
      __IO uint32_t  TX_DUMY_POLICY: 32;            /*!< tx_dumy_policy[31:0]                                                  */
    } TX_DUMY_POLICY_2_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PDU_ASSEMBLE_IRQ_POLICY_0;       /*!< PDU_ASSEMBLE_IRQ_POLICY_0                                             */
    
    struct {
      __IO uint32_t  PDU_ASSEMBLE_IRQ_POLICY_SIG0_SEL:  6;/*!< pdu_assemble_irq_policy_sig0_sel[5:0]                           */
           uint32_t             :  2;
      __IO uint32_t  PDU_ASSEMBLE_IRQ_POLICY_SIG1_SEL:  6;/*!< pdu_assemble_irq_policy_sig1_sel[5:0]                           */
           uint32_t             :  2;
      __IO uint32_t  PDU_ASSEMBLE_IRQ_POLICY_SIG2_SEL:  6;/*!< pdu_assemble_irq_policy_sig2_sel[5:0]                           */
           uint32_t             :  2;
      __IO uint32_t  PDU_ASSEMBLE_IRQ_POLICY_SIG3_SEL:  6;/*!< pdu_assemble_irq_policy_sig3_sel[5:0]                           */
      __IO uint32_t  PDU_ASSEMBLE_IRQ_POLICY_MANUAL_VALUE:  1;/*!< pdu_assemble_irq_policy_manual_value                        */
      __IO uint32_t  PDU_ASSEMBLE_IRQ_POLICY_MANUAL_EN:  1;/*!< pdu_assemble_irq_policy_manual_en                              */
    } PDU_ASSEMBLE_IRQ_POLICY_0_b;                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PDU_ASSEMBLE_IRQ_POLICY_1;       /*!< PDU_ASSEMBLE_IRQ_POLICY_1                                             */
    
    struct {
      __IO uint32_t  PDU_ASSEMBLE_IRQ_POLICY_W1C:  1;/*!< pdu_assemble_irq_policy_w1c                                          */
      __IO uint32_t  PDU_ASSEMBLE_IRQ_POLICY_W1S:  1;/*!< pdu_assemble_irq_policy_w1s                                          */
    } PDU_ASSEMBLE_IRQ_POLICY_1_b;                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PDU_ASSEMBLE_IRQ_POLICY_2;       /*!< PDU_ASSEMBLE_IRQ_POLICY_2                                             */
    
    struct {
      __IO uint32_t  PDU_ASSEMBLE_IRQ_POLICY: 32;   /*!< pdu_assemble_irq_policy[31:0]                                         */
    } PDU_ASSEMBLE_IRQ_POLICY_2_b;                  /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  ASSEBLER_POLICY_SRC_BUS_0;       /*!< ASSEBLER_POLICY_SRC_BUS_0                                             */
    
    struct {
      __I  uint32_t  ASSEMBLER_POLICY_SRC_BUS_31_0: 32;/*!< assembler policy src signal bus                                    */
    } ASSEBLER_POLICY_SRC_BUS_0_b;                  /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  ASSEBLER_POLICY_SRC_BUS_1;       /*!< see the description in 'ASSEBLER_POLICY_SRC_BUS 0'                    */
    
    struct {
      __I  uint32_t  ASSEMBLER_POLICY_SRC_BUS_63_32: 32;/*!< assembler policy src signal bus                                   */
    } ASSEBLER_POLICY_SRC_BUS_1_b;                  /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  LL_TX_TBL_INFO;                  /*!< LL_TX_TBL_INFO                                                        */
    
    struct {
      __I  uint32_t  TBL_LOOKUP_NO_HIT:  1;         /*!< tbl_lookup_no_hit                                                     */
    } LL_TX_TBL_INFO_b;                             /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED2[21];
  
  union {
    __IO uint32_t  CSR_TX_RING_CTRL_0;              /*!< CSR_TX_RING_CTRL_0                                                    */
    
    struct {
      __IO uint32_t  TX_RING_DESC_BASE_ADDR: 32;    /*!< sets the base address of tx_ring descriptor source addr;              */
    } CSR_TX_RING_CTRL_0_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_RING_CTRL_1;              /*!< CSR_TX_RING_CTRL_1                                                    */
    
    struct {
      __IO uint32_t  TX_RING_ENTRY_BASE_ADDR: 32;   /*!< sets the base address of tx_ring entry source addr;                   */
    } CSR_TX_RING_CTRL_1_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_RING_CTRL_2;              /*!< CSR_TX_RING_CTRL_2                                                    */
    
    struct {
      __IO uint32_t  TX_RING_RD_VPTR:  8;           /*!< set tx_ring_rd_vptr initial value before rx_ring is enabled.
                                                         when tx_ring is enabled, tx_ring_rd_vptr shows current rx ring
                                                          read pointer                                                         */
      __IO uint32_t  TX_RING_WR_VPTR:  8;           /*!< tx ring write pointer; would be updated by MCU via CSR write          */
    } CSR_TX_RING_CTRL_2_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_RING_CTRL_3;              /*!< CSR_TX_RING_CTRL_3                                                    */
    
    struct {
      __IO uint32_t  TX_RING_SIZE:  7;              /*!< 8b1111 for a ring size of 16 8b11111 for a ring size of 32 valid
                                                         ring sizes are 1,2,4,8,16,32,64,128                                   */
    } CSR_TX_RING_CTRL_3_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_RING_LONG_PDU_BUF_ADDR;       /*!< TX_RING_LONG_PDU_BUF_ADDR                                             */
    
    struct {
      __IO uint32_t  TX_LONG_PDU_BUF_ADDR: 32;      /*!< tx long pdu buffer sram addr                                          */
    } TX_RING_LONG_PDU_BUF_ADDR_b;                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_RING_CTRL_5;              /*!< CSR_TX_RING_CTRL_5                                                    */
    
    struct {
      __IO uint32_t  RG_NULL_ADDR: 32;              /*!< sets the entry address when ring null;                                */
    } CSR_TX_RING_CTRL_5_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_DATA_SN_OWN_POLICY_0;         /*!< TX_DATA_SN_OWN_POLICY_0                                               */
    
    struct {
      __IO uint32_t  TX_DATA_SN_OWN_POLICY_SIG0_SEL:  6;/*!< tx_data_sn_own_policy_sig0_sel[5:0]                               */
           uint32_t             :  2;
      __IO uint32_t  TX_DATA_SN_OWN_POLICY_SIG1_SEL:  6;/*!< tx_data_sn_own_policy_sig1_sel[5:0]                               */
           uint32_t             :  2;
      __IO uint32_t  TX_DATA_SN_OWN_POLICY_SIG2_SEL:  6;/*!< tx_data_sn_own_policy_sig2_sel[5:0]                               */
           uint32_t             :  2;
      __IO uint32_t  TX_DATA_SN_OWN_POLICY_SIG3_SEL:  6;/*!< tx_data_sn_own_policy_sig3_sel[5:0]                               */
      __IO uint32_t  TX_DATA_SN_OWN_POLICY_MANUAL_VALUE:  1;/*!< tx_data_sn_own_policy_manual_value                            */
      __IO uint32_t  TX_DATA_SN_OWN_POLICY_MANUAL_EN:  1;/*!< tx_data_sn_own_policy_manual_en                                  */
    } TX_DATA_SN_OWN_POLICY_0_b;                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_DATA_SN_OWN_POLICY_1;         /*!< TX_DATA_SN_OWN_POLICY_1                                               */
    
    struct {
      __IO uint32_t  TX_DATA_SN_OWN_POLICY_W1C:  1; /*!< tx_data_sn_own_policy_w1c                                             */
      __IO uint32_t  TX_DATA_SN_OWN_POLICY_W1S:  1; /*!< tx_data_sn_own_policy_w1s                                             */
    } TX_DATA_SN_OWN_POLICY_1_b;                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_DATA_SN_OWN_POLICY_2;         /*!< TX_DATA_SN_OWN_POLICY_2                                               */
    
    struct {
      __IO uint32_t  TX_DATA_SN_OWN_POLICY: 32;     /*!< tx_data_sn_own_policy[31:0]                                           */
    } TX_DATA_SN_OWN_POLICY_2_b;                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_DATA_MD_OWN_POLICY_0;         /*!< TX_DATA_MD_OWN_POLICY_0                                               */
    
    struct {
      __IO uint32_t  TX_DATA_MD_OWN_POLICY_SIG0_SEL:  6;/*!< tx_data_md_own_policy_sig0_sel[5:0]                               */
           uint32_t             :  2;
      __IO uint32_t  TX_DATA_MD_OWN_POLICY_SIG1_SEL:  6;/*!< tx_data_md_own_policy_sig1_sel[5:0]                               */
           uint32_t             :  2;
      __IO uint32_t  TX_DATA_MD_OWN_POLICY_SIG2_SEL:  6;/*!< tx_data_md_own_policy_sig2_sel[5:0]                               */
           uint32_t             :  2;
      __IO uint32_t  TX_DATA_MD_OWN_POLICY_SIG3_SEL:  6;/*!< tx_data_md_own_policy_sig3_sel[5:0]                               */
      __IO uint32_t  TX_DATA_MD_OWN_POLICY_MANUAL_VALUE:  1;/*!< tx_data_md_own_policy_manual_value                            */
      __IO uint32_t  TX_DATA_MD_OWN_POLICY_MANUAL_EN:  1;/*!< tx_data_md_own_policy_manual_en                                  */
    } TX_DATA_MD_OWN_POLICY_0_b;                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_DATA_MD_OWN_POLICY_1;         /*!< TX_DATA_MD_OWN_POLICY_1                                               */
    
    struct {
      __IO uint32_t  TX_DATA_MD_OWN_POLICY_W1C:  1; /*!< tx_data_md_own_policy_w1c                                             */
      __IO uint32_t  TX_DATA_MD_OWN_POLICY_W1S:  1; /*!< tx_data_md_own_policy_w1s                                             */
    } TX_DATA_MD_OWN_POLICY_1_b;                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_DATA_MD_OWN_POLICY_2;         /*!< TX_DATA_MD_OWN_POLICY_2                                               */
    
    struct {
      __IO uint32_t  TX_DATA_MD_OWN_POLICY: 32;     /*!< tx_data_md_own_policy[31:0]                                           */
    } TX_DATA_MD_OWN_POLICY_2_b;                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0;/*!< TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0                                */
    
    struct {
      __IO uint32_t  TX_RING_RD_VPTR_INC_NOTIFY_POLICY_SIG0_SEL:  6;/*!< tx_ring_rd_vptr_inc_notify_policy_sig0_sel[5:0]       */
           uint32_t             :  2;
      __IO uint32_t  TX_RING_RD_VPTR_INC_NOTIFY_POLICY_SIG1_SEL:  6;/*!< tx_ring_rd_vptr_inc_notify_policy_sig1_sel[5:0]       */
           uint32_t             :  2;
      __IO uint32_t  TX_RING_RD_VPTR_INC_NOTIFY_POLICY_SIG2_SEL:  6;/*!< tx_ring_rd_vptr_inc_notify_policy_sig2_sel[5:0]       */
           uint32_t             :  2;
      __IO uint32_t  TX_RING_RD_VPTR_INC_NOTIFY_POLICY_SIG3_SEL:  6;/*!< tx_ring_rd_vptr_inc_notify_policy_sig3_sel[5:0]       */
      __IO uint32_t  TX_RING_RD_VPTR_INC_NOTIFY_POLICY_MANUAL_VALUE:  1;/*!< tx_ring_rd_vptr_inc_notify_policy_manual_value    */
      __IO uint32_t  TX_RING_RD_VPTR_INC_NOTIFY_POLICY_MANUAL_EN:  1;/*!< tx_ring_rd_vptr_inc_notify_policy_manual_en          */
    } TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0_b;        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_RING_RD_VPTR_INC_NOTIFY_POLICY_1;/*!< TX_RING_RD_VPTR_INC_NOTIFY_POLICY_1                                */
    
    struct {
      __IO uint32_t  TX_RING_RD_VPTR_INC_NOTIFY_POLICY_W1C:  1;/*!< tx_ring_rd_vptr_inc_notify_policy_w1c                      */
      __IO uint32_t  TX_RING_RD_VPTR_INC_NOTIFY_POLICY_W1S:  1;/*!< tx_ring_rd_vptr_inc_notify_policy_w1s                      */
    } TX_RING_RD_VPTR_INC_NOTIFY_POLICY_1_b;        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_RING_RD_VPTR_INC_NOTIFY_POLICY_2;/*!< TX_RING_RD_VPTR_INC_NOTIFY_POLICY_2                                */
    
    struct {
      __IO uint32_t  TX_RING_RD_VPTR_INC_NOTIFY_POLICY: 32;/*!< tx_ring_rd_vptr_inc_notify_policy[31:0]                        */
    } TX_RING_RD_VPTR_INC_NOTIFY_POLICY_2_b;        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DMA_SRC_NULL_POLICY_0;           /*!< DMA_SRC_NULL_POLICY_0                                                 */
    
    struct {
      __IO uint32_t  DMA_SRC_NULL_POLICY_SIG0_SEL:  6;/*!< dma_src_null_policy_sig0_sel[5:0]                                   */
           uint32_t             :  2;
      __IO uint32_t  DMA_SRC_NULL_POLICY_SIG1_SEL:  6;/*!< dma_src_null_policy_sig1_sel[5:0]                                   */
           uint32_t             :  2;
      __IO uint32_t  DMA_SRC_NULL_POLICY_SIG2_SEL:  6;/*!< dma_src_null_policy_sig2_sel[5:0]                                   */
           uint32_t             :  2;
      __IO uint32_t  DMA_SRC_NULL_POLICY_SIG3_SEL:  6;/*!< dma_src_null_policy_sig3_sel[5:0]                                   */
      __IO uint32_t  DMA_SRC_NULL_POLICY_MANUAL_VALUE:  1;/*!< dma_src_null_policy_manual_value                                */
      __IO uint32_t  DMA_SRC_NULL_POLICY_MANUAL_EN:  1;/*!< dma_src_null_policy_manual_en                                      */
    } DMA_SRC_NULL_POLICY_0_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DMA_SRC_NULL_POLICY_1;           /*!< DMA_SRC_NULL_POLICY_1                                                 */
    
    struct {
      __IO uint32_t  DMA_SRC_NULL_POLICY_W1C:  1;   /*!< dma_src_null_policy_w1c                                               */
      __IO uint32_t  DMA_SRC_NULL_POLICY_W1S:  1;   /*!< dma_src_null_policy_w1s                                               */
    } DMA_SRC_NULL_POLICY_1_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DMA_SRC_NULL_POLICY_2;           /*!< DMA_SRC_NULL_POLICY_2                                                 */
    
    struct {
      __IO uint32_t  DMA_SRC_NULL_POLICY: 32;       /*!< dma_src_null_policy[31:0]                                             */
    } DMA_SRC_NULL_POLICY_2_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_RING_DUMY_POLICY_0;           /*!< TX_RING_DUMY_POLICY_0                                                 */
    
    struct {
      __IO uint32_t  TX_RING_DUMY_POLICY_SIG0_SEL:  6;/*!< tx_ring_dumy_policy_sig0_sel[5:0]                                   */
      __IO uint32_t  TX_RING_DUMY_POLICY_SIG1_SEL:  6;/*!< tx_ring_dumy_policy_sig1_sel[5:0]                                   */
      __IO uint32_t  TX_RING_DUMY_POLICY_SIG2_SEL:  6;/*!< tx_ring_dumy_policy_sig2_sel[5:0]                                   */
      __IO uint32_t  TX_RING_DUMY_POLICY_SIG3_SEL:  6;/*!< tx_ring_dumy_policy_sig3_sel[5:0]                                   */
           uint32_t             :  6;
      __IO uint32_t  TX_RING_DUMY_POLICY_MANUAL_VALUE:  1;/*!< tx_ring_dumy_policy_manual_value                                */
      __IO uint32_t  TX_RING_DUMY_POLICY_MANUAL_EN:  1;/*!< tx_ring_dumy_policy_manual_en                                      */
    } TX_RING_DUMY_POLICY_0_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_RING_DUMY_POLICY_1;           /*!< TX_RING_DUMY_POLICY_1                                                 */
    
    struct {
      __IO uint32_t  TX_RING_DUMY_POLICY_W1C:  1;   /*!< tx_ring_dumy_policy_w1c                                               */
      __IO uint32_t  TX_RING_DUMY_POLICY_W1S:  1;   /*!< tx_ring_dumy_policy_w1s                                               */
    } TX_RING_DUMY_POLICY_1_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_RING_DUMY_POLICY_2;           /*!< TX_RING_DUMY_POLICY_2                                                 */
    
    struct {
      __IO uint32_t  TX_RING_DUMY_POLICY: 32;       /*!< tx_ring_dumy_policy[31:0]                                             */
    } TX_RING_DUMY_POLICY_2_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PDU_LOAD_POLICY_0;               /*!< PDU_LOAD_POLICY_0                                                     */
    
    struct {
      __IO uint32_t  PDU_LOAD_NOTIFY_POLICY_SIG0_SEL:  6;/*!< pdu_load_notify_policy_sig0_sel[5:0]                             */
           uint32_t             :  2;
      __IO uint32_t  PDU_LOAD_NOTIFY_POLICY_SIG1_SEL:  6;/*!< pdu_load_notify_policy_sig1_sel[5:0]                             */
           uint32_t             :  2;
      __IO uint32_t  PDU_LOAD_NOTIFY_POLICY_SIG2_SEL:  6;/*!< pdu_load_notify_policy_sig2_sel[5:0]                             */
           uint32_t             :  2;
      __IO uint32_t  PDU_LOAD_NOTIFY_POLICY_SIG3_SEL:  6;/*!< pdu_load_notify_policy_sig3_sel[5:0]                             */
      __IO uint32_t  PDU_LOAD_NOTIFY_POLICY_MANUAL_VALUE:  1;/*!< pdu_load_notify_policy_manual_value                          */
      __IO uint32_t  PDU_LOAD_NOTIFY_POLICY_MANUAL_EN:  1;/*!< pdu_load_notify_policy_manual_en                                */
    } PDU_LOAD_POLICY_0_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PDU_LOAD_POLICY_1;               /*!< PDU_LOAD_POLICY_1                                                     */
    
    struct {
      __IO uint32_t  PDU_LOAD_NOTIFY_POLICY_W1C:  1;/*!< pdu_load_notify_policy_w1c                                            */
      __IO uint32_t  PDU_LOAD_NOTIFY_POLICY_W1S:  1;/*!< pdu_load_notify_policy_w1s                                            */
    } PDU_LOAD_POLICY_1_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PDU_LOAD_POLICY_2;               /*!< PDU_LOAD_POLICY_2                                                     */
    
    struct {
      __IO uint32_t  PDU_LOAD_NOTIFY_POLICY: 32;    /*!< pdu_load_notify_policy[31:0]                                          */
    } PDU_LOAD_POLICY_2_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  NULL_LOAD_POLICY_0;              /*!< NULL_LOAD_POLICY_0                                                    */
    
    struct {
      __IO uint32_t  NULL_LOAD_NOTIFY_POLICY_SIG0_SEL:  6;/*!< null_load_notify_policy_sig0_sel[5:0]                           */
           uint32_t             :  2;
      __IO uint32_t  NULL_LOAD_NOTIFY_POLICY_SIG1_SEL:  6;/*!< null_load_notify_policy_sig1_sel[5:0]                           */
           uint32_t             :  2;
      __IO uint32_t  NULL_LOAD_NOTIFY_POLICY_SIG2_SEL:  6;/*!< null_load_notify_policy_sig2_sel[5:0]                           */
           uint32_t             :  2;
      __IO uint32_t  NULL_LOAD_NOTIFY_POLICY_SIG3_SEL:  6;/*!< null_load_notify_policy_sig3_sel[5:0]                           */
      __IO uint32_t  NULL_LOAD_NOTIFY_POLICY_MANUAL_VALUE:  1;/*!< null_load_notify_policy_manual_value                        */
      __IO uint32_t  NULL_LOAD_NOTIFY_POLICY_MANUAL_EN:  1;/*!< null_load_notify_policy_manual_en                              */
    } NULL_LOAD_POLICY_0_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  NULL_LOAD_POLICY_1;              /*!< NULL_LOAD_POLICY_1                                                    */
    
    struct {
      __IO uint32_t  NULL_LOAD_NOTIFY_POLICY_W1C:  1;/*!< null_load_notify_policy_w1c                                          */
      __IO uint32_t  NULL_LOAD_NOTIFY_POLICY_W1S:  1;/*!< null_load_notify_policy_w1s                                          */
    } NULL_LOAD_POLICY_1_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  NULL_LOAD_POLICY_2;              /*!< NULL_LOAD_POLICY_2                                                    */
    
    struct {
      __IO uint32_t  NULL_LOAD_NOTIFY_POLICY: 32;   /*!< null_load_notify_policy[31:0]                                         */
    } NULL_LOAD_POLICY_2_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  TX_RING_POLICY_SRC_BUS_0;        /*!< TX_RING_POLICY_SRC_BUS_0                                              */
    
    struct {
      __I  uint32_t  TX_RING_POLICY_SRC_BUS_31_0: 32;/*!< tx ring policy src bus                                               */
    } TX_RING_POLICY_SRC_BUS_0_b;                   /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  TX_RING_POLICY_SRC_BUS_1;        /*!< see the description in 'TX_RING_POLICY_SRC_BUS 0'                     */
    
    struct {
      __I  uint32_t  TX_RING_POLICY_SRC_BUS_63_32: 32;/*!< tx ring policy src bus                                              */
    } TX_RING_POLICY_SRC_BUS_1_b;                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_RING_TXQ_DMA_3;           /*!< CSR_TX_RING_TXQ_DMA_3                                                 */
    
    struct {
      __IO uint32_t  RG_TX_RING_ENTRY_DMA_LENGTH: 16;/*!< entry length setting by rx ring reg (not valid in long pdu mode)     */
    } CSR_TX_RING_TXQ_DMA_3_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_RING_CTRL_4;              /*!< CSR_TX_RING_CTRL_4                                                    */
    
    struct {
      __IO uint32_t  TX_RING_DMA_DST_BASE_ADDR: 32; /*!< sets the des addr of dma, to assembler;                               */
    } CSR_TX_RING_CTRL_4_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_TX_RING_TXQ_DMA;             /*!< CSR_TX_RING_TXQ_DMA                                                   */
    
    struct {
      __IO uint32_t  TXQ_DMA_BADR_EN:  1;           /*!< for original rxq_dma                                                  */
      __IO uint32_t  TXQ_DMA_DST_INC:  1;           /*!< for original rxq_dma                                                  */
      __IO uint32_t  TXQ_DMA_SRC_INC:  1;           /*!< for original rxq_dma                                                  */
      __IO uint32_t  TXQ_DMA_DST_SIZE:  3;          /*!< for original rxq_dma                                                  */
      __IO uint32_t  TXQ_DMA_SRC_SIZE:  3;          /*!< for original rxq_dma                                                  */
    } CSR_TX_RING_TXQ_DMA_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  INT_TX_RING;                     /*!< INT_TX_RING                                                           */
    
    struct {
      __I  uint32_t  RING_LOADED_END_INT:  1;       /*!< interrupt; indicates the requested packet-store has completed         */
           uint32_t             :  7;
      __I  uint32_t  RING_FULL_INT:  1;             /*!< interrupt; indicates rx_ring_full                                     */
    } INT_TX_RING_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  DBG_TX_ENTRY_CNT;                /*!< DBG_TX_ENTRY_CNT                                                      */
    
    struct {
      __I  uint32_t  ENTRY_CNT  :  8;               /*!< dbg,how many pdu in qeeue                                             */
    } DBG_TX_ENTRY_CNT_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  DBG_TX_RING_RD_ADDR;             /*!< DBG_TX_RING_RD_ADDR                                                   */
    
    struct {
      __I  uint32_t  ENTRY_ADDR : 32;               /*!< dbg                                                                   */
    } DBG_TX_RING_RD_ADDR_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DBG_TX_CNT;                      /*!< DBG_TX_CNT                                                            */
    
    struct {
      __IO uint32_t  ENTRY_TX_CNT: 16;              /*!< dbg                                                                   */
      __IO uint32_t  ENTRY_TX_NULL_CNT: 16;         /*!< dbg                                                                   */
    } DBG_TX_CNT_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  TX_RING_ENTRY_OFFSET;            /*!< TX_RING_ENTRY_OFFSET                                                  */
    
    struct {
      __I  uint32_t  TX_RING_ENTRY_OFFSET: 16;      /*!< tx_ring_entry_offset[15:0]                                            */
    } TX_RING_ENTRY_OFFSET_b;                       /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  CSR_TX_RING_INT;                 /*!< CSR_TX_RING_INT                                                       */
    
    struct {
      __I  uint32_t  RING_EMPTY_INT:  1;            /*!< int <<@@@773,csr_ll_tx_ring.txt/{main},94,,0x0%ll_trx_reg.txt/{main}%-0x29
                                                         0%csr_ll_tx_ring.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : tx_ring_empty  */
    } CSR_TX_RING_INT_b;                            /*!< BitSize                                                               */
  };
} CONDOR_LL_TRX_REG_Type;


/* ================================================================================ */
/* ================                   LL_FUNC_REG                  ================ */
/* ================================================================================ */


/**
  * @brief LL_FUNC_REG  (LL_FUNC_REG)
  */

typedef struct {                                    /*!< LL_FUNC_REG Structure                                                 */
  
  union {
    __IO uint32_t  ACM_TX_TBL_SET0;                 /*!< ACM_TX_TBL_SET0                                                       */
    
    struct {
      __IO uint32_t  ACM_TX_ADV_HDR_TBL_VALID:  8;  /*!< acm_tx_adv_hdr_tbl_valid[7:0]                                         */
    } ACM_TX_TBL_SET0_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ACM_TX_TBL_VALUE0;               /*!< ACM_TX_TBL_VALUE0                                                     */
    
    struct {
      __IO uint32_t  ACM_TX_ADV_HDR_TBL_VALUE0: 10; /*!< acm_tx_adv_hdr_tbl_value0[9:0]                                        */
           uint32_t             :  6;
      __IO uint32_t  ACM_TX_ADV_HDR_TBL_VALUE1: 10; /*!< acm_tx_adv_hdr_tbl_value1[9:0]                                        */
    } ACM_TX_TBL_VALUE0_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ACM_TX_TBL_VALUE1;               /*!< ACM_TX_TBL_VALUE1                                                     */
    
    struct {
      __IO uint32_t  ACM_TX_ADV_HDR_TBL_VALUE2: 10; /*!< acm_tx_adv_hdr_tbl_value2[9:0]                                        */
           uint32_t             :  6;
      __IO uint32_t  ACM_TX_ADV_HDR_TBL_VALUE3: 10; /*!< acm_tx_adv_hdr_tbl_value3[9:0]                                        */
    } ACM_TX_TBL_VALUE1_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ACM_TX_TBL_VALUE2;               /*!< ACM_TX_TBL_VALUE2                                                     */
    
    struct {
      __IO uint32_t  ACM_TX_ADV_HDR_TBL_VALUE4: 10; /*!< acm_tx_adv_hdr_tbl_value4[9:0]                                        */
           uint32_t             :  6;
      __IO uint32_t  ACM_TX_ADV_HDR_TBL_VALUE5: 10; /*!< acm_tx_adv_hdr_tbl_value5[9:0]                                        */
    } ACM_TX_TBL_VALUE2_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ACM_TX_TBL_VALUE3;               /*!< ACM_TX_TBL_VALUE3                                                     */
    
    struct {
      __IO uint32_t  ACM_TX_ADV_HDR_TBL_VALUE6: 10; /*!< acm_tx_adv_hdr_tbl_value6[9:0]                                        */
           uint32_t             :  6;
      __IO uint32_t  ACM_TX_ADV_HDR_TBL_VALUE7: 10; /*!< acm_tx_adv_hdr_tbl_value7[9:0]                                        */
    } ACM_TX_TBL_VALUE3_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AS_ACK_ADV_HDR_EXP_AND_INFO;     /*!< AS_ACK_ADV_HDR_EXP_AND_INFO                                           */
    
    struct {
      __IO uint32_t  AS_ACK_ADV_HDR_EXPAND_MANUAL_INVALID:  1;/*!< as_ack_adv_hdr_expand_manual_invalid                        */
      __IO uint32_t  AS_ACK_ADV_HDR_EXPAND_MANUAL_SET:  1;/*!< as_ack_adv_hdr_expand_manual_set                                */
      __IO uint32_t  AS_ACK_ADV_HDR_EXPAND_MANUAL_OVERWRITE:  1;/*!< as_ack_adv_hdr_expand_manual_overwrite                    */
           uint32_t             :  1;
      __IO uint32_t  AS_ACK_ADV_HDR_EXPAND_MANUAL_VALID:  1;/*!< as_ack_adv_hdr_expand_manual_valid                            */
           uint32_t             :  3;
      __IO uint32_t  AS_ACK_ADV_HDR_EXPAND_MANUAL_VALUE:  7;/*!< as_ack_adv_hdr_expand_manual_value[6:0]                       */
           uint32_t             :  1;
      __I  uint32_t  AS_ACK_ADV_HDR_EXPAND_INFO_VALID:  1;/*!< as_ack_adv_hdr_expand_info_valid                                */
           uint32_t             :  7;
      __I  uint32_t  AS_ACK_ADV_HDR_EXPAND_INFO_VALUE:  7;/*!< as_ack_adv_hdr_expand_info_value[6:0]                           */
    } AS_ACK_ADV_HDR_EXP_AND_INFO_b;                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AS_ACK_DATA_NESN_PEER_INFO;      /*!< AS_ACK_DATA_NESN_PEER_INFO                                            */
    
    struct {
      __IO uint32_t  AS_ACK_DATA_NESN_PEER_MANUAL_INVALID:  1;/*!< as_ack_data_nesn_peer_manual_invalid                        */
      __IO uint32_t  AS_ACK_DATA_NESN_PEER_MANUAL_SET:  1;/*!< as_ack_data_nesn_peer_manual_set                                */
      __IO uint32_t  AS_ACK_DATA_NESN_PEER_MANUAL_OVERWRITE:  1;/*!< as_ack_data_nesn_peer_manual_overwrite                    */
           uint32_t             :  1;
      __IO uint32_t  AS_ACK_DATA_NESN_PEER_MANUAL_VALID:  1;/*!< as_ack_data_nesn_peer_manual_valid                            */
           uint32_t             :  3;
      __IO uint32_t  AS_ACK_DATA_NESN_PEER_MANUAL_VALUE:  1;/*!< as_ack_data_nesn_peer_manual_value                            */
           uint32_t             :  7;
      __I  uint32_t  AS_ACK_DATA_NESN_PEER_INFO_VALID:  1;/*!< as_ack_data_nesn_peer_info_valid                                */
           uint32_t             :  7;
      __I  uint32_t  AS_ACK_DATA_NESN_PEER_INFO_VALUE:  1;/*!< as_ack_data_nesn_peer_info_value                                */
    } AS_ACK_DATA_NESN_PEER_INFO_b;                 /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DATA_NESN_OWN_INFO;              /*!< DATA_NESN_OWN_INFO                                                    */
    
    struct {
      __IO uint32_t  DATA_NESN_OWN_MANUAL_INVALID:  1;/*!< data_nesn_own_manual_invalid                                        */
      __IO uint32_t  DATA_NESN_OWN_MANUAL_SET:  1;  /*!< data_nesn_own_manual_set                                              */
      __IO uint32_t  DATA_NESN_OWN_MANUAL_OVERWRITE:  1;/*!< data_nesn_own_manual_overwrite                                    */
           uint32_t             :  1;
      __IO uint32_t  DATA_NESN_OWN_MANUAL_VALID:  1;/*!< data_nesn_own_manual_valid                                            */
           uint32_t             :  3;
      __IO uint32_t  DATA_NESN_OWN_MANUAL_VALUE:  1;/*!< data_nesn_own_manual_value                                            */
           uint32_t             :  7;
      __I  uint32_t  DATA_NESN_OWN_INFO_VALID:  1;  /*!< data_nesn_own_info_valid                                              */
           uint32_t             :  7;
      __I  uint32_t  DATA_NESN_OWN_INFO_VALUE:  1;  /*!< data_nesn_own_info_value                                              */
    } DATA_NESN_OWN_INFO_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ACM_DATA_MD_POLICY_0;            /*!< ACM_DATA_MD_POLICY_0                                                  */
    
    struct {
      __IO uint32_t  ACM_DATA_MD_POLICY_SIG0_SEL:  6;/*!< acm_data_md_policy_sig0_sel[5:0]                                     */
           uint32_t             :  2;
      __IO uint32_t  ACM_DATA_MD_POLICY_SIG1_SEL:  6;/*!< acm_data_md_policy_sig1_sel[5:0]                                     */
           uint32_t             :  2;
      __IO uint32_t  ACM_DATA_MD_POLICY_SIG2_SEL:  6;/*!< acm_data_md_policy_sig2_sel[5:0]                                     */
           uint32_t             :  2;
      __IO uint32_t  ACM_DATA_MD_POLICY_SIG3_SEL:  6;/*!< acm_data_md_policy_sig3_sel[5:0]                                     */
      __IO uint32_t  ACM_DATA_MD_POLICY_MANUAL_VALUE:  1;/*!< acm_data_md_policy_manual_value                                  */
      __IO uint32_t  ACM_DATA_MD_POLICY_MANUAL_EN:  1;/*!< acm_data_md_policy_manual_en                                        */
    } ACM_DATA_MD_POLICY_0_b;                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ACM_DATA_MD_POLICY_1;            /*!< ACM_DATA_MD_POLICY_1                                                  */
    
    struct {
      __IO uint32_t  ACM_DATA_MD_POLICY_W1C:  1;    /*!< acm_data_md_policy_w1c                                                */
      __IO uint32_t  ACM_DATA_MD_POLICY_W1S:  1;    /*!< acm_data_md_policy_w1s                                                */
    } ACM_DATA_MD_POLICY_1_b;                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ACM_DATA_MD_POLICY_2;            /*!< ACM_DATA_MD_POLICY_2                                                  */
    
    struct {
      __IO uint32_t  ACM_DATA_MD_POLICY: 32;        /*!< acm_data_md_policy[31:0]                                              */
    } ACM_DATA_MD_POLICY_2_b;                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ACM_DUMY_POLICY_0;               /*!< ACM_DUMY_POLICY_0                                                     */
    
    struct {
      __IO uint32_t  ACM_DUMY_POLICY_SIG0_SEL:  6;  /*!< acm_dumy_policy_sig0_sel[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  ACM_DUMY_POLICY_SIG1_SEL:  6;  /*!< acm_dumy_policy_sig1_sel[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  ACM_DUMY_POLICY_SIG2_SEL:  6;  /*!< acm_dumy_policy_sig2_sel[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  ACM_DUMY_POLICY_SIG3_SEL:  6;  /*!< acm_dumy_policy_sig3_sel[5:0]                                         */
      __IO uint32_t  ACM_DUMY_POLICY_MANUAL_VALUE:  1;/*!< acm_dumy_policy_manual_value                                        */
      __IO uint32_t  ACM_DUMY_POLICY_MANUAL_EN:  1; /*!< acm_dumy_policy_manual_en                                             */
    } ACM_DUMY_POLICY_0_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ACM_DUMY_POLICY_1;               /*!< ACM_DUMY_POLICY_1                                                     */
    
    struct {
      __IO uint32_t  ACM_DUMY_POLICY_W1C:  1;       /*!< acm_dumy_policy_w1c                                                   */
      __IO uint32_t  ACM_DUMY_POLICY_W1S:  1;       /*!< acm_dumy_policy_w1s                                                   */
    } ACM_DUMY_POLICY_1_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ACM_DUMY_POLICY_2;               /*!< ACM_DUMY_POLICY_2                                                     */
    
    struct {
      __IO uint32_t  ACM_DUMY_POLICY: 32;           /*!< acm_dumy_policy[31:0]                                                 */
    } ACM_DUMY_POLICY_2_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  ACM_POLICY_SRC_BUS_0;            /*!< ACM_POLICY_SRC_BUS_0                                                  */
    
    struct {
      __I  uint32_t  ACM_POLICY_SRC_BUS_31_0: 32;   /*!< ack manager policy src bus                                            */
    } ACM_POLICY_SRC_BUS_0_b;                       /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  ACM_POLICY_SRC_BUS_1;            /*!< see the description in 'ACM_POLICY_SRC_BUS 0'                         */
    
    struct {
      __I  uint32_t  ACM_POLICY_SRC_BUS_63_32: 32;  /*!< ack manager policy src bus                                            */
    } ACM_POLICY_SRC_BUS_1_b;                       /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  ACM_TX_TBL_INFO;                 /*!< ACM_TX_TBL_INFO                                                       */
    
    struct {
      __I  uint32_t  ACM_TBL_LOOKUP_NO_HIT:  1;     /*!< acm_tbl_lookup_no_hit                                                 */
           uint32_t             : 15;
      __I  uint32_t  ACM_TBL_VALUE: 10;             /*!< acm_tbl_value[9:0]                                                    */
    } ACM_TX_TBL_INFO_b;                            /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED[39];
  
  union {
    __IO uint32_t  AEM_ACCUMULATOR_0;               /*!< AEM_ACCUMULATOR_0                                                     */
    
    struct {
      __IO uint32_t  AEM_ACCUM_0_ACCU_THOLD:  8;    /*!< aem_accum_0_accu_thold[7:0]                                           */
      __IO uint32_t  AEM_ACCUM_0_INIT_VALUE:  8;    /*!< aem_accum_0_init_value[7:0]                                           */
      __IO uint32_t  AEM_ACCUM_0_INC_SEL:  6;       /*!< signal default select <<@@@95,csr_air_event_mng.txt/{main},37,,0x0%ll_func
                                                         _reg.txt/{main}%-0xe0%csr_air_event_mng.txt/{main}%,_STRUCT_,_HIER_,R/W,@>>
                                                         : tx_action_tick                                                      */
           uint32_t             :  2;
      __IO uint32_t  AEM_ACCUM_0_EN:  1;            /*!< aem_accum_0_en                                                        */
    } AEM_ACCUMULATOR_0_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AEM_SIG_ANCHOR_TX;               /*!< AEM_SIG_ANCHOR_TX                                                     */
    
    struct {
      __IO uint32_t  AEM_SIGNAL_ANCHOR_AT_TX:  1;   /*!< aem_signal_anchor_at_tx                                               */
    } AEM_SIG_ANCHOR_TX_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AEM_ACCUMULATOR_1;               /*!< AEM_ACCUMULATOR_1                                                     */
    
    struct {
      __IO uint32_t  AEM_ACCUM_1_ACCU_THOLD:  8;    /*!< aem_accum_1_accu_thold[7:0]                                           */
      __IO uint32_t  AEM_ACCUM_1_INIT_VALUE:  8;    /*!< aem_accum_1_init_value[7:0]                                           */
      __IO uint32_t  AEM_ACCUM_1_INC_SEL:  6;       /*!< signal default select <<@@@105,csr_air_event_mng.txt/{main},47,,0x0%ll_fun
                                                         c_reg.txt/{main}%-0xe0%csr_air_event_mng.txt/{main}%,_STRUCT_,_HIER_,R/W,@>
                                                         > : rx_action_tick                                                    */
           uint32_t             :  2;
      __IO uint32_t  AEM_ACCUM_1_EN:  1;            /*!< aem_accum_1_en                                                        */
    } AEM_ACCUMULATOR_1_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AEM_SYNC_POLICY_0;               /*!< AEM_SYNC_POLICY_0                                                     */
    
    struct {
      __IO uint32_t  AEM_SYNC_POLICY_SIG0_SEL:  6;  /*!< aem_sync_policy_sig0_sel[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  AEM_SYNC_POLICY_SIG1_SEL:  6;  /*!< aem_sync_policy_sig1_sel[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  AEM_SYNC_POLICY_SIG2_SEL:  6;  /*!< aem_sync_policy_sig2_sel[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  AEM_SYNC_POLICY_SIG3_SEL:  6;  /*!< aem_sync_policy_sig3_sel[5:0]                                         */
      __IO uint32_t  AEM_SYNC_POLICY_MANUAL_VALUE:  1;/*!< aem_sync_policy_manual_value                                        */
      __IO uint32_t  AEM_SYNC_POLICY_MANUAL_EN:  1; /*!< aem_sync_policy_manual_en                                             */
    } AEM_SYNC_POLICY_0_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AEM_SYNC_POLICY_1;               /*!< AEM_SYNC_POLICY_1                                                     */
    
    struct {
      __IO uint32_t  AEM_SYNC_POLICY_W1C:  1;       /*!< aem_sync_policy_w1c                                                   */
      __IO uint32_t  AEM_SYNC_POLICY_W1S:  1;       /*!< aem_sync_policy_w1s                                                   */
    } AEM_SYNC_POLICY_1_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AEM_SYNC_POLICY_2;               /*!< AEM_SYNC_POLICY_2                                                     */
    
    struct {
      __IO uint32_t  AEM_SYNC_POLICY: 32;           /*!< aem_sync_policy[31:0]                                                 */
    } AEM_SYNC_POLICY_2_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RF_LONG_CALI_POLICY_0;           /*!< RF_LONG_CALI_POLICY_0                                                 */
    
    struct {
      __IO uint32_t  RF_LONG_CALI_POLICY_SIG0_SEL:  6;/*!< rf_long_cali_policy_sig0_sel[5:0]                                   */
           uint32_t             :  2;
      __IO uint32_t  RF_LONG_CALI_POLICY_SIG1_SEL:  6;/*!< rf_long_cali_policy_sig1_sel[5:0]                                   */
           uint32_t             :  2;
      __IO uint32_t  RF_LONG_CALI_POLICY_SIG2_SEL:  6;/*!< rf_long_cali_policy_sig2_sel[5:0]                                   */
           uint32_t             :  2;
      __IO uint32_t  RF_LONG_CALI_POLICY_SIG3_SEL:  6;/*!< rf_long_cali_policy_sig3_sel[5:0]                                   */
      __IO uint32_t  RF_LONG_CALI_POLICY_MANUAL_VALUE:  1;/*!< rf_long_cali_policy_manual_value                                */
      __IO uint32_t  RF_LONG_CALI_POLICY_MANUAL_EN:  1;/*!< rf_long_cali_policy_manual_en                                      */
    } RF_LONG_CALI_POLICY_0_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RF_LONG_CALI_POLICY_1;           /*!< RF_LONG_CALI_POLICY_1                                                 */
    
    struct {
      __IO uint32_t  RF_LONG_CALI_POLICY_W1C:  1;   /*!< rf_long_cali_policy_w1c                                               */
      __IO uint32_t  RF_LONG_CALI_POLICY_W1S:  1;   /*!< rf_long_cali_policy_w1s                                               */
    } RF_LONG_CALI_POLICY_1_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RF_LONG_CALI_POLICY_2;           /*!< RF_LONG_CALI_POLICY_2                                                 */
    
    struct {
      __IO uint32_t  RF_LONG_CALI_POLICY: 32;       /*!< rf_long_cali_policy[31:0]                                             */
    } RF_LONG_CALI_POLICY_2_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_TIMEOUT_POLICY_0;             /*!< RX_TIMEOUT_POLICY_0                                                   */
    
    struct {
      __IO uint32_t  RX_TIMEOUT_POLICY_SIG0_SEL:  6;/*!< rx_timeout_policy_sig0_sel[5:0]                                       */
           uint32_t             :  2;
      __IO uint32_t  RX_TIMEOUT_POLICY_SIG1_SEL:  6;/*!< rx_timeout_policy_sig1_sel[5:0]                                       */
           uint32_t             :  2;
      __IO uint32_t  RX_TIMEOUT_POLICY_SIG2_SEL:  6;/*!< rx_timeout_policy_sig2_sel[5:0]                                       */
           uint32_t             :  2;
      __IO uint32_t  RX_TIMEOUT_POLICY_SIG3_SEL:  6;/*!< rx_timeout_policy_sig3_sel[5:0]                                       */
      __IO uint32_t  RX_TIMEOUT_POLICY_MANUAL_VALUE:  1;/*!< rx_timeout_policy_manual_value                                    */
      __IO uint32_t  RX_TIMEOUT_POLICY_MANUAL_EN:  1;/*!< rx_timeout_policy_manual_en                                          */
    } RX_TIMEOUT_POLICY_0_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_TIMEOUT_POLICY_1;             /*!< RX_TIMEOUT_POLICY_1                                                   */
    
    struct {
      __IO uint32_t  RX_TIMEOUT_POLICY_W1C:  1;     /*!< rx_timeout_policy_w1c                                                 */
      __IO uint32_t  RX_TIMEOUT_POLICY_W1S:  1;     /*!< rx_timeout_policy_w1s                                                 */
    } RX_TIMEOUT_POLICY_1_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_TIMEOUT_POLICY_2;             /*!< RX_TIMEOUT_POLICY_2                                                   */
    
    struct {
      __IO uint32_t  RX_TIMEOUT_POLICY: 32;         /*!< rx_timeout_policy[31:0]                                               */
    } RX_TIMEOUT_POLICY_2_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIR_EVNT_IP_POLICY_0;            /*!< AIR_EVNT_IP_POLICY_0                                                  */
    
    struct {
      __IO uint32_t  AIR_EVENT_IP_POLICY_SIG0_SEL:  6;/*!< air_event_ip_policy_sig0_sel[5:0]                                   */
           uint32_t             :  2;
      __IO uint32_t  AIR_EVENT_IP_POLICY_SIG1_SEL:  6;/*!< air_event_ip_policy_sig1_sel[5:0]                                   */
           uint32_t             :  2;
      __IO uint32_t  AIR_EVENT_IP_POLICY_SIG2_SEL:  6;/*!< air_event_ip_policy_sig2_sel[5:0]                                   */
           uint32_t             :  2;
      __IO uint32_t  AIR_EVENT_IP_POLICY_SIG3_SEL:  6;/*!< air_event_ip_policy_sig3_sel[5:0]                                   */
      __IO uint32_t  AIR_EVENT_IP_POLICY_MANUAL_VALUE:  1;/*!< air_event_ip_policy_manual_value                                */
      __IO uint32_t  AIR_EVENT_IP_POLICY_MANUAL_EN:  1;/*!< air_event_ip_policy_manual_en                                      */
    } AIR_EVNT_IP_POLICY_0_b;                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIR_EVNT_IP_POLICY_1;            /*!< AIR_EVNT_IP_POLICY_1                                                  */
    
    struct {
      __IO uint32_t  AIR_EVENT_IP_POLICY_W1C:  1;   /*!< air_event_ip_policy_w1c                                               */
      __IO uint32_t  AIR_EVENT_IP_POLICY_W1S:  1;   /*!< air_event_ip_policy_w1s                                               */
    } AIR_EVNT_IP_POLICY_1_b;                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIR_EVNT_IP_POLICY_2;            /*!< AIR_EVNT_IP_POLICY_2                                                  */
    
    struct {
      __IO uint32_t  AIR_EVENT_IP_POLICY: 32;       /*!< air_event_ip_policy[31:0]                                             */
    } AIR_EVNT_IP_POLICY_2_b;                       /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  HARD_END_POLICY_0;               /*!< HARD_END_POLICY_0                                                     */
    
    struct {
      __IO uint32_t  HARD_END_POLICY_SIG0_SEL:  6;  /*!< hard_end_policy_sig0_sel[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  HARD_END_POLICY_SIG1_SEL:  6;  /*!< hard_end_policy_sig1_sel[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  HARD_END_POLICY_SIG2_SEL:  6;  /*!< hard_end_policy_sig2_sel[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  HARD_END_POLICY_SIG3_SEL:  6;  /*!< hard_end_policy_sig3_sel[5:0]                                         */
      __IO uint32_t  HARD_END_POLICY_MANUAL_VALUE:  1;/*!< hard_end_policy_manual_value                                        */
      __IO uint32_t  HARD_END_POLICY_MANUAL_EN:  1; /*!< hard_end_policy_manual_en                                             */
    } HARD_END_POLICY_0_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  HARD_END_POLICY_1;               /*!< HARD_END_POLICY_1                                                     */
    
    struct {
      __IO uint32_t  HARD_END_POLICY_W1C:  1;       /*!< hard_end_policy_w1c                                                   */
      __IO uint32_t  HARD_END_POLICY_W1S:  1;       /*!< hard_end_policy_w1s                                                   */
    } HARD_END_POLICY_1_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  HARD_END_POLICY_2;               /*!< HARD_END_POLICY_2                                                     */
    
    struct {
      __IO uint32_t  HARD_END_POLICY: 32;           /*!< hard_end_policy[31:0]                                                 */
    } HARD_END_POLICY_2_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DATA_SOFT_END_POLICY_0;          /*!< DATA_SOFT_END_POLICY_0                                                */
    
    struct {
      __IO uint32_t  DATA_SOFT_END_POLICY_SIG0_SEL:  6;/*!< data_soft_end_policy_sig0_sel[5:0]                                 */
           uint32_t             :  2;
      __IO uint32_t  DATA_SOFT_END_POLICY_SIG1_SEL:  6;/*!< data_soft_end_policy_sig1_sel[5:0]                                 */
           uint32_t             :  2;
      __IO uint32_t  DATA_SOFT_END_POLICY_SIG2_SEL:  6;/*!< data_soft_end_policy_sig2_sel[5:0]                                 */
           uint32_t             :  2;
      __IO uint32_t  DATA_SOFT_END_POLICY_SIG3_SEL:  6;/*!< data_soft_end_policy_sig3_sel[5:0]                                 */
      __IO uint32_t  DATA_SOFT_END_POLICY_MANUAL_VALUE:  1;/*!< data_soft_end_policy_manual_value                              */
      __IO uint32_t  DATA_SOFT_END_POLICY_MANUAL_EN:  1;/*!< data_soft_end_policy_manual_en                                    */
    } DATA_SOFT_END_POLICY_0_b;                     /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DATA_SOFT_END_POLICY_1;          /*!< DATA_SOFT_END_POLICY_1                                                */
    
    struct {
      __IO uint32_t  DATA_SOFT_END_POLICY_W1C:  1;  /*!< data_soft_end_policy_w1c                                              */
      __IO uint32_t  DATA_SOFT_END_POLICY_W1S:  1;  /*!< data_soft_end_policy_w1s                                              */
    } DATA_SOFT_END_POLICY_1_b;                     /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  DATA_SOFT_END_POLICY_2;          /*!< DATA_SOFT_END_POLICY_2                                                */
    
    struct {
      __IO uint32_t  DATA_SOFT_END_POLICY: 32;      /*!< data_soft_end_policy[31:0]                                            */
    } DATA_SOFT_END_POLICY_2_b;                     /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_REQ_POLICY_0;                 /*!< TX_REQ_POLICY_0                                                       */
    
    struct {
      __IO uint32_t  TX_REQ_POLICY_SIG0_SEL:  6;    /*!< tx_req_policy_sig0_sel[5:0]                                           */
           uint32_t             :  2;
      __IO uint32_t  TX_REQ_POLICY_SIG1_SEL:  6;    /*!< tx_req_policy_sig1_sel[5:0]                                           */
           uint32_t             :  2;
      __IO uint32_t  TX_REQ_POLICY_SIG2_SEL:  6;    /*!< tx_req_policy_sig2_sel[5:0]                                           */
           uint32_t             :  2;
      __IO uint32_t  TX_REQ_POLICY_SIG3_SEL:  6;    /*!< tx_req_policy_sig3_sel[5:0]                                           */
      __IO uint32_t  TX_REQ_POLICY_MANUAL_VALUE:  1;/*!< tx_req_policy_manual_value                                            */
      __IO uint32_t  TX_REQ_POLICY_MANUAL_EN:  1;   /*!< tx_req_policy_manual_en                                               */
    } TX_REQ_POLICY_0_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_REQ_POLICY_1;                 /*!< TX_REQ_POLICY_1                                                       */
    
    struct {
      __IO uint32_t  TX_REQ_POLICY_W1C:  1;         /*!< tx_req_policy_w1c                                                     */
      __IO uint32_t  TX_REQ_POLICY_W1S:  1;         /*!< tx_req_policy_w1s                                                     */
    } TX_REQ_POLICY_1_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_REQ_POLICY_2;                 /*!< TX_REQ_POLICY_2                                                       */
    
    struct {
      __IO uint32_t  TX_REQ_POLICY: 32;             /*!< tx_req_policy[31:0]                                                   */
    } TX_REQ_POLICY_2_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_REQ_POLICY_0;                 /*!< RX_REQ_POLICY_0                                                       */
    
    struct {
      __IO uint32_t  RX_REQ_POLICY_SIG0_SEL:  6;    /*!< rx_req_policy_sig0_sel[5:0]                                           */
           uint32_t             :  2;
      __IO uint32_t  RX_REQ_POLICY_SIG1_SEL:  6;    /*!< rx_req_policy_sig1_sel[5:0]                                           */
           uint32_t             :  2;
      __IO uint32_t  RX_REQ_POLICY_SIG2_SEL:  6;    /*!< rx_req_policy_sig2_sel[5:0]                                           */
           uint32_t             :  2;
      __IO uint32_t  RX_REQ_POLICY_SIG3_SEL:  6;    /*!< rx_req_policy_sig3_sel[5:0]                                           */
      __IO uint32_t  RX_REQ_POLICY_MANUAL_VALUE:  1;/*!< rx_req_policy_manual_value                                            */
      __IO uint32_t  RX_REQ_POLICY_MANUAL_EN:  1;   /*!< rx_req_policy_manual_en                                               */
    } RX_REQ_POLICY_0_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_REQ_POLICY_1;                 /*!< RX_REQ_POLICY_1                                                       */
    
    struct {
      __IO uint32_t  RX_REQ_POLICY_W1C:  1;         /*!< rx_req_policy_w1c                                                     */
      __IO uint32_t  RX_REQ_POLICY_W1S:  1;         /*!< rx_req_policy_w1s                                                     */
    } RX_REQ_POLICY_1_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_REQ_POLICY_2;                 /*!< RX_REQ_POLICY_2                                                       */
    
    struct {
      __IO uint32_t  RX_REQ_POLICY: 32;             /*!< rx_req_policy[31:0]                                                   */
    } RX_REQ_POLICY_2_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AEM_IRQ0_POLICY_0;               /*!< AEM_IRQ0_POLICY_0                                                     */
    
    struct {
      __IO uint32_t  AEM_IRQ0_POLICY_SIG0_SEL:  6;  /*!< aem_irq0_policy_sig0_sel[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  AEM_IRQ0_POLICY_SIG1_SEL:  6;  /*!< aem_irq0_policy_sig1_sel[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  AEM_IRQ0_POLICY_SIG2_SEL:  6;  /*!< aem_irq0_policy_sig2_sel[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  AEM_IRQ0_POLICY_SIG3_SEL:  6;  /*!< aem_irq0_policy_sig3_sel[5:0]                                         */
      __IO uint32_t  AEM_IRQ0_POLICY_MANUAL_VALUE:  1;/*!< aem_irq0_policy_manual_value                                        */
      __IO uint32_t  AEM_IRQ0_POLICY_MANUAL_EN:  1; /*!< aem_irq0_policy_manual_en                                             */
    } AEM_IRQ0_POLICY_0_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AEM_IRQ0_POLICY_1;               /*!< AEM_IRQ0_POLICY_1                                                     */
    
    struct {
      __IO uint32_t  AEM_IRQ0_POLICY_W1C:  1;       /*!< aem_irq0_policy_w1c                                                   */
      __IO uint32_t  AEM_IRQ0_POLICY_W1S:  1;       /*!< aem_irq0_policy_w1s                                                   */
    } AEM_IRQ0_POLICY_1_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AEM_IRQ0_POLICY_2;               /*!< AEM_IRQ0_POLICY_2                                                     */
    
    struct {
      __IO uint32_t  AEM_IRQ0_POLICY: 32;           /*!< aem_irq0_policy[31:0]                                                 */
    } AEM_IRQ0_POLICY_2_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AEM_IRQ1_POLICY_0;               /*!< AEM_IRQ1_POLICY_0                                                     */
    
    struct {
      __IO uint32_t  AEM_IRQ1_POLICY_SIG0_SEL:  6;  /*!< aem_irq1_policy_sig0_sel[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  AEM_IRQ1_POLICY_SIG1_SEL:  6;  /*!< aem_irq1_policy_sig1_sel[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  AEM_IRQ1_POLICY_SIG2_SEL:  6;  /*!< aem_irq1_policy_sig2_sel[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  AEM_IRQ1_POLICY_SIG3_SEL:  6;  /*!< aem_irq1_policy_sig3_sel[5:0]                                         */
      __IO uint32_t  AEM_IRQ1_POLICY_MANUAL_VALUE:  1;/*!< aem_irq1_policy_manual_value                                        */
      __IO uint32_t  AEM_IRQ1_POLICY_MANUAL_EN:  1; /*!< aem_irq1_policy_manual_en                                             */
    } AEM_IRQ1_POLICY_0_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AEM_IRQ1_POLICY_1;               /*!< AEM_IRQ1_POLICY_1                                                     */
    
    struct {
      __IO uint32_t  AEM_IRQ1_POLICY_W1C:  1;       /*!< aem_irq1_policy_w1c                                                   */
      __IO uint32_t  AEM_IRQ1_POLICY_W1S:  1;       /*!< aem_irq1_policy_w1s                                                   */
    } AEM_IRQ1_POLICY_1_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AEM_IRQ1_POLICY_2;               /*!< AEM_IRQ1_POLICY_2                                                     */
    
    struct {
      __IO uint32_t  AEM_IRQ1_POLICY: 32;           /*!< aem_irq1_policy[31:0]                                                 */
    } AEM_IRQ1_POLICY_2_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AEM_DUMY0_POLICY_0;              /*!< AEM_DUMY0_POLICY_0                                                    */
    
    struct {
      __IO uint32_t  AEM_DUMY0_POLICY_SIG0_SEL:  6; /*!< aem_dumy0_policy_sig0_sel[5:0]                                        */
           uint32_t             :  2;
      __IO uint32_t  AEM_DUMY0_POLICY_SIG1_SEL:  6; /*!< aem_dumy0_policy_sig1_sel[5:0]                                        */
           uint32_t             :  2;
      __IO uint32_t  AEM_DUMY0_POLICY_SIG2_SEL:  6; /*!< aem_dumy0_policy_sig2_sel[5:0]                                        */
           uint32_t             :  2;
      __IO uint32_t  AEM_DUMY0_POLICY_SIG3_SEL:  6; /*!< aem_dumy0_policy_sig3_sel[5:0]                                        */
      __IO uint32_t  AEM_DUMY0_POLICY_MANUAL_VALUE:  1;/*!< aem_dumy0_policy_manual_value                                      */
      __IO uint32_t  AEM_DUMY0_POLICY_MANUAL_EN:  1;/*!< aem_dumy0_policy_manual_en                                            */
    } AEM_DUMY0_POLICY_0_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AEM_DUMY0_POLICY_1;              /*!< AEM_DUMY0_POLICY_1                                                    */
    
    struct {
      __IO uint32_t  AEM_DUMY0_POLICY_W1C:  1;      /*!< aem_dumy0_policy_w1c                                                  */
      __IO uint32_t  AEM_DUMY0_POLICY_W1S:  1;      /*!< aem_dumy0_policy_w1s                                                  */
    } AEM_DUMY0_POLICY_1_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AEM_DUMY0_POLICY_2;              /*!< AEM_DUMY0_POLICY_2                                                    */
    
    struct {
      __IO uint32_t  AEM_DUMY0_POLICY: 32;          /*!< aem_dumy0_policy[31:0]                                                */
    } AEM_DUMY0_POLICY_2_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AEM_DUMY1_POLICY_0;              /*!< AEM_DUMY1_POLICY_0                                                    */
    
    struct {
      __IO uint32_t  AEM_DUMY1_POLICY_SIG0_SEL:  6; /*!< aem_dumy1_policy_sig0_sel[5:0]                                        */
           uint32_t             :  2;
      __IO uint32_t  AEM_DUMY1_POLICY_SIG1_SEL:  6; /*!< aem_dumy1_policy_sig1_sel[5:0]                                        */
           uint32_t             :  2;
      __IO uint32_t  AEM_DUMY1_POLICY_SIG2_SEL:  6; /*!< aem_dumy1_policy_sig2_sel[5:0]                                        */
           uint32_t             :  2;
      __IO uint32_t  AEM_DUMY1_POLICY_SIG3_SEL:  6; /*!< aem_dumy1_policy_sig3_sel[5:0]                                        */
      __IO uint32_t  AEM_DUMY1_POLICY_MANUAL_VALUE:  1;/*!< aem_dumy1_policy_manual_value                                      */
      __IO uint32_t  AEM_DUMY1_POLICY_MANUAL_EN:  1;/*!< aem_dumy1_policy_manual_en                                            */
    } AEM_DUMY1_POLICY_0_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AEM_DUMY1_POLICY_1;              /*!< AEM_DUMY1_POLICY_1                                                    */
    
    struct {
      __IO uint32_t  AEM_DUMY1_POLICY_W1C:  1;      /*!< aem_dumy1_policy_w1c                                                  */
      __IO uint32_t  AEM_DUMY1_POLICY_W1S:  1;      /*!< aem_dumy1_policy_w1s                                                  */
    } AEM_DUMY1_POLICY_1_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AEM_DUMY1_POLICY_2;              /*!< AEM_DUMY1_POLICY_2                                                    */
    
    struct {
      __IO uint32_t  AEM_DUMY1_POLICY: 32;          /*!< aem_dumy1_policy[31:0]                                                */
    } AEM_DUMY1_POLICY_2_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  AEM_POLICY_SRC_BUS_0;            /*!< AEM_POLICY_SRC_BUS_0                                                  */
    
    struct {
      __I  uint32_t  AEM_POLICY_SRC_BUS_31_0: 32;   /*!< aem_policy_src_bus[31:0]                                              */
    } AEM_POLICY_SRC_BUS_0_b;                       /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  AEM_POLICY_SRC_BUS_1;            /*!< see the description in 'AEM_POLICY_SRC_BUS 0'                         */
    
    struct {
      __I  uint32_t  AEM_POLICY_SRC_BUS_63_32: 32;  /*!< aem_policy_src_bus[63:32]                                             */
    } AEM_POLICY_SRC_BUS_1_b;                       /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  AEM_ACCUM_INFO;                  /*!< AEM_ACCUM_INFO                                                        */
    
    struct {
      __I  uint32_t  AEM_ACCUM_0_ACC_CNT:  8;       /*!< aem_accum_0_acc_cnt[7:0]                                              */
      __I  uint32_t  AEM_ACCUM_1_ACC_CNT:  8;       /*!< aem_accum_1_acc_cnt[7:0]                                              */
    } AEM_ACCUM_INFO_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  AEM_HALF_DUPLEX_INFO;            /*!< AEM_HALF_DUPLEX_INFO                                                  */
    
    struct {
      __I  uint32_t  AEM_HALF_DUPLEX_STATE:  3;     /*!< aem_half_duplex_state[2:0]                                            */
    } AEM_HALF_DUPLEX_INFO_b;                       /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED1[5];
  
  union {
    __IO uint32_t  AIRPRO_TICKMAP_0;                /*!< AIRPRO_TICKMAP_0                                                      */
    
    struct {
      __IO uint32_t  AIRPRO_RX_ACCESS_TIMEOUT_TICK_SEL:  3;/*!< airpro_rx_access_timeout_tick_sel[2:0]                         */
           uint32_t             :  1;
      __IO uint32_t  AIRPRO_PHY_RX_EN_TICK_SEL:  3; /*!< airpro_phy_rx_en_tick_sel[2:0]                                        */
           uint32_t             :  1;
      __IO uint32_t  AIRPRO_RF_RX_EN_TICK_SEL:  3;  /*!< airpro_rf_rx_en_tick_sel[2:0]                                         */
           uint32_t             :  1;
      __IO uint32_t  AIRPRO_LONG_RF_RX_EN_TICK_SEL:  3;/*!< airpro_long_rf_rx_en_tick_sel[2:0]                                 */
           uint32_t             :  1;
      __IO uint32_t  AIRPRO_PHY_TX_EN_TICK_SEL:  3; /*!< airpro_phy_tx_en_tick_sel[2:0]                                        */
           uint32_t             :  1;
      __IO uint32_t  AIRPRO_RF_TX_EN_TICK_SEL:  3;  /*!< airpro_rf_tx_en_tick_sel[2:0]                                         */
           uint32_t             :  1;
      __IO uint32_t  AIRPRO_LONG_RF_TX_EN_TICK_SEL:  3;/*!< airpro_long_rf_tx_en_tick_sel[2:0]                                 */
           uint32_t             :  1;
      __IO uint32_t  AIRPRO_PDU_REQ_TICK_SEL:  3;   /*!< airpro_pdu_req_tick_sel[2:0]                                          */
    } AIRPRO_TICKMAP_0_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_TICKMAP_1;                /*!< AIRPRO_TICKMAP_1                                                      */
    
    struct {
      __IO uint32_t  AIRPRO_ALARM1_AS_RX:  1;       /*!< airpro_alarm1_as_rx                                                   */
      __IO uint32_t  AIRPRO_ALARM1_AS_TX:  1;       /*!< airpro_alarm1_as_tx                                                   */
      __IO uint32_t  AIRPRO_ALARM0_AS_RX:  1;       /*!< airpro_alarm0_as_rx                                                   */
      __IO uint32_t  AIRPRO_ALARM0_AS_TX:  1;       /*!< airpro_alarm0_as_tx                                                   */
    } AIRPRO_TICKMAP_1_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_GPI;               /*!< AIRPRO_POLICY_GPI                                                     */
    
    struct {
      __IO uint32_t  RG_POLICY_GPI:  4;             /*!< policy_gpi                                                            */
    } AIRPRO_POLICY_GPI_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_FOLLOWER_0_CONTROL;       /*!< AIRPRO_FOLLOWER_0_CONTROL                                             */
    
    struct {
      __IO uint32_t  RG_FOLLOWER0_OFFSET: 12;       /*!< rg_follower0_offset[11:0]                                             */
           uint32_t             :  4;
      __IO uint32_t  RG_FOLLOWER0_TRIGGER_SRC:  6;  /*!< rg_follower0_trigger_src[5:0]                                         */
    } AIRPRO_FOLLOWER_0_CONTROL_b;                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_FOLLOWER_1_CONTROL;       /*!< AIRPRO_FOLLOWER_1_CONTROL                                             */
    
    struct {
      __IO uint32_t  RG_FOLLOWER1_OFFSET: 12;       /*!< rg_follower1_offset[11:0]                                             */
           uint32_t             :  4;
      __IO uint32_t  RG_FOLLOWER1_TRIGGER_SRC:  6;  /*!< rg_follower1_trigger_src[5:0]                                         */
    } AIRPRO_FOLLOWER_1_CONTROL_b;                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_ALARM0_EN;                /*!< AIRPRO_ALARM0_EN                                                      */
    
    struct {
      __IO uint32_t  RG_AIRPROTOCOL_ALARM0_EN:  1;  /*!< not used unless in manual mode                                        */
    } AIRPRO_ALARM0_EN_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_ALARM0_TIME;              /*!< AIRPRO_ALARM0_TIME                                                    */
    
    struct {
      __IO uint32_t  RG_AIRPROTOCOL_ALARM0_TIME: 12;/*!< not used unless in manual mode                                        */
    } AIRPRO_ALARM0_TIME_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_ALARM0_OFFSET_EARLY;      /*!< AIRPRO_ALARM0_OFFSET_EARLY                                            */
    
    struct {
      __IO uint32_t  RG_AIRPROTOCOL_ALARM0_WINDOW_OFFSET_EARLY: 12;/*!< -12sd320                                               */
    } AIRPRO_ALARM0_OFFSET_EARLY_b;                 /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_ALARM0_OFFSET_LATE;       /*!< AIRPRO_ALARM0_OFFSET_LATE                                             */
    
    struct {
      __IO uint32_t  RG_AIRPROTOCOL_ALARM0_WINDOW_OFFSET_LATE: 12;/*!< 12sd500                                                 */
    } AIRPRO_ALARM0_OFFSET_LATE_b;                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_ALARM0_NOTIFY0_OFFSET;    /*!< AIRPRO_ALARM0_NOTIFY0_OFFSET                                          */
    
    struct {
      __IO uint32_t  RG_AIRPROTOCOL_ALARM0_NOTIFY0_OFFSET: 12;/*!< -12sd300                                                    */
    } AIRPRO_ALARM0_NOTIFY0_OFFSET_b;               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_ALARM0_NOTIFY1_OFFSET;    /*!< AIRPRO_ALARM0_NOTIFY1_OFFSET                                          */
    
    struct {
      __IO uint32_t  RG_AIRPROTOCOL_ALARM0_NOTIFY1_OFFSET: 12;/*!< -12sd240                                                    */
    } AIRPRO_ALARM0_NOTIFY1_OFFSET_b;               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_ALARM0_NOTIFY2_OFFSET;    /*!< AIRPRO_ALARM0_NOTIFY2_OFFSET                                          */
    
    struct {
      __IO uint32_t  RG_AIRPROTOCOL_ALARM0_NOTIFY2_OFFSET: 12;/*!< -12sd100                                                    */
    } AIRPRO_ALARM0_NOTIFY2_OFFSET_b;               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_ALARM0_NOTIFY3_OFFSET;    /*!< AIRPRO_ALARM0_NOTIFY3_OFFSET                                          */
    
    struct {
      __IO uint32_t  RG_AIRPROTOCOL_ALARM0_NOTIFY3_OFFSET: 12;/*!< rg_airprotocol_alarm0_notify3_offset[11:0]                  */
    } AIRPRO_ALARM0_NOTIFY3_OFFSET_b;               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_ALARM0_NOTIFY4_OFFSET;    /*!< AIRPRO_ALARM0_NOTIFY4_OFFSET                                          */
    
    struct {
      __IO uint32_t  RG_AIRPROTOCOL_ALARM0_NOTIFY4_OFFSET: 12;/*!< rg_airprotocol_alarm0_notify4_offset[11:0]                  */
    } AIRPRO_ALARM0_NOTIFY4_OFFSET_b;               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_ALARM0_IRQ_MASK;          /*!< AIRPRO_ALARM0_IRQ_MASK                                                */
    
    struct {
      __IO uint32_t  RG_AIRPROTOCOL_ALARM0_IRQ_MASK:  8;/*!< rg_airprotocol_alarm0_irq_mask[7:0]                               */
    } AIRPRO_ALARM0_IRQ_MASK_b;                     /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_ALARM0_IRQ_CLEAR;         /*!< AIRPRO_ALARM0_IRQ_CLEAR                                               */
    
    struct {
      __IO uint32_t  RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_0:  1;/*!< rg_airprotocol_alarm0_irq_clear[0]                             */
      __IO uint32_t  RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_1:  1;/*!< rg_airprotocol_alarm0_irq_clear[1]                             */
      __IO uint32_t  RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_2:  1;/*!< rg_airprotocol_alarm0_irq_clear[2]                             */
      __IO uint32_t  RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_3:  1;/*!< rg_airprotocol_alarm0_irq_clear[3]                             */
      __IO uint32_t  RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_4:  1;/*!< rg_airprotocol_alarm0_irq_clear[4]                             */
      __IO uint32_t  RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_5:  1;/*!< rg_airprotocol_alarm0_irq_clear[5]                             */
      __IO uint32_t  RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_6:  1;/*!< rg_airprotocol_alarm0_irq_clear[6]                             */
      __IO uint32_t  RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_7:  1;/*!< rg_airprotocol_alarm0_irq_clear[7]                             */
    } AIRPRO_ALARM0_IRQ_CLEAR_b;                    /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  AIRPRO_ALARM_0_IRQ_REASON;       /*!< AIRPRO_ALARM_0_IRQ_REASON                                             */
    
    struct {
      __I  uint32_t  AIR_PROTOCOL_ALARM0_IRQ_REASON:  8;/*!< air_protocol_alarm0_irq_reason[7:0]                               */
      __I  uint32_t  AIR_PROTOCOL_ALARM0_IRQ:  1;   /*!< air_protocol_alarm0_irq                                               */
    } AIRPRO_ALARM_0_IRQ_REASON_b;                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_ALARM1_EN;                /*!< AIRPRO_ALARM1_EN                                                      */
    
    struct {
      __IO uint32_t  RG_AIRPROTOCOL_ALARM1_EN:  1;  /*!< not used unless in manual mode                                        */
    } AIRPRO_ALARM1_EN_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_ALARM1_TIME;              /*!< AIRPRO_ALARM1_TIME                                                    */
    
    struct {
      __IO uint32_t  RG_AIRPROTOCOL_ALARM1_TIME: 12;/*!< not used unless in manual mode                                        */
    } AIRPRO_ALARM1_TIME_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_ALARM1_OFFSET_EARLY;      /*!< AIRPRO_ALARM1_OFFSET_EARLY                                            */
    
    struct {
      __IO uint32_t  RG_AIRPROTOCOL_ALARM1_WINDOW_OFFSET_EARLY: 12;/*!< -12sd320                                               */
    } AIRPRO_ALARM1_OFFSET_EARLY_b;                 /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_ALARM1_OFFSET_LATE;       /*!< AIRPRO_ALARM1_OFFSET_LATE                                             */
    
    struct {
      __IO uint32_t  RG_AIRPROTOCOL_ALARM1_WINDOW_OFFSET_LATE: 12;/*!< 12sd500                                                 */
    } AIRPRO_ALARM1_OFFSET_LATE_b;                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_ALARM1_NOTIFY0_OFFSET;    /*!< AIRPRO_ALARM1_NOTIFY0_OFFSET                                          */
    
    struct {
      __IO uint32_t  RG_AIRPROTOCOL_ALARM1_NOTIFY0_OFFSET: 12;/*!< -12sd300                                                    */
    } AIRPRO_ALARM1_NOTIFY0_OFFSET_b;               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_ALARM1_NOTIFY1_OFFSET;    /*!< AIRPRO_ALARM1_NOTIFY1_OFFSET                                          */
    
    struct {
      __IO uint32_t  RG_AIRPROTOCOL_ALARM1_NOTIFY1_OFFSET: 12;/*!< -12sd240                                                    */
    } AIRPRO_ALARM1_NOTIFY1_OFFSET_b;               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_ALARM1_NOTIFY2_OFFSET;    /*!< AIRPRO_ALARM1_NOTIFY2_OFFSET                                          */
    
    struct {
      __IO uint32_t  RG_AIRPROTOCOL_ALARM1_NOTIFY2_OFFSET: 12;/*!< -12sd100                                                    */
    } AIRPRO_ALARM1_NOTIFY2_OFFSET_b;               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_ALARM1_NOTIFY3_OFFSET;    /*!< AIRPRO_ALARM1_NOTIFY3_OFFSET                                          */
    
    struct {
      __IO uint32_t  RG_AIRPROTOCOL_ALARM1_NOTIFY3_OFFSET: 12;/*!< rg_airprotocol_alarm1_notify3_offset[11:0]                  */
    } AIRPRO_ALARM1_NOTIFY3_OFFSET_b;               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_ALARM1_NOTIFY4_OFFSET;    /*!< AIRPRO_ALARM1_NOTIFY4_OFFSET                                          */
    
    struct {
      __IO uint32_t  RG_AIRPROTOCOL_ALARM1_NOTIFY4_OFFSET: 12;/*!< rg_airprotocol_alarm1_notify4_offset[11:0]                  */
    } AIRPRO_ALARM1_NOTIFY4_OFFSET_b;               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_ALARM1_IRQ_MASK;          /*!< AIRPRO_ALARM1_IRQ_MASK                                                */
    
    struct {
      __IO uint32_t  RG_AIRPROTOCOL_ALARM1_IRQ_MASK:  8;/*!< air-protocol irq only be used as a debug signal. It does not
                                                         be connected to interrupt controller                                  */
    } AIRPRO_ALARM1_IRQ_MASK_b;                     /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_ALARM1_IRQ_CLEAR;         /*!< AIRPRO_ALARM1_IRQ_CLEAR                                               */
    
    struct {
      __IO uint32_t  RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_0:  1;/*!< air-protocol irq only be used as a debug signal. It does not
                                                         be connected to interrupt controller                                  */
      __IO uint32_t  RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_1:  1;/*!< rg_airprotocol_alarm1_irq_clear[1]                             */
      __IO uint32_t  RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_2:  1;/*!< rg_airprotocol_alarm1_irq_clear[2]                             */
      __IO uint32_t  RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_3:  1;/*!< rg_airprotocol_alarm1_irq_clear[3]                             */
      __IO uint32_t  RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_4:  1;/*!< rg_airprotocol_alarm1_irq_clear[4]                             */
      __IO uint32_t  RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_5:  1;/*!< rg_airprotocol_alarm1_irq_clear[5]                             */
      __IO uint32_t  RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_6:  1;/*!< rg_airprotocol_alarm1_irq_clear[6]                             */
      __IO uint32_t  RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_7:  1;/*!< rg_airprotocol_alarm1_irq_clear[7]                             */
    } AIRPRO_ALARM1_IRQ_CLEAR_b;                    /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  AIRPRO_ALARM_1_IRQ_REASON;       /*!< AIRPRO_ALARM_1_IRQ_REASON                                             */
    
    struct {
      __I  uint32_t  AIR_PROTOCOL_ALARM1_IRQ_REASON:  8;/*!< air_protocol_alarm1_irq_reason[7:0]                               */
      __I  uint32_t  AIR_PROTOCOL_ALARM1_IRQ:  1;   /*!< air_protocol_alarm1_irq                                               */
    } AIRPRO_ALARM_1_IRQ_REASON_b;                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL;/*!< AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL                      */
    
    struct {
      __IO uint32_t  ALARM0_BY_FOLLOWER0_POLICY_SEL0:  6;/*!< alarm0_by_follower0_policy_sel0[5:0]                             */
           uint32_t             :  2;
      __IO uint32_t  ALARM0_BY_FOLLOWER0_POLICY_SEL1:  6;/*!< alarm0_by_follower0_policy_sel1[5:0]                             */
           uint32_t             :  2;
      __IO uint32_t  ALARM0_BY_FOLLOWER0_POLICY_SEL2:  6;/*!< alarm0_by_follower0_policy_sel2[5:0]                             */
           uint32_t             :  2;
      __IO uint32_t  ALARM0_BY_FOLLOWER0_POLICY_SEL3:  6;/*!< alarm0_by_follower0_policy_sel3[5:0]                             */
      __IO uint32_t  ALARM0_BY_FOLLOWER0_POLICY_MANUAL_VALUE:  1;/*!< alarm0_by_follower0_policy_manual_value                  */
      __IO uint32_t  ALARM0_BY_FOLLOWER0_POLICY_MANUAL_EN:  1;/*!< alarm0_by_follower0_policy_manual_en                        */
    } AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL_b;   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_W1C_W1S;/*!< AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_W1C_W1S                    */
    
    struct {
      __IO uint32_t  ALARM0_BY_FOLLOWER0_POLICY_W1C:  1;/*!< alarm0_by_follower0_policy_w1c                                    */
      __IO uint32_t  ALARM0_BY_FOLLOWER0_POLICY_W1S:  1;/*!< alarm0_by_follower0_policy_w1s                                    */
    } AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_W1C_W1S_b;  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_POLICY;/*!< AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_POLICY                      */
    
    struct {
      __IO uint32_t  ALARM0_BY_FOLLOWER0_POLICY: 32;/*!< alarm0_by_follower0_policy[31:0]                                      */
    } AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_POLICY_b;   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL;/*!< AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL                      */
    
    struct {
      __IO uint32_t  ALARM1_BY_FOLLOWER1_POLICY_SEL0:  6;/*!< alarm1_by_follower1_policy_sel0[5:0]                             */
           uint32_t             :  2;
      __IO uint32_t  ALARM1_BY_FOLLOWER1_POLICY_SEL1:  6;/*!< alarm1_by_follower1_policy_sel1[5:0]                             */
           uint32_t             :  2;
      __IO uint32_t  ALARM1_BY_FOLLOWER1_POLICY_SEL2:  6;/*!< alarm1_by_follower1_policy_sel2[5:0]                             */
           uint32_t             :  2;
      __IO uint32_t  ALARM1_BY_FOLLOWER1_POLICY_SEL3:  6;/*!< alarm1_by_follower1_policy_sel3[5:0]                             */
      __IO uint32_t  ALARM1_BY_FOLLOWER1_POLICY_MANUAL_VALUE:  1;/*!< alarm1_by_follower1_policy_manual_value                  */
      __IO uint32_t  ALARM1_BY_FOLLOWER1_POLICY_MANUAL_EN:  1;/*!< alarm1_by_follower1_policy_manual_en                        */
    } AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL_b;   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_W1C_W1S;/*!< AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_W1C_W1S                    */
    
    struct {
      __IO uint32_t  ALARM1_BY_FOLLOWER1_POLICY_W1C:  1;/*!< alarm1_by_follower1_policy_w1c                                    */
      __IO uint32_t  ALARM1_BY_FOLLOWER1_POLICY_W1S:  1;/*!< alarm1_by_follower1_policy_w1s                                    */
    } AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_W1C_W1S_b;  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_POLICY;/*!< AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_POLICY                      */
    
    struct {
      __IO uint32_t  ALARM1_BY_FOLLOWER1_POLICY: 32;/*!< alarm1_by_follower1_policy[31:0]                                      */
    } AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_POLICY_b;   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL;/*!< AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL                                    */
    
    struct {
      __IO uint32_t  FOLLOWER0_EN_POLICY_SEL0:  6;  /*!< follower0_en_policy_sel0[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  FOLLOWER0_EN_POLICY_SEL1:  6;  /*!< follower0_en_policy_sel1[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  FOLLOWER0_EN_POLICY_SEL2:  6;  /*!< follower0_en_policy_sel2[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  FOLLOWER0_EN_POLICY_SEL3:  6;  /*!< follower0_en_policy_sel3[5:0]                                         */
      __IO uint32_t  FOLLOWER0_EN_POLICY_MANUAL_VALUE:  1;/*!< follower0_en_policy_manual_value                                */
      __IO uint32_t  FOLLOWER0_EN_POLICY_MANUAL_EN:  1;/*!< follower0_en_policy_manual_en                                      */
    } AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_FOLLOWER0_EN_W1C_W1S;/*!< AIRPRO_POLICY_FOLLOWER0_EN_W1C_W1S                                  */
    
    struct {
      __IO uint32_t  FOLLOWER0_EN_POLICY_W1C:  1;   /*!< follower0_en_policy_w1c                                               */
      __IO uint32_t  FOLLOWER0_EN_POLICY_W1S:  1;   /*!< follower0_en_policy_w1s                                               */
    } AIRPRO_POLICY_FOLLOWER0_EN_W1C_W1S_b;         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_FOLLOWER0_EN_POLICY;/*!< AIRPRO_POLICY_FOLLOWER0_EN_POLICY                                    */
    
    struct {
      __IO uint32_t  FOLLOWER0_EN_POLICY: 32;       /*!< follower0_en_policy[31:0]                                             */
    } AIRPRO_POLICY_FOLLOWER0_EN_POLICY_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL;/*!< AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL                                    */
    
    struct {
      __IO uint32_t  FOLLOWER1_EN_POLICY_SEL0:  6;  /*!< follower1_en_policy_sel0[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  FOLLOWER1_EN_POLICY_SEL1:  6;  /*!< follower1_en_policy_sel1[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  FOLLOWER1_EN_POLICY_SEL2:  6;  /*!< follower1_en_policy_sel2[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  FOLLOWER1_EN_POLICY_SEL3:  6;  /*!< follower1_en_policy_sel3[5:0]                                         */
      __IO uint32_t  FOLLOWER1_EN_POLICY_MANUAL_VALUE:  1;/*!< follower1_en_policy_manual_value                                */
      __IO uint32_t  FOLLOWER1_EN_POLICY_MANUAL_EN:  1;/*!< follower1_en_policy_manual_en                                      */
    } AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_FOLLOWER1_EN_W1C_W1S;/*!< AIRPRO_POLICY_FOLLOWER1_EN_W1C_W1S                                  */
    
    struct {
      __IO uint32_t  FOLLOWER1_EN_POLICY_W1C:  1;   /*!< follower1_en_policy_w1c                                               */
      __IO uint32_t  FOLLOWER1_EN_POLICY_W1S:  1;   /*!< follower1_en_policy_w1s                                               */
    } AIRPRO_POLICY_FOLLOWER1_EN_W1C_W1S_b;         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_FOLLOWER1_EN_POLICY;/*!< AIRPRO_POLICY_FOLLOWER1_EN_POLICY                                    */
    
    struct {
      __IO uint32_t  FOLLOWER1_EN_POLICY: 32;       /*!< follower1_en_policy[31:0]                                             */
    } AIRPRO_POLICY_FOLLOWER1_EN_POLICY_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_RF_TX_EN_R_SIGNAL; /*!< AIRPRO_POLICY_RF_TX_EN_R_SIGNAL                                       */
    
    struct {
      __IO uint32_t  RF_TX_EN_R_POLICY_SEL0:  6;    /*!< rf_tx_en_r_policy_sel0[5:0]                                           */
           uint32_t             :  2;
      __IO uint32_t  RF_TX_EN_R_POLICY_SEL1:  6;    /*!< rf_tx_en_r_policy_sel1[5:0]                                           */
           uint32_t             :  2;
      __IO uint32_t  RF_TX_EN_R_POLICY_SEL2:  6;    /*!< rf_tx_en_r_policy_sel2[5:0]                                           */
           uint32_t             :  2;
      __IO uint32_t  RF_TX_EN_R_POLICY_SEL3:  6;    /*!< rf_tx_en_r_policy_sel3[5:0]                                           */
      __IO uint32_t  RF_TX_EN_R_POLICY_MANUAL_VALUE:  1;/*!< rf_tx_en_r_policy_manual_value                                    */
      __IO uint32_t  RF_TX_EN_R_POLICY_MANUAL_EN:  1;/*!< rf_tx_en_r_policy_manual_en                                          */
    } AIRPRO_POLICY_RF_TX_EN_R_SIGNAL_b;            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_RF_TX_EN_R_W1C_W1S;/*!< AIRPRO_POLICY_RF_TX_EN_R_W1C_W1S                                      */
    
    struct {
      __IO uint32_t  RF_TX_EN_R_POLICY_W1C:  1;     /*!< rf_tx_en_r_policy_w1c                                                 */
      __IO uint32_t  RF_TX_EN_R_POLICY_W1S:  1;     /*!< rf_tx_en_r_policy_w1s                                                 */
    } AIRPRO_POLICY_RF_TX_EN_R_W1C_W1S_b;           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_RF_TX_EN_R_POLICY; /*!< AIRPRO_POLICY_RF_TX_EN_R_POLICY                                       */
    
    struct {
      __IO uint32_t  RF_TX_EN_R_POLICY: 32;         /*!< rf_tx_en_r_policy[31:0]                                               */
    } AIRPRO_POLICY_RF_TX_EN_R_POLICY_b;            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL;/*!< AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL                                      */
    
    struct {
      __IO uint32_t  PHY_TX_EN_R_POLICY_SEL0:  6;   /*!< phy_tx_en_r_policy_sel0[5:0]                                          */
           uint32_t             :  2;
      __IO uint32_t  PHY_TX_EN_R_POLICY_SEL1:  6;   /*!< phy_tx_en_r_policy_sel1[5:0]                                          */
           uint32_t             :  2;
      __IO uint32_t  PHY_TX_EN_R_POLICY_SEL2:  6;   /*!< phy_tx_en_r_policy_sel2[5:0]                                          */
           uint32_t             :  2;
      __IO uint32_t  PHY_TX_EN_R_POLICY_SEL3:  6;   /*!< phy_tx_en_r_policy_sel3[5:0]                                          */
      __IO uint32_t  PHY_TX_EN_R_POLICY_MANUAL_VALUE:  1;/*!< phy_tx_en_r_policy_manual_value                                  */
      __IO uint32_t  PHY_TX_EN_R_POLICY_MANUAL_EN:  1;/*!< phy_tx_en_r_policy_manual_en                                        */
    } AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL_b;           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_PHY_TX_EN_R_W1C_W1S;/*!< AIRPRO_POLICY_PHY_TX_EN_R_W1C_W1S                                    */
    
    struct {
      __IO uint32_t  PHY_TX_EN_R_POLICY_W1C:  1;    /*!< phy_tx_en_r_policy_w1c                                                */
      __IO uint32_t  PHY_TX_EN_R_POLICY_W1S:  1;    /*!< phy_tx_en_r_policy_w1s                                                */
    } AIRPRO_POLICY_PHY_TX_EN_R_W1C_W1S_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_PHY_TX_EN_R_POLICY;/*!< AIRPRO_POLICY_PHY_TX_EN_R_POLICY                                      */
    
    struct {
      __IO uint32_t  PHY_TX_EN_R_POLICY: 32;        /*!< phy_tx_en_r_policy[31:0]                                              */
    } AIRPRO_POLICY_PHY_TX_EN_R_POLICY_b;           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_RF_RX_EN_R_SIGNAL; /*!< AIRPRO_POLICY_RF_RX_EN_R_SIGNAL                                       */
    
    struct {
      __IO uint32_t  RF_RX_EN_R_POLICY_SEL0:  6;    /*!< rf_rx_en_r_policy_sel0[5:0]                                           */
           uint32_t             :  2;
      __IO uint32_t  RF_RX_EN_R_POLICY_SEL1:  6;    /*!< rf_rx_en_r_policy_sel1[5:0]                                           */
           uint32_t             :  2;
      __IO uint32_t  RF_RX_EN_R_POLICY_SEL2:  6;    /*!< rf_rx_en_r_policy_sel2[5:0]                                           */
           uint32_t             :  2;
      __IO uint32_t  RF_RX_EN_R_POLICY_SEL3:  6;    /*!< rf_rx_en_r_policy_sel3[5:0]                                           */
      __IO uint32_t  RF_RX_EN_R_POLICY_MANUAL_VALUE:  1;/*!< rf_rx_en_r_policy_manual_value                                    */
      __IO uint32_t  RF_RX_EN_R_POLICY_MANUAL_EN:  1;/*!< rf_rx_en_r_policy_manual_en                                          */
    } AIRPRO_POLICY_RF_RX_EN_R_SIGNAL_b;            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_RF_RX_EN_R_W1C_W1S;/*!< AIRPRO_POLICY_RF_RX_EN_R_W1C_W1S                                      */
    
    struct {
      __IO uint32_t  RF_RX_EN_R_POLICY_W1C:  1;     /*!< rf_rx_en_r_policy_w1c                                                 */
      __IO uint32_t  RF_RX_EN_R_POLICY_W1S:  1;     /*!< rf_rx_en_r_policy_w1s                                                 */
    } AIRPRO_POLICY_RF_RX_EN_R_W1C_W1S_b;           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_RF_RX_EN_R_POLICY; /*!< AIRPRO_POLICY_RF_RX_EN_R_POLICY                                       */
    
    struct {
      __IO uint32_t  RF_RX_EN_R_POLICY: 32;         /*!< rf_rx_en_r_policy[31:0]                                               */
    } AIRPRO_POLICY_RF_RX_EN_R_POLICY_b;            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL;/*!< AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL                                      */
    
    struct {
      __IO uint32_t  PHY_RX_EN_R_POLICY_SEL0:  6;   /*!< phy_rx_en_r_policy_sel0[5:0]                                          */
           uint32_t             :  2;
      __IO uint32_t  PHY_RX_EN_R_POLICY_SEL1:  6;   /*!< phy_rx_en_r_policy_sel1[5:0]                                          */
           uint32_t             :  2;
      __IO uint32_t  PHY_RX_EN_R_POLICY_SEL2:  6;   /*!< phy_rx_en_r_policy_sel2[5:0]                                          */
           uint32_t             :  2;
      __IO uint32_t  PHY_RX_EN_R_POLICY_SEL3:  6;   /*!< phy_rx_en_r_policy_sel3[5:0]                                          */
      __IO uint32_t  PHY_RX_EN_R_POLICY_MANUAL_VALUE:  1;/*!< phy_rx_en_r_policy_manual_value                                  */
      __IO uint32_t  PHY_RX_EN_R_POLICY_MANUAL_EN:  1;/*!< phy_rx_en_r_policy_manual_en                                        */
    } AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL_b;           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_PHY_RX_EN_R_W1C_W1S;/*!< AIRPRO_POLICY_PHY_RX_EN_R_W1C_W1S                                    */
    
    struct {
      __IO uint32_t  PHY_RX_EN_R_POLICY_W1C:  1;    /*!< phy_rx_en_r_policy_w1c                                                */
      __IO uint32_t  PHY_RX_EN_R_POLICY_W1S:  1;    /*!< phy_rx_en_r_policy_w1s                                                */
    } AIRPRO_POLICY_PHY_RX_EN_R_W1C_W1S_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_PHY_RX_EN_R_POLICY;/*!< AIRPRO_POLICY_PHY_RX_EN_R_POLICY                                      */
    
    struct {
      __IO uint32_t  PHY_RX_EN_R_POLICY: 32;        /*!< phy_rx_en_r_policy[31:0]                                              */
    } AIRPRO_POLICY_PHY_RX_EN_R_POLICY_b;           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL;/*!< AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL                          */
    
    struct {
      __IO uint32_t  RX_ACCESS_TIMEOUT_POLICY_SEL0:  6;/*!< rx_access_timeout_policy_sel0[5:0]                                 */
           uint32_t             :  2;
      __IO uint32_t  RX_ACCESS_TIMEOUT_POLICY_SEL1:  6;/*!< rx_access_timeout_policy_sel1[5:0]                                 */
           uint32_t             :  2;
      __IO uint32_t  RX_ACCESS_TIMEOUT_POLICY_SEL2:  6;/*!< rx_access_timeout_policy_sel2[5:0]                                 */
           uint32_t             :  2;
      __IO uint32_t  RX_ACCESS_TIMEOUT_POLICY_SEL3:  6;/*!< rx_access_timeout_policy_sel3[5:0]                                 */
      __IO uint32_t  RX_ACCESS_TIMEOUT_POLICY_MANUAL_VALUE:  1;/*!< rx_access_timeout_policy_manual_value                      */
      __IO uint32_t  RX_ACCESS_TIMEOUT_POLICY_MANUAL_EN:  1;/*!< rx_access_timeout_policy_manual_en                            */
    } AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL_b;     /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_RX_ACCESS_TIMEOUT_W1C_W1S;/*!< AIRPRO_POLICY_RX_ACCESS_TIMEOUT_W1C_W1S                        */
    
    struct {
      __IO uint32_t  RX_ACCESS_TIMEOUT_POLICY_W1C:  1;/*!< rx_access_timeout_policy_w1c                                        */
      __IO uint32_t  RX_ACCESS_TIMEOUT_POLICY_W1S:  1;/*!< rx_access_timeout_policy_w1s                                        */
    } AIRPRO_POLICY_RX_ACCESS_TIMEOUT_W1C_W1S_b;    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_RX_ACCESS_TIMEOUT_POLICY;/*!< AIRPRO_POLICY_RX_ACCESS_TIMEOUT_POLICY                          */
    
    struct {
      __IO uint32_t  RX_ACCESS_TIMEOUT_POLICY: 32;  /*!< rx_access_timeout_policy[31:0]                                        */
    } AIRPRO_POLICY_RX_ACCESS_TIMEOUT_POLICY_b;     /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_DUMY_POLICY0_SIGNAL;/*!< AIRPRO_POLICY_DUMY_POLICY0_SIGNAL                                    */
    
    struct {
      __IO uint32_t  DUMY_POLICY0_POLICY_SEL0:  6;  /*!< dumy_policy0_policy_sel0[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  DUMY_POLICY0_POLICY_SEL1:  6;  /*!< dumy_policy0_policy_sel1[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  DUMY_POLICY0_POLICY_SEL2:  6;  /*!< dumy_policy0_policy_sel2[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  DUMY_POLICY0_POLICY_SEL3:  6;  /*!< dumy_policy0_policy_sel3[5:0]                                         */
      __IO uint32_t  DUMY_POLICY0_MANUAL_VALUE:  1; /*!< dumy_policy0_manual_value                                             */
      __IO uint32_t  DUMY_POLICY0_MANUAL_EN:  1;    /*!< dumy_policy0_manual_en                                                */
    } AIRPRO_POLICY_DUMY_POLICY0_SIGNAL_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_DUMY_POLICY0_W1C_W1S;/*!< AIRPRO_POLICY_DUMY_POLICY0_W1C_W1S                                  */
    
    struct {
      __IO uint32_t  DUMY_POLICY0_POLICY_W1C:  1;   /*!< dumy_policy0_policy_w1c                                               */
      __IO uint32_t  DUMY_POLICY0_POLICY_W1S:  1;   /*!< dumy_policy0_policy_w1s                                               */
    } AIRPRO_POLICY_DUMY_POLICY0_W1C_W1S_b;         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_DUMY_POLICY0_POLICY;/*!< AIRPRO_POLICY_DUMY_POLICY0_POLICY                                    */
    
    struct {
      __IO uint32_t  DUMY_POLICY0_POLICY: 32;       /*!< dumy_policy0_policy[31:0]                                             */
    } AIRPRO_POLICY_DUMY_POLICY0_POLICY_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_DUMY_POLICY1_SIGNAL;/*!< AIRPRO_POLICY_DUMY_POLICY1_SIGNAL                                    */
    
    struct {
      __IO uint32_t  DUMY_POLICY1_POLICY_SEL0:  6;  /*!< dumy_policy1_policy_sel0[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  DUMY_POLICY1_POLICY_SEL1:  6;  /*!< dumy_policy1_policy_sel1[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  DUMY_POLICY1_POLICY_SEL2:  6;  /*!< dumy_policy1_policy_sel2[5:0]                                         */
           uint32_t             :  2;
      __IO uint32_t  DUMY_POLICY1_POLICY_SEL3:  6;  /*!< dumy_policy1_policy_sel3[5:0]                                         */
      __IO uint32_t  DUMY_POLICY1_MANUAL_VALUE:  1; /*!< dumy_policy1_manual_value                                             */
      __IO uint32_t  DUMY_POLICY1_MANUAL_EN:  1;    /*!< dumy_policy1_manual_en                                                */
    } AIRPRO_POLICY_DUMY_POLICY1_SIGNAL_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_DUMY_POLICY1_W1C_W1S;/*!< AIRPRO_POLICY_DUMY_POLICY1_W1C_W1S                                  */
    
    struct {
      __IO uint32_t  DUMY_POLICY1_POLICY_W1C:  1;   /*!< dumy_policy1_policy_w1c                                               */
      __IO uint32_t  DUMY_POLICY1_POLICY_W1S:  1;   /*!< dumy_policy1_policy_w1s                                               */
    } AIRPRO_POLICY_DUMY_POLICY1_W1C_W1S_b;         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_DUMY_POLICY1_POLICY;/*!< AIRPRO_POLICY_DUMY_POLICY1_POLICY                                    */
    
    struct {
      __IO uint32_t  DUMY_POLICY1_POLICY: 32;       /*!< dumy_policy1_policy[31:0]                                             */
    } AIRPRO_POLICY_DUMY_POLICY1_POLICY_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_PDU_REQ_SIGNAL;    /*!< AIRPRO_POLICY_PDU_REQ_SIGNAL                                          */
    
    struct {
      __IO uint32_t  PDU_REQ_POLICY_SEL0:  6;       /*!< pdu_req_policy_sel0[5:0]                                              */
           uint32_t             :  2;
      __IO uint32_t  PDU_REQ_POLICY_SEL1:  6;       /*!< pdu_req_policy_sel1[5:0]                                              */
           uint32_t             :  2;
      __IO uint32_t  PDU_REQ_POLICY_SEL2:  6;       /*!< pdu_req_policy_sel2[5:0]                                              */
           uint32_t             :  2;
      __IO uint32_t  PDU_REQ_POLICY_SEL3:  6;       /*!< pdu_req_policy_sel3[5:0]                                              */
      __IO uint32_t  PDU_REQ_POLICY_MANUAL_VALUE:  1;/*!< pdu_req_policy_manual_value                                          */
      __IO uint32_t  PDU_REQ_POLICY_MANUAL_EN:  1;  /*!< pdu_req_policy_manual_en                                              */
    } AIRPRO_POLICY_PDU_REQ_SIGNAL_b;               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_PDU_REQ_W1C_W1S;   /*!< AIRPRO_POLICY_PDU_REQ_W1C_W1S                                         */
    
    struct {
      __IO uint32_t  PDU_REQ_POLICY_W1C:  1;        /*!< pdu_req_policy_w1c                                                    */
      __IO uint32_t  PDU_REQ_POLICY_W1S:  1;        /*!< pdu_req_policy_w1s                                                    */
    } AIRPRO_POLICY_PDU_REQ_W1C_W1S_b;              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  AIRPRO_POLICY_PDU_REQ_POLICY;    /*!< AIRPRO_POLICY_PDU_REQ_POLICY                                          */
    
    struct {
      __IO uint32_t  PDU_REQ_POLICY: 32;            /*!< pdu_req_policy[31:0]                                                  */
    } AIRPRO_POLICY_PDU_REQ_POLICY_b;               /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  AIRPRO_POLICY_SRC_BUS_0;         /*!< AIRPRO_POLICY_SRC_BUS_0                                               */
    
    struct {
      __I  uint32_t  AIRPRO_POLICY_SRC_BUS_31_0: 32;/*!< airpro_policy_src_bus[31:0]                                           */
    } AIRPRO_POLICY_SRC_BUS_0_b;                    /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  AIRPRO_POLICY_SRC_BUS_1;         /*!< see the description in 'AIRPRO_POLICY_SRC_BUS 0'                      */
    
    struct {
      __I  uint32_t  AIRPRO_POLICY_SRC_BUS_63_32: 32;/*!< airpro_policy_src_bus[63:32]                                         */
    } AIRPRO_POLICY_SRC_BUS_1_b;                    /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_RDOUT;/*!< AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_RDOUT                        */
    
    struct {
      __I  uint32_t  ALARM0_BY_FOLLOWER0_POLICY_OUT:  1;/*!< alarm0_by_follower0_policy_out                                    */
    } AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_RDOUT_b;    /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_RDOUT;/*!< AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_RDOUT                        */
    
    struct {
      __I  uint32_t  ALARM1_BY_FOLLOWER1_POLICY_OUT:  1;/*!< alarm1_by_follower1_policy_out                                    */
    } AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_RDOUT_b;    /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  AIRPRO_POLICY_FOLLOWER0_EN_RDOUT;/*!< AIRPRO_POLICY_FOLLOWER0_EN_RDOUT                                      */
    
    struct {
      __I  uint32_t  FOLLOWER0_EN_POLICY_OUT:  1;   /*!< follower0_en_policy_out                                               */
    } AIRPRO_POLICY_FOLLOWER0_EN_RDOUT_b;           /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  AIRPRO_POLICY_FOLLOWER1_EN_RDOUT;/*!< AIRPRO_POLICY_FOLLOWER1_EN_RDOUT                                      */
    
    struct {
      __I  uint32_t  FOLLOWER1_EN_POLICY_OUT:  1;   /*!< follower1_en_policy_out                                               */
    } AIRPRO_POLICY_FOLLOWER1_EN_RDOUT_b;           /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  AIRPRO_POLICY_RF_TX_EN_R_RDOUT;  /*!< AIRPRO_POLICY_RF_TX_EN_R_RDOUT                                        */
    
    struct {
      __I  uint32_t  RF_TX_EN_R_POLICY_OUT:  1;     /*!< rf_tx_en_r_policy_out                                                 */
    } AIRPRO_POLICY_RF_TX_EN_R_RDOUT_b;             /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  AIRPRO_POLICY_PHY_TX_EN_R_RDOUT; /*!< AIRPRO_POLICY_PHY_TX_EN_R_RDOUT                                       */
    
    struct {
      __I  uint32_t  PHY_TX_EN_R_POLICY_OUT:  1;    /*!< phy_tx_en_r_policy_out                                                */
    } AIRPRO_POLICY_PHY_TX_EN_R_RDOUT_b;            /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  AIRPRO_POLICY_RF_RX_EN_R_RDOUT;  /*!< AIRPRO_POLICY_RF_RX_EN_R_RDOUT                                        */
    
    struct {
      __I  uint32_t  RF_RX_EN_R_POLICY_OUT:  1;     /*!< rf_rx_en_r_policy_out                                                 */
    } AIRPRO_POLICY_RF_RX_EN_R_RDOUT_b;             /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  AIRPRO_POLICY_PHY_RX_EN_R_RDOUT; /*!< AIRPRO_POLICY_PHY_RX_EN_R_RDOUT                                       */
    
    struct {
      __I  uint32_t  PHY_RX_EN_R_POLICY_OUT:  1;    /*!< phy_rx_en_r_policy_out                                                */
    } AIRPRO_POLICY_PHY_RX_EN_R_RDOUT_b;            /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  AIRPRO_POLICY_RX_ACCESS_TIMEOUT_RDOUT;/*!< AIRPRO_POLICY_RX_ACCESS_TIMEOUT_RDOUT                            */
    
    struct {
      __I  uint32_t  RX_ACCESS_TIMEOUT_POLICY_OUT:  1;/*!< rx_access_timeout_policy_out                                        */
    } AIRPRO_POLICY_RX_ACCESS_TIMEOUT_RDOUT_b;      /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  AIRPRO_POLICY_DUMY_POLICY0_RDOUT;/*!< AIRPRO_POLICY_DUMY_POLICY0_RDOUT                                      */
    
    struct {
      __I  uint32_t  DUMY_POLICY0_POLICY_OUT:  1;   /*!< dumy_policy0_policy_out                                               */
    } AIRPRO_POLICY_DUMY_POLICY0_RDOUT_b;           /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  AIRPRO_POLICY_DUMY_POLICY1_RDOUT;/*!< AIRPRO_POLICY_DUMY_POLICY1_RDOUT                                      */
    
    struct {
      __I  uint32_t  DUMY_POLICY1_POLICY_OUT:  1;   /*!< dumy_policy1_policy_out                                               */
    } AIRPRO_POLICY_DUMY_POLICY1_RDOUT_b;           /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  AIRPRO_POLICY_PDU_REQ_RDOUT;     /*!< AIRPRO_POLICY_PDU_REQ_RDOUT                                           */
    
    struct {
      __I  uint32_t  PDU_REQ_POLICY_OUT:  1;        /*!< pdu_req_policy_out                                                    */
    } AIRPRO_POLICY_PDU_REQ_RDOUT_b;                /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  AIRPRO_FOLLOWER_01_IRQ_DBG;      /*!< AIRPRO_FOLLOWER_01_IRQ_DBG                                            */
    
    struct {
      __I  uint32_t  AIR_PROTOCOL_FOLLOW1_ALARM_TIME: 12;/*!< air_protocol_follow1_alarm_time[11:0]                            */
           uint32_t             :  3;
      __I  uint32_t  AIR_PROTOCOL_FOLLOW1_IRQ:  1;  /*!< air_protocol_follow1_irq                                              */
      __I  uint32_t  AIR_PROTOCOL_FOLLOW0_ALARM_TIME: 12;/*!< air_protocol_follow0_alarm_time[11:0]                            */
           uint32_t             :  3;
      __I  uint32_t  AIR_PROTOCOL_FOLLOW0_IRQ:  1;  /*!< air_protocol_follow0_irq                                              */
    } AIRPRO_FOLLOWER_01_IRQ_DBG_b;                 /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_0_EN;           /*!< CSR_ANCHOR_ALARM_0_EN                                                 */
    
    struct {
      __IO uint32_t  RG_ANCHOR0_ENABLE:  1;         /*!< unit alarm enable                                                     */
    } CSR_ANCHOR_ALARM_0_EN_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_0_TIME;         /*!< CSR_ANCHOR_ALARM_0_TIME                                               */
    
    struct {
      __IO uint32_t  RG_ANCHOR0_TIME: 28;           /*!< absolute unit alarm anchor time                                       */
    } CSR_ANCHOR_ALARM_0_TIME_b;                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_0_OFFSET_EARLY; /*!< CSR_ANCHOR_ALARM_0_OFFSET_EARLY                                       */
    
    struct {
      __IO uint32_t  RG_ANCHOR0_WINDOW_OFFSET_EARLY: 20;/*!< signed unit alarm offset_early time                               */
    } CSR_ANCHOR_ALARM_0_OFFSET_EARLY_b;            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_0_OFFSET_LATE;  /*!< CSR_ANCHOR_ALARM_0_OFFSET_LATE                                        */
    
    struct {
      __IO uint32_t  RG_ANCHOR0_WINDOW_OFFSET_LATE: 20;/*!< signed unit alarm offset_late time                                 */
    } CSR_ANCHOR_ALARM_0_OFFSET_LATE_b;             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY0;/*!< CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY0                                    */
    
    struct {
      __IO uint32_t  RG_ANCHOR0_NOTIFY0_OFFSET: 20; /*!< signed unit alarm notify_0 offset                                     */
    } CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY0_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY1;/*!< CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY1                                    */
    
    struct {
      __IO uint32_t  RG_ANCHOR0_NOTIFY1_OFFSET: 20; /*!< signed unit alarm notify_1 offset                                     */
    } CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY1_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY2;/*!< CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY2                                    */
    
    struct {
      __IO uint32_t  RG_ANCHOR0_NOTIFY2_OFFSET: 20; /*!< signed unit alarm notify_2 offset                                     */
    } CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY2_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY3;/*!< CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY3                                    */
    
    struct {
      __IO uint32_t  RG_ANCHOR0_NOTIFY3_OFFSET: 20; /*!< signed unit alarm notify_3 offset                                     */
    } CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY3_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY4;/*!< CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY4                                    */
    
    struct {
      __IO uint32_t  RG_ANCHOR0_NOTIFY4_OFFSET: 20; /*!< signed unit alarm notify_4 offset                                     */
    } CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY4_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_0_IRQ_MASK;     /*!< CSR_ANCHOR_ALARM_0_IRQ_MASK                                           */
    
    struct {
      __IO uint32_t  RG_ANCHOR0_IRQ_MASK:  8;       /*!< unit alarm interrupt mask ; set 1 to mask the alarm interrupt
                                                                                                                               */
    } CSR_ANCHOR_ALARM_0_IRQ_MASK_b;                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_0_IRQ_CLEAR;    /*!< CSR_ANCHOR_ALARM_0_IRQ_CLEAR                                          */
    
    struct {
      __IO uint32_t  RG_ANCHOR0_IRQ_CLEAR_0:  1;    /*!< unit alarm interrupt clear; active high                               */
      __IO uint32_t  RG_ANCHOR0_IRQ_CLEAR_1:  1;    /*!< rg_anchor0_irq_clear[1]                                               */
      __IO uint32_t  RG_ANCHOR0_IRQ_CLEAR_2:  1;    /*!< rg_anchor0_irq_clear[2]                                               */
      __IO uint32_t  RG_ANCHOR0_IRQ_CLEAR_3:  1;    /*!< rg_anchor0_irq_clear[3]                                               */
      __IO uint32_t  RG_ANCHOR0_IRQ_CLEAR_4:  1;    /*!< rg_anchor0_irq_clear[4]                                               */
      __IO uint32_t  RG_ANCHOR0_IRQ_CLEAR_5:  1;    /*!< rg_anchor0_irq_clear[5]                                               */
      __IO uint32_t  RG_ANCHOR0_IRQ_CLEAR_6:  1;    /*!< rg_anchor0_irq_clear[6]                                               */
      __IO uint32_t  RG_ANCHOR0_IRQ_CLEAR_7:  1;    /*!< rg_anchor0_irq_clear[7]                                               */
    } CSR_ANCHOR_ALARM_0_IRQ_CLEAR_b;               /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  ANCHOR_IRQ_REASON_0;             /*!< ANCHOR_IRQ_REASON_0                                                   */
    
    struct {
      __I  uint32_t  ANCHOR0_IRQ_REASON:  8;        /*!< anchor0_irq_reason[7:0]                                               */
      __I  uint32_t  ANCHOR0_IRQ:  1;               /*!< anchor0_irq                                                           */
    } ANCHOR_IRQ_REASON_0_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_1_EN;           /*!< CSR_ANCHOR_ALARM_1_EN                                                 */
    
    struct {
      __IO uint32_t  RG_ANCHOR1_ENABLE:  1;         /*!< unit alarm enable                                                     */
    } CSR_ANCHOR_ALARM_1_EN_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_1_TIME;         /*!< CSR_ANCHOR_ALARM_1_TIME                                               */
    
    struct {
      __IO uint32_t  RG_ANCHOR1_TIME: 28;           /*!< absolute unit alarm anchor time                                       */
    } CSR_ANCHOR_ALARM_1_TIME_b;                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_1_OFFSET_EARLY; /*!< CSR_ANCHOR_ALARM_1_OFFSET_EARLY                                       */
    
    struct {
      __IO uint32_t  RG_ANCHOR1_WINDOW_OFFSET_EARLY: 20;/*!< signed unit alarm offset_early time                               */
    } CSR_ANCHOR_ALARM_1_OFFSET_EARLY_b;            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_1_OFFSET_LATE;  /*!< CSR_ANCHOR_ALARM_1_OFFSET_LATE                                        */
    
    struct {
      __IO uint32_t  RG_ANCHOR1_WINDOW_OFFSET_LATE: 20;/*!< signed unit alarm offset_late time                                 */
    } CSR_ANCHOR_ALARM_1_OFFSET_LATE_b;             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY0;/*!< CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY0                                    */
    
    struct {
      __IO uint32_t  RG_ANCHOR1_NOTIFY0_OFFSET: 20; /*!< signed unit alarm notify_0 offset                                     */
    } CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY0_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY1;/*!< CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY1                                    */
    
    struct {
      __IO uint32_t  RG_ANCHOR1_NOTIFY1_OFFSET: 20; /*!< signed unit alarm notify_1 offset                                     */
    } CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY1_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY2;/*!< CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY2                                    */
    
    struct {
      __IO uint32_t  RG_ANCHOR1_NOTIFY2_OFFSET: 20; /*!< signed unit alarm notify_2 offset                                     */
    } CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY2_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY3;/*!< CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY3                                    */
    
    struct {
      __IO uint32_t  RG_ANCHOR1_NOTIFY3_OFFSET: 20; /*!< signed unit alarm notify_3 offset                                     */
    } CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY3_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY4;/*!< CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY4                                    */
    
    struct {
      __IO uint32_t  RG_ANCHOR1_NOTIFY4_OFFSET: 20; /*!< signed unit alarm notify_4 offset                                     */
    } CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY4_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_1_IRQ_MASK;     /*!< CSR_ANCHOR_ALARM_1_IRQ_MASK                                           */
    
    struct {
      __IO uint32_t  RG_ANCHOR1_IRQ_MASK:  8;       /*!< unit alarm interrupt mask ; set 1 to mask the alarm interrupt
                                                                                                                               */
    } CSR_ANCHOR_ALARM_1_IRQ_MASK_b;                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_1_IRQ_CLEAR;    /*!< CSR_ANCHOR_ALARM_1_IRQ_CLEAR                                          */
    
    struct {
      __IO uint32_t  RG_ANCHOR1_IRQ_CLEAR_0:  1;    /*!< unit alarm interrupt clear; active high                               */
      __IO uint32_t  RG_ANCHOR1_IRQ_CLEAR_1:  1;    /*!< rg_anchor1_irq_clear[1]                                               */
      __IO uint32_t  RG_ANCHOR1_IRQ_CLEAR_2:  1;    /*!< rg_anchor1_irq_clear[2]                                               */
      __IO uint32_t  RG_ANCHOR1_IRQ_CLEAR_3:  1;    /*!< rg_anchor1_irq_clear[3]                                               */
      __IO uint32_t  RG_ANCHOR1_IRQ_CLEAR_4:  1;    /*!< rg_anchor1_irq_clear[4]                                               */
      __IO uint32_t  RG_ANCHOR1_IRQ_CLEAR_5:  1;    /*!< rg_anchor1_irq_clear[5]                                               */
      __IO uint32_t  RG_ANCHOR1_IRQ_CLEAR_6:  1;    /*!< rg_anchor1_irq_clear[6]                                               */
      __IO uint32_t  RG_ANCHOR1_IRQ_CLEAR_7:  1;    /*!< rg_anchor1_irq_clear[7]                                               */
    } CSR_ANCHOR_ALARM_1_IRQ_CLEAR_b;               /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  ANCHOR_IRQ_REASON_1;             /*!< ANCHOR_IRQ_REASON_1                                                   */
    
    struct {
      __I  uint32_t  ANCHOR1_IRQ_REASON:  8;        /*!< anchor1_irq_reason[7:0]                                               */
      __I  uint32_t  ANCHOR1_IRQ:  1;               /*!< anchor1_irq                                                           */
    } ANCHOR_IRQ_REASON_1_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_2_EN;           /*!< CSR_ANCHOR_ALARM_2_EN                                                 */
    
    struct {
      __IO uint32_t  RG_ANCHOR2_ENABLE:  1;         /*!< unit alarm enable                                                     */
    } CSR_ANCHOR_ALARM_2_EN_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_2_TIME;         /*!< CSR_ANCHOR_ALARM_2_TIME                                               */
    
    struct {
      __IO uint32_t  RG_ANCHOR2_TIME: 28;           /*!< absolute unit alarm anchor time                                       */
    } CSR_ANCHOR_ALARM_2_TIME_b;                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_2_OFFSET_EARLY; /*!< CSR_ANCHOR_ALARM_2_OFFSET_EARLY                                       */
    
    struct {
      __IO uint32_t  RG_ANCHOR2_WINDOW_OFFSET_EARLY: 20;/*!< signed unit alarm offset_early time                               */
    } CSR_ANCHOR_ALARM_2_OFFSET_EARLY_b;            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_2_OFFSET_LATE;  /*!< CSR_ANCHOR_ALARM_2_OFFSET_LATE                                        */
    
    struct {
      __IO uint32_t  RG_ANCHOR2_WINDOW_OFFSET_LATE: 20;/*!< signed unit alarm offset_late time                                 */
    } CSR_ANCHOR_ALARM_2_OFFSET_LATE_b;             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY0;/*!< CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY0                                    */
    
    struct {
      __IO uint32_t  RG_ANCHOR2_NOTIFY0_OFFSET: 20; /*!< signed unit alarm notify_0 offset                                     */
    } CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY0_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY1;/*!< CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY1                                    */
    
    struct {
      __IO uint32_t  RG_ANCHOR2_NOTIFY1_OFFSET: 20; /*!< signed unit alarm notify_1 offset                                     */
    } CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY1_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY2;/*!< CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY2                                    */
    
    struct {
      __IO uint32_t  RG_ANCHOR2_NOTIFY2_OFFSET: 20; /*!< signed unit alarm notify_2 offset                                     */
    } CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY2_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY3;/*!< CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY3                                    */
    
    struct {
      __IO uint32_t  RG_ANCHOR2_NOTIFY3_OFFSET: 20; /*!< signed unit alarm notify_3 offset                                     */
    } CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY3_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY4;/*!< CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY4                                    */
    
    struct {
      __IO uint32_t  RG_ANCHOR2_NOTIFY4_OFFSET: 20; /*!< signed unit alarm notify_4 offset                                     */
    } CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY4_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_2_IRQ_MASK;     /*!< CSR_ANCHOR_ALARM_2_IRQ_MASK                                           */
    
    struct {
      __IO uint32_t  RG_ANCHOR2_IRQ_MASK:  8;       /*!< unit alarm interrupt mask ; set 1 to mask the alarm interrupt
                                                                                                                               */
    } CSR_ANCHOR_ALARM_2_IRQ_MASK_b;                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_2_IRQ_CLEAR;    /*!< CSR_ANCHOR_ALARM_2_IRQ_CLEAR                                          */
    
    struct {
      __IO uint32_t  RG_ANCHOR2_IRQ_CLEAR_0:  1;    /*!< unit alarm interrupt clear; active high                               */
      __IO uint32_t  RG_ANCHOR2_IRQ_CLEAR_1:  1;    /*!< rg_anchor2_irq_clear[1]                                               */
      __IO uint32_t  RG_ANCHOR2_IRQ_CLEAR_2:  1;    /*!< rg_anchor2_irq_clear[2]                                               */
      __IO uint32_t  RG_ANCHOR2_IRQ_CLEAR_3:  1;    /*!< rg_anchor2_irq_clear[3]                                               */
      __IO uint32_t  RG_ANCHOR2_IRQ_CLEAR_4:  1;    /*!< rg_anchor2_irq_clear[4]                                               */
      __IO uint32_t  RG_ANCHOR2_IRQ_CLEAR_5:  1;    /*!< rg_anchor2_irq_clear[5]                                               */
      __IO uint32_t  RG_ANCHOR2_IRQ_CLEAR_6:  1;    /*!< rg_anchor2_irq_clear[6]                                               */
      __IO uint32_t  RG_ANCHOR2_IRQ_CLEAR_7:  1;    /*!< rg_anchor2_irq_clear[7]                                               */
    } CSR_ANCHOR_ALARM_2_IRQ_CLEAR_b;               /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  ANCHOR_IRQ_REASON_2;             /*!< ANCHOR_IRQ_REASON_2                                                   */
    
    struct {
      __I  uint32_t  ANCHOR2_IRQ_REASON:  8;        /*!< anchor2_irq_reason[7:0]                                               */
      __I  uint32_t  ANCHOR2_IRQ:  1;               /*!< anchor2_irq                                                           */
    } ANCHOR_IRQ_REASON_2_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_3_EN;           /*!< CSR_ANCHOR_ALARM_3_EN                                                 */
    
    struct {
      __IO uint32_t  RG_ANCHOR3_ENABLE:  1;         /*!< unit alarm enable                                                     */
    } CSR_ANCHOR_ALARM_3_EN_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_3_TIME;         /*!< CSR_ANCHOR_ALARM_3_TIME                                               */
    
    struct {
      __IO uint32_t  RG_ANCHOR3_TIME: 28;           /*!< absolute unit alarm anchor time                                       */
    } CSR_ANCHOR_ALARM_3_TIME_b;                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_3_OFFSET_EARLY; /*!< CSR_ANCHOR_ALARM_3_OFFSET_EARLY                                       */
    
    struct {
      __IO uint32_t  RG_ANCHOR3_WINDOW_OFFSET_EARLY: 20;/*!< signed unit alarm offset_early time                               */
    } CSR_ANCHOR_ALARM_3_OFFSET_EARLY_b;            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_3_OFFSET_LATE;  /*!< CSR_ANCHOR_ALARM_3_OFFSET_LATE                                        */
    
    struct {
      __IO uint32_t  RG_ANCHOR3_WINDOW_OFFSET_LATE: 20;/*!< signed unit alarm offset_late time                                 */
    } CSR_ANCHOR_ALARM_3_OFFSET_LATE_b;             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY0;/*!< CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY0                                    */
    
    struct {
      __IO uint32_t  RG_ANCHOR3_NOTIFY0_OFFSET: 20; /*!< signed unit alarm notify_0 offset                                     */
    } CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY0_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY1;/*!< CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY1                                    */
    
    struct {
      __IO uint32_t  RG_ANCHOR3_NOTIFY1_OFFSET: 20; /*!< signed unit alarm notify_1 offset                                     */
    } CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY1_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY2;/*!< CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY2                                    */
    
    struct {
      __IO uint32_t  RG_ANCHOR3_NOTIFY2_OFFSET: 20; /*!< signed unit alarm notify_2 offset                                     */
    } CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY2_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY3;/*!< CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY3                                    */
    
    struct {
      __IO uint32_t  RG_ANCHOR3_NOTIFY3_OFFSET: 20; /*!< signed unit alarm notify_3 offset                                     */
    } CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY3_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY4;/*!< CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY4                                    */
    
    struct {
      __IO uint32_t  RG_ANCHOR3_NOTIFY4_OFFSET: 20; /*!< signed unit alarm notify_4 offset                                     */
    } CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY4_b;          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_3_IRQ_MASK;     /*!< CSR_ANCHOR_ALARM_3_IRQ_MASK                                           */
    
    struct {
      __IO uint32_t  RG_ANCHOR3_IRQ_MASK:  8;       /*!< unit alarm interrupt mask ; set 1 to mask the alarm interrupt
                                                                                                                               */
    } CSR_ANCHOR_ALARM_3_IRQ_MASK_b;                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CSR_ANCHOR_ALARM_3_IRQ_CLEAR;    /*!< CSR_ANCHOR_ALARM_3_IRQ_CLEAR                                          */
    
    struct {
      __IO uint32_t  RG_ANCHOR3_IRQ_CLEAR_0:  1;    /*!< unit alarm interrupt clear; active high                               */
      __IO uint32_t  RG_ANCHOR3_IRQ_CLEAR_1:  1;    /*!< rg_anchor3_irq_clear[1]                                               */
      __IO uint32_t  RG_ANCHOR3_IRQ_CLEAR_2:  1;    /*!< rg_anchor3_irq_clear[2]                                               */
      __IO uint32_t  RG_ANCHOR3_IRQ_CLEAR_3:  1;    /*!< rg_anchor3_irq_clear[3]                                               */
      __IO uint32_t  RG_ANCHOR3_IRQ_CLEAR_4:  1;    /*!< rg_anchor3_irq_clear[4]                                               */
      __IO uint32_t  RG_ANCHOR3_IRQ_CLEAR_5:  1;    /*!< rg_anchor3_irq_clear[5]                                               */
      __IO uint32_t  RG_ANCHOR3_IRQ_CLEAR_6:  1;    /*!< rg_anchor3_irq_clear[6]                                               */
      __IO uint32_t  RG_ANCHOR3_IRQ_CLEAR_7:  1;    /*!< rg_anchor3_irq_clear[7]                                               */
    } CSR_ANCHOR_ALARM_3_IRQ_CLEAR_b;               /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  ANCHOR_IRQ_REASON_3;             /*!< ANCHOR_IRQ_REASON_3                                                   */
    
    struct {
      __I  uint32_t  ANCHOR3_IRQ_REASON:  8;        /*!< anchor3_irq_reason[7:0]                                               */
      __I  uint32_t  ANCHOR3_IRQ:  1;               /*!< anchor3_irq                                                           */
    } ANCHOR_IRQ_REASON_3_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ANCHOR_CONTROL;                  /*!< ANCHOR_CONTROL                                                        */
    
    struct {
      __IO uint32_t  RG_CLOCK_ENABLE:  1;           /*!< anchor clock enable                                                   */
    } ANCHOR_CONTROL_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ANCHOR_ACTIVE_TIME;              /*!< ANCHOR_ACTIVE_TIME                                                    */
    
    struct {
      __IO uint32_t  RG_CLOCK_TIME: 28;             /*!< active_clock_time write rg_clock_time to set active_clock_time
                                                         read rg_clock_time to get current active_clock_time                   */
    } ANCHOR_ACTIVE_TIME_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  ANCHOR_ALARM_PRIORITY;           /*!< ANCHOR_ALARM_PRIORITY                                                 */
    
    struct {
      __IO uint32_t  RG_ARBIT_PRIORITY:  4;         /*!< unit alarm 0/1/2/3 priority; 1=high; 0=low                            */
    } ANCHOR_ALARM_PRIORITY_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  ANCHOR_ACTIVE_ALARM_INFO;        /*!< ANCHOR_ACTIVE_ALARM_INFO                                              */
    
    struct {
      __I  uint32_t  ACTIVE_ANCHOR_TIME: 28;        /*!< the anchor time of active alarm                                       */
      __I  uint32_t  ACTIVE_ANCHOR_ID:  2;          /*!< the id of active alarm                                                */
      __I  uint32_t  ACTIVE_ANCHOR_VALID:  1;       /*!< valid flag of active alarm                                            */
    } ANCHOR_ACTIVE_ALARM_INFO_b;                   /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  ANCHOR_DBG;                      /*!< ANCHOR_DBG                                                            */
    
    struct {
      __I  uint32_t  DBG_TOUCHLATE:  4;             /*!< dbg_touchlate[3:0]                                                    */
      __I  uint32_t  DBG_TOUCHEARLY:  4;            /*!< dbg_touchearly[3:0]                                                   */
    } ANCHOR_DBG_b;                                 /*!< BitSize                                                               */
  };
} CONDOR_LL_FUNC_REG_Type;


/* ================================================================================ */
/* ================                 RX_PDU_BUF_REG                 ================ */
/* ================================================================================ */


/**
  * @brief RX_PDU_BUF_REG  (RX_PDU_BUF_REG)
  */

typedef struct {                                    /*!< RX_PDU_BUF_REG Structure                                              */
  
  union {
    __IO uint32_t  RX_PDU_BUF_0;                    /*!< RX_PDU_BUF_0                                                          */
    
    struct {
      __I  uint32_t  RX_PDU_TYPE: 12;               /*!< rx_pdu_type[11:0]                                                     */
      __I  uint32_t  RX_CONN_ID :  4;               /*!< rx_conn_id[3:0]                                                       */
      __IO uint32_t  RX_PDU_BUF_RSV0:  8;           /*!< rx_pdu_buf_rsv0[7:0]                                                  */
      __IO uint32_t  RX_PDU_BUF_RSV1:  8;           /*!< rx_pdu_buf_rsv1[7:0]                                                  */
    } RX_PDU_BUF_0_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_PDU_BUF_1;                    /*!< RX_PDU_BUF_1                                                          */
    
    struct {
      __I  uint32_t  RX_RSSI    :  8;               /*!< rx_rssi[7:0]                                                          */
      __I  uint32_t  RX_ACCESS_TIME: 20;            /*!< rx_access_time[19:0]                                                  */
      __IO uint32_t  RX_PDU_BUF_RSV2:  4;           /*!< rx_pdu_buf_rsv2[3:0]                                                  */
    } RX_PDU_BUF_1_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_PDU_BUF_2;                    /*!< RX_PDU_BUF_2                                                          */
    
    struct {
      __I  uint32_t  RX_CH      :  6;               /*!< rx_ch[5:0]                                                            */
      __IO uint32_t  RX_PDU_BUF_RSV3:  2;           /*!< rx_pdu_buf_rsv3[1:0]                                                  */
      __I  uint32_t  RX_INFO    :  8;               /*!< rx_info[7:0]                                                          */
      __IO uint32_t  CONN_EVENT : 16;               /*!< conn_event[15:0]                                                      */
    } RX_PDU_BUF_2_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_PDU_PAYLOAD_0;                /*!< RX_PDU_PAYLOAD_0                                                      */
    
    struct {
      __IO uint32_t  RX_PDU_HEADER: 16;             /*!< rx_pdu_header[15:0]                                                   */
      __IO uint32_t  RX_PDU_PAYLOAD_0:  8;          /*!< rx_pdu_payload_0[7:0]                                                 */
      __IO uint32_t  RX_PDU_PAYLOAD_1:  8;          /*!< rx_pdu_payload_1[7:0]                                                 */
    } RX_PDU_PAYLOAD_0_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_PDU_PAYLOAD_1_0;              /*!< RX_PDU_PAYLOAD_1_0                                                    */
    
    struct {
      __IO uint32_t  RX_PDU_PAYLOAD_2:  8;          /*!< rx_pdu_payload_2[7:0]                                                 */
      __IO uint32_t  RX_PDU_PAYLOAD_3:  8;          /*!< rx_pdu_payload_3[7:0]                                                 */
      __IO uint32_t  RX_PDU_PAYLOAD_4:  8;          /*!< rx_pdu_payload_4[7:0]                                                 */
      __IO uint32_t  RX_PDU_PAYLOAD_5:  8;          /*!< rx_pdu_payload_5[7:0]                                                 */
    } RX_PDU_PAYLOAD_1_0_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_PDU_PAYLOAD_1_1;              /*!< see the description in 'RX_PDU_PAYLOAD_1 0'                           */
    
    struct {
      __IO uint32_t  RX_PDU_PAYLOAD_6:  8;          /*!< rx_pdu_payload_6[7:0]                                                 */
      __IO uint32_t  RX_PDU_PAYLOAD_7:  8;          /*!< rx_pdu_payload_7[7:0]                                                 */
      __IO uint32_t  RX_PDU_PAYLOAD_8:  8;          /*!< rx_pdu_payload_8[7:0]                                                 */
      __IO uint32_t  RX_PDU_PAYLOAD_9:  8;          /*!< rx_pdu_payload_9[7:0]                                                 */
    } RX_PDU_PAYLOAD_1_1_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_PDU_PAYLOAD_1_2;              /*!< see the description in 'RX_PDU_PAYLOAD_1 0'                           */
    
    struct {
      __IO uint32_t  RX_PDU_PAYLOAD_10:  8;         /*!< rx_pdu_payload_10[7:0]                                                */
      __IO uint32_t  RX_PDU_PAYLOAD_11:  8;         /*!< rx_pdu_payload_11[7:0]                                                */
      __IO uint32_t  RX_PDU_PAYLOAD_12:  8;         /*!< rx_pdu_payload_12[7:0]                                                */
      __IO uint32_t  RX_PDU_PAYLOAD_13:  8;         /*!< rx_pdu_payload_13[7:0]                                                */
    } RX_PDU_PAYLOAD_1_2_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_PDU_PAYLOAD_1_3;              /*!< see the description in 'RX_PDU_PAYLOAD_1 0'                           */
    
    struct {
      __IO uint32_t  RX_PDU_PAYLOAD_14:  8;         /*!< rx_pdu_payload_14[7:0]                                                */
      __IO uint32_t  RX_PDU_PAYLOAD_15:  8;         /*!< rx_pdu_payload_15[7:0]                                                */
      __IO uint32_t  RX_PDU_PAYLOAD_16:  8;         /*!< rx_pdu_payload_16[7:0]                                                */
      __IO uint32_t  RX_PDU_PAYLOAD_17:  8;         /*!< rx_pdu_payload_17[7:0]                                                */
    } RX_PDU_PAYLOAD_1_3_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_PDU_PAYLOAD_1_4;              /*!< see the description in 'RX_PDU_PAYLOAD_1 0'                           */
    
    struct {
      __IO uint32_t  RX_PDU_PAYLOAD_18:  8;         /*!< rx_pdu_payload_18[7:0]                                                */
      __IO uint32_t  RX_PDU_PAYLOAD_19:  8;         /*!< rx_pdu_payload_19[7:0]                                                */
      __IO uint32_t  RX_PDU_PAYLOAD_20:  8;         /*!< rx_pdu_payload_20[7:0]                                                */
      __IO uint32_t  RX_PDU_PAYLOAD_21:  8;         /*!< rx_pdu_payload_21[7:0]                                                */
    } RX_PDU_PAYLOAD_1_4_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_PDU_PAYLOAD_1_5;              /*!< see the description in 'RX_PDU_PAYLOAD_1 0'                           */
    
    struct {
      __IO uint32_t  RX_PDU_PAYLOAD_22:  8;         /*!< rx_pdu_payload_22[7:0]                                                */
      __IO uint32_t  RX_PDU_PAYLOAD_23:  8;         /*!< rx_pdu_payload_23[7:0]                                                */
      __IO uint32_t  RX_PDU_PAYLOAD_24:  8;         /*!< rx_pdu_payload_24[7:0]                                                */
      __IO uint32_t  RX_PDU_PAYLOAD_25:  8;         /*!< rx_pdu_payload_25[7:0]                                                */
    } RX_PDU_PAYLOAD_1_5_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_PDU_PAYLOAD_1_6;              /*!< see the description in 'RX_PDU_PAYLOAD_1 0'                           */
    
    struct {
      __IO uint32_t  RX_PDU_PAYLOAD_26:  8;         /*!< rx_pdu_payload_26[7:0]                                                */
      __IO uint32_t  RX_PDU_PAYLOAD_27:  8;         /*!< rx_pdu_payload_27[7:0]                                                */
      __IO uint32_t  RX_PDU_PAYLOAD_28:  8;         /*!< rx_pdu_payload_28[7:0]                                                */
      __IO uint32_t  RX_PDU_PAYLOAD_29:  8;         /*!< rx_pdu_payload_29[7:0]                                                */
    } RX_PDU_PAYLOAD_1_6_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_PDU_PAYLOAD_1_7;              /*!< see the description in 'RX_PDU_PAYLOAD_1 0'                           */
    
    struct {
      __IO uint32_t  RX_PDU_PAYLOAD_30:  8;         /*!< rx_pdu_payload_30[7:0]                                                */
      __IO uint32_t  RX_PDU_PAYLOAD_31:  8;         /*!< rx_pdu_payload_31[7:0]                                                */
      __IO uint32_t  RX_PDU_PAYLOAD_32:  8;         /*!< rx_pdu_payload_32[7:0]                                                */
      __IO uint32_t  RX_PDU_PAYLOAD_33:  8;         /*!< rx_pdu_payload_33[7:0]                                                */
    } RX_PDU_PAYLOAD_1_7_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_PDU_PAYLOAD_1_8;              /*!< see the description in 'RX_PDU_PAYLOAD_1 0'                           */
    
    struct {
      __IO uint32_t  RX_PDU_PAYLOAD_34:  8;         /*!< rx_pdu_payload_34[7:0]                                                */
      __IO uint32_t  RX_PDU_PAYLOAD_35:  8;         /*!< rx_pdu_payload_35[7:0]                                                */
      __IO uint32_t  RX_PDU_PAYLOAD_36:  8;         /*!< rx_pdu_payload_36[7:0]                                                */
    } RX_PDU_PAYLOAD_1_8_b;                         /*!< BitSize                                                               */
  };
} CONDOR_RX_PDU_BUF_REG_Type;


/* ================================================================================ */
/* ================                 TX_PDU_BUF_REG                 ================ */
/* ================================================================================ */


/**
  * @brief TX_PDU_BUF_REG  (TX_PDU_BUF_REG)
  */

typedef struct {                                    /*!< TX_PDU_BUF_REG Structure                                              */
  
  union {
    __IO uint32_t  TX_PDU_BUF_0;                    /*!< TX_PDU_BUF_0                                                          */
    
    struct {
      __IO uint32_t  TX_PDU_TYPE: 12;               /*!< tx_pdu_type[11:0]                                                     */
      __IO uint32_t  TX_CONN_ID :  4;               /*!< tx_conn_id[3:0]                                                       */
      __IO uint32_t  TX_PDU_BUF_RSV0:  8;           /*!< tx_pdu_buf_rsv0[7:0]                                                  */
      __IO uint32_t  TX_PAYLOAD_OFFSET:  8;         /*!< tx_payload_offset[7:0]                                                */
    } TX_PDU_BUF_0_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_PDU_BUF_1;                    /*!< TX_PDU_BUF_1                                                          */
    
    struct {
      __IO uint32_t  TX_PDU_BUF_RSV1: 32;           /*!< tx_pdu_buf_rsv1[31:0]                                                 */
    } TX_PDU_BUF_1_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_PDU_BUF_2;                    /*!< TX_PDU_BUF_2                                                          */
    
    struct {
      __IO uint32_t  TX_PDU_BUF_RSV2: 32;           /*!< tx_pdu_buf_rsv2[31:0]                                                 */
    } TX_PDU_BUF_2_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_PDU_PAYLOAD_0;                /*!< TX_PDU_PAYLOAD_0                                                      */
    
    struct {
      __IO uint32_t  TX_PDU_HDR : 16;               /*!< tx_pdu_hdr[15:0]                                                      */
      __IO uint32_t  TX_PDU_PAYLOAD_0:  8;          /*!< tx_pdu_payload_0[7:0]                                                 */
      __IO uint32_t  TX_PDU_PAYLOAD_1:  8;          /*!< tx_pdu_payload_1[7:0]                                                 */
    } TX_PDU_PAYLOAD_0_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_PDU_PAYLOAD_1_0;              /*!< TX_PDU_PAYLOAD_1_0                                                    */
    
    struct {
      __IO uint32_t  TX_PDU_PAYLOAD_2:  8;          /*!< tx_pdu_payload_2[7:0]                                                 */
      __IO uint32_t  TX_PDU_PAYLOAD_3:  8;          /*!< tx_pdu_payload_3[7:0]                                                 */
      __IO uint32_t  TX_PDU_PAYLOAD_4:  8;          /*!< tx_pdu_payload_4[7:0]                                                 */
      __IO uint32_t  TX_PDU_PAYLOAD_5:  8;          /*!< tx_pdu_payload_5[7:0]                                                 */
    } TX_PDU_PAYLOAD_1_0_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_PDU_PAYLOAD_1_1;              /*!< see the description in 'TX_PDU_PAYLOAD_1 0'                           */
    
    struct {
      __IO uint32_t  TX_PDU_PAYLOAD_6:  8;          /*!< tx_pdu_payload_6[7:0]                                                 */
      __IO uint32_t  TX_PDU_PAYLOAD_7:  8;          /*!< tx_pdu_payload_7[7:0]                                                 */
      __IO uint32_t  TX_PDU_PAYLOAD_8:  8;          /*!< tx_pdu_payload_8[7:0]                                                 */
      __IO uint32_t  TX_PDU_PAYLOAD_9:  8;          /*!< tx_pdu_payload_9[7:0]                                                 */
    } TX_PDU_PAYLOAD_1_1_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_PDU_PAYLOAD_1_2;              /*!< see the description in 'TX_PDU_PAYLOAD_1 0'                           */
    
    struct {
      __IO uint32_t  TX_PDU_PAYLOAD_10:  8;         /*!< tx_pdu_payload_10[7:0]                                                */
      __IO uint32_t  TX_PDU_PAYLOAD_11:  8;         /*!< tx_pdu_payload_11[7:0]                                                */
      __IO uint32_t  TX_PDU_PAYLOAD_12:  8;         /*!< tx_pdu_payload_12[7:0]                                                */
      __IO uint32_t  TX_PDU_PAYLOAD_13:  8;         /*!< tx_pdu_payload_13[7:0]                                                */
    } TX_PDU_PAYLOAD_1_2_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_PDU_PAYLOAD_1_3;              /*!< see the description in 'TX_PDU_PAYLOAD_1 0'                           */
    
    struct {
      __IO uint32_t  TX_PDU_PAYLOAD_14:  8;         /*!< tx_pdu_payload_14[7:0]                                                */
      __IO uint32_t  TX_PDU_PAYLOAD_15:  8;         /*!< tx_pdu_payload_15[7:0]                                                */
      __IO uint32_t  TX_PDU_PAYLOAD_16:  8;         /*!< tx_pdu_payload_16[7:0]                                                */
      __IO uint32_t  TX_PDU_PAYLOAD_17:  8;         /*!< tx_pdu_payload_17[7:0]                                                */
    } TX_PDU_PAYLOAD_1_3_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_PDU_PAYLOAD_1_4;              /*!< see the description in 'TX_PDU_PAYLOAD_1 0'                           */
    
    struct {
      __IO uint32_t  TX_PDU_PAYLOAD_18:  8;         /*!< tx_pdu_payload_18[7:0]                                                */
      __IO uint32_t  TX_PDU_PAYLOAD_19:  8;         /*!< tx_pdu_payload_19[7:0]                                                */
      __IO uint32_t  TX_PDU_PAYLOAD_20:  8;         /*!< tx_pdu_payload_20[7:0]                                                */
      __IO uint32_t  TX_PDU_PAYLOAD_21:  8;         /*!< tx_pdu_payload_21[7:0]                                                */
    } TX_PDU_PAYLOAD_1_4_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_PDU_PAYLOAD_1_5;              /*!< see the description in 'TX_PDU_PAYLOAD_1 0'                           */
    
    struct {
      __IO uint32_t  TX_PDU_PAYLOAD_22:  8;         /*!< tx_pdu_payload_22[7:0]                                                */
      __IO uint32_t  TX_PDU_PAYLOAD_23:  8;         /*!< tx_pdu_payload_23[7:0]                                                */
      __IO uint32_t  TX_PDU_PAYLOAD_24:  8;         /*!< tx_pdu_payload_24[7:0]                                                */
      __IO uint32_t  TX_PDU_PAYLOAD_25:  8;         /*!< tx_pdu_payload_25[7:0]                                                */
    } TX_PDU_PAYLOAD_1_5_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_PDU_PAYLOAD_1_6;              /*!< see the description in 'TX_PDU_PAYLOAD_1 0'                           */
    
    struct {
      __IO uint32_t  TX_PDU_PAYLOAD_26:  8;         /*!< tx_pdu_payload_26[7:0]                                                */
      __IO uint32_t  TX_PDU_PAYLOAD_27:  8;         /*!< tx_pdu_payload_27[7:0]                                                */
      __IO uint32_t  TX_PDU_PAYLOAD_28:  8;         /*!< tx_pdu_payload_28[7:0]                                                */
      __IO uint32_t  TX_PDU_PAYLOAD_29:  8;         /*!< tx_pdu_payload_29[7:0]                                                */
    } TX_PDU_PAYLOAD_1_6_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_PDU_PAYLOAD_1_7;              /*!< see the description in 'TX_PDU_PAYLOAD_1 0'                           */
    
    struct {
      __IO uint32_t  TX_PDU_PAYLOAD_30:  8;         /*!< tx_pdu_payload_30[7:0]                                                */
      __IO uint32_t  TX_PDU_PAYLOAD_31:  8;         /*!< tx_pdu_payload_31[7:0]                                                */
      __IO uint32_t  TX_PDU_PAYLOAD_32:  8;         /*!< tx_pdu_payload_32[7:0]                                                */
      __IO uint32_t  TX_PDU_PAYLOAD_33:  8;         /*!< tx_pdu_payload_33[7:0]                                                */
    } TX_PDU_PAYLOAD_1_7_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  TX_PDU_PAYLOAD_1_8;              /*!< see the description in 'TX_PDU_PAYLOAD_1 0'                           */
    
    struct {
      __IO uint32_t  TX_PDU_PAYLOAD_34:  8;         /*!< tx_pdu_payload_34[7:0]                                                */
      __IO uint32_t  TX_PDU_PAYLOAD_35:  8;         /*!< tx_pdu_payload_35[7:0]                                                */
      __IO uint32_t  TX_PDU_PAYLOAD_36:  8;         /*!< tx_pdu_payload_36[7:0]                                                */
    } TX_PDU_PAYLOAD_1_8_b;                         /*!< BitSize                                                               */
  };
} CONDOR_TX_PDU_BUF_REG_Type;


/* ================================================================================ */
/* ================                     CSR_PMU                    ================ */
/* ================================================================================ */


/**
  * @brief CSR_PMU  (CSR_PMU)
  */

typedef struct {                                    /*!< CSR_PMU Structure                                                     */
  
  union {
    __IO uint32_t  PMU_WAKE_CNT;                    /*!< PMU_WAKE_CNT                                                          */
    
    struct {
      __IO uint32_t  WAKE_CNT   : 24;               /*!< sleep/hibernate mode wake up timer counter. time unit is 32k
                                                         clock period                                                          */
    } PMU_WAKE_CNT_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PMU_WAKE_SCALE;                  /*!< PMU_WAKE_SCALE                                                        */
    
    struct {
      __IO uint32_t  WAKE_CNT_SCALER: 32;           /*!< sleep/hibernate mode wake up timer counter scaler 0 means the
                                                         wakeup time is 1 time of wake_cnt setting. 1 means the wakeup
                                                          time is 1 time of wake_cnt setting. 2 means the wakeup time
                                                          is 2 times of wake_cnt setting.                                      */
    } PMU_WAKE_SCALE_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PMU_SLEEP;                       /*!< PMU_SLEEP                                                             */
    
    struct {
      __IO uint32_t  PMU_ENTER_SLEEP_MODE:  1;      /*!< MCU set PMU to enter sleep mode 0: pmu not enter to the sleep
                                                         mode 1: pmu enter to the sleep mode                                   */
    } PMU_SLEEP_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PMU_HIB;                         /*!< PMU_HIB                                                               */
    
    struct {
      __IO uint32_t  PMU_ENTER_HIBER_MODE:  1;      /*!< MCU set PMU to enter hibernate mode, 0: pmu not enter to the
                                                         hibernate mode 1: pmu enter to the hibernate mode                     */
    } PMU_HIB_b;                                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PMU_DORMANT;                     /*!< PMU_DORMANT                                                           */
    
    struct {
      __IO uint32_t  PMU_ENTER_DORMANT_MODE:  1;    /*!< MCU set PMU to enter dormant mode, 0: pmu not enter to the dormant
                                                         mode 1: pmu enter to the dormant mode                                 */
    } PMU_DORMANT_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PMU_MCU_STANDBY;                 /*!< PMU_MCU_STANDBY                                                       */
    
    struct {
      __IO uint32_t  PMU_ENTER_MCU_STANDBY_MODE:  1;/*!< MCU set PMU to enter mcu standby mode. MCU standby mode only
                                                         can be wakeup by the wakeup timer 0: pmu not enter to the mcu
                                                          standby mode 1: pmu enter to the mcu_standby mode                    */
    } PMU_MCU_STANDBY_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PMU_SET_0;                       /*!< PMU_SET_0                                                             */
    
    struct {
      __IO uint32_t  PMU_TIME_WAKE_EN:  1;          /*!< PMU wake from time_wake in sleep/hibernate mode.                      */
    } PMU_SET_0_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PMU_SET_1;                       /*!< PMU_SET_1                                                             */
    
    struct {
           uint32_t             :  8;
      __IO uint32_t  LDO5_EN_CYC:  5;               /*!< Enable LDO5 after DLDO startup X cycles.                              */
    } PMU_SET_1_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PMU_IRQ12;                       /*!< PMU_IRQ12                                                             */
    
    struct {
      __IO uint32_t  IRQ12_INT  :  1;               /*!< brownout VOK12 interrupt                                              */
    } PMU_IRQ12_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PMU_IRQ33;                       /*!< PMU_IRQ33                                                             */
    
    struct {
      __IO uint32_t  IRQ33_INT  :  1;               /*!< brownout VOK33 interrupt                                              */
    } PMU_IRQ33_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PMU_REG_HARDWIRE;                /*!< PMU_REG_HARDWIRE                                                      */
    
    struct {
      __IO uint32_t  PMU_MANUAL_EN:  1;             /*!< PMU_MANUAL_EN                                                         */
      __IO uint32_t  RG_SX_XTAL_FREQ:  3;           /*!< RG_SX_XTAL_FREQ[2:0]                                                  */
           uint32_t             :  2;
      __IO uint32_t  RG_EN_DLDO :  1;               /*!< RG_EN_DLDO                                                            */
      __IO uint32_t  RG_EN_LDO5 :  1;               /*!< RG_EN_LDO5                                                            */
      __IO uint32_t  RG_EN_DSW1 :  1;               /*!< RG_EN_DSW1                                                            */
      __IO uint32_t  RG_EN_DSW2 :  1;               /*!< RG_EN_DSW2                                                            */
      __IO uint32_t  RG_EN_DSW3 :  1;               /*!< RG_EN_DSW3                                                            */
      __IO uint32_t  RG_EN_DSW4 :  1;               /*!< RG_EN_DSW4                                                            */
      __IO uint32_t  RG_EN_IVSRC_DIG:  1;           /*!< RG_EN_IVSRC_DIG                                                       */
           uint32_t             :  4;
      __IO uint32_t  RG_EN_SX_RC32K:  1;            /*!< RG_EN_SX_RC32K                                                        */
      __IO uint32_t  RG_EN_SX_XOSC:  1;             /*!< RG_EN_SX_XOSC                                                         */
           uint32_t             :  2;
      __IO uint32_t  RG_SX_FREF_DOUB:  1;           /*!< RG_SX_FREF_DOUB                                                       */
           uint32_t             :  5;
      __IO uint32_t  RG_EN_FDB_16M:  1;             /*!< RG_EN_FDB_16M                                                         */
    } PMU_REG_HARDWIRE_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_PMU_XTAL_SETTINGS;           /*!< REG_PMU_XTAL_SETTINGS                                                 */
    
    struct {
      __IO uint32_t  RG_EN_IO01_AIO:  2;            /*!< RG_EN_IO01_AIO[1:0]                                                   */
      __IO uint32_t  RG_EN_IO02_AIO:  1;            /*!< RG_EN_IO02_AIO                                                        */
      __IO uint32_t  RG_EN_IO03_AIO:  1;            /*!< RG_EN_IO03_AIO                                                        */
      __IO uint32_t  RG_EN_IO04_AIO:  1;            /*!< RG_EN_IO04_AIO                                                        */
           uint32_t             :  3;
      __IO uint32_t  RG_DLDO_LEVEL:  2;             /*!< RG_DLDO_LEVEL[1:0]                                                    */
      __IO uint32_t  RG_RC32K_LEVEL:  2;            /*!< RG_RC32K_LEVEL[1:0]                                                   */
      __IO uint32_t  RG_DSF_LEVEL:  3;              /*!< RG_DSF_LEVEL[2:0]                                                     */
      __IO uint32_t  RG_DSF_HIDRV:  1;              /*!< RG_DSF_HIDRV                                                          */
      __IO uint32_t  RG_LDO5X_LEVEL:  3;            /*!< RG_LDO5X_LEVEL[2:0]                                                   */
           uint32_t             :  5;
      __IO uint32_t  RG_SX_XOSC_GM_SEL:  5;         /*!< RG_SX_XOSC_GM_SEL[4:0]                                                */
    } REG_PMU_XTAL_SETTINGS_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_FDB_SETTINGS;                /*!< REG_FDB_SETTINGS                                                      */
    
    struct {
      __IO uint32_t  FDB_MANUAL :  1;               /*!< FDB_MANUAL                                                            */
      __IO uint32_t  RG_EN_FDB_ACC_16M:  1;         /*!< RG_EN_FDB_ACC_16M                                                     */
           uint32_t             :  1;
      __IO uint32_t  RG_SX_FDB_EDGE_SEL:  1;        /*!< RG_SX_FDB_EDGE_SEL                                                    */
           uint32_t             : 10;
      __IO uint32_t  RG_SX_FDB_DUTY_LTH:  2;        /*!< RG_SX_FDB_DUTY_LTH[1:0]                                               */
           uint32_t             :  4;
      __IO uint32_t  RG_EN_FDB_ACC_16M_MUAL:  1;    /*!< RG_EN_FDB_ACC_16M_MUAL                                                */
    } REG_FDB_SETTINGS_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_DPLL;                        /*!< REG_DPLL                                                              */
    
    struct {
      __IO uint32_t  RG_EN_DPL_MAN:  1;             /*!< RG_EN_DPL_MAN                                                         */
      __IO uint32_t  RG_EN_DPL  :  1;               /*!< RG_EN_DPL                                                             */
      __IO uint32_t  RG_DPL_MANNUAL:  1;            /*!< RG_DPL_MANNUAL                                                        */
      __IO uint32_t  RG_DPL_MON_EN:  1;             /*!< RG_DPL_MON_EN                                                         */
      __IO uint32_t  RG_DPL_2P4G_EN:  1;            /*!< RG_DPL_2P4G_EN                                                        */
      __IO uint32_t  RG_DPL_VCO_IBOOST:  1;         /*!< RG_DPL_VCO_IBOOST                                                     */
      __IO uint32_t  RG_DPL_MON_MUX:  1;            /*!< RG_DPL_MON_MUX                                                        */
      __IO uint32_t  RG_DPL_ICP :  3;               /*!< RG_DPL_ICP[2:0]                                                       */
      __IO uint32_t  RG_DPL_FBDIV_RESET:  1;        /*!< RG_DPL_FBDIV_RESET                                                    */
      __IO uint32_t  RG_DPL_REFDIVBY2:  1;          /*!< RG_DPL_REFDIVBY2                                                      */
      __IO uint32_t  RG_DPL_FBDIV:  8;              /*!< RG_DPL_FBDIV[7:0]                                                     */
      __IO uint32_t  RG_DPL_OUTDIV:  6;             /*!< RG_DPL_OUTDIV[5:0]                                                    */
      __IO uint32_t  RG_DPL_VCO_SUB:  1;            /*!< RG_DPL_VCO_SUB                                                        */
      __IO uint32_t  RG_EN_DPL_CLK16M_DIG:  1;      /*!< RG_EN_DPL_CLK16M_DIG                                                  */
      __IO uint32_t  RG_EN_DPL_CLK32M_DIG:  1;      /*!< RG_EN_DPL_CLK32M_DIG                                                  */
      __IO uint32_t  RG_EN_DPL_CLK64M_DIG:  1;      /*!< RG_EN_DPL_CLK64M_DIG                                                  */
      __IO uint32_t  RG_DPL_CAPDIV:  2;             /*!< RG_DPL_CAPDIV[1:0]                                                    */
    } REG_DPLL_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_RC32K;                       /*!< REG_RC32K                                                             */
    
    struct {
      __IO uint32_t  RG_SX_RC32K_SW1: 11;           /*!< RG_SX_RC32K_SW1[10:0]                                                 */
           uint32_t             :  5;
      __IO uint32_t  RG_SX_RC32K_SW2: 10;           /*!< RG_SX_RC32K_SW2[9:0]                                                  */
           uint32_t             :  5;
      __IO uint32_t  RG_SX_RC32K_LOIREF:  1;        /*!< RG_SX_RC32K_LOIREF                                                    */
    } REG_RC32K_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_XO;                          /*!< REG_XO                                                                */
    
    struct {
      __IO uint32_t  RG_XO_CBANKI:  8;              /*!< RG_XO_CBANKI[7:0]                                                     */
      __IO uint32_t  RG_XO_CBANKO:  8;              /*!< RG_XO_CBANKO[7:0]                                                     */
      __IO uint32_t  RG_XO_DIV_MAN:  1;             /*!< RG_XO_DIV_MAN                                                         */
      __IO uint32_t  RG_XO_DIV  :  5;               /*!< RG_XO_DIV[4:0]                                                        */
    } REG_XO_b;                                     /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_RC32M;                       /*!< REG_RC32M                                                             */
    
    struct {
           uint32_t             : 16;
      __IO uint32_t  RG_PMU_DUMY: 16;               /*!< RG_PMU_DUMY[15:0]                                                     */
    } REG_RC32M_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  SEL_32K_CLK;                     /*!< SEL_32K_CLK                                                           */
    
    struct {
      __IO uint32_t  FORCE_32K_RC_CK_EN:  1;        /*!< force pmu 32k clock use the 32k rc clk                                */
    } SEL_32K_CLK_b;                                /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED[2];
  
  union {
    __IO uint32_t  DPL_EN_SET;                      /*!< DPL_EN_SET                                                            */
    
    struct {
      __IO uint32_t  DPL_EN_SET :  1;               /*!< Set del_en_set to 1 by FW when boot up from power off state
                                                         to power on state                                                     */
    } DPL_EN_SET_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  RTC_CNT_0;                       /*!< RTC_CNT_0                                                             */
    
    struct {
      __I  uint32_t  RTC_CNT    : 24;               /*!< rtc counter time unit is 32k clock period                             */
      __I  uint32_t  RTC_CNT_OVRFLW:  1;            /*!< rtc counter overflow                                                  */
    } RTC_CNT_0_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RTC_CNT_1;                       /*!< RTC_CNT_1                                                             */
    
    struct {
      __IO uint32_t  RTC_CNT_PRESCALER: 12;         /*!< rtc counter prescaler 0 means the rtc counter time is 1 time
                                                         of 32k clock period. 1 means the rtc counter time is 2 times
                                                          of 32k clock period.                                                 */
    } RTC_CNT_1_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RTC_CNT_2;                       /*!< RTC_CNT_2                                                             */
    
    struct {
      __IO uint32_t  RTC_CNT_START:  1;             /*!< rtc counter start                                                     */
      __IO uint32_t  RTC_OVRFLW_SET:  1;            /*!< rtc_ovrflw_set                                                        */
    } RTC_CNT_2_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RTC_CNT_3;                       /*!< RTC_CNT_3                                                             */
    
    struct {
      __IO uint32_t  RTC_CNT_CLR:  1;               /*!< rtc counter clear                                                     */
    } RTC_CNT_3_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RTC_CNT_4;                       /*!< RTC_CNT_4                                                             */
    
    struct {
      __IO uint32_t  RTC_OVRFLW_CLR:  1;            /*!< rtc_ovrflw_clr                                                        */
    } RTC_CNT_4_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PMU_INFO;                        /*!< PMU_INFO                                                              */
    
    struct {
      __IO uint32_t  PMU_ST_PRE :  3;               /*!< previous pmu state. Record the previous pmu state is off, sleep,
                                                         hibernate or dormant state. 3h0: PMU_OFF_ST 3h2: PMU_SLEEP_ST
                                                          3h3: PMU_HIB_ST 3h4: PMU_DORMANT_ST                                  */
    } PMU_INFO_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  MANUAL_DSW_1;                    /*!< MANUAL_DSW_1                                                          */
    
    struct {
      __IO uint32_t  DA_EN_DSW1_MANUAL_EN:  1;      /*!< set da_en_dsw1_manual_en to 1 to enable the manual mode of DA_EN_DSW1 */
           uint32_t             :  3;
      __IO uint32_t  RG_DA_EN_DSW1:  1;             /*!< When da_en_dsw1_manual_en is set to 1, the value of DA_EN_DSW1
                                                         is equal to rg_da_en_dsw1.                                            */
    } MANUAL_DSW_1_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  MANUAL_DSW2;                     /*!< MANUAL_DSW2                                                           */
    
    struct {
      __IO uint32_t  DA_EN_DSW2_MANUAL_EN:  1;      /*!< set da_en_dsw2_manual_en to 1 to enable the manual mode of DA_EN_DSW2 */
           uint32_t             :  3;
      __IO uint32_t  RG_DA_EN_DSW2:  1;             /*!< When da_en_dsw2_manual_en is set to 1, the value of DA_EN_DSW2
                                                         is equal to rg_da_en_dsw2.                                            */
    } MANUAL_DSW2_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  MANUAL_DSW3;                     /*!< MANUAL_DSW3                                                           */
    
    struct {
      __IO uint32_t  DA_EN_DSW3_MANUAL_EN:  1;      /*!< set da_en_dsw3_manual_en to 1 to enable the manual mode of DA_EN_DSW3 */
           uint32_t             :  3;
      __IO uint32_t  RG_DA_EN_DSW3:  1;             /*!< When da_en_dsw3_manual_en is set to 1, the value of DA_EN_DSW3
                                                         is equal to rg_da_en_dsw3.                                            */
    } MANUAL_DSW3_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  MANUAL_DSW4;                     /*!< MANUAL_DSW4                                                           */
    
    struct {
      __IO uint32_t  DA_EN_DSW4_MANUAL_EN:  1;      /*!< set da_en_dsw4_manual_en to 1 to enable the manual mode of DA_EN_DSW4 */
           uint32_t             :  3;
      __IO uint32_t  RG_DA_EN_DSW4:  1;             /*!< When da_en_dsw4_manual_en is set to 1, the value of DA_EN_DSW4
                                                         is equal to rg_da_en_dsw4.                                            */
    } MANUAL_DSW4_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  WAKE_RG_DA_SX_CLK;               /*!< WAKE_RG_DA_SX_CLK                                                     */
    
    struct {
      __IO uint32_t  WAKE_POL   :  1;               /*!< pmu gpio wake up polarity 0: detect 0 to 1 1: detect 1 to 0           */
    } WAKE_RG_DA_SX_CLK_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  PMU_STATUS0;                     /*!< PMU_STATUS0                                                           */
    
    struct {
      __I  uint32_t  DA_EN_DLDO_V12D:  1;           /*!< DA_EN_DLDO_V12D                                                       */
      __I  uint32_t  DA_EN_DSW1_V12D:  1;           /*!< DA_EN_DSW1_V12D                                                       */
      __I  uint32_t  DA_EN_DSW2_V12D:  1;           /*!< DA_EN_DSW2_V12D                                                       */
      __I  uint32_t  DA_EN_DSW3_V12D:  1;           /*!< DA_EN_DSW3_V12D                                                       */
      __I  uint32_t  DA_EN_DSW4_V12D:  1;           /*!< DA_EN_DSW4_V12D                                                       */
      __I  uint32_t  DA_EN_FDB_16M_V12D:  1;        /*!< DA_EN_FDB_16M_V12D                                                    */
      __I  uint32_t  DA_EN_LDO5_V12D:  1;           /*!< DA_EN_LDO5_V12D                                                       */
      __I  uint32_t  DA_EN_SX_XOSC_V12D:  1;        /*!< DA_EN_SX_XOSC_V12D                                                    */
      __I  uint32_t  PMU_ST     :  3;               /*!< pmu_st[2:0]                                                           */
    } PMU_STATUS0_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  PMU_STATUS1;                     /*!< PMU_STATUS1                                                           */
    
    struct {
      __I  uint32_t  HF_CLK_RDY_FLAG:  1;           /*!< hf_clk_rdy_flag                                                       */
    } PMU_STATUS1_b;                                /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED1;
  
  union {
    __I  uint32_t  SLEEP_WAKE_SRC;                  /*!< SLEEP_WAKE_SRC                                                        */
    
    struct {
      __I  uint32_t  SLEEP_WAKEUP_SRC:  2;          /*!< 2b00: sleep timer 2b01: GPIO 2b10: I2C 2b11: Analog Comparator        */
    } SLEEP_WAKE_SRC_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PMU_STATE_MANUAL_EN;             /*!< PMU_STATE_MANUAL_EN                                                   */
    
    struct {
      __IO uint32_t  PMU_STATE_MANUAL_EN:  1;       /*!< PMU manual state enable. Before set pmu_st_manual_trig, pmu_state_manual_e
                                                         n need to be set to 1                                                 */
    } PMU_STATE_MANUAL_EN_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PMU_STATE_MANUAL;                /*!< PMU_STATE_MANUAL                                                      */
    
    struct {
      __IO uint32_t  PMU_ST_MANUAL_TRIG:  1;        /*!< PMU state manual mode trigger. Set pmu_manual_st before trigger
                                                         pmu state manual mode                                                 */
           uint32_t             :  3;
      __IO uint32_t  PMU_MANUAL_ST:  3;             /*!< 3h0: PMU_OFF_ST 3h1: PMU_ON_ST 3h2: PMU_SLEEP_ST 3h3: PMU_HIB_ST
                                                         3h4: PMU_DORMANT_ST                                                   */
    } PMU_STATE_MANUAL_b;                           /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED2;
  
  union {
    __IO uint32_t  SYS_RTC_EN;                      /*!< SYS_RTC_EN                                                            */
    
    struct {
      __IO uint32_t  SYS_RTC_TIMER_EN:  1;          /*!< system rtc timer enable                                               */
    } SYS_RTC_EN_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  SYS_RTC_CLR;                     /*!< SYS_RTC_CLR                                                           */
    
    struct {
      __IO uint32_t  SYS_RTC_TIMER_CLR:  1;         /*!< system rtc timer clear                                                */
    } SYS_RTC_CLR_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  SYS_RTC_TIME;                    /*!< SYS_RTC_TIME                                                          */
    
    struct {
      __I  uint32_t  PMU_32K_CLK:  1;               /*!< pmu_32k_clk                                                           */
      __I  uint32_t  SYS_RTC_TIME: 22;              /*!< system rtc time                                                       */
    } SYS_RTC_TIME_b;                               /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED3[2];
  __IO uint32_t  SYS_RTC_CNT_MANUAL;                /*!< SYS_RTC_CNT_MANUAL                                                    */
  __I  uint32_t  RESERVED4[15];
  
  union {
    __IO uint32_t  PMUWAK_MASK;                     /*!< PMUWAK_MASK                                                           */
    
    struct {
      __IO uint32_t  PMUWAK_MASK: 12;               /*!< block pad input to be pmu wakeup signal. the order of signals
                                                         is'INT1_id,INT0_id,CMIF0_id,CMIF1_id,CMIF2_id,CMIF3_id,I2C0_id,I2C1_id,UAR
                                                         T0_id,UART1_id,DBG0_id,DBG1_id'. all signals are block as default.    */
    } PMUWAK_MASK_b;                                /*!< BitSize                                                               */
  };
} CONDOR_CSR_PMU_Type;


/* ================================================================================ */
/* ================                     CSR_PHY                    ================ */
/* ================================================================================ */


/**
  * @brief CSR_PHY  (CSR_PHY)
  */

typedef struct {                                    /*!< CSR_PHY Structure                                                     */
  
  union {
    __IO uint32_t  PHY_CLK_CTRL;                    /*!< PHY_CLK_CTRL                                                          */
    
    struct {
      __IO uint32_t  RGW_TX_MD_EN:  1;              /*!< Phy Tx module enable                                                  */
      __IO uint32_t  RGW_RX_MD_EN:  1;              /*!< Phy Rx module enable                                                  */
      __IO uint32_t  RGW_TX_PKT_MD_EN:  1;          /*!< Phy Tx packet gen module enable                                       */
      __IO uint32_t  RGW_PHY_MD_EN:  1;             /*!< Phy module enable                                                     */
      __IO uint32_t  RGW_DIG_SDM_EN:  1;            /*!< tx modulation clock enable                                            */
      __IO uint32_t  RGW_DIG_PLL_EN:  1;            /*!< clock digital enable                                                  */
      __IO uint32_t  RGW_ANA_PLL_EN:  1;            /*!< clock analog enable                                                   */
           uint32_t             :  1;
      __IO uint32_t  RGW_TBUS_64M_CK_EN:  1;        /*!< Testbus 64M clock enable                                              */
           uint32_t             :  2;
      __IO uint32_t  RGW_TX_LBK_IQ_MD_EN:  1;       /*!< enable for lbk iq path Module enable for non-ble tx block             */
           uint32_t             :  4;
      __IO uint32_t  RGW_TX_GATE_OFF:  1;           /*!< Phy Tx gated clock disable                                            */
      __IO uint32_t  RGW_RX_GATE_OFF:  1;           /*!< Phy Rx gated clock disable                                            */
      __IO uint32_t  RGW_RF_GATE_OFF:  1;           /*!< RF Digital gated clock disable                                        */
      __IO uint32_t  RGW_RF_PWR_SAVE_OFF:  1;       /*!< rgw_rf_pwr_save_off                                                   */
           uint32_t             :  4;
      __IO uint32_t  RGW_SDM_INV:  1;               /*!< rgw_sdm_inv                                                           */
      __IO uint32_t  RGW_64M_RF_INV:  1;            /*!< rgw_64m_rf_inv                                                        */
      __IO uint32_t  RGW_64M_PHY_TX_INV:  1;        /*!< rgw_64m_phy_tx_inv                                                    */
      __IO uint32_t  RGW_64M_PHY_RX_INV:  1;        /*!< rgw_64m_phy_rx_inv                                                    */
           uint32_t             :  3;
      __IO uint32_t  RGW_32M_OV :  1;               /*!< Rx clock set 1 <<@@@2,csr_phy.txt/{main},4,,0x0%csr_phy.txt/{main}%,_STRUC
                                                         T_,_HIER_,R/W,@>> : 32MHz                                             */
    } PHY_CLK_CTRL_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_RX_CTRL;                     /*!< PHY_RX_CTRL                                                           */
    
    struct {
      __IO uint32_t  RGW_IQ_SIGN_SWAP:  1;          /*!< rgw_iq_sign_swap                                                      */
      __IO uint32_t  RGW_IQ_SWAP:  1;               /*!< rgw_iq_swap                                                           */
      __IO uint32_t  RGW_RX_EXT :  1;               /*!< rgw_rx_ext                                                            */
      __IO uint32_t  RGW_BB_RX_ENA_AUTO:  1;        /*!< rgw_bb_rx_ena_auto                                                    */
           uint32_t             : 12;
      __IO uint32_t  RGW_IQ_EDGE:  1;               /*!< 0 <<@@@75,csr_phy.txt/{main},77,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R
                                                         /W,@>> : pos, 1 <<@@@75,csr_phy.txt/{main},77,,0x0%csr_phy.txt/{main}%,_STR
                                                         UCT_,_HIER_,R/W,@>> : neg                                             */
           uint32_t             :  3;
      __IO uint32_t  RGW_RX_CIC_OFF:  1;            /*!< 1 <<@@@63,csr_phy.txt/{main},65,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R
                                                         /W,@>> : channel filter only 0 <<@@@64,csr_phy.txt/{main},66,,0x0%csr_phy.t
                                                         xt/{main}%,_STRUCT_,_HIER_,R/W,@>> : 8M 1 <<@@@65,csr_phy.txt/{main},67,,0x
                                                         0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : 16M 2 <<@@@66,csr_phy.txt/{
                                                         main},68,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : 4M
                                                         3 <<@@@67,csr_phy.txt/{main},69,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R
                                                         /W,@>> : 2M 4 <<@@@68,csr_phy.txt/{main},70,,0x0%csr_phy.txt/{main}%,_STRUC */
           uint32_t             :  1;
      __IO uint32_t  RGW_RX_CIC_S4_SW:  1;          /*!< 0 <<@@@57,csr_phy.txt/{main},59,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R
                                                         /W,@>> : CIC M5 1 <<@@@58,csr_phy.txt/{main},60,,0x0%csr_phy.txt/{main}%,_S
                                                         TRUCT_,_HIER_,R/W,@>> : CIC M4 0 <<@@@59,csr_phy.txt/{main},61,,0x0%csr_phy
                                                         .txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : CIC M8 for narrower bandwidth
                                                         1 <<@@@60,csr_phy.txt/{main},62,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R
                                                         /W,@>> : CIC M4                                                       */
      __IO uint32_t  RGW_RX_CIC_S3_SW:  1;          /*!< 0 <<@@@53,csr_phy.txt/{main},55,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R
                                                         /W,@>> : CIC M5 1 <<@@@54,csr_phy.txt/{main},56,,0x0%csr_phy.txt/{main}%,_S
                                                         TRUCT_,_HIER_,R/W,@>> : CIC M4                                        */
    } PHY_RX_CTRL_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_TX_PKT_GEN_1;                /*!< PHY_TX_PKT_GEN_1                                                      */
    
    struct {
      __IO uint32_t  RGW_TX_START:  1;              /*!< rgw_tx_start                                                          */
      __IO uint32_t  RGW_TX_CNT_RST:  1;            /*!< rgw_tx_cnt_rst                                                        */
           uint32_t             : 14;
      __IO uint32_t  RGW_TX_PKT_CNT: 16;            /*!< must be greater than 0 in order to send out packets                   */
    } PHY_TX_PKT_GEN_1_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_TX_PKT_GEN_2;                /*!< PHY_TX_PKT_GEN_2                                                      */
    
    struct {
           uint32_t             :  8;
      __IO uint32_t  RGW_TX_PKT_TYPE:  4;           /*!< 0 <<@@@104,csr_phy.txt/{main},106,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_
                                                         ,R/W,@>> : prbs9 1 <<@@@105,csr_phy.txt/{main},107,,0x0%csr_phy.txt/{main}%
                                                         ,_STRUCT_,_HIER_,R/W,@>> : 11110000 2 <<@@@106,csr_phy.txt/{main},108,,0x0%
                                                         csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : 10101010 3 <<@@@107,csr_phy.t
                                                         xt/{main},109,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>>
                                                         : prbs15 4 <<@@@108,csr_phy.txt/{main},110,,0x0%csr_phy.txt/{main}%,_STRUC
                                                         T_,_HIER_,R/W,@>> : 11111111 5 <<@@@109,csr_phy.txt/{main},111,,0x0%csr_phy */
           uint32_t             :  4;
      __IO uint32_t  RGW_TX_PKT_INTERVAL: 10;       /*!< packet interval                                                       */
           uint32_t             :  4;
      __IO uint32_t  RGW_TX_PKT_PRBS_RSTART:  1;    /*!< PRBS restart every packet                                             */
      __IO uint32_t  RGW_TX_PKT_CONT:  1;           /*!< continuous mode, payload only                                         */
    } PHY_TX_PKT_GEN_2_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_TX_SET;                      /*!< PHY_TX_SET                                                            */
    
    struct {
      __IO uint32_t  RGW_TX_D_SRC:  1;              /*!< tx data source 1 <<@@@149,csr_phy.txt/{main},151,,0x0%csr_phy.txt/{main}%,
                                                         _STRUCT_,_HIER_,R/W,@>> : pkt_gen 0 <<@@@149,csr_phy.txt/{main},151,,0x0%cs
                                                         r_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : mac                       */
      __IO uint32_t  RGW_TX_EXT :  1;               /*!< rgw_tx_ext                                                            */
           uint32_t             :  1;
      __IO uint32_t  RGW_BB_TX_ENA_AUTO:  1;        /*!< rgw_bb_tx_ena_auto                                                    */
      __IO uint32_t  RGW_TX_TAIL_LMT:  4;           /*!< Tail counter limit (4M clock)                                         */
      __IO uint32_t  RGW_MOD_TAIL_LMT:  4;          /*!< Tail counter limit (4M clock)                                         */
      __IO uint32_t  RGW_TX_PREAMBLE_FLIP:  1;      /*!< flip preamble polarity                                                */
           uint32_t             :  1;
      __IO uint32_t  RGW_TX_CRC_CORRUPT:  1;        /*!< set all crc bits to 1 enable raw packet no Header and CRC             */
           uint32_t             : 11;
      __IO uint32_t  RGW_TX_PWR_OV:  1;             /*!< 0 <<@@@125,csr_phy.txt/{main},127,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_
                                                         ,R/W,@>> : 1M 1 <<@@@126,csr_phy.txt/{main},128,,0x0%csr_phy.txt/{main}%,_S
                                                         TRUCT_,_HIER_,R/W,@>> : 2M 2 <<@@@127,csr_phy.txt/{main},129,,0x0%csr_phy.t
                                                         xt/{main}%,_STRUCT_,_HIER_,R/W,@>> : 250k 3 <<@@@128,csr_phy.txt/{main},130
                                                         ,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : 25k               */
      __IO uint32_t  RGW_TX_PLD_LEN_OV:  1;         /*!< rgw_tx_pld_len_ov                                                     */
      __IO uint32_t  RGW_TX_CRC_INIT_OV:  1;        /*!< rgw_tx_crc_init_ov                                                    */
      __IO uint32_t  RGW_TX_ACC_ADDR_OV:  1;        /*!< rgw_tx_acc_addr_ov                                                    */
      __IO uint32_t  RGW_TX_DWLFSR_SEED_OV:  1;     /*!< rgw_tx_dwlfsr_seed_ov                                                 */
      __IO uint32_t  RGW_TX_HEADER_OV:  1;          /*!< rgw_tx_header_ov                                                      */
    } PHY_TX_SET_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_TX_ACC_ADD1;                 /*!< PHY_TX_ACC_ADD1                                                       */
    
    struct {
      __IO uint32_t  RGW_TX_ACC_ADDR: 32;           /*!< rgw_tx_acc_addr[31:0]                                                 */
    } PHY_TX_ACC_ADD1_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_TX_WHITEN_SEED;              /*!< PHY_TX_WHITEN_SEED                                                    */
    
    struct {
      __IO uint32_t  RGW_TX_DWLFSR_SEED:  7;        /*!< rgw_tx_dwlfsr_seed[6:0]                                               */
    } PHY_TX_WHITEN_SEED_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_TX_CRC_INIT;                 /*!< PHY_TX_CRC_INIT                                                       */
    
    struct {
      __IO uint32_t  RGW_TX_CRC_INIT: 24;           /*!< rgw_tx_crc_init[23:0]                                                 */
    } PHY_TX_CRC_INIT_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_TX_HEADER;                   /*!< PHY_TX_HEADER                                                         */
    
    struct {
      __IO uint32_t  RGW_TX_HEADER: 16;             /*!< rgw_tx_header[15:0]                                                   */
    } PHY_TX_HEADER_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_TX_MOD;                      /*!< PHY_TX_MOD                                                            */
    
    struct {
           uint32_t             : 28;
      __IO uint32_t  RGW_TX_DEV :  3;               /*!< 0 <<@@@177,csr_phy.txt/{main},179,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_
                                                         ,R/W,@>> : 250k/32M 1 <<@@@178,csr_phy.txt/{main},180,,0x0%csr_phy.txt/{mai
                                                         n}%,_STRUCT_,_HIER_,R/W,@>> : 320k/32M 2 <<@@@179,csr_phy.txt/{main},181,,0
                                                         x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : 160k/32M 3 <<@@@180,csr_ph
                                                         y.txt/{main},182,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>>
                                                         : 80k/32M otherwise <<@@@181,csr_phy.txt/{main},183,,0x0%csr_phy.txt/{main
                                                         }%,_STRUCT_,_HIER_,R/W,@>> : rgw_tx_pwr                               */
    } PHY_TX_MOD_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_TX_PRBL_NO;                  /*!< PHY_TX_PRBL_NO                                                        */
    
    struct {
      __IO uint32_t  RGW_TX_PRBL_NUM:  4;           /*!< rgw_tx_prbl_num[3:0]                                                  */
    } PHY_TX_PRBL_NO_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_TX_PLD_LEN;                  /*!< PHY_TX_PLD_LEN                                                        */
    
    struct {
      __IO uint32_t  RGW_TX_PLD_LEN:  8;            /*!< rgw_tx_pld_len[7:0]                                                   */
    } PHY_TX_PLD_LEN_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_TX_PWR;                      /*!< PHY_TX_PWR                                                            */
    
    struct {
      __IO uint32_t  RGW_TX_PWR : 16;               /*!< Deviation 250k/32M*2^20 = 8192 (16,20) -1M ~ 999.969k for 32M
                                                         1= 30.5Hz                                                             */
    } PHY_TX_PWR_b;                                 /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED[19];
  
  union {
    __IO uint32_t  PHY_FSM_SET;                     /*!< PHY_FSM_SET                                                           */
    
    struct {
      __IO uint32_t  RGW_CNT_PWRON_DLY_TH:  5;      /*!< rgw_cnt_pwron_dly_th[4:0]                                             */
    } PHY_FSM_SET_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_AGC_SET;                     /*!< PHY_AGC_SET                                                           */
    
    struct {
      __IO uint32_t  RGW_CNT_ADDR_MH_TH:  6;        /*!< rgw_cnt_addr_mh_th[5:0]                                               */
           uint32_t             :  2;
      __IO uint32_t  RGW_AGC_HG_THR:  4;            /*!< AGC high gain threshold (us)                                          */
      __IO uint32_t  RGW_AGC_LG_THR:  4;            /*!< AGC low gain threshold (us)                                           */
      __IO uint32_t  RGW_LGLNA_SET:  2;             /*!< LNA low gain setting                                                  */
      __IO uint32_t  RGW_HGLNA_SET:  2;             /*!< LNA high gain setting                                                 */
           uint32_t             : 10;
      __IO uint32_t  RGW_LNA_GAIN:  1;              /*!< 0 <<@@@212,csr_phy.txt/{main},214,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_
                                                         ,R/W,@>> : for low gain, 1 <<@@@212,csr_phy.txt/{main},214,,0x0%csr_phy.txt
                                                         /{main}%,_STRUCT_,_HIER_,R/W,@>> : for high gain                      */
      __IO uint32_t  RGW_AGC_OW :  1;               /*!< agc over-write                                                        */
    } PHY_AGC_SET_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  PHY_PKT_CNT;                     /*!< PHY_PKT_CNT                                                           */
    
    struct {
      __I  uint32_t  RO_PKT_CNT : 16;               /*!< Packet received counter                                               */
    } PHY_PKT_CNT_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  PHY_ERR_PKT_CNT;                 /*!< PHY_ERR_PKT_CNT                                                       */
    
    struct {
      __I  uint32_t  RO_PKT_ERR_CNT: 16;            /*!< Packet received CRC check error counter                               */
    } PHY_ERR_PKT_CNT_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_PKT_ENA;                     /*!< PHY_PKT_ENA                                                           */
    
    struct {
      __IO uint32_t  RGW_PACKET_STAT_EN:  1;        /*!< packet counter enable                                                 */
      __IO uint32_t  RGW_RX_EN_MAN:  1;             /*!< rgw_rx_en_man                                                         */
      __IO uint32_t  RGW_TX_EN_MAN:  1;             /*!< rgw_tx_en_man                                                         */
      __IO uint32_t  RGW_RF_RX_EN_MAN:  1;          /*!< rgw_rf_rx_en_man                                                      */
      __IO uint32_t  RGW_RF_TX_CH_SW_MAN:  1;       /*!< rgw_rf_tx_ch_sw_man                                                   */
      __IO uint32_t  RGW_RF_RX_CH_SW_MAN:  1;       /*!< rgw_rf_rx_ch_sw_man                                                   */
           uint32_t             : 25;
      __IO uint32_t  RGW_RX_BER_EN:  1;             /*!< BER counter enable                                                    */
    } PHY_PKT_ENA_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_RX_SET_1;                    /*!< PHY_RX_SET_1                                                          */
    
    struct {
      __IO uint32_t  RGW_CRC_BFLIP_TH:  8;          /*!< 0~31 set 0 to turn-off bitflip detection                              */
      __IO uint32_t  RGW_TCU_DC_AVG_FACTOR:  4;     /*!< 0~4 <<@@@281,csr_phy.txt/{main},283,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIE
                                                         R_,R/W,@>> : 2^-0 ~ 2^-4                                              */
      __IO uint32_t  RGW_RX_PREAMBLE_FLIP:  1;      /*!< rgw_rx_preamble_flip                                                  */
      __IO uint32_t  RGW_RX_PREAMBLE_BIT_NO:  1;    /*!< preamble 0 <<@@@276,csr_phy.txt/{main},278,,0x0%csr_phy.txt/{main}%,_STRUC
                                                         T_,_HIER_,R/W,@>> : 8, 1 <<@@@276,csr_phy.txt/{main},278,,0x0%csr_phy.txt/{
                                                         main}%,_STRUCT_,_HIER_,R/W,@>> : 6                                    */
      __IO uint32_t  RGW_RX_PREAMBLE_SAMPLE_REUPDATE:  1;/*!< rgw_rx_preamble_sample_reupdate                                  */
           uint32_t             :  9;
      __IO uint32_t  RGW_PT_OFFSET_TH:  3;          /*!< TFO offset count limit 0~37 bytes enable raw packet no Header
                                                         and CRC                                                               */
      __IO uint32_t  RGW_PT_OFFSET_EN:  1;          /*!< rgw_pt_offset_en                                                      */
      __IO uint32_t  RGW_BER_PKT_TYPE:  4;          /*!< bit [3] <<@@@255,csr_phy.txt/{main},257,,0x0%csr_phy.txt/{main}%,_STRUCT_,
                                                         _HIER_,R/W,@>> : manual mode 0 <<@@@256,csr_phy.txt/{main},258,,0x0%csr_phy
                                                         .txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : prbs9 1 <<@@@257,csr_phy.txt/{main},
                                                         259,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : 11110000
                                                         2 <<@@@258,csr_phy.txt/{main},260,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_
                                                         ,R/W,@>> : 10101010 3 <<@@@259,csr_phy.txt/{main},261,,0x0%csr_phy.txt/{mai
                                                         n}%,_STRUCT_,_HIER_,R/W,@>> : prbs15 4 <<@@@260,csr_phy.txt/{main},262,,0x */
    } PHY_RX_SET_1_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_RX_SET_2;                    /*!< PHY_RX_SET_2                                                          */
    
    struct {
           uint32_t             : 16;
      __IO uint32_t  RGW_FM_DEMOD_SW_LMT:  4;       /*!< 0~10                                                                  */
      __IO uint32_t  RGW_FM_DEMOD_INV:  1;          /*!< inverse fm demod out                                                  */
      __IO uint32_t  RGW_RX_TAIL_LMT:  5;           /*!< scale = 0.125us                                                       */
      __IO uint32_t  RGW_ADDR_COR_TO_LMT:  5;       /*!< address correlation time out after filter switch                      */
    } PHY_RX_SET_2_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_RX_ACC_TIMER;                /*!< PHY_RX_ACC_TIMER                                                      */
    
    struct {
      __IO uint32_t  RGW_RX_ACC_TIMER_INIT: 20;     /*!< rgw_rx_acc_timer_init[19:0]                                           */
    } PHY_RX_ACC_TIMER_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_RX_ACC_ADDR;                 /*!< PHY_RX_ACC_ADDR                                                       */
    
    struct {
      __IO uint32_t  RGW_RX_ACC_ADDR: 32;           /*!< rgw_rx_acc_addr[31:0]                                                 */
    } PHY_RX_ACC_ADDR_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_RX_CHNL_TYPE;                /*!< PHY_RX_CHNL_TYPE                                                      */
    
    struct {
      __IO uint32_t  RGW_RX_CHNL_TYPE:  1;          /*!< channel type 0 <<@@@311,csr_phy.txt/{main},313,,0x0%csr_phy.txt/{main}%,_S
                                                         TRUCT_,_HIER_,R/W,@>> : Adv, 1 <<@@@311,csr_phy.txt/{main},313,,0x0%csr_phy
                                                         .txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : Data                           */
    } PHY_RX_CHNL_TYPE_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_RX_CRC_INIT;                 /*!< PHY_RX_CRC_INIT                                                       */
    
    struct {
      __IO uint32_t  RGW_RX_CRC_INIT: 24;           /*!< CRC initial seed                                                      */
    } PHY_RX_CRC_INIT_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_RX_DW_SEED;                  /*!< PHY_RX_DW_SEED                                                        */
    
    struct {
      __IO uint32_t  RGW_RX_DWLFSR_SEED:  7;        /*!< De-Whiten LFSR initial seed                                           */
    } PHY_RX_DW_SEED_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_RX_MAN_SET;                  /*!< PHY_RX_MAN_SET                                                        */
    
    struct {
      __IO uint32_t  RGW_RX_DWLFSR_SEED_OV:  1;     /*!< De-Whiten seed over-write                                             */
      __IO uint32_t  RGW_RX_CRC_INIT_OV:  1;        /*!< CRC initial seed over-write                                           */
      __IO uint32_t  RGW_RX_CHNL_TYPE_OV:  1;       /*!< channel type over-write                                               */
      __IO uint32_t  RGW_RX_ACC_ADDR_OV:  1;        /*!< RX access address 0 <<@@@343,csr_phy.txt/{main},345,,0x0%csr_phy.txt/{main
                                                         }%,_STRUCT_,_HIER_,R/W,@>> : from LL 1 <<@@@343,csr_phy.txt/{main},345,,0x0
                                                         %csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : from register          */
      __IO uint32_t  RGW_RX_EN_OV:  1;              /*!< rgw_rx_en_ov                                                          */
      __IO uint32_t  RGW_RF_RX_EN_OV:  1;           /*!< rgw_rf_rx_en_ov                                                       */
      __IO uint32_t  RGW_RF_RX_CH_SW_OV:  1;        /*!< rgw_rf_rx_ch_sw_ov                                                    */
           uint32_t             :  9;
      __I  uint32_t  RO_HEADER  : 16;               /*!< ro_header[15:0]                                                       */
    } PHY_RX_MAN_SET_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_ACC_COR;                     /*!< PHY_ACC_COR                                                           */
    
    struct {
      __IO uint32_t  RGW_ADDR_COR_TH:  3;           /*!< Access address correlation threshold during detection 0 to match
                                                         all 6 acc addr bits 1~5 to match 5~1 acc addr bits 6 to turn
                                                          this off (match none)                                                */
           uint32_t             :  1;
      __IO uint32_t  RGW_ADDR_COR_DET_MAX:  4;      /*!< Access address correlation threshold after detection 0 to match
                                                         all 10 acc addr bits                                                  */
      __IO uint32_t  RGW_ADDR_COR_MAX:  4;          /*!< Access address correlation threshold after filter switch 0 to
                                                         match all 16 acc addr bits                                            */
      __IO uint32_t  RGW_ACC_COR_IN_TH:  8;         /*!< rgw_acc_cor_in_th[7:0]                                                */
      __IO uint32_t  RGW_ACC_COR_BITS:  6;          /*!< 32 <<@@@358,csr_phy.txt/{main},360,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER
                                                         _,R/W,@>> : check all bits with correct index                         */
           uint32_t             :  3;
      __IO uint32_t  RGW_ADDR_COR_TH_4:  3;         /*!< rgw_addr_cor_th_4[2:0]                                                */
    } PHY_ACC_COR_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_TX_DONE_CNT;                 /*!< PHY_TX_DONE_CNT                                                       */
    
    struct {
      __I  uint32_t  RO_TX_MOD_CNT: 15;             /*!< ro_tx_mod_cnt[14:0]                                                   */
      __IO uint32_t  RGW_TX_MOD_CNT_EN:  1;         /*!< Tx modulated completed counter                                        */
      __I  uint32_t  RO_TX_ASM_CNT: 15;             /*!< Tx assembly completed counter                                         */
      __IO uint32_t  RGW_TX_ASM_CNT_EN:  1;         /*!< rgw_tx_asm_cnt_en                                                     */
    } PHY_TX_DONE_CNT_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  PHY_BER_CNT;                     /*!< PHY_BER_CNT                                                           */
    
    struct {
      __I  uint32_t  RO_RX_BER_CNT: 32;             /*!< ro_rx_ber_cnt[31:0]                                                   */
    } PHY_BER_CNT_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_TBUS;                        /*!< PHY_TBUS                                                              */
    
    struct {
      __IO uint32_t  RGW_TBUS_SEL:  3;              /*!< rgw_tbus_sel[2:0]                                                     */
    } PHY_TBUS_b;                                   /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED1;
  
  union {
    __IO uint32_t  PHY_RX_SPACE_CNT;                /*!< PHY_RX_SPACE_CNT                                                      */
    
    struct {
      __IO uint32_t  RGW_RX_SPACE_CNT_LMT: 16;      /*!< rgw_rx_space_cnt_lmt[15:0]                                            */
      __I  uint32_t  RO_RX_LOST_CNT:  4;            /*!< ro_rx_lost_cnt[3:0]                                                   */
           uint32_t             : 11;
      __IO uint32_t  RGW_SPACE_CNT_EN:  1;          /*!< signal detection using DC enable                                      */
    } PHY_RX_SPACE_CNT_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  PHY_RX_DET_RO;                   /*!< PHY_RX_DET_RO                                                         */
    
    struct {
           uint32_t             : 16;
      __I  uint32_t  RO_RX_SPACE_CNT: 16;           /*!< ro_rx_space_cnt[15:0]                                                 */
    } PHY_RX_DET_RO_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_CFO_INIT_SET;                /*!< PHY_CFO_INIT_SET                                                      */
    
    struct {
      __IO uint32_t  RGW_FM_DEMOD_DC_INIT: 10;      /*!< rgw_fm_demod_dc_init[9:0]                                             */
           uint32_t             :  2;
      __IO uint32_t  RGW_ROT_DC_INIT: 10;           /*!< rgw_rot_dc_init[9:0]                                                  */
    } PHY_CFO_INIT_SET_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_CFO_EST;                     /*!< PHY_CFO_EST                                                           */
    
    struct {
      __I  uint32_t  RO_PREAMBLE_DC_EST: 10;        /*!< (10,9) CFO = [6:0]/512 * 4M                                           */
           uint32_t             :  2;
      __I  uint32_t  RO_ROT_DC_EST: 10;             /*!< ro_rot_dc_est[9:0]                                                    */
           uint32_t             :  7;
      __IO uint32_t  RGW_ROT_DC_RO_EN:  1;          /*!< rgw_rot_dc_ro_en                                                      */
      __IO uint32_t  RGW_PREAMBLE_DC_RO_SEL:  1;    /*!< 1 <<@@@413,csr_phy.txt/{main},415,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_
                                                         ,R/W,@>> : latch cfo when phy accessed 0 <<@@@414,csr_phy.txt/{main},416,,0
                                                         x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : latch cfo before
                                                         phy accessed (preamble is detected)                                   */
      __IO uint32_t  RGW_PREAMBLE_DC_RO_EN:  1;     /*!< rgw_preamble_dc_ro_en                                                 */
    } PHY_CFO_EST_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_DEMOD_DET;                    /*!< RX_DEMOD_DET                                                          */
    
    struct {
      __IO uint32_t  RGW_DET_FLAG_EN:  1;           /*!< rgw_det_flag_en                                                       */
    } RX_DEMOD_DET_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_DEMOD_SWITH_INIT;             /*!< RX_DEMOD_SWITH_INIT                                                   */
    
    struct {
           uint32_t             : 24;
      __IO uint32_t  RGW_CNT_SWITCH_INIT_1M:  5;    /*!< rgw_cnt_switch_init_1m[4:0]                                           */
    } RX_DEMOD_SWITH_INIT_b;                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_PREAMBLE_TH_LO;               /*!< RX_PREAMBLE_TH_LO                                                     */
    
    struct {
           uint32_t             : 24;
      __IO uint32_t  RGW_PRBL_METRIC_TH_LO_1M:  8;  /*!< preamble corr threshold (x2)                                          */
    } RX_PREAMBLE_TH_LO_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_PREAMBLE_TH_HI;               /*!< RX_PREAMBLE_TH_HI                                                     */
    
    struct {
           uint32_t             : 24;
      __IO uint32_t  RGW_PRBL_METRIC_TH_HI_1M:  8;  /*!< preamble corr threshold (x4)                                          */
    } RX_PREAMBLE_TH_HI_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RX_TCU_DC;                       /*!< RX_TCU_DC                                                             */
    
    struct {
      __IO uint32_t  RGW_TCU_DC_UP_CNT_LMT:  3;     /*!< clk_rate/250k/8-1 clk_rate/25k/8-1                                    */
    } RX_TCU_DC_b;                                  /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED2;
  
  union {
    __IO uint32_t  ACC_ADDR_DET;                    /*!< ACC_ADDR_DET                                                          */
    
    struct {
      __IO uint32_t  RGW_ACC_DET_EN:  1;            /*!< rgw_acc_det_en                                                        */
      __IO uint32_t  RGW_ACC_DET_EN_AUTO:  1;       /*!< 1 <<@@@455,csr_phy.txt/{main},457,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_
                                                         ,R/W,@>> : auto-enable when acc_code[0:5]==6b010101 or 6b101010       */
           uint32_t             : 14;
      __IO uint32_t  RGW_ACC_DET_SLICE_TO:  5;      /*!< rgw_acc_det_slice_to[4:0]                                             */
           uint32_t             :  2;
      __IO uint32_t  RGW_ACC_BND_BIT:  1;           /*!< rgw_acc_bnd_bit                                                       */
      __IO uint32_t  RGW_ACC_BND_IDX:  6;           /*!< rgw_acc_bnd_idx[5:0]                                                  */
      __IO uint32_t  RGW_ACC_BND_MOD:  1;           /*!< rgw_acc_bnd_mod                                                       */
      __IO uint32_t  RGW_ACC_CHK_EN:  1;            /*!< rgw_acc_chk_en                                                        */
    } ACC_ADDR_DET_b;                               /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED3[2];
  
  union {
    __IO uint32_t  PHY_STATE_RO;                    /*!< PHY_state_RO                                                          */
    
    struct {
      __I  uint32_t  RO_RX_CSTATE:  4;              /*!< ro_rx_cstate[3:0]                                                     */
      __I  uint32_t  RO_TX_CSTATE:  3;              /*!< ro_tx_cstate[2:0]                                                     */
           uint32_t             : 23;
      __IO uint32_t  RGW_RX_CSTATE_RO_EN:  1;       /*!< rgw_rx_cstate_ro_en                                                   */
      __IO uint32_t  RGW_TX_CSTATE_RO_EN:  1;       /*!< rgw_tx_cstate_ro_en                                                   */
    } PHY_STATE_RO_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_ENABLE_COUNTER_RO_1;         /*!< PHY_Enable_Counter_RO_1                                               */
    
    struct {
      __I  uint32_t  RO_RF_TX_ENA_CNT:  7;          /*!< ro_rf_tx_ena_cnt[6:0]                                                 */
      __IO uint32_t  RGW_RF_TX_ENA_CNT_EN:  1;      /*!< rgw_rf_tx_ena_cnt_en                                                  */
      __I  uint32_t  RO_PHY_TX_ENA_CNT:  7;         /*!< ro_phy_tx_ena_cnt[6:0]                                                */
      __IO uint32_t  RGW_PHY_TX_ENA_CNT_EN:  1;     /*!< rgw_phy_tx_ena_cnt_en                                                 */
      __I  uint32_t  RO_RF_RX_ENA_CNT:  7;          /*!< ro_rf_rx_ena_cnt[6:0]                                                 */
      __IO uint32_t  RGW_RF_RX_ENA_CNT_EN:  1;      /*!< rgw_rf_rx_ena_cnt_en                                                  */
      __I  uint32_t  RO_PHY_RX_ENA_CNT:  7;         /*!< ro_phy_rx_ena_cnt[6:0]                                                */
      __IO uint32_t  RGW_PHY_RX_ENA_CNT_EN:  1;     /*!< rgw_phy_rx_ena_cnt_en                                                 */
    } PHY_ENABLE_COUNTER_RO_1_b;                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_ENABLE_COUNTER_RO_2;         /*!< PHY_Enable_Counter_RO_2                                               */
    
    struct {
      __I  uint32_t  RO_PHY_TX_D_RDY_CNT: 15;       /*!< ro_phy_tx_d_rdy_cnt[14:0]                                             */
      __IO uint32_t  RGW_PHY_TX_D_RDY_CNT_EN:  1;   /*!< rgw_phy_tx_d_rdy_cnt_en                                               */
      __I  uint32_t  RO_PHY_RX_D_ACK_CNT: 15;       /*!< ro_phy_rx_d_ack_cnt[14:0]                                             */
      __IO uint32_t  RGW_PHY_RX_D_ACK_CNT_EN:  1;   /*!< rgw_phy_rx_d_ack_cnt_en                                               */
    } PHY_ENABLE_COUNTER_RO_2_b;                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  STATE_COUNTER_1;                 /*!< State_Counter_1                                                       */
    
    struct {
      __I  uint32_t  RO_PHY_STCNT_OUT_1: 16;        /*!< ro_phy_stcnt_out_1[15:0]                                              */
      __IO uint32_t  RGW_PHY_STCNT_SEL_1:  5;       /*!< rgw_phy_stcnt_sel_1[4:0]                                              */
           uint32_t             :  8;
      __IO uint32_t  RGW_PHY_STCNT_STOP_1:  1;      /*!< rgw_phy_stcnt_stop_1                                                  */
      __IO uint32_t  RGW_PHY_STCNT_EN_1:  1;        /*!< rgw_phy_stcnt_en_1                                                    */
      __IO uint32_t  RGW_PHY_STCNT_ALL_EN:  1;      /*!< rgw_phy_stcnt_all_en                                                  */
    } STATE_COUNTER_1_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  STATE_COUNTER_2;                 /*!< State_Counter_2                                                       */
    
    struct {
      __I  uint32_t  RO_PHY_STCNT_OUT_2: 16;        /*!< ro_phy_stcnt_out_2[15:0]                                              */
      __IO uint32_t  RGW_PHY_STCNT_SEL_2:  5;       /*!< rgw_phy_stcnt_sel_2[4:0]                                              */
           uint32_t             :  8;
      __IO uint32_t  RGW_PHY_STCNT_STOP_2:  1;      /*!< rgw_phy_stcnt_stop_2                                                  */
      __IO uint32_t  RGW_PHY_STCNT_EN_2:  1;        /*!< rgw_phy_stcnt_en_2                                                    */
    } STATE_COUNTER_2_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  STATE_COUNTER_3;                 /*!< State_Counter_3                                                       */
    
    struct {
      __I  uint32_t  RO_PHY_STCNT_OUT_3: 16;        /*!< ro_phy_stcnt_out_3[15:0]                                              */
      __IO uint32_t  RGW_PHY_STCNT_SEL_3:  5;       /*!< rgw_phy_stcnt_sel_3[4:0]                                              */
           uint32_t             :  8;
      __IO uint32_t  RGW_PHY_STCNT_STOP_3:  1;      /*!< rgw_phy_stcnt_stop_3                                                  */
      __IO uint32_t  RGW_PHY_STCNT_EN_3:  1;        /*!< rgw_phy_stcnt_en_3                                                    */
    } STATE_COUNTER_3_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  STATE_COUNTER_4;                 /*!< State_Counter_4                                                       */
    
    struct {
      __I  uint32_t  RO_PHY_STCNT_OUT_4: 16;        /*!< ro_phy_stcnt_out_4[15:0]                                              */
      __IO uint32_t  RGW_PHY_STCNT_SEL_4:  5;       /*!< rgw_phy_stcnt_sel_4[4:0]                                              */
           uint32_t             :  8;
      __IO uint32_t  RGW_PHY_STCNT_STOP_4:  1;      /*!< rgw_phy_stcnt_stop_4                                                  */
      __IO uint32_t  RGW_PHY_STCNT_EN_4:  1;        /*!< rgw_phy_stcnt_en_4                                                    */
    } STATE_COUNTER_4_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  PHY_ENABLE_RO;                   /*!< PHY_ENABLE_RO                                                         */
    
    struct {
      __I  uint32_t  RO_P2RF_TX_ENA:  1;            /*!< Tx Phy enable status                                                  */
      __I  uint32_t  RO_PHY_RX_STRT:  1;            /*!< Rx Phy enable status                                                  */
      __I  uint32_t  RO_PHY_TX_STRT:  1;            /*!< Tx Phy enable status                                                  */
      __I  uint32_t  RO_P2RF_RX_ENA:  1;            /*!< Rx RF enable status                                                   */
      __I  uint32_t  RO_P2RF_TX_CH_SW:  1;          /*!< Phy RF Tx channel switch status                                       */
      __I  uint32_t  RO_P2RF_RX_CH_SW:  1;          /*!< Phy RF Rx channel switch status                                       */
    } PHY_ENABLE_RO_b;                              /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED4[3];
  
  union {
    __IO uint32_t  RX_DEVIATION;                    /*!< RX_Deviation                                                          */
    
    struct {
      __I  uint32_t  RO_PHY_RX_DEV:  8;             /*!< ro_phy_rx_dev[7:0]                                                    */
      __IO uint32_t  RGW_PHY_RX_DEV_BIT_NO: 11;     /*!< rgw_phy_rx_dev_bit_no[10:0]                                           */
           uint32_t             :  5;
      __IO uint32_t  RGW_PHY_RX_DEV_ST:  4;         /*!< rgw_phy_rx_dev_st[3:0]                                                */
           uint32_t             :  3;
      __IO uint32_t  RGW_PHY_RX_DEV_RO_EN:  1;      /*!< rgw_phy_rx_dev_ro_en                                                  */
    } RX_DEVIATION_b;                               /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED5[5];
  
  union {
    __IO uint32_t  PHY_FMD_BUF_0;                   /*!< PHY_FMD_Buf_0                                                         */
    
    struct {
      __I  uint32_t  RO_PHY_RX_FMD_BUF: 10;         /*!< RTL auto generate read kick rkk_phy_rx_fmd_buf                        */
      __I  uint32_t  RO_PHY_RX_FMD_BUF_ADDR:  6;    /*!< ro_phy_rx_fmd_buf_addr[5:0]                                           */
      __IO uint32_t  RGW_PHY_RX_FMD_BUF_ADDR:  6;   /*!< RTL auto generate write kick wkk_phy_rx_fmd_buf_addr                  */
           uint32_t             :  2;
      __IO uint32_t  RGW_PHY_RX_FMD_BUF_STOP_PT:  3;/*!< 0 <<@@@574,csr_phy.txt/{main},576,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_
                                                         ,R/W,@>> : corr_pass 1 <<@@@575,csr_phy.txt/{main},577,,0x0%csr_phy.txt/{ma
                                                         in}%,_STRUCT_,_HIER_,R/W,@>> : psdu bit number 2 <<@@@576,csr_phy.txt/{main
                                                         },578,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : Starting
                                                         from RF Enable counter 3 <<@@@577,csr_phy.txt/{main},579,,0x0%csr_phy.txt/
                                                         {main}%,_STRUCT_,_HIER_,R/W,@>> : Starting from Pkt End counter
                                                          4 <<@@@578,csr_phy.txt/{main},580,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_
                                                         ,R/W,@>>                                                              */
      __IO uint32_t  RGW_PHY_RX_FMD_BUF_STOP_MAN:  1;/*!< pos trigger stop point                                               */
      __IO uint32_t  RGW_PHY_RX_FMD_BUF_ADDR_AUTO:  1;/*!< rgw_phy_rx_fmd_buf_addr_auto                                        */
      __IO uint32_t  RGW_PHY_RX_FMD_BUF_SRC_SEL:  1;/*!< FM Demod after 0 <<@@@566,csr_phy.txt/{main},568,,0x0%csr_phy.txt/{main}%,
                                                         _STRUCT_,_HIER_,R/W,@>> : CIC, 1 <<@@@566,csr_phy.txt/{main},568,,0x0%csr_p
                                                         hy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : ACI                          */
      __I  uint32_t  RO_PHY_RX_FMD_BUF_DONE:  1;    /*!< ro_phy_rx_fmd_buf_done                                                */
      __IO uint32_t  RGW_PHY_RX_FMD_BUF_EN:  1;     /*!< rgw_phy_rx_fmd_buf_en                                                 */
    } PHY_FMD_BUF_0_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_FMD_BUF_1;                   /*!< PHY_FMD_Buf_1                                                         */
    
    struct {
      __IO uint32_t  RGW_PHY_RX_FMD_BUF_PSDU_BIT_NO: 10;/*!< rgw_phy_rx_fmd_buf_psdu_bit_no[9:0]                               */
           uint32_t             :  6;
      __IO uint32_t  RGW_PHY_RX_FMD_BUF_LTCH_CNT_LMT: 16;/*!< 1us                                                              */
    } PHY_FMD_BUF_1_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_FREQMETER_SET;               /*!< PHY_FREQMETER_SET                                                     */
    
    struct {
      __IO uint32_t  RGW_FRQMTR_PASS_TRGT:  9;      /*!< ex. clk_sys=64M, clk_measured=32M, cycle=3 target = (3+1)*2*8
                                                         = 64                                                                  */
           uint32_t             :  3;
      __IO uint32_t  RGW_FRQMTR_PASS_RGN:  9;       /*!< passing range                                                         */
           uint32_t             :  2;
      __IO uint32_t  RGW_FRQMTR_CCL:  3;            /*!< (1~8)*8 cycles                                                        */
           uint32_t             :  2;
      __IO uint32_t  RGW_FRQMTR_EDGE:  1;           /*!< 0 <<@@@603,csr_phy.txt/{main},605,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_
                                                         ,R/W,@>> : pos, 1 <<@@@603,csr_phy.txt/{main},605,,0x0%csr_phy.txt/{main}%,
                                                         _STRUCT_,_HIER_,R/W,@>> : neg edge                                    */
      __IO uint32_t  RGW_FRQMTR_MODE:  1;           /*!< 0 <<@@@600,csr_phy.txt/{main},602,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_
                                                         ,R/W,@>> : one-shot, 1 <<@@@600,csr_phy.txt/{main},602,,0x0%csr_phy.txt/{ma
                                                         in}%,_STRUCT_,_HIER_,R/W,@>> : cont                                   */
      __IO uint32_t  RGW_FRQMTR_TRIG:  1;           /*!< rgw_frqmtr_trig                                                       */
      __IO uint32_t  RGW_FRQMTR_EN:  1;             /*!< rgw_frqmtr_en                                                         */
    } PHY_FREQMETER_SET_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  PHY_FREQMETER_RO;                /*!< PHY_FREQMETER_RO                                                      */
    
    struct {
      __I  uint32_t  RO_FRQMTR_OUT:  9;             /*!< ro_frqmtr_out[8:0]                                                    */
           uint32_t             :  3;
      __I  uint32_t  RO_FRQMTR_PASS:  1;            /*!< pass = target + or - range                                            */
           uint32_t             : 18;
      __I  uint32_t  RO_FRQMTR_DONE:  1;            /*!< ro_frqmtr_done                                                        */
    } PHY_FREQMETER_RO_b;                           /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_TIMER_1_SET;                 /*!< PHY_TIMER_1_SET                                                       */
    
    struct {
           uint32_t             : 16;
      __IO uint32_t  RGW_PHY_TMR_END_SEL_1:  4;     /*!< rgw_phy_tmr_end_sel_1[3:0]                                            */
      __IO uint32_t  RGW_PHY_TMR_END_EDGE_1:  1;    /*!< 0 <<@@@636,csr_phy.txt/{main},638,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_
                                                         ,R/W,@>> : pos, 1 <<@@@636,csr_phy.txt/{main},638,,0x0%csr_phy.txt/{main}%,
                                                         _STRUCT_,_HIER_,R/W,@>> : neg edge                                    */
           uint32_t             :  3;
      __IO uint32_t  RGW_PHY_TMR_BGN_SEL_1:  4;     /*!< rgw_phy_tmr_bgn_sel_1[3:0]                                            */
      __IO uint32_t  RGW_PHY_TMR_BGN_EDGE_1:  1;    /*!< 0 <<@@@631,csr_phy.txt/{main},633,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_
                                                         ,R/W,@>> : pos, 1 <<@@@631,csr_phy.txt/{main},633,,0x0%csr_phy.txt/{main}%,
                                                         _STRUCT_,_HIER_,R/W,@>> : neg edge                                    */
      __IO uint32_t  RGW_PHY_TMR_CONT_1:  1;        /*!< rgw_phy_tmr_cont_1                                                    */
      __IO uint32_t  RGW_PHY_TMR_TRIG_1:  1;        /*!< rgw_phy_tmr_trig_1                                                    */
      __IO uint32_t  RGW_PHY_TMR_EN:  1;            /*!< rgw_phy_tmr_en                                                        */
    } PHY_TIMER_1_SET_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  PHY_TIMER_1_RO;                  /*!< PHY_TIMER_1_RO                                                        */
    
    struct {
      __I  uint32_t  RO_PHY_TMR_OUT_1: 16;          /*!< ro_phy_tmr_out_1[15:0]                                                */
      __I  uint32_t  RO_PHY_TMR_DONE_1:  1;         /*!< ro_phy_tmr_done_1                                                     */
    } PHY_TIMER_1_RO_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_TIMER_2_SET;                 /*!< PHY_TIMER_2_SET                                                       */
    
    struct {
           uint32_t             : 16;
      __IO uint32_t  RGW_PHY_TMR_END_SEL_2:  4;     /*!< rgw_phy_tmr_end_sel_2[3:0]                                            */
      __IO uint32_t  RGW_PHY_TMR_END_EDGE_2:  1;    /*!< 0 <<@@@656,csr_phy.txt/{main},658,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_
                                                         ,R/W,@>> : pos, 1 <<@@@656,csr_phy.txt/{main},658,,0x0%csr_phy.txt/{main}%,
                                                         _STRUCT_,_HIER_,R/W,@>> : neg edge                                    */
           uint32_t             :  3;
      __IO uint32_t  RGW_PHY_TMR_BGN_SEL_2:  4;     /*!< rgw_phy_tmr_bgn_sel_2[3:0]                                            */
      __IO uint32_t  RGW_PHY_TMR_BGN_EDGE_2:  1;    /*!< 0 <<@@@651,csr_phy.txt/{main},653,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_
                                                         ,R/W,@>> : pos, 1 <<@@@651,csr_phy.txt/{main},653,,0x0%csr_phy.txt/{main}%,
                                                         _STRUCT_,_HIER_,R/W,@>> : neg edge                                    */
      __IO uint32_t  RGW_PHY_TMR_CONT_2:  1;        /*!< rgw_phy_tmr_cont_2                                                    */
      __IO uint32_t  RGW_PHY_TMR_TRIG_2:  1;        /*!< rgw_phy_tmr_trig_2                                                    */
    } PHY_TIMER_2_SET_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  PHY_TIMER_2_RO;                  /*!< PHY_TIMER_2_RO                                                        */
    
    struct {
      __I  uint32_t  RO_PHY_TMR_OUT_2: 16;          /*!< ro_phy_tmr_out_2[15:0]                                                */
      __I  uint32_t  RO_PHY_TMR_DONE_2:  1;         /*!< ro_phy_tmr_done_2                                                     */
    } PHY_TIMER_2_RO_b;                             /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED6[166];
  
  union {
    __I  uint32_t  SVN_VERSION;                     /*!< SVN_VERSION                                                           */
    
    struct {
      __I  uint32_t  SVN_VERSION: 32;               /*!< svn_version[31:0]                                                     */
    } SVN_VERSION_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  PHY_IQ_LBK;                      /*!< PHY_IQ_LBK                                                            */
    
    struct {
      __IO uint32_t  RGW_IQ_LBK :  1;               /*!< rgw_iq_lbk                                                            */
      __IO uint32_t  RGW_IQ_UP2M_EN:  1;            /*!< rgw_iq_up2m_en                                                        */
      __IO uint32_t  RGW_TX_IQ_EN:  1;              /*!< rgw_tx_iq_en                                                          */
    } PHY_IQ_LBK_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_HARDWIRE;                    /*!< REG_HARDWIRE                                                          */
    
    struct {
      __IO uint32_t  RF_MANUAL_EN:  1;              /*!< Set RF to manual enable modes, all registers with description
                                                         ''manual enable''                                                     */
      __IO uint32_t  MANUAL_SX  :  1;               /*!< Set SX digital to manual mode (need to connect to ckt)                */
           uint32_t             : 14;
      __IO uint32_t  RF_PWR     :  2;               /*!< TX output power <<@@@700,csr_phy.txt/{main},702,,0x0%csr_phy.txt/{main}%,_
                                                         STRUCT_,_HIER_,R/W,@>> : 11 max power, 00 minimum power PA power
                                                         settings in register 16                                               */
      __IO uint32_t  TX_ATTN    :  1;               /*!< Setting for output power ~-40 dBm when set to 1 (checked no
                                                         change)                                                               */
      __IO uint32_t  EN_RSSI    :  1;               /*!< 0 <<@@@680,csr_phy.txt/{main},682,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_
                                                         ,R/W,@>> : mask DA_EN_RX_RSSI=0 in RX mode; 1 <<@@@680,csr_phy.txt/{main},6
                                                         82,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : DA_EN_RX_RSSI
                                                         follow RX timing                                                      */
      __IO uint32_t  EN_TSSI    :  1;               /*!< Enabling TSSI <<@@@677,csr_phy.txt/{main},679,,0x0%csr_phy.txt/{main}%,_ST
                                                         RUCT_,_HIER_,R/W,@>> : for CP/FT and debugging tests only             */
    } REG_HARDWIRE_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_MAN_EN;                      /*!< REG_MAN_EN                                                            */
    
    struct {
           uint32_t             :  4;
      __IO uint32_t  RG_EN_LDO15:  1;               /*!< Manual enable RX LDO                                                  */
      __IO uint32_t  RG_EN_LDOPA:  1;               /*!< Manual enable PA LDO                                                  */
      __IO uint32_t  RG_EN_TX_PA:  1;               /*!< Manual enable TXPA                                                    */
      __IO uint32_t  RG_EN_TX_TSSI:  1;             /*!< Manual enable TX TSSI                                                 */
      __IO uint32_t  RG_EN_TX_LOBF:  1;             /*!< Manual enable TX LOBF (checked ok)                                    */
      __IO uint32_t  RG_EN_RX_LOBF:  1;             /*!< Manual enable RX LOBF (checked ok)                                    */
      __IO uint32_t  RG_EN_RX_LNA:  1;              /*!< Manual enable RX LNA                                                  */
      __IO uint32_t  RG_RX_LNAGC:  2;               /*!< LNA gain setting manual control, default set at high gain             */
      __IO uint32_t  RG_EN_RX_LOGEN:  1;            /*!< Manual enable RX LOGEN                                                */
      __IO uint32_t  RG_EN_RX_MIXER:  1;            /*!< Manual enable RX Mixer                                                */
      __IO uint32_t  RG_EN_RX_BPF:  1;              /*!< Manual enable RX BPF                                                  */
      __IO uint32_t  RG_EN_RX_LIMITER:  1;          /*!< Manual enable RX limiter                                              */
      __IO uint32_t  RG_EN_RX_LIMITER_BUF:  1;      /*!< Manual enable RX LIMITER BUF                                          */
      __IO uint32_t  RG_EN_RX_RSSI:  1;             /*!< Manual enable RX RSSI, obsolete                                       */
      __IO uint32_t  RG_EN_RX_MCU_COMP0:  1;        /*!< Manual enable RX COMP1, obsolete                                      */
      __IO uint32_t  RG_EN_RX_MCU_COMP1:  1;        /*!< Manual enable RX COMP2, obsolete                                      */
      __IO uint32_t  RG_EN_RX_BB_COMP:  1;          /*!< Manual enable RX BB COMP, obsolete                                    */
           uint32_t             :  7;
      __IO uint32_t  RG_EN_IQPAD_IOSW:  1;          /*!< RXIF test buffer to GPIO pins 25~28 0 <<@@@700,csr_phy.txt/{main},702,,0x0
                                                         %csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : disabled 1 <<@@@700,csr_phy.
                                                         txt/{main},702,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>>
                                                         : enabled (make sure GPIO tri-state)                                  */
      __IO uint32_t  RG_EN_LDO15TEST:  1;           /*!< 0 <<@@@697,csr_phy.txt/{main},699,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_
                                                         ,R/W,@>> : measure LDOPA; 1 <<@@@697,csr_phy.txt/{main},699,,0x0%csr_phy.tx
                                                         t/{main}%,_STRUCT_,_HIER_,R/W,@>> : measure LDO15                     */
    } REG_MAN_EN_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_LDO_TEST_SETTINGS;           /*!< REG_LDO_TEST_SETTINGS                                                 */
    
    struct {
      __IO uint32_t  RG_LDO15_LEVEL:  3;            /*!< RX FE Vdd select <<@@@785,csr_phy.txt/{main},787,,0x0%csr_phy.txt/{main}%,
                                                         _STRUCT_,_HIER_,R/W,@>> : (011 -> 1.498V defaut)                      */
      __IO uint32_t  RG_LDOPA_LEVEL:  3;            /*!< TX FE Vdd select <<@@@782,csr_phy.txt/{main},784,,0x0%csr_phy.txt/{main}%,
                                                         _STRUCT_,_HIER_,R/W,@>> : (011 -> 1.498V defaut)                      */
      __IO uint32_t  RG_LDO5B_LEVEL:  3;            /*!< SX BF Vdd select <<@@@779,csr_phy.txt/{main},781,,0x0%csr_phy.txt/{main}%,
                                                         _STRUCT_,_HIER_,R/W,@>> : (011 -> 1.51V default)                      */
      __IO uint32_t  RG_LDO5V_LEVEL:  3;            /*!< SX VCO Vdd select <<@@@776,csr_phy.txt/{main},778,,0x0%csr_phy.txt/{main}%
                                                         ,_STRUCT_,_HIER_,R/W,@>> : (011 -> 1.51V default)                     */
           uint32_t             :  6;
      __IO uint32_t  RG_EN_TESTBUFFER:  1;          /*!< enable test buffer, set to BPF or limiter buffer out                  */
      __IO uint32_t  RG_EN_TESTBUFFER_BPFI:  1;     /*!< RG_EN_TESTBUFFER_BPFI                                                 */
      __IO uint32_t  RG_EN_TESTBUFFER_BPFQ:  1;     /*!< RG_EN_TESTBUFFER_BPFQ                                                 */
      __IO uint32_t  RG_EN_TESTBUFFER_LIMITERI:  1; /*!< RG_EN_TESTBUFFER_LIMITERI                                             */
      __IO uint32_t  RG_EN_TESTBUFFER_LIMITERQ:  1; /*!< RG_EN_TESTBUFFER_LIMITERQ                                             */
      __IO uint32_t  RG_TESTBUFFER_TRI_STATE:  1;   /*!< test buffer output tristate                                           */
      __IO uint32_t  RG_LDO5C_LEVEL:  3;            /*!< SX CHP PFD Vdd select <<@@@755,csr_phy.txt/{main},757,,0x0%csr_phy.txt/{ma
                                                         in}%,_STRUCT_,_HIER_,R/W,@>> : (011 -> 1.51V default)                 */
    } REG_LDO_TEST_SETTINGS_b;                      /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_ABB1;                        /*!< REG_ABB1                                                              */
    
    struct {
      __IO uint32_t  RG_RX_FILTERVCM:  2;           /*!< RX BPF output common mode(11, 10, 01,00 ->0.7, 0.65, 0.6, 0.55V)      */
      __IO uint32_t  RG_RX_FILTERI_COARSE:  2;      /*!< RX ABB bias current coarse tuning (default I*1.5, 1.25, 1, 0.75)      */
      __IO uint32_t  RG_RX_FILTERI1ST:  2;          /*!< RX BPF 1st stage bias current fine tuning (default I*1.5, 1.25,
                                                         1, 0.75)                                                              */
      __IO uint32_t  RG_RX_FILTERI2ND:  2;          /*!< RX BPF 2nd stage bias current fine tuning (default I*1.5, 1.25,
                                                         1, 0.75)                                                              */
      __IO uint32_t  RG_RX_FILTERI3RD:  2;          /*!< RX BPF 3rd stage bias current fine tuning (default I*1.5, 1.25,
                                                         1, 0.75)                                                              */
      __IO uint32_t  RG_TESTBUFFERVCM:  2;          /*!< RX test buffer output common mode(11, 10, 01,00 ->0.6, 0.55,
                                                         0.5, 0.45V)                                                           */
      __IO uint32_t  RG_TESTBUFI:  2;               /*!< RX test buffer bias current fine tuning (default I*1.5, 1.25,
                                                         1, 0.75)                                                              */
      __IO uint32_t  RG_RX_LIMITER_BIAS:  3;        /*!< RG limiter bias control                                               */
      __IO uint32_t  RG_RX_LBUF_BIAS:  3;           /*!< RG limiter buffer bias control                                        */
      __IO uint32_t  RG_RX_FWR_BIAS:  3;            /*!< RX Full Wave Rectifier bias control                                   */
      __IO uint32_t  RG_RX_RSSI_TESTMODE:  1;       /*!< RX RSSI test mode control                                             */
      __IO uint32_t  RG_RX_VREF1_TESTMODE:  1;      /*!< RX VREF1 test mode control                                            */
      __IO uint32_t  RG_RX_BPF_CFIX_HALF:  1;       /*!< CondorB BPF BW tuning control 0 <<@@@810,csr_phy.txt/{main},812,,0x0%csr_p
                                                         hy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : default setting (F3dB~750KHz)
                                                         1 <<@@@811,csr_phy.txt/{main},813,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_
                                                         ,R/W,@>> : increased BW setting (F3dB~1.15MHz)                        */
      __IO uint32_t  RG_RX_BPF_CTUNE_HALF:  1;      /*!< CondorB BPF BW tuning control RX BPF dummy register                   */
      __IO uint32_t  RG_RX_BPF_COMP_OPTION:  1;     /*!< CondorB BPF BW tuning control RX BPF dummy register                   */
      __IO uint32_t  RG_RX_FILTERI_DOUBLE:  1;      /*!< CondorB BPF I double option 0 <<@@@797,csr_phy.txt/{main},799,,0x0%csr_phy
                                                         .txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : default setting 1 <<@@@798,csr_phy.t
                                                         xt/{main},800,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>>
                                                         : double current setting                                              */
      __IO uint32_t  RG_TX_SETUPTIME2:  3;          /*!< TX mode, DA_EN_SX to TXBB begin, decimal unit 000 <<@@@790,csr_phy.txt/{ma
                                                         in},792,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : 0uS
                                                         001 <<@@@791,csr_phy.txt/{main},793,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIE
                                                         R_,R/W,@>> : 0.125uS ... 111 <<@@@793,csr_phy.txt/{main},795,,0x0%csr_phy.t
                                                         xt/{main}%,_STRUCT_,_HIER_,R/W,@>> : 0.875uS                          */
    } REG_ABB1_b;                                   /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_RCCAL;                       /*!< REG_RCCAL                                                             */
    
    struct {
      __IO uint32_t  RG_RX_RCCAL_CNN:  9;           /*!< RX RCCAL Count Number Nominal value (default <<@@@883,csr_phy.txt/{main},8
                                                         85,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : d200)           */
      __IO uint32_t  RG_RX_RCCAL_OST:  4;           /*!< RX RCCAL Count Offset (default -8)                                    */
      __IO uint32_t  RG_RX_RCCAL_TI:  1;            /*!< Decide if do one time RXRC calibration after phy power on             */
      __IO uint32_t  RG_RX_CTUNE_OST:  2;           /*!< Apply a plus or minus offset value to the final DA_RX_CTUNE_V12D[3
                                                         <<@@@874,csr_phy.txt/{main},876,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R
                                                         /W,@>> : 0                                                            */
      __IO uint32_t  RG_RX_CTUNE_OST_POL:  1;       /*!< Decide the offset value polarity , 0 for pluse / 1 for minus          */
      __IO uint32_t  RG_TX_SETUPTIME1:  6;          /*!< Timer from DA_EN_SX to TXBB begin (defined in TRX timing), 1uS
                                                         unit 000000 <<@@@864,csr_phy.txt/{main},866,,0x0%csr_phy.txt/{main}%,_STRU
                                                         CT_,_HIER_,R/W,@>> : 70uS 000001 <<@@@865,csr_phy.txt/{main},867,,0x0%csr_p
                                                         hy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : 71us ... 111111 <<@@@867,csr_phy.t
                                                         xt/{main},869,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>>
                                                          : 133uS Used together w/ RG_TX_SETUPTIME2[2:0], default 120uS        */
           uint32_t             :  1;
      __IO uint32_t  RG_RX_STARTUP:  4;             /*!< Timer from DA_EN_SX to RX startup procedure (defined in TRX
                                                         timing) 0000 <<@@@858,csr_phy.txt/{main},860,,0x0%csr_phy.txt/{main}%,_STR
                                                         UCT_,_HIER_,R/W,@>> : 0 uS (turn on same time as DA_EN_SX) 0001
                                                          <<@@@859,csr_phy.txt/{main},861,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R
                                                         /W,@>> : 10 uS ... 1100 <<@@@860,csr_phy.txt/{main},862,,0x0%csr_phy.txt/{m
                                                         ain}%,_STRUCT_,_HIER_,R/W,@>> : 120uS (should not be set higher
                                                          than 1100)                                                           */
      __IO uint32_t  RG_TX_STARTUP:  4;             /*!< Timer from DA_EN_SX to TX startup procedure (defined in TRX
                                                         timing) 0000 <<@@@852,csr_phy.txt/{main},854,,0x0%csr_phy.txt/{main}%,_STR
                                                         UCT_,_HIER_,R/W,@>> : 0 uS (turn on same time as DA_EN_SX) 0001
                                                          <<@@@853,csr_phy.txt/{main},855,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R
                                                         /W,@>> : 10 uS ... 1100 <<@@@854,csr_phy.txt/{main},856,,0x0%csr_phy.txt/{m
                                                         ain}%,_STRUCT_,_HIER_,R/W,@>> : 120uS (should not be set higher
                                                          than 1100)                                                           */
    } REG_RCCAL_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_TX_LOBF_TIMING;              /*!< REG_TX_LOBF_TIMING                                                    */
    
    struct {
      __IO uint32_t  RG_TX_PA_G1:  3;               /*!< Manual gain setting of PA 1st stage (mux w/ TX gain decoder)          */
      __IO uint32_t  RG_TX_PA_G2:  3;               /*!< Manual gain setting of PA 2nd stage (mux w/ TX gain decoder)          */
      __IO uint32_t  RG_TX_TSSI_VREF:  3;           /*!< TX TSSI measurement setting                                           */
      __IO uint32_t  RG_TX_PABIAS:  4;              /*!< TX PA bias control, changed to 3-bit, msb is noconn                   */
      __IO uint32_t  RG_SX_VCOBFSEL:  1;            /*!< VCO buffer high gain (checked ok)                                     */
      __IO uint32_t  RG_SX_DIVBFSEL:  1;            /*!< DIV buffer high gain (checked ok)                                     */
      __IO uint32_t  RG_SX_TXBFSEL:  1;             /*!< TX buffer high gain (checked ok)                                      */
      __IO uint32_t  RG_SX_RXBFSEL:  1;             /*!< RX buffer high gain (checked ok)                                      */
      __IO uint32_t  RG_TX_RAMP_T1:  2;             /*!< TX ramp-up timing 1 <<@@@911,csr_phy.txt/{main},913,,0x0%csr_phy.txt/{main
                                                         }%,_STRUCT_,_HIER_,R/W,@>> : delay for LDO to settle 2.0u, 4.0u,
                                                         6.0u, 8.0u                                                            */
      __IO uint32_t  RG_TX_RAMP_T2:  2;             /*!< TX ramp-up timing 2 <<@@@907,csr_phy.txt/{main},909,,0x0%csr_phy.txt/{main
                                                         }%,_STRUCT_,_HIER_,R/W,@>> : interval for TX PA turn-on 0.125u,
                                                         0.25u, 0.5u, 1.0u                                                     */
      __IO uint32_t  RG_TX_RAMP_T3:  2;             /*!< TX ramp-up timing 3 <<@@@903,csr_phy.txt/{main},905,,0x0%csr_phy.txt/{main
                                                         }%,_STRUCT_,_HIER_,R/W,@>> : delay for TX PA current to settle
                                                         0.25u, 0.5u, 1.0u, 2.0u                                               */
      __IO uint32_t  RG_TX_RAMP_T4:  2;             /*!< TX ramp-down timing 4 <<@@@899,csr_phy.txt/{main},901,,0x0%csr_phy.txt/{ma
                                                         in}%,_STRUCT_,_HIER_,R/W,@>> : delay between LDO off signal and
                                                         other signal 5u, 10u, 15u, 20u                                        */
      __IO uint32_t  RG_TX_PA_ANASW_R:  2;          /*!< TX PA analog switch R-C setting <<@@@896,csr_phy.txt/{main},898,,0x0%csr_p
                                                         hy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : turn-on setting              */
      __IO uint32_t  RG_TX_PA_ANASW_R_OFF:  2;      /*!< TX PA analog switch R-C setting <<@@@893,csr_phy.txt/{main},895,,0x0%csr_p
                                                         hy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : turn-off setting             */
      __IO uint32_t  RG_RX_TURNON_T:  2;            /*!< RX early turn-on <<@@@890,csr_phy.txt/{main},892,,0x0%csr_phy.txt/{main}%,
                                                         _STRUCT_,_HIER_,R/W,@>> : 0.5u, 1u, 2u, 4u see TRX Timing             */
      __IO uint32_t  RG_TX_PA_ANASW:  1;            /*!< Manual control of TX PA analog switch, 1 for open (signal pass),
                                                         0 for short (signal shorted)                                          */
    } REG_TX_LOBF_TIMING_b;                         /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_RX_FE_1;                     /*!< REG_RX_FE_1                                                           */
    
    struct {
      __IO uint32_t  RG_RX_HG_LNA_BIASN:  4;        /*!< RG HG LNA NMOS bias control                                           */
      __IO uint32_t  RG_RX_HG_LNA_BIASP:  4;        /*!< RG HG LNA PMOS bias control                                           */
      __IO uint32_t  RG_RX_LG_LNA_BIASN:  4;        /*!< RG LG LNA NMOS bias control                                           */
      __IO uint32_t  RG_RX_LG_LNA_ATT:  3;          /*!< RG LG LNA attenuation control                                         */
      __IO uint32_t  RG_RX_MIXER_SQDC:  3;          /*!< RG mixer switch quad DC bias control                                  */
      __IO uint32_t  RG_RX_LOGEN_LEVEL:  2;         /*!< RX LO generator circuit voltage swing level, default 10               */
      __IO uint32_t  RG_RX_LOGEN_ICAL:  2;          /*!< RX LO generator I/Q cal manual setting                                */
      __IO uint32_t  RG_RX_LOGEN_QCAL:  2;          /*!< RG_RX_LOGEN_QCAL[1:0]                                                 */
      __IO uint32_t  RG_RX_VREF1_SEL:  3;           /*!< RX RSSI VREF1 setting                                                 */
      __IO uint32_t  RG_RX_VREF2_SEL:  3;           /*!< RX RSSI VREF2 setting                                                 */
      __IO uint32_t  RG_RX_VREF3_SEL:  2;           /*!< RX RSSI VREF3 seting for BB                                           */
    } REG_RX_FE_1_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_SX_EN;                       /*!< REG_SX_EN                                                             */
    
    struct {
      __IO uint32_t  RG_EN_SX_VCO:  1;              /*!< Enable VCO CKT, manual enable                                         */
      __IO uint32_t  RG_EN_SX_DIVCK:  1;            /*!< Enable Divider Buffer CKT                                             */
           uint32_t             :  1;
      __IO uint32_t  RG_EN_SX_DIV:  1;              /*!< Enable Divider CKT                                                    */
           uint32_t             :  1;
      __IO uint32_t  RG_EN_SX_VCO_MAN:  1;          /*!< Enable VCO manual control function                                    */
      __IO uint32_t  RG_EN_SX_VCO_DLY:  3;          /*!< VCO enable delay time (default 8us)                                   */
           uint32_t             :  1;
      __IO uint32_t  RG_EN_SX_VCOBF_TX_MAN:  1;     /*!< Enable VCO TX main buffer manual control function                     */
      __IO uint32_t  RG_EN_SX_VCOBF_TX:  1;         /*!< Enable VCO TX main buffer                                             */
      __IO uint32_t  RG_SX_VCO_TXOB_AW:  1;         /*!< VCO TX output buffer always on                                        */
      __IO uint32_t  RG_EN_SX_VCOBF_RX_MAN:  1;     /*!< Enable VCO RX main buffer manual control function                     */
      __IO uint32_t  RG_EN_SX_VCOBF_RX:  1;         /*!< Enable VCO RX main buffer                                             */
      __IO uint32_t  RG_SX_VCO_RXOB_AW:  1;         /*!< VCO RX output buffer always on                                        */
      __IO uint32_t  RG_EN_SX_MOD:  1;              /*!< SDM enable, manual enable                                             */
           uint32_t             :  1;
      __IO uint32_t  RG_EN_SX_VCOMON:  1;           /*!< SX VCO monitor enable control (for testing purposes only              */
           uint32_t             :  1;
      __IO uint32_t  RG_SX_SXBUF_CAPIMB_POL:  1;    /*!< Cap imbalance polarity                                                */
      __IO uint32_t  RG_SX_SXBUF_CAPIMB:  3;        /*!< Cap Imbalance Level (7 for 70fF)                                      */
    } REG_SX_EN_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_SX1;                         /*!< REG_SX1                                                               */
    
    struct {
      __IO uint32_t  RG_SX_DFM_CAL_MODE_MAN:  1;    /*!< Enable manual control the CAL_MODE                                    */
      __IO uint32_t  RG_SX_DFM_CAL_MODE:  3;        /*!< calibration mode                                                      */
      __IO uint32_t  RG_SX_DFM_CAL_TI:  1;          /*!< calibration time interval                                             */
      __IO uint32_t  RG_SX_DFM_CAL_INIT:  3;        /*!< DFM calibration initialize time                                       */
      __IO uint32_t  RG_SX_DFM_LGCAL_KVDOUB:  1;    /*!< LGCAL KV double                                                       */
      __IO uint32_t  RG_EN_SX_CP_MAN:  1;           /*!< Enable manual control the CP                                          */
      __IO uint32_t  RG_EN_SX_CP:  1;               /*!< CP enable control                                                     */
      __IO uint32_t  RG_SX_DFM_UOP_MAN:  1;         /*!< Enable manual control the LF unit gain op                             */
      __IO uint32_t  RG_SX_DFM_UOP_EN:  1;          /*!< LF unit gain op enable control                                        */
      __IO uint32_t  RG_EN_SX_DFM_PM:  1;           /*!< GFSK modulation data enable                                           */
      __IO uint32_t  RG_SX_RXCHANNEL_MAN:  1;       /*!< Manual control rx target frequency                                    */
           uint32_t             :  1;
      __IO uint32_t  RG_SX_SBCAL_DIS:  1;           /*!< Disable sub-band calibration                                          */
      __IO uint32_t  RG_SX_DFM_LGCAL_DIS:  1;       /*!< Disable loop gain calibration                                         */
      __IO uint32_t  RG_SX_DFM_RCCAL_DIS:  1;       /*!< Disable DFM RC calibration                                            */
           uint32_t             :  9;
      __IO uint32_t  RG_SX_RFCTRL_CH_10_8:  3;      /*!< Sx Integer Number, manual control                                     */
    } REG_SX1_b;                                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_SX2;                         /*!< REG_SX2                                                               */
    
    struct {
      __IO uint32_t  RG_SX_RFCTRL_F: 24;            /*!< Sx Fractional Number, manual control                                  */
      __IO uint32_t  RG_SX_RFCTRL_CH_7_0:  8;       /*!< Sx Integer Number, manual control                                     */
    } REG_SX2_b;                                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_SX3;                         /*!< REG_SX3                                                               */
    
    struct {
      __IO uint32_t  RG_SX_PCP_ISEL:  5;            /*!< Ppath Charge Pump Current Select(default 50uA)                        */
      __IO uint32_t  RG_SX_PCP_ISEL4:  1;           /*!< RG_SX_PCP_ISEL4                                                       */
      __IO uint32_t  RG_SX_PCP_ISEL8:  1;           /*!< RG_SX_PCP_ISEL8                                                       */
      __IO uint32_t  RG_SX_PCP_KPDOUB:  1;          /*!< Charge pump current double                                            */
      __IO uint32_t  RG_SX_ICP_ISEL:  4;            /*!< Ipath Charge Pump Current Select(default 12.5uA)                      */
      __IO uint32_t  RG_SX_ICP_ISEL8:  1;           /*!< ISEL8 for extra CP current                                            */
      __IO uint32_t  RG_SX_PFDSEL:  1;              /*!< Select PFD type                                                       */
      __IO uint32_t  RG_SX_PFD_SET:  1;             /*!< PFD Delay Select                                                      */
      __IO uint32_t  RG_SX_PFD_SET1:  1;            /*!< PFD Delay Select                                                      */
      __IO uint32_t  RG_SX_PFD_SET2:  1;            /*!< PFD Delay Select                                                      */
      __IO uint32_t  RG_SX_PFD_RST:  1;             /*!< Manual reset PFD                                                      */
      __IO uint32_t  RG_SX_PFD_VSEL:  2;            /*!< PFD internal vdd select                                               */
      __IO uint32_t  RG_SX_PFD_UP:  1;              /*!< Manual control VUP                                                    */
      __IO uint32_t  RG_SX_PFD_DN:  1;              /*!< Manual control VDN                                                    */
      __IO uint32_t  RG_SX_PFD_RST_MAN:  1;         /*!< Enable PFD reset manual control                                       */
      __IO uint32_t  RG_SX_PFD_REF_EDGE:  1;        /*!< Reference clock edge select , 1 for rising else for falling
                                                         edge                                                                  */
      __IO uint32_t  RG_SX_PFD_DIV_EDGE:  1;        /*!< Feedback clock edge select , 1 for rising else for falling edge       */
           uint32_t             :  1;
      __IO uint32_t  RG_SX_ILF_CSEL:  1;            /*!< Manual control ILF Cap                                                */
      __IO uint32_t  RG_SX_PLF_VTUNE_TEST:  1;      /*!< Vtune test                                                            */
      __IO uint32_t  RG_SX_PLF_VTUNE_EXT:  1;       /*!< Vtune external control                                                */
      __IO uint32_t  RG_SX_PLF_VTUNE_SEL:  1;       /*!< Select Vtune path                                                     */
    } REG_SX3_b;                                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_SX4;                         /*!< REG_SX4                                                               */
    
    struct {
      __IO uint32_t  RG_SX_VCO_ISEL:  4;            /*!< Vco Current Select (mux w/ [DA_SX_VCO_ISEL_V12D][RG_SX_VO_ISEL_MAN])  */
      __IO uint32_t  RG_SX_PREVDD:  4;              /*!< Prescal VDD Select                                                    */
      __IO uint32_t  RG_SX_PSCONTERVDD:  4;         /*!< Program &amp; swallow Counter VDD Select                              */
      __IO uint32_t  RG_SX_PRE_SDM_EDGE_V12D:  1;   /*!< RG_SX_PRE_SDM_EDGE_V12D                                               */
      __IO uint32_t  RG_SX_SUB_SEL:  7;             /*!< VCO Subband Select, manual control                                    */
           uint32_t             :  1;
      __IO uint32_t  RG_SX_RST_H_DIV:  1;           /*!< Divider Reset, manual                                                 */
      __IO uint32_t  RG_SX_SDM_EDGE:  1;            /*!< SDM Clock Edge Select(Default Raising edge)                           */
           uint32_t             :  4;
      __IO uint32_t  RG_SX_VCO_VCCBSEL:  3;         /*!< VCO class-c bias select                                               */
      __IO uint32_t  RG_SX_VCO_FC:  1;              /*!< VCO fast charge enable (default 0/off)                                */
    } REG_SX4_b;                                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_SX5;                         /*!< REG_SX5                                                               */
    
    struct {
      __IO uint32_t  RG_SX_VCO_VARBSEL1:  4;        /*!< VCO Varactor1 bias select                                             */
      __IO uint32_t  RG_SX_VCO_VARBSEL2:  4;        /*!< VCO Varactor2 bias select                                             */
      __IO uint32_t  RG_EN_SX_DITHER:  1;           /*!< RG_EN_SX_DITHER                                                       */
      __IO uint32_t  RG_SX_DITHER_WEIGHT:  2;       /*!< RG_SX_DITHER_WEIGHT[1:0]                                              */
      __IO uint32_t  RG_SX_MOD_ORDER:  2;           /*!< RG_SX_MOD_ORDER[1:0]                                                  */
    } REG_SX5_b;                                    /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_SX_VCO_AAC;                  /*!< REG_SX_VCO_AAC                                                        */
    
    struct {
      __IO uint32_t  RG_SX_VO_ISEL_MAN:  1;         /*!< enable manual select vco current                                      */
      __IO uint32_t  RG_VO_AAC_DIS:  1;             /*!< disable AAC calibration                                               */
           uint32_t             :  2;
      __IO uint32_t  RG_VO_AAC_TAR:  4;             /*!< AAC Target Select, 8 for 950mv                                        */
      __IO uint32_t  RG_VO_AAC_TEST_EN:  1;         /*!< Enable AAC Testing                                                    */
      __IO uint32_t  RG_VO_AAC_TEST_SEL:  1;        /*!< AAC test select                                                       */
           uint32_t             :  2;
      __IO uint32_t  RG_VO_AAC_INIT:  2;            /*!< AAC initialization time (default 10Tref)                              */
      __IO uint32_t  RG_VO_AAC_EVA_TS:  2;          /*!< AAC evaluation time (default 4Tref)                                   */
      __IO uint32_t  RG_VO_AAC_IMAX:  4;            /*!< AAC current start value                                               */
      __IO uint32_t  RG_VO_AAC_IOST:  2;            /*!< AAC current offset value                                              */
           uint32_t             :  2;
      __IO uint32_t  RG_VO_AAC_EN_MAN:  1;          /*!< Enable if manual control AAC EN                                       */
      __IO uint32_t  RG_VO_AAC_EN:  1;              /*!< AAC enable control                                                    */
      __IO uint32_t  RG_VO_AAC_EVA_MAN:  1;         /*!< Enable if manual control AAC EVA                                      */
      __IO uint32_t  RG_VO_AAC_EVA:  1;             /*!< AAC evaluation control                                                */
    } REG_SX_VCO_AAC_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_SX_SBCAL;                    /*!< REG_SX_SBCAL                                                          */
    
    struct {
      __IO uint32_t  RG_SX_SUB_SEL_MAN:  1;         /*!< manual set the VCO sub-band                                           */
      __IO uint32_t  RG_SX_SBCAL_AW:  1;            /*!< Stay in sub-band calibration state                                    */
      __IO uint32_t  RG_SX_SBCAL_RX_SIDE:  1;       /*!< FLO_RX=FTX-2M or FTX+2M                                               */
      __IO uint32_t  RG_SX_SBCAL_CT:  2;            /*!< SBCAL counting time                                                   */
      __IO uint32_t  RG_SX_SBCAL_WT:  1;            /*!< SBCAL initialize time                                                 */
      __IO uint32_t  RG_SX_SUB_C0P5_DIS:  1;        /*!< Manual disable 0.5 Cstep function                                     */
      __IO uint32_t  RG_SX_SBCAL_DIFFMIN:  1;       /*!< Choose if to use the diff_min algorithm                               */
           uint32_t             :  7;
      __IO uint32_t  RG_SX_SBCAL_NTARG_MAN:  1;     /*!< Enable manual set the sbcal target                                    */
      __IO uint32_t  RG_SX_SBCAL_NTARG: 15;         /*!< Sub-band Calibration Target Count                                     */
    } REG_SX_SBCAL_b;                               /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_DFM_LGCAL_1;                 /*!< REG_DFM_LGCAL_1                                                       */
    
    struct {
      __IO uint32_t  RG_DFM_PCP_ILGPOL1:  1;        /*!< First LGCAL polarity                                                  */
      __IO uint32_t  RG_DFM_PCP_ILG1:  3;           /*!< LGCAL1 current level , default 5uA                                    */
      __IO uint32_t  RG_DFM_PCP_ILGPOL2:  1;        /*!< Second LGCAL polarity                                                 */
      __IO uint32_t  RG_DFM_PCP_ILG2:  3;           /*!< LGCAL2 current level , default 5uA                                    */
      __IO uint32_t  RG_DFM_PCP_IOSTPOL:  1;        /*!< Nominal offset current polarity                                       */
      __IO uint32_t  RG_DFM_PCP_IOSTTX:  3;         /*!< Nominal PCP offset current level at TX mode                           */
      __IO uint32_t  RG_DFM_PCP_IOSTRX:  3;         /*!< Nominal PCP offset current level at RX mode                           */
      __IO uint32_t  RG_DFM_ICP_IOSTPOL:  1;        /*!< ICP offset current polarity                                           */
      __IO uint32_t  RG_DFM_ICP_IOSTTX:  3;         /*!< ICP offset current in TX mode                                         */
      __IO uint32_t  RG_DFM_ICP_IOSTRX:  3;         /*!< ICP offset current in RX mode                                         */
           uint32_t             :  1;
      __IO uint32_t  RG_DFM_ICP_ENT_TS:  3;         /*!< Type II settling time select , default 30us                           */
           uint32_t             :  1;
      __IO uint32_t  RG_DFM_ICP_ENT_MAN:  1;        /*!< Enable manual control the SX type                                     */
      __IO uint32_t  RG_DFM_ICP_ENT:  1;            /*!< SX type control register                                              */
           uint32_t             :  1;
      __IO uint32_t  RG_DFM_LGCAL_KPRAT:  2;        /*!< Set Nominal CP Current                                                */
    } REG_DFM_LGCAL_1_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_DFM_LGCAL_2;                 /*!< REG_DFM_LGCAL_2                                                       */
    
    struct {
      __IO uint32_t  RG_DFM_LGCAL_MAN:  1;          /*!< Enable manual control the LGCAL                                       */
      __IO uint32_t  RG_DFM_LGCAL_CT:  2;           /*!< LGCAL Counting Time (default <<@@@1304,csr_phy.txt/{main},1306,,0x0%csr_ph
                                                         y.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : 22us)                         */
      __IO uint32_t  RG_DFM_LGCAL1_AW:  1;          /*!< Stay in first loop gain calibration state                             */
      __IO uint32_t  RG_DFM_LGCAL2_AW:  1;          /*!< Stay in second loop gain calibration state                            */
           uint32_t             :  1;
      __IO uint32_t  RG_DFM_LGCAL_DNN: 12;          /*!< Manual Set the LGCAL Delta-N Nominal Value (defaule <<@@@1295,csr_phy.txt/
                                                         {main},1297,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>>
                                                         : d616)                                                               */
           uint32_t             :  1;
      __IO uint32_t  RG_DFM_LGCAL_KCAL: 13;         /*!< Manual Set the KCAL Value                                             */
    } REG_DFM_LGCAL_2_b;                            /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_DFM_RCCAL;                   /*!< REG_DFM_RCCAL                                                         */
    
    struct {
      __IO uint32_t  RG_DFM_RCCAL_MAN:  1;          /*!< Enable manual control the RCCAL                                       */
      __IO uint32_t  RG_DFM_RCCAL_OST:  4;          /*!< DFM RCCAL Count Offset (default -8)                                   */
           uint32_t             :  2;
      __IO uint32_t  RG_DFM_RCCAL_CNN:  9;          /*!< DFM RCCAL Count Number Nominal value (default <<@@@1317,csr_phy.txt/{main}
                                                         ,1319,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : d256)        */
           uint32_t             :  1;
      __IO uint32_t  RG_DFM_RCCAL_TI:  1;           /*!< Decide if do one time RC calibration after phy power on               */
           uint32_t             :  2;
      __IO uint32_t  RG_DFM_RCCAL_KRC: 12;          /*!< Manual Set the KRC Value                                              */
    } REG_DFM_RCCAL_b;                              /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_TRXFE;                       /*!< REG_TRXFE                                                             */
    
    struct {
      __IO uint32_t  RG_RX_GM_IDB:  1;              /*!< RX front end GM stage current double                                  */
      __IO uint32_t  RG_RX_GM_BIAS_V12D:  2;        /*!< Used for RXFE mixer GM <<@@@1342,csr_phy.txt/{main},1344,,0x0%csr_phy.txt/
                                                         {main}%,_STRUCT_,_HIER_,R/W,@>> : RG_RX_GM_BIAS_V12D[0]               */
           uint32_t             :  1;
      __IO uint32_t  RG_EN_RX_RSSI_COMP:  1;        /*!< RX RSSI COMP Control                                                  */
           uint32_t             :  3;
      __IO uint32_t  RG_TX_TSSI_BIAS:  2;           /*!< Used for TSSI Bias Setting                                            */
      __IO uint32_t  RG_TX_PA_CAS:  3;              /*!< TX PA Cascode Bias                                                    */
           uint32_t             :  4;
      __IO uint32_t  RG_RX_RCCAL_MAN:  1;           /*!< Manual set CTUNE value                                                */
           uint32_t             :  2;
      __IO uint32_t  RG_RX_RCCAL_CTUNE:  4;         /*!< RX CTUNE SET                                                          */
    } REG_TRXFE_b;                                  /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  REG_TXGAIN;                      /*!< REG_TXGAIN                                                            */
    
    struct {
      __IO uint32_t  RG_TX_PAGAIN3_G2:  4;          /*!< PA gain setting for RF_PWR=<11>                                       */
      __IO uint32_t  RG_TX_PAGAIN3_G1:  4;          /*!< PA driver setting for RF_PWR=<11>                                     */
      __IO uint32_t  RG_TX_PAGAIN2_G2:  4;          /*!< PA gain setting for RF_PWR=<10>                                       */
      __IO uint32_t  RG_TX_PAGAIN2_G1:  4;          /*!< PA driver setting for RF_PWR=<10>                                     */
      __IO uint32_t  RG_TX_PAGAIN1_G2:  4;          /*!< PA gain setting for RF_PWR=<01>                                       */
      __IO uint32_t  RG_TX_PAGAIN1_G1:  4;          /*!< PA driver setting for RF_PWR=<01>                                     */
      __IO uint32_t  RG_TX_PAGAIN0_G2:  4;          /*!< PA gain setting for RF_PWR=<00>                                       */
      __IO uint32_t  RG_TX_PAGAIN0_G1:  4;          /*!< PA driver setting for RF_PWR=<00>                                     */
    } REG_TXGAIN_b;                                 /*!< BitSize                                                               */
  };
  __IO uint32_t  TRX_AND_SX_DUMMY_REGISTERS;        /*!< TRX_and_SX_Dummy_Registers                                            */
  
  union {
    __IO uint32_t  MISCELLANEOUS_REGISTER;          /*!< Miscellaneous_Register                                                */
    
    struct {
      __IO uint32_t  RG_TXC_SETUPTIME:  4;          /*!< Setup time for TX change-channel mode, sx_en to phy_tx_ip time
                                                         TX_SETUPTIME1+TX_SETUPTIME2+TX_TXC_SETUPTIME [00]0uS, [01]10uS,
                                                          ...,[07]70uS,...,[15]150uS                                           */
      __IO uint32_t  RG_TXC_STARTUPTIME:  4;        /*!< Setup time for TX change-channel mode; TX_STARTUPTIME+TXC_STARTUPTIME
                                                         [00]0uS, [01]10uS, ...,[07]70uS,...,[15]150uS                         */
      __IO uint32_t  RG_RXC_STARTUPTIME:  4;        /*!< Setup time for RX change-channel mode; RX_STARTUPTIME+RXC_STARTUPTIME
                                                         [00]0uS, [01]10uS, ...,[07]70uS,...,[15]150uS                         */
    } MISCELLANEOUS_REGISTER_b;                     /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  READ_ONLY_FLAGS_1;               /*!< Read_Only_Flags_1                                                     */
    
    struct {
      __I  uint32_t  DB_RX_RCCAL_CTUNE:  4;         /*!< RX RCCAL CTUNE read out                                               */
      __I  uint32_t  AD_TX_TSSI_OUT:  1;            /*!< TSSI comparator output                                                */
      __I  uint32_t  AD_RX_COMP_MCU_OUT0:  1;       /*!< To RSSI recorder; obsolete                                            */
      __I  uint32_t  AD_RX_COMP_MCU_OUT1:  1;       /*!< To RSSI recorder; obsolete                                            */
      __I  uint32_t  AD_RX_COMP_BB_OUT:  1;         /*!< To Register table and hard-wire output                                */
           uint32_t             :  1;
      __I  uint32_t  DB_SX_VO_AAC_COMPOUT:  1;      /*!< Read out VO AAC compout                                               */
      __I  uint32_t  DB_SX_VO_ISEL:  4;             /*!< AAC current readout                                                   */
           uint32_t             : 14;
      __I  uint32_t  AD_CKT_VERSION:  4;            /*!< Hard-wired radio version readout                                      */
    } READ_ONLY_FLAGS_1_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  READ_ONLY_FLAGS_2;               /*!< Read_Only_Flags_2                                                     */
    
    struct {
      __I  uint32_t  DB_DA_SX_SUB_SEL:  7;          /*!< VCO Sub-band read out                                                 */
           uint32_t             :  1;
      __I  uint32_t  DB_SX_SBCAL_NCOUNT: 15;        /*!< Sub-band calibration minimum delta count number                       */
      __I  uint32_t  DB_DFM_RCCAL_CN:  9;           /*!< RC calibration count number                                           */
    } READ_ONLY_FLAGS_2_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  READ_ONLY_FLAGS_3;               /*!< Read_Only_Flags_3                                                     */
    
    struct {
      __I  uint32_t  DB_DFM_LGCAL_N1: 18;           /*!< First loop gain calibration count number                              */
           uint32_t             :  1;
      __I  uint32_t  DB_DFM_LGCAL_KCAL: 13;         /*!< Pre-distortion filter Kcal value                                      */
    } READ_ONLY_FLAGS_3_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  READ_ONLY_FLAGS_4;               /*!< Read_Only_Flags_4                                                     */
    
    struct {
      __I  uint32_t  DB_DFM_LGCAL_N2: 18;           /*!< Second loop gain calibration count number                             */
           uint32_t             :  2;
      __I  uint32_t  DB_DFM_RCCAL_KRC: 12;          /*!< Pre-distortion filter Krc value                                       */
    } READ_ONLY_FLAGS_4_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  READ_ONLY_FLAGS_5;               /*!< Read_Only_Flags_5                                                     */
    
    struct {
      __I  uint32_t  DB_SX_SBCAL_NTARG: 15;         /*!< Sub-band Calibration target count number read out                     */
      __I  uint32_t  DB_SX_FDB_PHASESWAP:  1;       /*!< Crystal input duty cycle (0 <<@@@1446,csr_phy.txt/{main},1448,,0x0%csr_phy
                                                         .txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : <50% 1 <<@@@1446,csr_phy.txt/{main},
                                                         1448,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : >50%)         */
      __I  uint32_t  DB_SX_FDB_CDELAY:  5;          /*!< DB_SX_FDB_CDELAY[4:0]                                                 */
           uint32_t             :  3;
      __I  uint32_t  DB_SX_FDB_FDELAY:  4;          /*!< FDB calibration code from FSM (DA_SX_FDB_FDELAY output)               */
    } READ_ONLY_FLAGS_5_b;                          /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  CTADC_ADC2;                      /*!< CTADC_ADC2                                                            */
    
    struct {
      __IO uint32_t  RG_ADC2_CK_64_32_SEL:  1;      /*!< ADC2 64/32 M select                                                   */
      __IO uint32_t  RG_ADC2_EXT_CK_EN:  1;         /*!< ADC2 External clock select                                            */
      __IO uint32_t  RG_RESET_CTADC:  1;            /*!< CTADC reset signal , also used to reset ADC2 clock DFF                */
      __IO uint32_t  RG_ADC2_CLOCK_EDGE:  1;        /*!< Select ADC2 clock edge                                                */
      __IO uint32_t  RG_EN_ADC2_EXTVOL:  1;         /*!< Enable ADC2 External voltage measurement mode                         */
      __IO uint32_t  RG_ADC2_SCALING:  2;           /*!< 00;measure 3.6 to 1.2v / 01;measure 1.2 to 0.3v / 10 ; measure
                                                         0.7 to 0.2v                                                           */
      __IO uint32_t  RG_EN_ADC2_VBATVOL:  1;        /*!< Enable ADC2 internal VBAT voltage measurement mode                    */
      __IO uint32_t  RG_EN_RSSI :  1;               /*!< ADC2 Input Source <<@@@1489,csr_phy.txt/{main},1493,,0x0%csr_phy.txt/{main
                                                         }%,_STRUCT_,_HIER_,R/W,@>> : RSSI                                     */
      __IO uint32_t  RG_EN_TEMP :  1;               /*!< ADC2 Input Source <<@@@1486,csr_phy.txt/{main},1490,,0x0%csr_phy.txt/{main
                                                         }%,_STRUCT_,_HIER_,R/W,@>> : Temperature                              */
      __IO uint32_t  RG_ADC2_DA_MAN:  1;            /*!< Set DA_EN_XXX_V12D to manual, DB_ADC2_DOUT_RSSI=AD_ADC2_DOUT_V12D,
                                                         DB_ADC2_RSSI_TSTMP[7:0]=16kHz Timer                                   */
      __IO uint32_t  RG_ADC2_DIG_EN:  1;            /*!< Enable/Reset ADC2 Digital Control                                     */
      __IO uint32_t  RG_ADC2_AUTO_TRIG_SW:  1;      /*!< Auto mode triggered by 0 <<@@@1477,csr_phy.txt/{main},1479,,0x0%csr_phy.tx
                                                         t/{main}%,_STRUCT_,_HIER_,R/W,@>> : rx_accessed, 1 <<@@@1477,csr_phy.txt/{m
                                                         ain},1479,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> :
                                                         rf_rx_rdy                                                             */
      __IO uint32_t  RG_ADC2_SETUP_DLY:  8;         /*!< Initial setup time delay; Unit=1us                                    */
           uint32_t             :  1;
      __IO uint32_t  RG_ADC2_CONT:  1;              /*!< For continuous read out ADC2 value                                    */
      __IO uint32_t  RG_ADC2_MAN_PHY_EN:  1;        /*!< For manually enable PHY ADC2 relative setting                         */
           uint32_t             :  1;
      __IO uint32_t  RG_ADC2_COARSE:  2;            /*!< ADC2 bias current coarse tuning (default I*1.5, 1.25, 1, 0.75)        */
      __IO uint32_t  RG_ADC2_QUANTIZER:  2;         /*!< ADC2 quantizer bias current fine tuning (default I*1.5, 1.25,
                                                         1, 0.75)                                                              */
      __IO uint32_t  RG_EN_ADC2 :  1;               /*!< ADC2 enable signal; manual                                            */
      __IO uint32_t  RG_EN_ADC2_CLK:  1;            /*!< ADC2 clock enable signal (unused)                                     */
      __IO uint32_t  RG_RESET_ADC2:  1;             /*!< ADC2 reset signal; manual                                             */
    } CTADC_ADC2_b;                                 /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  _32KRC_COUNTER_;                 /*!< _32KRC_COUNTER_                                                       */
    
    struct {
      __IO uint32_t  RG_EN_RCCOUNT:  1;             /*!< Enable RC counter macro                                               */
           uint32_t             :  1;
      __IO uint32_t  RG_COUNT_MODE:  2;             /*!< 00 <<@@@1531,csr_phy.txt/{main},1535,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HI
                                                         ER_,R/W,@>> : 32KRC vs. 64M, 1 shot; 10 <<@@@1531,csr_phy.txt/{main},1535,,
                                                         0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : 32KRC vs. 64M,
                                                         continuous 01 <<@@@1532,csr_phy.txt/{main},1536,,0x0%csr_phy.txt/{main}%,_
                                                         STRUCT_,_HIER_,R/W,@>> : 32MRC vs 64M, 1 shot; 11 <<@@@1532,csr_phy.txt/{ma
                                                         in},1536,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : 32MRC
                                                          vs. 64M, continuous                                                  */
      __IO uint32_t  RG_COUNT_BEGIN:  1;            /*!< RTL auto clear by count_begin_clr 1-shot count, set to 1 to
                                                         begin count; macro reset bit to zero once complete                    */
           uint32_t             :  1;
      __IO uint32_t  RG_ADC2_AVERAGE:  2;           /*!< ADC2 register average setting(default 10 for 64 samples, 00
                                                         <<@@@1524,csr_phy.txt/{main},1528,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_
                                                         ,R/W,@>> : 1sample, 01 <<@@@1524,csr_phy.txt/{main},1528,,0x0%csr_phy.txt/{
                                                         main}%,_STRUCT_,_HIER_,R/W,@>> : 32samples, 11 <<@@@1524,csr_phy.txt/{main}
                                                         ,1528,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : 128samples)  */
           uint32_t             :  6;
      __IO uint32_t  RG_CNTCLK_SEL:  2;             /*!< Count clock frequency selection; d0 <<@@@1521,csr_phy.txt/{main},1525,,0x0
                                                         %csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : 64MHz, d1 <<@@@1521,csr_phy.
                                                         txt/{main},1525,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>>
                                                         : 32MHz (/2), d2 <<@@@1521,csr_phy.txt/{main},1525,,0x0%csr_phy.txt/{main}
                                                         %,_STRUCT_,_HIER_,R/W,@>> : 16MHz (/4), d3 <<@@@1521,csr_phy.txt/{main},152
                                                         5,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : 8 MHz (/8)       */
      __IO uint32_t  RG_RC_COUNT:  6;               /*!< Number of RC32K clocks counted <<@@@1517,csr_phy.txt/{main},1521,,0x0%csr_
                                                         phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : RG_RC_COUNT[5:0]+1=1~64
                                                         Number of RC32M clocks counted <<@@@1518,csr_phy.txt/{main},1522,,0x0%csr_
                                                         phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : (RG_RC_COUNT[3:0]+1)*128    */
           uint32_t             :  6;
      __IO uint32_t  RG_32KRC_TRIGGER:  1;          /*!< RC32K count trigger 0 <<@@@1514,csr_phy.txt/{main},1518,,0x0%csr_phy.txt/{
                                                         main}%,_STRUCT_,_HIER_,R/W,@>> : rising edge, 1 <<@@@1514,csr_phy.txt/{main
                                                         },1518,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : falling
                                                         edge                                                                  */
    } _32KRC_COUNTER__b;                            /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  RC_COUNTER_OUT;                  /*!< RC_COUNTER_OUT                                                        */
    
    struct {
      __I  uint32_t  RG_RC_COUNT_OUT: 18;           /*!< Starts at 1 Updates at RG_32KRC_TRIGGER edge Keep updating when
                                                         in continuous mode Not updated when RG_COUNT_BEGIN==0 and in
                                                          1-shot mode                                                          */
           uint32_t             : 11;
      __I  uint32_t  DB_EN_RX_RSSI:  1;             /*!< Debug DA_EN_RX_RSSI_V12D Status                                       */
      __I  uint32_t  DB_EN_ADC2_VBATVOL:  1;        /*!< Debug DA_EN_ADC2_VBATVOL_V12D Status                                  */
      __I  uint32_t  DB_EN_ADC2_EXTVOL:  1;         /*!< Debug DA_EN_ADC2_EXTVOL_V12D Status                                   */
    } RC_COUNTER_OUT_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  FDB;                             /*!< FDB                                                                   */
    
    struct {
      __IO uint32_t  RG_FDB_RDELAYF:  2;            /*!< Fast Settling time 00 <<@@@1584,csr_phy.txt/{main},1588,,0x0%csr_phy.txt/{
                                                         main}%,_STRUCT_,_HIER_,R/W,@>> : 1u 01 <<@@@1584,csr_phy.txt/{main},1588,,0
                                                         x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : 2u 10 <<@@@1584,csr_phy.tx
                                                         t/{main},1588,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>>
                                                         : 4u 11 <<@@@1584,csr_phy.txt/{main},1588,,0x0%csr_phy.txt/{main}%,_STRUCT
                                                         _,_HIER_,R/W,@>> : 8u                                                 */
      __IO uint32_t  RG_FDB_RDELAYS:  2;            /*!< Slow Settling time 00 <<@@@1580,csr_phy.txt/{main},1584,,0x0%csr_phy.txt/{
                                                         main}%,_STRUCT_,_HIER_,R/W,@>> : 1u 01 <<@@@1580,csr_phy.txt/{main},1584,,0
                                                         x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>> : 2u 10 <<@@@1580,csr_phy.tx
                                                         t/{main},1584,,0x0%csr_phy.txt/{main}%,_STRUCT_,_HIER_,R/W,@>>
                                                         : 4u 11 <<@@@1580,csr_phy.txt/{main},1584,,0x0%csr_phy.txt/{main}%,_STRUCT
                                                         _,_HIER_,R/W,@>> : 8u                                                 */
      __IO uint32_t  RG_SX_FDB_CDELAY:  5;          /*!< FDB CDELAY code, manual setting; mux w/ FSM pins from PHY             */
      __IO uint32_t  RG_EN_FDB_CDELAY_MUAL:  1;     /*!< Set to manual control                                                 */
           uint32_t             :  1;
      __IO uint32_t  RG_SX_FDB_FDELAY:  4;          /*!< FDB FDELAY code, manual setting; mux w/ FSM pins from PHY             */
      __IO uint32_t  RG_EN_FDB_FDELAY_MUAL:  1;     /*!< Set to manual control                                                 */
           uint32_t             :  1;
      __IO uint32_t  RG_SX_FDB_PHASESWAP:  1;       /*!< 8/7 added, manual setting, mux w/ FSM pins from PHY                   */
      __IO uint32_t  RG_EN_FDB_PHASESWAP_MUAL:  1;  /*!< Set to manual control                                                 */
           uint32_t             :  1;
      __IO uint32_t  RG_SX_FDB_HLDUTY_SEL:  1;      /*!< FDB H/L duty selection, manual setting, mux w/ FSM pins from
                                                         PHY                                                                   */
      __IO uint32_t  RG_EN_FDB_HLDUTY_SEL_MUAL:  1; /*!< Set to manual control                                                 */
    } FDB_b;                                        /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  SCA_SETTING;                     /*!< SCA_Setting                                                           */
    
    struct {
      __IO uint32_t  RG_TX_XFMR_SCA:  3;            /*!< Transformer TX mode primary cap setting                               */
           uint32_t             :  1;
      __IO uint32_t  RG_RX_XFMR_SCA:  3;            /*!< Transformer RX mode primary cap setting                               */
           uint32_t             :  1;
      __IO uint32_t  RG_XFMR_MANUAL:  1;            /*!< Set transformer to manual mode                                        */
           uint32_t             :  1;
      __IO uint32_t  RG_TRX_SCA :  3;               /*!< Set the TRX SCA manualy if RG_XFMR_MANUAL=1                           */
    } SCA_SETTING_b;                                /*!< BitSize                                                               */
  };
  
  union {
    __I  uint32_t  RSSI_NON_RSSI_TSTMP;             /*!< RSSI_NON_RSSI_TSTMP                                                   */
    
    struct {
      __I  uint32_t  DB_ADC2_RSSI_TSTMP:  8;        /*!< RSSI Time Stamp (16kHz)                                               */
      __I  uint32_t  DB_ADC2_DOUT_RSSI:  8;         /*!< RSSI Output                                                           */
      __I  uint32_t  DB_ADC2_NON_RSSI_TSTMP:  8;    /*!< Non-RSSI Time Stamp (16kHz)                                           */
      __I  uint32_t  DB_ADC2_DOUT_NON_RSSI:  8;     /*!< Non-RSSI Output                                                       */
    } RSSI_NON_RSSI_TSTMP_b;                        /*!< BitSize                                                               */
  };
  __I  uint32_t  RESERVED7[207];
  
  union {
    __IO uint32_t  DIGITAL_ADD_ON;                  /*!< Digital_Add_on                                                        */
    
    struct {
           uint32_t             :  2;
      __IO uint32_t  RG_RCCAL_CNT_OFST:  3;         /*!< RCCAL counter offset 0~4                                              */
    } DIGITAL_ADD_ON_b;                             /*!< BitSize                                                               */
  };
  
  union {
    __IO uint32_t  RF_TRX_EN_RO;                    /*!< RF_TRX_EN_RO                                                          */
    
    struct {
      __I  uint32_t  DB_RF_TRXEN_FSM: 12;           /*!< DB_RF_TRXEN_FSM[11:0]                                                 */
      __I  uint32_t  DB_P2RF_TX_ENA:  1;            /*!< DB_P2RF_TX_ENA                                                        */
      __I  uint32_t  DB_P2RF_RX_ENA:  1;            /*!< DB_P2RF_RX_ENA                                                        */
           uint32_t             : 17;
      __IO uint32_t  RG_RF_TRXEN_FSM_RO_EN:  1;     /*!< RG_RF_TRXEN_FSM_RO_EN                                                 */
    } RF_TRX_EN_RO_b;                               /*!< BitSize                                                               */
  };
} CONDOR_CSR_PHY_Type;


/* --------------------  End of section using anonymous unions  ------------------- */
#if defined(__CC_ARM)
  #pragma pop
#elif defined(__ICCARM__)
  /* leave anonymous unions enabled */
#elif defined(__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined(__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined(__TASKING__)
  #pragma warning restore
#else
  #warning Not supported compiler type
#endif



/* ================================================================================ */
/* ================        struct 'SYS_REG' Position & Mask        ================ */
/* ================================================================================ */


/* -----------------------------  SYS_REG_BRG_SW_RST  ----------------------------- */
#define SYS_REG_BRG_SW_RST_MCU_SW_RST_Pos     1                                                       /*!< SYS_REG BRG_SW_RST: MCU_SW_RST Position */
#define SYS_REG_BRG_SW_RST_MCU_SW_RST_Msk     (0x01UL << SYS_REG_BRG_SW_RST_MCU_SW_RST_Pos)           /*!< SYS_REG BRG_SW_RST: MCU_SW_RST Mask     */
#define SYS_REG_BRG_SW_RST_SYS_ALL_RST_Pos    2                                                       /*!< SYS_REG BRG_SW_RST: SYS_ALL_RST Position */
#define SYS_REG_BRG_SW_RST_SYS_ALL_RST_Msk    (0x01UL << SYS_REG_BRG_SW_RST_SYS_ALL_RST_Pos)          /*!< SYS_REG BRG_SW_RST: SYS_ALL_RST Mask    */
#define SYS_REG_BRG_SW_RST_SPI_SLV_SW_RST_Pos 3                                                       /*!< SYS_REG BRG_SW_RST: SPI_SLV_SW_RST Position */
#define SYS_REG_BRG_SW_RST_SPI_SLV_SW_RST_Msk (0x01UL << SYS_REG_BRG_SW_RST_SPI_SLV_SW_RST_Pos)       /*!< SYS_REG BRG_SW_RST: SPI_SLV_SW_RST Mask */
#define SYS_REG_BRG_SW_RST_PHY_SW_RST_Pos     4                                                       /*!< SYS_REG BRG_SW_RST: PHY_SW_RST Position */
#define SYS_REG_BRG_SW_RST_PHY_SW_RST_Msk     (0x01UL << SYS_REG_BRG_SW_RST_PHY_SW_RST_Pos)           /*!< SYS_REG BRG_SW_RST: PHY_SW_RST Mask     */
#define SYS_REG_BRG_SW_RST_EFS_TOP_SW_RST_Pos 5                                                       /*!< SYS_REG BRG_SW_RST: EFS_TOP_SW_RST Position */
#define SYS_REG_BRG_SW_RST_EFS_TOP_SW_RST_Msk (0x01UL << SYS_REG_BRG_SW_RST_EFS_TOP_SW_RST_Pos)       /*!< SYS_REG BRG_SW_RST: EFS_TOP_SW_RST Mask */
#define SYS_REG_BRG_SW_RST_LL_REG_SW_RST_Pos  6                                                       /*!< SYS_REG BRG_SW_RST: LL_REG_SW_RST Position */
#define SYS_REG_BRG_SW_RST_LL_REG_SW_RST_Msk  (0x01UL << SYS_REG_BRG_SW_RST_LL_REG_SW_RST_Pos)        /*!< SYS_REG BRG_SW_RST: LL_REG_SW_RST Mask  */
#define SYS_REG_BRG_SW_RST_LL_TOP_SW_RST_Pos  7                                                       /*!< SYS_REG BRG_SW_RST: LL_TOP_SW_RST Position */
#define SYS_REG_BRG_SW_RST_LL_TOP_SW_RST_Msk  (0x01UL << SYS_REG_BRG_SW_RST_LL_TOP_SW_RST_Pos)        /*!< SYS_REG BRG_SW_RST: LL_TOP_SW_RST Mask  */
#define SYS_REG_BRG_SW_RST_MS0TMR_SW_RST_Pos  8                                                       /*!< SYS_REG BRG_SW_RST: MS0TMR_SW_RST Position */
#define SYS_REG_BRG_SW_RST_MS0TMR_SW_RST_Msk  (0x01UL << SYS_REG_BRG_SW_RST_MS0TMR_SW_RST_Pos)        /*!< SYS_REG BRG_SW_RST: MS0TMR_SW_RST Mask  */
#define SYS_REG_BRG_SW_RST_MS1TMR_SW_RST_Pos  9                                                       /*!< SYS_REG BRG_SW_RST: MS1TMR_SW_RST Position */
#define SYS_REG_BRG_SW_RST_MS1TMR_SW_RST_Msk  (0x01UL << SYS_REG_BRG_SW_RST_MS1TMR_SW_RST_Pos)        /*!< SYS_REG BRG_SW_RST: MS1TMR_SW_RST Mask  */
#define SYS_REG_BRG_SW_RST_INT_CTRL_SW_RST_Pos 10                                                     /*!< SYS_REG BRG_SW_RST: INT_CTRL_SW_RST Position */
#define SYS_REG_BRG_SW_RST_INT_CTRL_SW_RST_Msk (0x01UL << SYS_REG_BRG_SW_RST_INT_CTRL_SW_RST_Pos)     /*!< SYS_REG BRG_SW_RST: INT_CTRL_SW_RST Mask */
#define SYS_REG_BRG_SW_RST_WDT_SW_RST_Pos     11                                                      /*!< SYS_REG BRG_SW_RST: WDT_SW_RST Position */
#define SYS_REG_BRG_SW_RST_WDT_SW_RST_Msk     (0x01UL << SYS_REG_BRG_SW_RST_WDT_SW_RST_Pos)           /*!< SYS_REG BRG_SW_RST: WDT_SW_RST Mask     */
#define SYS_REG_BRG_SW_RST_ROM_SW_RST_Pos     12                                                      /*!< SYS_REG BRG_SW_RST: ROM_SW_RST Position */
#define SYS_REG_BRG_SW_RST_ROM_SW_RST_Msk     (0x01UL << SYS_REG_BRG_SW_RST_ROM_SW_RST_Pos)           /*!< SYS_REG BRG_SW_RST: ROM_SW_RST Mask     */
#define SYS_REG_BRG_SW_RST_INT_REG_SW_RST_Pos 13                                                      /*!< SYS_REG BRG_SW_RST: INT_REG_SW_RST Position */
#define SYS_REG_BRG_SW_RST_INT_REG_SW_RST_Msk (0x01UL << SYS_REG_BRG_SW_RST_INT_REG_SW_RST_Pos)       /*!< SYS_REG BRG_SW_RST: INT_REG_SW_RST Mask */
#define SYS_REG_BRG_SW_RST_SPI_EXTFLASH_REG_SW_RST_Pos 14                                             /*!< SYS_REG BRG_SW_RST: SPI_EXTFLASH_REG_SW_RST Position */
#define SYS_REG_BRG_SW_RST_SPI_EXTFLASH_REG_SW_RST_Msk (0x01UL << SYS_REG_BRG_SW_RST_SPI_EXTFLASH_REG_SW_RST_Pos)/*!< SYS_REG BRG_SW_RST: SPI_EXTFLASH_REG_SW_RST Mask */
#define SYS_REG_BRG_SW_RST_SPI_EXTFLASH_SW_RST_Pos 15                                                 /*!< SYS_REG BRG_SW_RST: SPI_EXTFLASH_SW_RST Position */
#define SYS_REG_BRG_SW_RST_SPI_EXTFLASH_SW_RST_Msk (0x01UL << SYS_REG_BRG_SW_RST_SPI_EXTFLASH_SW_RST_Pos)/*!< SYS_REG BRG_SW_RST: SPI_EXTFLASH_SW_RST Mask */
#define SYS_REG_BRG_SW_RST_TAS_SW_RST_Pos     16                                                      /*!< SYS_REG BRG_SW_RST: TAS_SW_RST Position */
#define SYS_REG_BRG_SW_RST_TAS_SW_RST_Msk     (0x01UL << SYS_REG_BRG_SW_RST_TAS_SW_RST_Pos)           /*!< SYS_REG BRG_SW_RST: TAS_SW_RST Mask     */
#define SYS_REG_BRG_SW_RST_AES_TOP_SW_RST_Pos 17                                                      /*!< SYS_REG BRG_SW_RST: AES_TOP_SW_RST Position */
#define SYS_REG_BRG_SW_RST_AES_TOP_SW_RST_Msk (0x01UL << SYS_REG_BRG_SW_RST_AES_TOP_SW_RST_Pos)       /*!< SYS_REG BRG_SW_RST: AES_TOP_SW_RST Mask */
#define SYS_REG_BRG_SW_RST_DMA_SW_RST_Pos     18                                                      /*!< SYS_REG BRG_SW_RST: DMA_SW_RST Position */
#define SYS_REG_BRG_SW_RST_DMA_SW_RST_Msk     (0x01UL << SYS_REG_BRG_SW_RST_DMA_SW_RST_Pos)           /*!< SYS_REG BRG_SW_RST: DMA_SW_RST Mask     */
#define SYS_REG_BRG_SW_RST_DBG_UART_REG_SW_RST_Pos 19                                                 /*!< SYS_REG BRG_SW_RST: DBG_UART_REG_SW_RST Position */
#define SYS_REG_BRG_SW_RST_DBG_UART_REG_SW_RST_Msk (0x01UL << SYS_REG_BRG_SW_RST_DBG_UART_REG_SW_RST_Pos)/*!< SYS_REG BRG_SW_RST: DBG_UART_REG_SW_RST Mask */
#define SYS_REG_BRG_SW_RST_ICOM_UART_REG_SW_RST_Pos 20                                                /*!< SYS_REG BRG_SW_RST: ICOM_UART_REG_SW_RST Position */
#define SYS_REG_BRG_SW_RST_ICOM_UART_REG_SW_RST_Msk (0x01UL << SYS_REG_BRG_SW_RST_ICOM_UART_REG_SW_RST_Pos)/*!< SYS_REG BRG_SW_RST: ICOM_UART_REG_SW_RST Mask */
#define SYS_REG_BRG_SW_RST_DAT_UART_REG_SW_RST_Pos 21                                                 /*!< SYS_REG BRG_SW_RST: DAT_UART_REG_SW_RST Position */
#define SYS_REG_BRG_SW_RST_DAT_UART_REG_SW_RST_Msk (0x01UL << SYS_REG_BRG_SW_RST_DAT_UART_REG_SW_RST_Pos)/*!< SYS_REG BRG_SW_RST: DAT_UART_REG_SW_RST Mask */
#define SYS_REG_BRG_SW_RST_US0TMR_SW_RST_Pos  22                                                      /*!< SYS_REG BRG_SW_RST: US0TMR_SW_RST Position */
#define SYS_REG_BRG_SW_RST_US0TMR_SW_RST_Msk  (0x01UL << SYS_REG_BRG_SW_RST_US0TMR_SW_RST_Pos)        /*!< SYS_REG BRG_SW_RST: US0TMR_SW_RST Mask  */
#define SYS_REG_BRG_SW_RST_US1TMR_SW_RST_Pos  23                                                      /*!< SYS_REG BRG_SW_RST: US1TMR_SW_RST Position */
#define SYS_REG_BRG_SW_RST_US1TMR_SW_RST_Msk  (0x01UL << SYS_REG_BRG_SW_RST_US1TMR_SW_RST_Pos)        /*!< SYS_REG BRG_SW_RST: US1TMR_SW_RST Mask  */
#define SYS_REG_BRG_SW_RST_SPIM_SW_RST_Pos    24                                                      /*!< SYS_REG BRG_SW_RST: SPIM_SW_RST Position */
#define SYS_REG_BRG_SW_RST_SPIM_SW_RST_Msk    (0x01UL << SYS_REG_BRG_SW_RST_SPIM_SW_RST_Pos)          /*!< SYS_REG BRG_SW_RST: SPIM_SW_RST Mask    */
#define SYS_REG_BRG_SW_RST_SPIM_REG_SW_RST_Pos 25                                                     /*!< SYS_REG BRG_SW_RST: SPIM_REG_SW_RST Position */
#define SYS_REG_BRG_SW_RST_SPIM_REG_SW_RST_Msk (0x01UL << SYS_REG_BRG_SW_RST_SPIM_REG_SW_RST_Pos)     /*!< SYS_REG BRG_SW_RST: SPIM_REG_SW_RST Mask */
#define SYS_REG_BRG_SW_RST_I2CM_SW_RST_Pos    26                                                      /*!< SYS_REG BRG_SW_RST: I2CM_SW_RST Position */
#define SYS_REG_BRG_SW_RST_I2CM_SW_RST_Msk    (0x01UL << SYS_REG_BRG_SW_RST_I2CM_SW_RST_Pos)          /*!< SYS_REG BRG_SW_RST: I2CM_SW_RST Mask    */
#define SYS_REG_BRG_SW_RST_APP_ROM_SW_RST_Pos 27                                                      /*!< SYS_REG BRG_SW_RST: APP_ROM_SW_RST Position */
#define SYS_REG_BRG_SW_RST_APP_ROM_SW_RST_Msk (0x01UL << SYS_REG_BRG_SW_RST_APP_ROM_SW_RST_Pos)       /*!< SYS_REG BRG_SW_RST: APP_ROM_SW_RST Mask */
#define SYS_REG_BRG_SW_RST_LFSR_SW_RST_Pos    28                                                      /*!< SYS_REG BRG_SW_RST: LFSR_SW_RST Position */
#define SYS_REG_BRG_SW_RST_LFSR_SW_RST_Msk    (0x01UL << SYS_REG_BRG_SW_RST_LFSR_SW_RST_Pos)          /*!< SYS_REG BRG_SW_RST: LFSR_SW_RST Mask    */
#define SYS_REG_BRG_SW_RST_PWM_SW_RST_Pos     29                                                      /*!< SYS_REG BRG_SW_RST: PWM_SW_RST Position */
#define SYS_REG_BRG_SW_RST_PWM_SW_RST_Msk     (0x01UL << SYS_REG_BRG_SW_RST_PWM_SW_RST_Pos)           /*!< SYS_REG BRG_SW_RST: PWM_SW_RST Mask     */
#define SYS_REG_BRG_SW_RST_REMAP_ICE_SW_RST_Pos 30                                                    /*!< SYS_REG BRG_SW_RST: REMAP_ICE_SW_RST Position */
#define SYS_REG_BRG_SW_RST_REMAP_ICE_SW_RST_Msk (0x01UL << SYS_REG_BRG_SW_RST_REMAP_ICE_SW_RST_Pos)   /*!< SYS_REG BRG_SW_RST: REMAP_ICE_SW_RST Mask */

/* --------------------------------  SYS_REG_BOOT  -------------------------------- */
#define SYS_REG_BOOT_ROM_SEL_Pos              16                                                      /*!< SYS_REG BOOT: ROM_SEL Position          */
#define SYS_REG_BOOT_ROM_SEL_Msk              (0x01UL << SYS_REG_BOOT_ROM_SEL_Pos)                    /*!< SYS_REG BOOT: ROM_SEL Mask              */
#define SYS_REG_BOOT_UART_SEL_Pos             17                                                      /*!< SYS_REG BOOT: UART_SEL Position         */
#define SYS_REG_BOOT_UART_SEL_Msk             (0x01UL << SYS_REG_BOOT_UART_SEL_Pos)                   /*!< SYS_REG BOOT: UART_SEL Mask             */
#define SYS_REG_BOOT_SPI_SEL_Pos              18                                                      /*!< SYS_REG BOOT: SPI_SEL Position          */
#define SYS_REG_BOOT_SPI_SEL_Msk              (0x01UL << SYS_REG_BOOT_SPI_SEL_Pos)                    /*!< SYS_REG BOOT: SPI_SEL Mask              */
#define SYS_REG_BOOT_SRAM_SEL_Pos             19                                                      /*!< SYS_REG BOOT: SRAM_SEL Position         */
#define SYS_REG_BOOT_SRAM_SEL_Msk             (0x01UL << SYS_REG_BOOT_SRAM_SEL_Pos)                   /*!< SYS_REG BOOT: SRAM_SEL Mask             */

/* ------------------------------  SYS_REG_IC_TAG_0  ------------------------------ */
#define SYS_REG_IC_TAG_0_IC_TAG_31_0_Pos      0                                                       /*!< SYS_REG IC_TAG_0: IC_TAG_31_0 Position  */
#define SYS_REG_IC_TAG_0_IC_TAG_31_0_Msk      (0xffffffffUL << SYS_REG_IC_TAG_0_IC_TAG_31_0_Pos)      /*!< SYS_REG IC_TAG_0: IC_TAG_31_0 Mask      */

/* ------------------------------  SYS_REG_IC_TAG_1  ------------------------------ */
#define SYS_REG_IC_TAG_1_IC_TAG_63_32_Pos     0                                                       /*!< SYS_REG IC_TAG_1: IC_TAG_63_32 Position */
#define SYS_REG_IC_TAG_1_IC_TAG_63_32_Msk     (0xffffffffUL << SYS_REG_IC_TAG_1_IC_TAG_63_32_Pos)     /*!< SYS_REG IC_TAG_1: IC_TAG_63_32 Mask     */

/* ------------------------------  SYS_REG_ASIC_TAG  ------------------------------ */
#define SYS_REG_ASIC_TAG_ASIC_TAG_Pos         0                                                       /*!< SYS_REG ASIC_TAG: ASIC_TAG Position     */
#define SYS_REG_ASIC_TAG_ASIC_TAG_Msk         (0x000000ffUL << SYS_REG_ASIC_TAG_ASIC_TAG_Pos)         /*!< SYS_REG ASIC_TAG: ASIC_TAG Mask         */

/* ---------------------------  SYS_REG_AHB_BRG_STATUS  --------------------------- */
#define SYS_REG_AHB_BRG_STATUS_AHB_SW_RST_Pos 0                                                       /*!< SYS_REG AHB_BRG_STATUS: AHB_SW_RST Position */
#define SYS_REG_AHB_BRG_STATUS_AHB_SW_RST_Msk (0x01UL << SYS_REG_AHB_BRG_STATUS_AHB_SW_RST_Pos)       /*!< SYS_REG AHB_BRG_STATUS: AHB_SW_RST Mask */
#define SYS_REG_AHB_BRG_STATUS_AHB_ERR_RST_Pos 1                                                      /*!< SYS_REG AHB_BRG_STATUS: AHB_ERR_RST Position */
#define SYS_REG_AHB_BRG_STATUS_AHB_ERR_RST_Msk (0x01UL << SYS_REG_AHB_BRG_STATUS_AHB_ERR_RST_Pos)     /*!< SYS_REG AHB_BRG_STATUS: AHB_ERR_RST Mask */
#define SYS_REG_AHB_BRG_STATUS_ARB_SEL_Pos    4                                                       /*!< SYS_REG AHB_BRG_STATUS: ARB_SEL Position */
#define SYS_REG_AHB_BRG_STATUS_ARB_SEL_Msk    (0x03UL << SYS_REG_AHB_BRG_STATUS_ARB_SEL_Pos)          /*!< SYS_REG AHB_BRG_STATUS: ARB_SEL Mask    */
#define SYS_REG_AHB_BRG_STATUS_AHB_STATUS_Pos 16                                                      /*!< SYS_REG AHB_BRG_STATUS: AHB_STATUS Position */
#define SYS_REG_AHB_BRG_STATUS_AHB_STATUS_Msk (0x0000ffffUL << SYS_REG_AHB_BRG_STATUS_AHB_STATUS_Pos) /*!< SYS_REG AHB_BRG_STATUS: AHB_STATUS Mask */

/* ----------------------------  SYS_REG_AHB_ILL_ADDR  ---------------------------- */
#define SYS_REG_AHB_ILL_ADDR_AHB_ILL_ADDR_Pos 0                                                       /*!< SYS_REG AHB_ILL_ADDR: AHB_ILL_ADDR Position */
#define SYS_REG_AHB_ILL_ADDR_AHB_ILL_ADDR_Msk (0xffffffffUL << SYS_REG_AHB_ILL_ADDR_AHB_ILL_ADDR_Pos) /*!< SYS_REG AHB_ILL_ADDR: AHB_ILL_ADDR Mask */

/* ----------------------------  SYS_REG_AHB_FEN_ADDR  ---------------------------- */
#define SYS_REG_AHB_FEN_ADDR_AHB_FEN_ADDR_Pos 0                                                       /*!< SYS_REG AHB_FEN_ADDR: AHB_FEN_ADDR Position */
#define SYS_REG_AHB_FEN_ADDR_AHB_FEN_ADDR_Msk (0xffffffffUL << SYS_REG_AHB_FEN_ADDR_AHB_FEN_ADDR_Pos) /*!< SYS_REG AHB_FEN_ADDR: AHB_FEN_ADDR Mask */

/* --------------------------  SYS_REG_ANDESN7_DEBUG_PC  -------------------------- */
#define SYS_REG_ANDESN7_DEBUG_PC_CORE_CURRENT_PC_Pos 0                                                /*!< SYS_REG ANDESN7_DEBUG_PC: CORE_CURRENT_PC Position */
#define SYS_REG_ANDESN7_DEBUG_PC_CORE_CURRENT_PC_Msk (0x00ffffffUL << SYS_REG_ANDESN7_DEBUG_PC_CORE_CURRENT_PC_Pos)/*!< SYS_REG ANDESN7_DEBUG_PC: CORE_CURRENT_PC Mask */
#define SYS_REG_ANDESN7_DEBUG_PC_CORE_DEBUG_MODE_Pos 24                                               /*!< SYS_REG ANDESN7_DEBUG_PC: CORE_DEBUG_MODE Position */
#define SYS_REG_ANDESN7_DEBUG_PC_CORE_DEBUG_MODE_Msk (0x01UL << SYS_REG_ANDESN7_DEBUG_PC_CORE_DEBUG_MODE_Pos)/*!< SYS_REG ANDESN7_DEBUG_PC: CORE_DEBUG_MODE Mask */
#define SYS_REG_ANDESN7_DEBUG_PC_CORE_STANDBY_MODE_Pos 28                                             /*!< SYS_REG ANDESN7_DEBUG_PC: CORE_STANDBY_MODE Position */
#define SYS_REG_ANDESN7_DEBUG_PC_CORE_STANDBY_MODE_Msk (0x01UL << SYS_REG_ANDESN7_DEBUG_PC_CORE_STANDBY_MODE_Pos)/*!< SYS_REG ANDESN7_DEBUG_PC: CORE_STANDBY_MODE Mask */

/* ----------------------------  SYS_REG_AHB_CPU_SETUP  --------------------------- */
#define SYS_REG_AHB_CPU_SETUP_SRAM_PREFETCH_Pos 0                                                     /*!< SYS_REG AHB_CPU_SETUP: SRAM_PREFETCH Position */
#define SYS_REG_AHB_CPU_SETUP_SRAM_PREFETCH_Msk (0x01UL << SYS_REG_AHB_CPU_SETUP_SRAM_PREFETCH_Pos)   /*!< SYS_REG AHB_CPU_SETUP: SRAM_PREFETCH Mask */
#define SYS_REG_AHB_CPU_SETUP_DEFAULT_DIMB_Pos 8                                                      /*!< SYS_REG AHB_CPU_SETUP: DEFAULT_DIMB Position */
#define SYS_REG_AHB_CPU_SETUP_DEFAULT_DIMB_Msk (0x00000fffUL << SYS_REG_AHB_CPU_SETUP_DEFAULT_DIMB_Pos)/*!< SYS_REG AHB_CPU_SETUP: DEFAULT_DIMB Mask */

/* ----------------------------  SYS_REG_N705S_CONFIG  ---------------------------- */
#define SYS_REG_N705S_CONFIG_CORE_ID_Pos      0                                                       /*!< SYS_REG N705S_CONFIG: CORE_ID Position  */
#define SYS_REG_N705S_CONFIG_CORE_ID_Msk      (0x7fUL << SYS_REG_N705S_CONFIG_CORE_ID_Pos)            /*!< SYS_REG N705S_CONFIG: CORE_ID Mask      */
#define SYS_REG_N705S_CONFIG_MCU_ENABLE_Pos   7                                                       /*!< SYS_REG N705S_CONFIG: MCU_ENABLE Position */
#define SYS_REG_N705S_CONFIG_MCU_ENABLE_Msk   (0x01UL << SYS_REG_N705S_CONFIG_MCU_ENABLE_Pos)         /*!< SYS_REG N705S_CONFIG: MCU_ENABLE Mask   */
#define SYS_REG_N705S_CONFIG_INITIAL_STALL_LENGTH_Pos 8                                               /*!< SYS_REG N705S_CONFIG: INITIAL_STALL_LENGTH Position */
#define SYS_REG_N705S_CONFIG_INITIAL_STALL_LENGTH_Msk (0x0fUL << SYS_REG_N705S_CONFIG_INITIAL_STALL_LENGTH_Pos)/*!< SYS_REG N705S_CONFIG: INITIAL_STALL_LENGTH Mask */
#define SYS_REG_N705S_CONFIG_DEFAULT_IVB_Pos  16                                                      /*!< SYS_REG N705S_CONFIG: DEFAULT_IVB Position */
#define SYS_REG_N705S_CONFIG_DEFAULT_IVB_Msk  (0x000000ffUL << SYS_REG_N705S_CONFIG_DEFAULT_IVB_Pos)  /*!< SYS_REG N705S_CONFIG: DEFAULT_IVB Mask  */

/* -------------------------  SYS_REG_MICROSECOND_TIMER0  ------------------------- */
#define SYS_REG_MICROSECOND_TIMER0_US_TM0_INIT_VALUE_Pos 0                                            /*!< SYS_REG MICROSECOND_TIMER0: US_TM0_INIT_VALUE Position */
#define SYS_REG_MICROSECOND_TIMER0_US_TM0_INIT_VALUE_Msk (0x00ffffffUL << SYS_REG_MICROSECOND_TIMER0_US_TM0_INIT_VALUE_Pos)/*!< SYS_REG MICROSECOND_TIMER0: US_TM0_INIT_VALUE Mask */

/* ------------------  SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_0  ------------------ */
#define SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_0_US_TM0_CUR_VALUE_Pos 0                               /*!< SYS_REG CURRENT_MICROSECOND_TIME_VALUE_0: US_TM0_CUR_VALUE Position */
#define SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_0_US_TM0_CUR_VALUE_Msk (0x00ffffffUL << SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_0_US_TM0_CUR_VALUE_Pos)/*!< SYS_REG CURRENT_MICROSECOND_TIME_VALUE_0: US_TM0_CUR_VALUE Mask */
#define SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_0_US_TM0_MODE_Pos 24                                   /*!< SYS_REG CURRENT_MICROSECOND_TIME_VALUE_0: US_TM0_MODE Position */
#define SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_0_US_TM0_MODE_Msk (0x01UL << SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_0_US_TM0_MODE_Pos)/*!< SYS_REG CURRENT_MICROSECOND_TIME_VALUE_0: US_TM0_MODE Mask */
#define SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_0_US_TM0_INT_STS_DONE_Pos 25                           /*!< SYS_REG CURRENT_MICROSECOND_TIME_VALUE_0: US_TM0_INT_STS_DONE
                                                         Position                                                                                  */
#define SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_0_US_TM0_INT_STS_DONE_Msk (0x01UL << SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_0_US_TM0_INT_STS_DONE_Pos)/*!< SYS_REG CURRENT_MICROSECOND_TIME_VALUE_0: US_TM0_INT_STS_DONE
                                                         Mask                                                                                      */
#define SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_0_US_TM0_INT_MASK_Pos 26                               /*!< SYS_REG CURRENT_MICROSECOND_TIME_VALUE_0: US_TM0_INT_MASK Position */
#define SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_0_US_TM0_INT_MASK_Msk (0x01UL << SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_0_US_TM0_INT_MASK_Pos)/*!< SYS_REG CURRENT_MICROSECOND_TIME_VALUE_0: US_TM0_INT_MASK Mask */

/* -------------------------  SYS_REG_MICROSECOND_TIMER1  ------------------------- */
#define SYS_REG_MICROSECOND_TIMER1_US_TM1_INIT_VALUE_Pos 0                                            /*!< SYS_REG MICROSECOND_TIMER1: US_TM1_INIT_VALUE Position */
#define SYS_REG_MICROSECOND_TIMER1_US_TM1_INIT_VALUE_Msk (0x00ffffffUL << SYS_REG_MICROSECOND_TIMER1_US_TM1_INIT_VALUE_Pos)/*!< SYS_REG MICROSECOND_TIMER1: US_TM1_INIT_VALUE Mask */

/* ------------------  SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_1  ------------------ */
#define SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_1_US_TM1_CUR_VALUE_Pos 0                               /*!< SYS_REG CURRENT_MICROSECOND_TIME_VALUE_1: US_TM1_CUR_VALUE Position */
#define SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_1_US_TM1_CUR_VALUE_Msk (0x00ffffffUL << SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_1_US_TM1_CUR_VALUE_Pos)/*!< SYS_REG CURRENT_MICROSECOND_TIME_VALUE_1: US_TM1_CUR_VALUE Mask */
#define SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_1_US_TM1_MODE_Pos 24                                   /*!< SYS_REG CURRENT_MICROSECOND_TIME_VALUE_1: US_TM1_MODE Position */
#define SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_1_US_TM1_MODE_Msk (0x01UL << SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_1_US_TM1_MODE_Pos)/*!< SYS_REG CURRENT_MICROSECOND_TIME_VALUE_1: US_TM1_MODE Mask */
#define SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_1_US_TM1_INT_STS_DONE_Pos 25                           /*!< SYS_REG CURRENT_MICROSECOND_TIME_VALUE_1: US_TM1_INT_STS_DONE
                                                         Position                                                                                  */
#define SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_1_US_TM1_INT_STS_DONE_Msk (0x01UL << SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_1_US_TM1_INT_STS_DONE_Pos)/*!< SYS_REG CURRENT_MICROSECOND_TIME_VALUE_1: US_TM1_INT_STS_DONE
                                                         Mask                                                                                      */
#define SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_1_US_TM1_INT_MASK_Pos 26                               /*!< SYS_REG CURRENT_MICROSECOND_TIME_VALUE_1: US_TM1_INT_MASK Position */
#define SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_1_US_TM1_INT_MASK_Msk (0x01UL << SYS_REG_CURRENT_MICROSECOND_TIME_VALUE_1_US_TM1_INT_MASK_Pos)/*!< SYS_REG CURRENT_MICROSECOND_TIME_VALUE_1: US_TM1_INT_MASK Mask */

/* --------------------------  SYS_REG_MILISECOND_TIMER0  ------------------------- */
#define SYS_REG_MILISECOND_TIMER0_MS_TM0_INIT_VALUE_Pos 0                                             /*!< SYS_REG MILISECOND_TIMER0: MS_TM0_INIT_VALUE Position */
#define SYS_REG_MILISECOND_TIMER0_MS_TM0_INIT_VALUE_Msk (0x00ffffffUL << SYS_REG_MILISECOND_TIMER0_MS_TM0_INIT_VALUE_Pos)/*!< SYS_REG MILISECOND_TIMER0: MS_TM0_INIT_VALUE Mask */

/* -------------------  SYS_REG_CURRENT_MILISECOND_TIME_VALUE_0  ------------------ */
#define SYS_REG_CURRENT_MILISECOND_TIME_VALUE_0_MS_TM0_CUR_VALUE_Pos 0                                /*!< SYS_REG CURRENT_MILISECOND_TIME_VALUE_0: MS_TM0_CUR_VALUE Position */
#define SYS_REG_CURRENT_MILISECOND_TIME_VALUE_0_MS_TM0_CUR_VALUE_Msk (0x00ffffffUL << SYS_REG_CURRENT_MILISECOND_TIME_VALUE_0_MS_TM0_CUR_VALUE_Pos)/*!< SYS_REG CURRENT_MILISECOND_TIME_VALUE_0: MS_TM0_CUR_VALUE Mask */
#define SYS_REG_CURRENT_MILISECOND_TIME_VALUE_0_MS_TM0_MODE_Pos 24                                    /*!< SYS_REG CURRENT_MILISECOND_TIME_VALUE_0: MS_TM0_MODE Position */
#define SYS_REG_CURRENT_MILISECOND_TIME_VALUE_0_MS_TM0_MODE_Msk (0x01UL << SYS_REG_CURRENT_MILISECOND_TIME_VALUE_0_MS_TM0_MODE_Pos)/*!< SYS_REG CURRENT_MILISECOND_TIME_VALUE_0: MS_TM0_MODE Mask */
#define SYS_REG_CURRENT_MILISECOND_TIME_VALUE_0_MS_TM0_INT_STS_DONE_Pos 25                            /*!< SYS_REG CURRENT_MILISECOND_TIME_VALUE_0: MS_TM0_INT_STS_DONE
                                                         Position                                                                                  */
#define SYS_REG_CURRENT_MILISECOND_TIME_VALUE_0_MS_TM0_INT_STS_DONE_Msk (0x01UL << SYS_REG_CURRENT_MILISECOND_TIME_VALUE_0_MS_TM0_INT_STS_DONE_Pos)/*!< SYS_REG CURRENT_MILISECOND_TIME_VALUE_0: MS_TM0_INT_STS_DONE
                                                         Mask                                                                                      */
#define SYS_REG_CURRENT_MILISECOND_TIME_VALUE_0_MS_TM0_INT_MASK_Pos 26                                /*!< SYS_REG CURRENT_MILISECOND_TIME_VALUE_0: MS_TM0_INT_MASK Position */
#define SYS_REG_CURRENT_MILISECOND_TIME_VALUE_0_MS_TM0_INT_MASK_Msk (0x01UL << SYS_REG_CURRENT_MILISECOND_TIME_VALUE_0_MS_TM0_INT_MASK_Pos)/*!< SYS_REG CURRENT_MILISECOND_TIME_VALUE_0: MS_TM0_INT_MASK Mask */

/* --------------------------  SYS_REG_MILISECOND_TIMER1  ------------------------- */
#define SYS_REG_MILISECOND_TIMER1_MS_TM1_INIT_VALUE_Pos 0                                             /*!< SYS_REG MILISECOND_TIMER1: MS_TM1_INIT_VALUE Position */
#define SYS_REG_MILISECOND_TIMER1_MS_TM1_INIT_VALUE_Msk (0x00ffffffUL << SYS_REG_MILISECOND_TIMER1_MS_TM1_INIT_VALUE_Pos)/*!< SYS_REG MILISECOND_TIMER1: MS_TM1_INIT_VALUE Mask */

/* -------------------  SYS_REG_CURRENT_MILISECOND_TIME_VALUE_1  ------------------ */
#define SYS_REG_CURRENT_MILISECOND_TIME_VALUE_1_MS_TM1_CUR_VALUE_Pos 0                                /*!< SYS_REG CURRENT_MILISECOND_TIME_VALUE_1: MS_TM1_CUR_VALUE Position */
#define SYS_REG_CURRENT_MILISECOND_TIME_VALUE_1_MS_TM1_CUR_VALUE_Msk (0x00ffffffUL << SYS_REG_CURRENT_MILISECOND_TIME_VALUE_1_MS_TM1_CUR_VALUE_Pos)/*!< SYS_REG CURRENT_MILISECOND_TIME_VALUE_1: MS_TM1_CUR_VALUE Mask */
#define SYS_REG_CURRENT_MILISECOND_TIME_VALUE_1_MS_TM1_MODE_Pos 24                                    /*!< SYS_REG CURRENT_MILISECOND_TIME_VALUE_1: MS_TM1_MODE Position */
#define SYS_REG_CURRENT_MILISECOND_TIME_VALUE_1_MS_TM1_MODE_Msk (0x01UL << SYS_REG_CURRENT_MILISECOND_TIME_VALUE_1_MS_TM1_MODE_Pos)/*!< SYS_REG CURRENT_MILISECOND_TIME_VALUE_1: MS_TM1_MODE Mask */
#define SYS_REG_CURRENT_MILISECOND_TIME_VALUE_1_MS_TM1_INT_STS_DONE_Pos 25                            /*!< SYS_REG CURRENT_MILISECOND_TIME_VALUE_1: MS_TM1_INT_STS_DONE
                                                         Position                                                                                  */
#define SYS_REG_CURRENT_MILISECOND_TIME_VALUE_1_MS_TM1_INT_STS_DONE_Msk (0x01UL << SYS_REG_CURRENT_MILISECOND_TIME_VALUE_1_MS_TM1_INT_STS_DONE_Pos)/*!< SYS_REG CURRENT_MILISECOND_TIME_VALUE_1: MS_TM1_INT_STS_DONE
                                                         Mask                                                                                      */
#define SYS_REG_CURRENT_MILISECOND_TIME_VALUE_1_MS_TM1_INT_MASK_Pos 26                                /*!< SYS_REG CURRENT_MILISECOND_TIME_VALUE_1: MS_TM1_INT_MASK Position */
#define SYS_REG_CURRENT_MILISECOND_TIME_VALUE_1_MS_TM1_INT_MASK_Msk (0x01UL << SYS_REG_CURRENT_MILISECOND_TIME_VALUE_1_MS_TM1_INT_MASK_Pos)/*!< SYS_REG CURRENT_MILISECOND_TIME_VALUE_1: MS_TM1_INT_MASK Mask */

/* ---------------------------  SYS_REG_GROUP_TIMER_SET  -------------------------- */
#define SYS_REG_GROUP_TIMER_SET_US_TIMER_MUX_Pos 0                                                    /*!< SYS_REG GROUP_TIMER_SET: US_TIMER_MUX Position */
#define SYS_REG_GROUP_TIMER_SET_US_TIMER_MUX_Msk (0x03UL << SYS_REG_GROUP_TIMER_SET_US_TIMER_MUX_Pos) /*!< SYS_REG GROUP_TIMER_SET: US_TIMER_MUX Mask */
#define SYS_REG_GROUP_TIMER_SET_MS_TIMER_MUX_Pos 8                                                    /*!< SYS_REG GROUP_TIMER_SET: MS_TIMER_MUX Position */
#define SYS_REG_GROUP_TIMER_SET_MS_TIMER_MUX_Msk (0x03UL << SYS_REG_GROUP_TIMER_SET_MS_TIMER_MUX_Pos) /*!< SYS_REG GROUP_TIMER_SET: MS_TIMER_MUX Mask */

/* ----------------------------  SYS_REG_HBUSREQ_LOCK  ---------------------------- */
#define SYS_REG_HBUSREQ_LOCK_HBUSREQ_LOCK_Pos 0                                                       /*!< SYS_REG HBUSREQ_LOCK: HBUSREQ_LOCK Position */
#define SYS_REG_HBUSREQ_LOCK_HBUSREQ_LOCK_Msk (0x00003fffUL << SYS_REG_HBUSREQ_LOCK_HBUSREQ_LOCK_Pos) /*!< SYS_REG HBUSREQ_LOCK: HBUSREQ_LOCK Mask */

/* -----------------------------  SYS_REG_HBURST_LOCK  ---------------------------- */
#define SYS_REG_HBURST_LOCK_HBURST_LOCK_Pos   0                                                       /*!< SYS_REG HBURST_LOCK: HBURST_LOCK Position */
#define SYS_REG_HBURST_LOCK_HBURST_LOCK_Msk   (0x00003fffUL << SYS_REG_HBURST_LOCK_HBURST_LOCK_Pos)   /*!< SYS_REG HBURST_LOCK: HBURST_LOCK Mask   */

/* --------------------------  SYS_REG_PRESCALER_USTIMER  ------------------------- */
#define SYS_REG_PRESCALER_USTIMER_PRESCALER_USTIMER_Pos 0                                             /*!< SYS_REG PRESCALER_USTIMER: PRESCALER_USTIMER Position */
#define SYS_REG_PRESCALER_USTIMER_PRESCALER_USTIMER_Msk (0x000001ffUL << SYS_REG_PRESCALER_USTIMER_PRESCALER_USTIMER_Pos)/*!< SYS_REG PRESCALER_USTIMER: PRESCALER_USTIMER Mask */

/* ------------------------------  SYS_REG_UART_W2B  ------------------------------ */
#define SYS_REG_UART_W2B_DATA_UART_W2B_EN_A_Pos 4                                                     /*!< SYS_REG UART_W2B: DATA_UART_W2B_EN_A Position */
#define SYS_REG_UART_W2B_DATA_UART_W2B_EN_A_Msk (0x01UL << SYS_REG_UART_W2B_DATA_UART_W2B_EN_A_Pos)   /*!< SYS_REG UART_W2B: DATA_UART_W2B_EN_A Mask */
#define SYS_REG_UART_W2B_DATA_UART_W2B_EN_B_Pos 8                                                     /*!< SYS_REG UART_W2B: DATA_UART_W2B_EN_B Position */
#define SYS_REG_UART_W2B_DATA_UART_W2B_EN_B_Msk (0x01UL << SYS_REG_UART_W2B_DATA_UART_W2B_EN_B_Pos)   /*!< SYS_REG UART_W2B: DATA_UART_W2B_EN_B Mask */
#define SYS_REG_UART_W2B_DATA_UART_W2B_EN_C_Pos 12                                                    /*!< SYS_REG UART_W2B: DATA_UART_W2B_EN_C Position */
#define SYS_REG_UART_W2B_DATA_UART_W2B_EN_C_Msk (0x01UL << SYS_REG_UART_W2B_DATA_UART_W2B_EN_C_Pos)   /*!< SYS_REG UART_W2B: DATA_UART_W2B_EN_C Mask */

/* -----------------------------  SYS_REG_TB_ADR_SEL  ----------------------------- */
#define SYS_REG_TB_ADR_SEL_TB_ADR_SEL_Pos     0                                                       /*!< SYS_REG TB_ADR_SEL: TB_ADR_SEL Position */
#define SYS_REG_TB_ADR_SEL_TB_ADR_SEL_Msk     (0x0000ffffUL << SYS_REG_TB_ADR_SEL_TB_ADR_SEL_Pos)     /*!< SYS_REG TB_ADR_SEL: TB_ADR_SEL Mask     */
#define SYS_REG_TB_ADR_SEL_CRC_ENB_Pos        16                                                      /*!< SYS_REG TB_ADR_SEL: CRC_ENB Position    */
#define SYS_REG_TB_ADR_SEL_CRC_ENB_Msk        (0x01UL << SYS_REG_TB_ADR_SEL_CRC_ENB_Pos)              /*!< SYS_REG TB_ADR_SEL: CRC_ENB Mask        */
#define SYS_REG_TB_ADR_SEL_CRC_DONE_Pos       20                                                      /*!< SYS_REG TB_ADR_SEL: CRC_DONE Position   */
#define SYS_REG_TB_ADR_SEL_CRC_DONE_Msk       (0x01UL << SYS_REG_TB_ADR_SEL_CRC_DONE_Pos)             /*!< SYS_REG TB_ADR_SEL: CRC_DONE Mask       */
#define SYS_REG_TB_ADR_SEL_TB_CS_Pos          31                                                      /*!< SYS_REG TB_ADR_SEL: TB_CS Position      */
#define SYS_REG_TB_ADR_SEL_TB_CS_Msk          (0x01UL << SYS_REG_TB_ADR_SEL_TB_CS_Pos)                /*!< SYS_REG TB_ADR_SEL: TB_CS Mask          */

/* ------------------------------  SYS_REG_TB_RDATA  ------------------------------ */
#define SYS_REG_TB_RDATA_TB_RDATA_Pos         0                                                       /*!< SYS_REG TB_RDATA: TB_RDATA Position     */
#define SYS_REG_TB_RDATA_TB_RDATA_Msk         (0x000000ffUL << SYS_REG_TB_RDATA_TB_RDATA_Pos)         /*!< SYS_REG TB_RDATA: TB_RDATA Mask         */
#define SYS_REG_TB_RDATA_ROM_CRC_Pos          16                                                      /*!< SYS_REG TB_RDATA: ROM_CRC Position      */
#define SYS_REG_TB_RDATA_ROM_CRC_Msk          (0x0000ffffUL << SYS_REG_TB_RDATA_ROM_CRC_Pos)          /*!< SYS_REG TB_RDATA: ROM_CRC Mask          */

/* --------------------------  SYS_REG_GROUP_TIMER_KICK  -------------------------- */
#define SYS_REG_GROUP_TIMER_KICK_GRP_TIMER_Pos 0                                                      /*!< SYS_REG GROUP_TIMER_KICK: GRP_TIMER Position */
#define SYS_REG_GROUP_TIMER_KICK_GRP_TIMER_Msk (0x01UL << SYS_REG_GROUP_TIMER_KICK_GRP_TIMER_Pos)     /*!< SYS_REG GROUP_TIMER_KICK: GRP_TIMER Mask */

/* ------------------------------  SYS_REG_LFSR_SEED  ----------------------------- */
#define SYS_REG_LFSR_SEED_SEED_Pos            0                                                       /*!< SYS_REG LFSR_SEED: SEED Position        */
#define SYS_REG_LFSR_SEED_SEED_Msk            (0xffffffffUL << SYS_REG_LFSR_SEED_SEED_Pos)            /*!< SYS_REG LFSR_SEED: SEED Mask            */

/* ---------------------------  SYS_REG_LFSR_POLYNOMIO  --------------------------- */
#define SYS_REG_LFSR_POLYNOMIO_POLY_Pos       0                                                       /*!< SYS_REG LFSR_POLYNOMIO: POLY Position   */
#define SYS_REG_LFSR_POLYNOMIO_POLY_Msk       (0xffffffffUL << SYS_REG_LFSR_POLYNOMIO_POLY_Pos)       /*!< SYS_REG LFSR_POLYNOMIO: POLY Mask       */

/* ------------------------------  SYS_REG_LFSR_RAND  ----------------------------- */
#define SYS_REG_LFSR_RAND_RAND_32_Pos         0                                                       /*!< SYS_REG LFSR_RAND: RAND_32 Position     */
#define SYS_REG_LFSR_RAND_RAND_32_Msk         (0xffffffffUL << SYS_REG_LFSR_RAND_RAND_32_Pos)         /*!< SYS_REG LFSR_RAND: RAND_32 Mask         */

/* --------------------------------  SYS_REG_TAS0  -------------------------------- */
#define SYS_REG_TAS0_TAS0_Pos                 0                                                       /*!< SYS_REG TAS0: TAS0 Position             */
#define SYS_REG_TAS0_TAS0_Msk                 (0x01UL << SYS_REG_TAS0_TAS0_Pos)                       /*!< SYS_REG TAS0: TAS0 Mask                 */

/* --------------------------------  SYS_REG_TAS1  -------------------------------- */
#define SYS_REG_TAS1_TAS1_Pos                 0                                                       /*!< SYS_REG TAS1: TAS1 Position             */
#define SYS_REG_TAS1_TAS1_Msk                 (0x01UL << SYS_REG_TAS1_TAS1_Pos)                       /*!< SYS_REG TAS1: TAS1 Mask                 */

/* --------------------------------  SYS_REG_TAS2  -------------------------------- */
#define SYS_REG_TAS2_TAS2_Pos                 0                                                       /*!< SYS_REG TAS2: TAS2 Position             */
#define SYS_REG_TAS2_TAS2_Msk                 (0x01UL << SYS_REG_TAS2_TAS2_Pos)                       /*!< SYS_REG TAS2: TAS2 Mask                 */

/* --------------------------------  SYS_REG_TAS3  -------------------------------- */
#define SYS_REG_TAS3_TAS3_Pos                 0                                                       /*!< SYS_REG TAS3: TAS3 Position             */
#define SYS_REG_TAS3_TAS3_Msk                 (0x01UL << SYS_REG_TAS3_TAS3_Pos)                       /*!< SYS_REG TAS3: TAS3 Mask                 */

/* --------------------------------  SYS_REG_TAS4  -------------------------------- */
#define SYS_REG_TAS4_TAS4_Pos                 0                                                       /*!< SYS_REG TAS4: TAS4 Position             */
#define SYS_REG_TAS4_TAS4_Msk                 (0x01UL << SYS_REG_TAS4_TAS4_Pos)                       /*!< SYS_REG TAS4: TAS4 Mask                 */

/* --------------------------------  SYS_REG_TAS5  -------------------------------- */
#define SYS_REG_TAS5_TAS5_Pos                 0                                                       /*!< SYS_REG TAS5: TAS5 Position             */
#define SYS_REG_TAS5_TAS5_Msk                 (0x01UL << SYS_REG_TAS5_TAS5_Pos)                       /*!< SYS_REG TAS5: TAS5 Mask                 */

/* --------------------------------  SYS_REG_TAS6  -------------------------------- */
#define SYS_REG_TAS6_TAS6_Pos                 0                                                       /*!< SYS_REG TAS6: TAS6 Position             */
#define SYS_REG_TAS6_TAS6_Msk                 (0x01UL << SYS_REG_TAS6_TAS6_Pos)                       /*!< SYS_REG TAS6: TAS6 Mask                 */

/* --------------------------------  SYS_REG_TAS7  -------------------------------- */
#define SYS_REG_TAS7_TAS7_Pos                 0                                                       /*!< SYS_REG TAS7: TAS7 Position             */
#define SYS_REG_TAS7_TAS7_Msk                 (0x01UL << SYS_REG_TAS7_TAS7_Pos)                       /*!< SYS_REG TAS7: TAS7 Mask                 */

/* ------------------------------  SYS_REG_BOOT_INFO  ----------------------------- */
#define SYS_REG_BOOT_INFO_WDT_INIT_SYS_Pos    0                                                       /*!< SYS_REG BOOT_INFO: WDT_INIT_SYS Position */
#define SYS_REG_BOOT_INFO_WDT_INIT_SYS_Msk    (0x01UL << SYS_REG_BOOT_INFO_WDT_INIT_SYS_Pos)          /*!< SYS_REG BOOT_INFO: WDT_INIT_SYS Mask    */
#define SYS_REG_BOOT_INFO_WDT_INIT_MCU_Pos    1                                                       /*!< SYS_REG BOOT_INFO: WDT_INIT_MCU Position */
#define SYS_REG_BOOT_INFO_WDT_INIT_MCU_Msk    (0x01UL << SYS_REG_BOOT_INFO_WDT_INIT_MCU_Pos)          /*!< SYS_REG BOOT_INFO: WDT_INIT_MCU Mask    */

/* ------------------------  SYS_REG_N705S_IVIC_TRIG_TYPE  ------------------------ */
#define SYS_REG_N705S_IVIC_TRIG_TYPE_IVIC_TRIG_TYPE_Pos 0                                             /*!< SYS_REG N705S_IVIC_TRIG_TYPE: IVIC_TRIG_TYPE Position */
#define SYS_REG_N705S_IVIC_TRIG_TYPE_IVIC_TRIG_TYPE_Msk (0xffffffffUL << SYS_REG_N705S_IVIC_TRIG_TYPE_IVIC_TRIG_TYPE_Pos)/*!< SYS_REG N705S_IVIC_TRIG_TYPE: IVIC_TRIG_TYPE Mask */

/* ---------------------------  SYS_REG_ROM_PATCH_VALID  -------------------------- */
#define SYS_REG_ROM_PATCH_VALID_ROM_PATCH_VALID_Pos 0                                                 /*!< SYS_REG ROM_PATCH_VALID: ROM_PATCH_VALID Position */
#define SYS_REG_ROM_PATCH_VALID_ROM_PATCH_VALID_Msk (0x0001ffffUL << SYS_REG_ROM_PATCH_VALID_ROM_PATCH_VALID_Pos)/*!< SYS_REG ROM_PATCH_VALID: ROM_PATCH_VALID Mask */

/* -----------------------  SYS_REG_ROM_PATCH_BASE_ADDRESS  ----------------------- */
#define SYS_REG_ROM_PATCH_BASE_ADDRESS_ORI_BASE_ADDR_Pos 0                                            /*!< SYS_REG ROM_PATCH_BASE_ADDRESS: ORI_BASE_ADDR Position */
#define SYS_REG_ROM_PATCH_BASE_ADDRESS_ORI_BASE_ADDR_Msk (0x00000fffUL << SYS_REG_ROM_PATCH_BASE_ADDRESS_ORI_BASE_ADDR_Pos)/*!< SYS_REG ROM_PATCH_BASE_ADDRESS: ORI_BASE_ADDR Mask */
#define SYS_REG_ROM_PATCH_BASE_ADDRESS_TAR_BASE_ADDR_Pos 16                                           /*!< SYS_REG ROM_PATCH_BASE_ADDRESS: TAR_BASE_ADDR Position */
#define SYS_REG_ROM_PATCH_BASE_ADDRESS_TAR_BASE_ADDR_Msk (0x00000fffUL << SYS_REG_ROM_PATCH_BASE_ADDRESS_TAR_BASE_ADDR_Pos)/*!< SYS_REG ROM_PATCH_BASE_ADDRESS: TAR_BASE_ADDR Mask */

/* ----------------------  SYS_REG_ROM_PATCH_BASE_ADDRESS_16  --------------------- */
#define SYS_REG_ROM_PATCH_BASE_ADDRESS_16_ORI_BASE_ADDR_16_Pos 0                                      /*!< SYS_REG ROM_PATCH_BASE_ADDRESS_16: ORI_BASE_ADDR_16 Position */
#define SYS_REG_ROM_PATCH_BASE_ADDRESS_16_ORI_BASE_ADDR_16_Msk (0x00000fffUL << SYS_REG_ROM_PATCH_BASE_ADDRESS_16_ORI_BASE_ADDR_16_Pos)/*!< SYS_REG ROM_PATCH_BASE_ADDRESS_16: ORI_BASE_ADDR_16 Mask */
#define SYS_REG_ROM_PATCH_BASE_ADDRESS_16_TAR_BASE_ADDR_16_Pos 16                                     /*!< SYS_REG ROM_PATCH_BASE_ADDRESS_16: TAR_BASE_ADDR_16 Position */
#define SYS_REG_ROM_PATCH_BASE_ADDRESS_16_TAR_BASE_ADDR_16_Msk (0x00000fffUL << SYS_REG_ROM_PATCH_BASE_ADDRESS_16_TAR_BASE_ADDR_16_Pos)/*!< SYS_REG ROM_PATCH_BASE_ADDRESS_16: TAR_BASE_ADDR_16 Mask */

/* -------------------  SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_0  ------------------- */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_0_ROM_PATCH_TAR_ADDR_0_Pos 2                             /*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_0: ROM_PATCH_TAR_ADDR_0
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_0_ROM_PATCH_TAR_ADDR_0_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_0_ROM_PATCH_TAR_ADDR_0_Pos)/*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_0: ROM_PATCH_TAR_ADDR_0
                                                         Mask                                                                                      */

/* ------------------  SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_0  ------------------ */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_0_ROM_PATCH_ORI_ADDR_0_Pos 2                           /*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_0: ROM_PATCH_ORI_ADDR_0
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_0_ROM_PATCH_ORI_ADDR_0_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_0_ROM_PATCH_ORI_ADDR_0_Pos)/*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_0: ROM_PATCH_ORI_ADDR_0
                                                         Mask                                                                                      */

/* -------------------------  SYS_REG_ROM_PATCH_LENGTH_0  ------------------------- */
#define SYS_REG_ROM_PATCH_LENGTH_0_ROM_PATCH_LEN_0_Pos 0                                              /*!< SYS_REG ROM_PATCH_LENGTH_0: ROM_PATCH_LEN_0 Position */
#define SYS_REG_ROM_PATCH_LENGTH_0_ROM_PATCH_LEN_0_Msk (0x3fUL << SYS_REG_ROM_PATCH_LENGTH_0_ROM_PATCH_LEN_0_Pos)/*!< SYS_REG ROM_PATCH_LENGTH_0: ROM_PATCH_LEN_0 Mask */

/* -------------------  SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_1  ------------------- */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_1_ROM_PATCH_TAR_ADDR_1_Pos 2                             /*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_1: ROM_PATCH_TAR_ADDR_1
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_1_ROM_PATCH_TAR_ADDR_1_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_1_ROM_PATCH_TAR_ADDR_1_Pos)/*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_1: ROM_PATCH_TAR_ADDR_1
                                                         Mask                                                                                      */

/* ------------------  SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_1  ------------------ */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_1_ROM_PATCH_ORI_ADDR_1_Pos 2                           /*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_1: ROM_PATCH_ORI_ADDR_1
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_1_ROM_PATCH_ORI_ADDR_1_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_1_ROM_PATCH_ORI_ADDR_1_Pos)/*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_1: ROM_PATCH_ORI_ADDR_1
                                                         Mask                                                                                      */

/* -------------------------  SYS_REG_ROM_PATCH_LENGTH_1  ------------------------- */
#define SYS_REG_ROM_PATCH_LENGTH_1_ROM_PATCH_LEN_1_Pos 0                                              /*!< SYS_REG ROM_PATCH_LENGTH_1: ROM_PATCH_LEN_1 Position */
#define SYS_REG_ROM_PATCH_LENGTH_1_ROM_PATCH_LEN_1_Msk (0x3fUL << SYS_REG_ROM_PATCH_LENGTH_1_ROM_PATCH_LEN_1_Pos)/*!< SYS_REG ROM_PATCH_LENGTH_1: ROM_PATCH_LEN_1 Mask */

/* -------------------  SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_2  ------------------- */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_2_ROM_PATCH_TAR_ADDR_2_Pos 2                             /*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_2: ROM_PATCH_TAR_ADDR_2
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_2_ROM_PATCH_TAR_ADDR_2_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_2_ROM_PATCH_TAR_ADDR_2_Pos)/*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_2: ROM_PATCH_TAR_ADDR_2
                                                         Mask                                                                                      */

/* ------------------  SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_2  ------------------ */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_2_ROM_PATCH_ORI_ADDR_2_Pos 2                           /*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_2: ROM_PATCH_ORI_ADDR_2
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_2_ROM_PATCH_ORI_ADDR_2_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_2_ROM_PATCH_ORI_ADDR_2_Pos)/*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_2: ROM_PATCH_ORI_ADDR_2
                                                         Mask                                                                                      */

/* -------------------------  SYS_REG_ROM_PATCH_LENGTH_2  ------------------------- */
#define SYS_REG_ROM_PATCH_LENGTH_2_ROM_PATCH_LEN_2_Pos 0                                              /*!< SYS_REG ROM_PATCH_LENGTH_2: ROM_PATCH_LEN_2 Position */
#define SYS_REG_ROM_PATCH_LENGTH_2_ROM_PATCH_LEN_2_Msk (0x3fUL << SYS_REG_ROM_PATCH_LENGTH_2_ROM_PATCH_LEN_2_Pos)/*!< SYS_REG ROM_PATCH_LENGTH_2: ROM_PATCH_LEN_2 Mask */

/* -------------------  SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_3  ------------------- */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_3_ROM_PATCH_TAR_ADDR_3_Pos 2                             /*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_3: ROM_PATCH_TAR_ADDR_3
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_3_ROM_PATCH_TAR_ADDR_3_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_3_ROM_PATCH_TAR_ADDR_3_Pos)/*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_3: ROM_PATCH_TAR_ADDR_3
                                                         Mask                                                                                      */

/* ------------------  SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_3  ------------------ */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_3_ROM_PATCH_ORI_ADDR_3_Pos 2                           /*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_3: ROM_PATCH_ORI_ADDR_3
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_3_ROM_PATCH_ORI_ADDR_3_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_3_ROM_PATCH_ORI_ADDR_3_Pos)/*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_3: ROM_PATCH_ORI_ADDR_3
                                                         Mask                                                                                      */

/* -------------------------  SYS_REG_ROM_PATCH_LENGTH_3  ------------------------- */
#define SYS_REG_ROM_PATCH_LENGTH_3_ROM_PATCH_LEN_3_Pos 0                                              /*!< SYS_REG ROM_PATCH_LENGTH_3: ROM_PATCH_LEN_3 Position */
#define SYS_REG_ROM_PATCH_LENGTH_3_ROM_PATCH_LEN_3_Msk (0x3fUL << SYS_REG_ROM_PATCH_LENGTH_3_ROM_PATCH_LEN_3_Pos)/*!< SYS_REG ROM_PATCH_LENGTH_3: ROM_PATCH_LEN_3 Mask */

/* -------------------  SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_4  ------------------- */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_4_ROM_PATCH_TAR_ADDR_4_Pos 2                             /*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_4: ROM_PATCH_TAR_ADDR_4
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_4_ROM_PATCH_TAR_ADDR_4_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_4_ROM_PATCH_TAR_ADDR_4_Pos)/*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_4: ROM_PATCH_TAR_ADDR_4
                                                         Mask                                                                                      */

/* ------------------  SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_4  ------------------ */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_4_ROM_PATCH_ORI_ADDR_4_Pos 2                           /*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_4: ROM_PATCH_ORI_ADDR_4
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_4_ROM_PATCH_ORI_ADDR_4_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_4_ROM_PATCH_ORI_ADDR_4_Pos)/*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_4: ROM_PATCH_ORI_ADDR_4
                                                         Mask                                                                                      */

/* -------------------------  SYS_REG_ROM_PATCH_LENGTH_4  ------------------------- */
#define SYS_REG_ROM_PATCH_LENGTH_4_ROM_PATCH_LEN_4_Pos 0                                              /*!< SYS_REG ROM_PATCH_LENGTH_4: ROM_PATCH_LEN_4 Position */
#define SYS_REG_ROM_PATCH_LENGTH_4_ROM_PATCH_LEN_4_Msk (0x3fUL << SYS_REG_ROM_PATCH_LENGTH_4_ROM_PATCH_LEN_4_Pos)/*!< SYS_REG ROM_PATCH_LENGTH_4: ROM_PATCH_LEN_4 Mask */

/* -------------------  SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_5  ------------------- */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_5_ROM_PATCH_TAR_ADDR_5_Pos 2                             /*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_5: ROM_PATCH_TAR_ADDR_5
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_5_ROM_PATCH_TAR_ADDR_5_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_5_ROM_PATCH_TAR_ADDR_5_Pos)/*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_5: ROM_PATCH_TAR_ADDR_5
                                                         Mask                                                                                      */

/* ------------------  SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_5  ------------------ */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_5_ROM_PATCH_ORI_ADDR_5_Pos 2                           /*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_5: ROM_PATCH_ORI_ADDR_5
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_5_ROM_PATCH_ORI_ADDR_5_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_5_ROM_PATCH_ORI_ADDR_5_Pos)/*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_5: ROM_PATCH_ORI_ADDR_5
                                                         Mask                                                                                      */

/* -------------------------  SYS_REG_ROM_PATCH_LENGTH_5  ------------------------- */
#define SYS_REG_ROM_PATCH_LENGTH_5_ROM_PATCH_LEN_5_Pos 0                                              /*!< SYS_REG ROM_PATCH_LENGTH_5: ROM_PATCH_LEN_5 Position */
#define SYS_REG_ROM_PATCH_LENGTH_5_ROM_PATCH_LEN_5_Msk (0x3fUL << SYS_REG_ROM_PATCH_LENGTH_5_ROM_PATCH_LEN_5_Pos)/*!< SYS_REG ROM_PATCH_LENGTH_5: ROM_PATCH_LEN_5 Mask */

/* -------------------  SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_6  ------------------- */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_6_ROM_PATCH_TAR_ADDR_6_Pos 2                             /*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_6: ROM_PATCH_TAR_ADDR_6
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_6_ROM_PATCH_TAR_ADDR_6_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_6_ROM_PATCH_TAR_ADDR_6_Pos)/*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_6: ROM_PATCH_TAR_ADDR_6
                                                         Mask                                                                                      */

/* ------------------  SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_6  ------------------ */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_6_ROM_PATCH_ORI_ADDR_6_Pos 2                           /*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_6: ROM_PATCH_ORI_ADDR_6
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_6_ROM_PATCH_ORI_ADDR_6_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_6_ROM_PATCH_ORI_ADDR_6_Pos)/*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_6: ROM_PATCH_ORI_ADDR_6
                                                         Mask                                                                                      */

/* -------------------------  SYS_REG_ROM_PATCH_LENGTH_6  ------------------------- */
#define SYS_REG_ROM_PATCH_LENGTH_6_ROM_PATCH_LEN_6_Pos 0                                              /*!< SYS_REG ROM_PATCH_LENGTH_6: ROM_PATCH_LEN_6 Position */
#define SYS_REG_ROM_PATCH_LENGTH_6_ROM_PATCH_LEN_6_Msk (0x3fUL << SYS_REG_ROM_PATCH_LENGTH_6_ROM_PATCH_LEN_6_Pos)/*!< SYS_REG ROM_PATCH_LENGTH_6: ROM_PATCH_LEN_6 Mask */

/* -------------------  SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_7  ------------------- */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_7_ROM_PATCH_TAR_ADDR_7_Pos 2                             /*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_7: ROM_PATCH_TAR_ADDR_7
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_7_ROM_PATCH_TAR_ADDR_7_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_7_ROM_PATCH_TAR_ADDR_7_Pos)/*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_7: ROM_PATCH_TAR_ADDR_7
                                                         Mask                                                                                      */

/* ------------------  SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_7  ------------------ */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_7_ROM_PATCH_ORI_ADDR_7_Pos 2                           /*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_7: ROM_PATCH_ORI_ADDR_7
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_7_ROM_PATCH_ORI_ADDR_7_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_7_ROM_PATCH_ORI_ADDR_7_Pos)/*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_7: ROM_PATCH_ORI_ADDR_7
                                                         Mask                                                                                      */

/* -------------------------  SYS_REG_ROM_PATCH_LENGTH_7  ------------------------- */
#define SYS_REG_ROM_PATCH_LENGTH_7_ROM_PATCH_LEN_7_Pos 0                                              /*!< SYS_REG ROM_PATCH_LENGTH_7: ROM_PATCH_LEN_7 Position */
#define SYS_REG_ROM_PATCH_LENGTH_7_ROM_PATCH_LEN_7_Msk (0x3fUL << SYS_REG_ROM_PATCH_LENGTH_7_ROM_PATCH_LEN_7_Pos)/*!< SYS_REG ROM_PATCH_LENGTH_7: ROM_PATCH_LEN_7 Mask */

/* -------------------  SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_8  ------------------- */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_8_ROM_PATCH_TAR_ADDR_8_Pos 2                             /*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_8: ROM_PATCH_TAR_ADDR_8
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_8_ROM_PATCH_TAR_ADDR_8_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_8_ROM_PATCH_TAR_ADDR_8_Pos)/*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_8: ROM_PATCH_TAR_ADDR_8
                                                         Mask                                                                                      */

/* ------------------  SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_8  ------------------ */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_8_ROM_PATCH_ORI_ADDR_8_Pos 2                           /*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_8: ROM_PATCH_ORI_ADDR_8
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_8_ROM_PATCH_ORI_ADDR_8_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_8_ROM_PATCH_ORI_ADDR_8_Pos)/*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_8: ROM_PATCH_ORI_ADDR_8
                                                         Mask                                                                                      */

/* -------------------------  SYS_REG_ROM_PATCH_LENGTH_8  ------------------------- */
#define SYS_REG_ROM_PATCH_LENGTH_8_ROM_PATCH_LEN_8_Pos 0                                              /*!< SYS_REG ROM_PATCH_LENGTH_8: ROM_PATCH_LEN_8 Position */
#define SYS_REG_ROM_PATCH_LENGTH_8_ROM_PATCH_LEN_8_Msk (0x3fUL << SYS_REG_ROM_PATCH_LENGTH_8_ROM_PATCH_LEN_8_Pos)/*!< SYS_REG ROM_PATCH_LENGTH_8: ROM_PATCH_LEN_8 Mask */

/* -------------------  SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_9  ------------------- */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_9_ROM_PATCH_TAR_ADDR_9_Pos 2                             /*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_9: ROM_PATCH_TAR_ADDR_9
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_9_ROM_PATCH_TAR_ADDR_9_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_9_ROM_PATCH_TAR_ADDR_9_Pos)/*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_9: ROM_PATCH_TAR_ADDR_9
                                                         Mask                                                                                      */

/* ------------------  SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_9  ------------------ */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_9_ROM_PATCH_ORI_ADDR_9_Pos 2                           /*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_9: ROM_PATCH_ORI_ADDR_9
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_9_ROM_PATCH_ORI_ADDR_9_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_9_ROM_PATCH_ORI_ADDR_9_Pos)/*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_9: ROM_PATCH_ORI_ADDR_9
                                                         Mask                                                                                      */

/* -------------------------  SYS_REG_ROM_PATCH_LENGTH_9  ------------------------- */
#define SYS_REG_ROM_PATCH_LENGTH_9_ROM_PATCH_LEN_9_Pos 0                                              /*!< SYS_REG ROM_PATCH_LENGTH_9: ROM_PATCH_LEN_9 Position */
#define SYS_REG_ROM_PATCH_LENGTH_9_ROM_PATCH_LEN_9_Msk (0x3fUL << SYS_REG_ROM_PATCH_LENGTH_9_ROM_PATCH_LEN_9_Pos)/*!< SYS_REG ROM_PATCH_LENGTH_9: ROM_PATCH_LEN_9 Mask */

/* -------------------  SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_10  ------------------ */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_10_ROM_PATCH_TAR_ADDR_10_Pos 2                           /*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_10: ROM_PATCH_TAR_ADDR_10
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_10_ROM_PATCH_TAR_ADDR_10_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_10_ROM_PATCH_TAR_ADDR_10_Pos)/*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_10: ROM_PATCH_TAR_ADDR_10
                                                         Mask                                                                                      */

/* ------------------  SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_10  ----------------- */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_10_ROM_PATCH_ORI_ADDR_10_Pos 2                         /*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_10: ROM_PATCH_ORI_ADDR_10
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_10_ROM_PATCH_ORI_ADDR_10_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_10_ROM_PATCH_ORI_ADDR_10_Pos)/*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_10: ROM_PATCH_ORI_ADDR_10
                                                         Mask                                                                                      */

/* -------------------------  SYS_REG_ROM_PATCH_LENGTH_10  ------------------------ */
#define SYS_REG_ROM_PATCH_LENGTH_10_ROM_PATCH_LEN_10_Pos 0                                            /*!< SYS_REG ROM_PATCH_LENGTH_10: ROM_PATCH_LEN_10 Position */
#define SYS_REG_ROM_PATCH_LENGTH_10_ROM_PATCH_LEN_10_Msk (0x3fUL << SYS_REG_ROM_PATCH_LENGTH_10_ROM_PATCH_LEN_10_Pos)/*!< SYS_REG ROM_PATCH_LENGTH_10: ROM_PATCH_LEN_10 Mask */

/* -------------------  SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_11  ------------------ */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_11_ROM_PATCH_TAR_ADDR_11_Pos 2                           /*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_11: ROM_PATCH_TAR_ADDR_11
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_11_ROM_PATCH_TAR_ADDR_11_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_11_ROM_PATCH_TAR_ADDR_11_Pos)/*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_11: ROM_PATCH_TAR_ADDR_11
                                                         Mask                                                                                      */

/* ------------------  SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_11  ----------------- */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_11_ROM_PATCH_ORI_ADDR_11_Pos 2                         /*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_11: ROM_PATCH_ORI_ADDR_11
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_11_ROM_PATCH_ORI_ADDR_11_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_11_ROM_PATCH_ORI_ADDR_11_Pos)/*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_11: ROM_PATCH_ORI_ADDR_11
                                                         Mask                                                                                      */

/* -------------------------  SYS_REG_ROM_PATCH_LENGTH_11  ------------------------ */
#define SYS_REG_ROM_PATCH_LENGTH_11_ROM_PATCH_LEN_11_Pos 0                                            /*!< SYS_REG ROM_PATCH_LENGTH_11: ROM_PATCH_LEN_11 Position */
#define SYS_REG_ROM_PATCH_LENGTH_11_ROM_PATCH_LEN_11_Msk (0x3fUL << SYS_REG_ROM_PATCH_LENGTH_11_ROM_PATCH_LEN_11_Pos)/*!< SYS_REG ROM_PATCH_LENGTH_11: ROM_PATCH_LEN_11 Mask */

/* -------------------  SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_12  ------------------ */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_12_ROM_PATCH_TAR_ADDR_12_Pos 2                           /*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_12: ROM_PATCH_TAR_ADDR_12
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_12_ROM_PATCH_TAR_ADDR_12_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_12_ROM_PATCH_TAR_ADDR_12_Pos)/*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_12: ROM_PATCH_TAR_ADDR_12
                                                         Mask                                                                                      */

/* ------------------  SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_12  ----------------- */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_12_ROM_PATCH_ORI_ADDR_12_Pos 2                         /*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_12: ROM_PATCH_ORI_ADDR_12
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_12_ROM_PATCH_ORI_ADDR_12_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_12_ROM_PATCH_ORI_ADDR_12_Pos)/*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_12: ROM_PATCH_ORI_ADDR_12
                                                         Mask                                                                                      */

/* -------------------------  SYS_REG_ROM_PATCH_LENGTH_12  ------------------------ */
#define SYS_REG_ROM_PATCH_LENGTH_12_ROM_PATCH_LEN_12_Pos 0                                            /*!< SYS_REG ROM_PATCH_LENGTH_12: ROM_PATCH_LEN_12 Position */
#define SYS_REG_ROM_PATCH_LENGTH_12_ROM_PATCH_LEN_12_Msk (0x3fUL << SYS_REG_ROM_PATCH_LENGTH_12_ROM_PATCH_LEN_12_Pos)/*!< SYS_REG ROM_PATCH_LENGTH_12: ROM_PATCH_LEN_12 Mask */

/* -------------------  SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_13  ------------------ */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_13_ROM_PATCH_TAR_ADDR_13_Pos 2                           /*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_13: ROM_PATCH_TAR_ADDR_13
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_13_ROM_PATCH_TAR_ADDR_13_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_13_ROM_PATCH_TAR_ADDR_13_Pos)/*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_13: ROM_PATCH_TAR_ADDR_13
                                                         Mask                                                                                      */

/* ------------------  SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_13  ----------------- */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_13_ROM_PATCH_ORI_ADDR_13_Pos 2                         /*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_13: ROM_PATCH_ORI_ADDR_13
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_13_ROM_PATCH_ORI_ADDR_13_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_13_ROM_PATCH_ORI_ADDR_13_Pos)/*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_13: ROM_PATCH_ORI_ADDR_13
                                                         Mask                                                                                      */

/* -------------------------  SYS_REG_ROM_PATCH_LENGTH_13  ------------------------ */
#define SYS_REG_ROM_PATCH_LENGTH_13_ROM_PATCH_LEN_13_Pos 0                                            /*!< SYS_REG ROM_PATCH_LENGTH_13: ROM_PATCH_LEN_13 Position */
#define SYS_REG_ROM_PATCH_LENGTH_13_ROM_PATCH_LEN_13_Msk (0x3fUL << SYS_REG_ROM_PATCH_LENGTH_13_ROM_PATCH_LEN_13_Pos)/*!< SYS_REG ROM_PATCH_LENGTH_13: ROM_PATCH_LEN_13 Mask */

/* -------------------  SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_14  ------------------ */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_14_ROM_PATCH_TAR_ADDR_14_Pos 2                           /*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_14: ROM_PATCH_TAR_ADDR_14
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_14_ROM_PATCH_TAR_ADDR_14_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_14_ROM_PATCH_TAR_ADDR_14_Pos)/*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_14: ROM_PATCH_TAR_ADDR_14
                                                         Mask                                                                                      */

/* ------------------  SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_14  ----------------- */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_14_ROM_PATCH_ORI_ADDR_14_Pos 2                         /*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_14: ROM_PATCH_ORI_ADDR_14
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_14_ROM_PATCH_ORI_ADDR_14_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_14_ROM_PATCH_ORI_ADDR_14_Pos)/*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_14: ROM_PATCH_ORI_ADDR_14
                                                         Mask                                                                                      */

/* -------------------------  SYS_REG_ROM_PATCH_LENGTH_14  ------------------------ */
#define SYS_REG_ROM_PATCH_LENGTH_14_ROM_PATCH_LEN_14_Pos 0                                            /*!< SYS_REG ROM_PATCH_LENGTH_14: ROM_PATCH_LEN_14 Position */
#define SYS_REG_ROM_PATCH_LENGTH_14_ROM_PATCH_LEN_14_Msk (0x3fUL << SYS_REG_ROM_PATCH_LENGTH_14_ROM_PATCH_LEN_14_Pos)/*!< SYS_REG ROM_PATCH_LENGTH_14: ROM_PATCH_LEN_14 Mask */

/* -------------------  SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_15  ------------------ */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_15_ROM_PATCH_TAR_ADDR_15_Pos 2                           /*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_15: ROM_PATCH_TAR_ADDR_15
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_15_ROM_PATCH_TAR_ADDR_15_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_15_ROM_PATCH_TAR_ADDR_15_Pos)/*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_15: ROM_PATCH_TAR_ADDR_15
                                                         Mask                                                                                      */

/* ------------------  SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_15  ----------------- */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_15_ROM_PATCH_ORI_ADDR_15_Pos 2                         /*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_15: ROM_PATCH_ORI_ADDR_15
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_15_ROM_PATCH_ORI_ADDR_15_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_15_ROM_PATCH_ORI_ADDR_15_Pos)/*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_15: ROM_PATCH_ORI_ADDR_15
                                                         Mask                                                                                      */

/* -------------------------  SYS_REG_ROM_PATCH_LENGTH_15  ------------------------ */
#define SYS_REG_ROM_PATCH_LENGTH_15_ROM_PATCH_LEN_15_Pos 0                                            /*!< SYS_REG ROM_PATCH_LENGTH_15: ROM_PATCH_LEN_15 Position */
#define SYS_REG_ROM_PATCH_LENGTH_15_ROM_PATCH_LEN_15_Msk (0x3fUL << SYS_REG_ROM_PATCH_LENGTH_15_ROM_PATCH_LEN_15_Pos)/*!< SYS_REG ROM_PATCH_LENGTH_15: ROM_PATCH_LEN_15 Mask */

/* -------------------  SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_16  ------------------ */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_16_ROM_PATCH_TAR_ADDR_16_Pos 2                           /*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_16: ROM_PATCH_TAR_ADDR_16
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_16_ROM_PATCH_TAR_ADDR_16_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_TARGET_ADDRESS_16_ROM_PATCH_TAR_ADDR_16_Pos)/*!< SYS_REG ROM_PATCH_SUB_TARGET_ADDRESS_16: ROM_PATCH_TAR_ADDR_16
                                                         Mask                                                                                      */

/* ------------------  SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_16  ----------------- */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_16_ROM_PATCH_ORI_ADDR_16_Pos 2                         /*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_16: ROM_PATCH_ORI_ADDR_16
                                                         Position                                                                                  */
#define SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_16_ROM_PATCH_ORI_ADDR_16_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_SUB_ORIGINAL_ADDRESS_16_ROM_PATCH_ORI_ADDR_16_Pos)/*!< SYS_REG ROM_PATCH_SUB_ORIGINAL_ADDRESS_16: ROM_PATCH_ORI_ADDR_16
                                                         Mask                                                                                      */

/* -------------------------  SYS_REG_ROM_PATCH_LENGTH_16  ------------------------ */
#define SYS_REG_ROM_PATCH_LENGTH_16_ROM_PATCH_LEN_16_Pos 0                                            /*!< SYS_REG ROM_PATCH_LENGTH_16: ROM_PATCH_LEN_16 Position */
#define SYS_REG_ROM_PATCH_LENGTH_16_ROM_PATCH_LEN_16_Msk (0x0003ffffUL << SYS_REG_ROM_PATCH_LENGTH_16_ROM_PATCH_LEN_16_Pos)/*!< SYS_REG ROM_PATCH_LENGTH_16: ROM_PATCH_LEN_16 Mask */

/* --------------------------  SYS_REG_BUS_MONITOR_TRIG  -------------------------- */
#define SYS_REG_BUS_MONITOR_TRIG_HADDR_TRIG_Pos 0                                                     /*!< SYS_REG BUS_MONITOR_TRIG: HADDR_TRIG Position */
#define SYS_REG_BUS_MONITOR_TRIG_HADDR_TRIG_Msk (0xffffffffUL << SYS_REG_BUS_MONITOR_TRIG_HADDR_TRIG_Pos)/*!< SYS_REG BUS_MONITOR_TRIG: HADDR_TRIG Mask */

/* ------------------------  SYS_REG_BUS_ADDRESS_MONITOR_0  ----------------------- */
#define SYS_REG_BUS_ADDRESS_MONITOR_0_HADDR_MONITOR_0_Pos 0                                           /*!< SYS_REG BUS_ADDRESS_MONITOR_0: HADDR_MONITOR_0 Position */
#define SYS_REG_BUS_ADDRESS_MONITOR_0_HADDR_MONITOR_0_Msk (0xffffffffUL << SYS_REG_BUS_ADDRESS_MONITOR_0_HADDR_MONITOR_0_Pos)/*!< SYS_REG BUS_ADDRESS_MONITOR_0: HADDR_MONITOR_0 Mask */

/* ------------------------  SYS_REG_BUS_HMASTER_MONITOR0  ------------------------ */
#define SYS_REG_BUS_HMASTER_MONITOR0_HMASTER_MONITOR_0_Pos 0                                          /*!< SYS_REG BUS_HMASTER_MONITOR0: HMASTER_MONITOR_0 Position */
#define SYS_REG_BUS_HMASTER_MONITOR0_HMASTER_MONITOR_0_Msk (0x0fUL << SYS_REG_BUS_HMASTER_MONITOR0_HMASTER_MONITOR_0_Pos)/*!< SYS_REG BUS_HMASTER_MONITOR0: HMASTER_MONITOR_0 Mask */

/* ------------------------  SYS_REG_BUS_ADDRESS_MONITOR_1  ----------------------- */
#define SYS_REG_BUS_ADDRESS_MONITOR_1_HADDR_MONITOR_1_Pos 0                                           /*!< SYS_REG BUS_ADDRESS_MONITOR_1: HADDR_MONITOR_1 Position */
#define SYS_REG_BUS_ADDRESS_MONITOR_1_HADDR_MONITOR_1_Msk (0xffffffffUL << SYS_REG_BUS_ADDRESS_MONITOR_1_HADDR_MONITOR_1_Pos)/*!< SYS_REG BUS_ADDRESS_MONITOR_1: HADDR_MONITOR_1 Mask */

/* ------------------------  SYS_REG_BUS_HMASTER_MONITOR1  ------------------------ */
#define SYS_REG_BUS_HMASTER_MONITOR1_HMASTER_MONITOR_1_Pos 0                                          /*!< SYS_REG BUS_HMASTER_MONITOR1: HMASTER_MONITOR_1 Position */
#define SYS_REG_BUS_HMASTER_MONITOR1_HMASTER_MONITOR_1_Msk (0x0fUL << SYS_REG_BUS_HMASTER_MONITOR1_HMASTER_MONITOR_1_Pos)/*!< SYS_REG BUS_HMASTER_MONITOR1: HMASTER_MONITOR_1 Mask */

/* ------------------------  SYS_REG_BUS_ADDRESS_MONITOR_2  ----------------------- */
#define SYS_REG_BUS_ADDRESS_MONITOR_2_HADDR_MONITOR_2_Pos 0                                           /*!< SYS_REG BUS_ADDRESS_MONITOR_2: HADDR_MONITOR_2 Position */
#define SYS_REG_BUS_ADDRESS_MONITOR_2_HADDR_MONITOR_2_Msk (0xffffffffUL << SYS_REG_BUS_ADDRESS_MONITOR_2_HADDR_MONITOR_2_Pos)/*!< SYS_REG BUS_ADDRESS_MONITOR_2: HADDR_MONITOR_2 Mask */

/* ------------------------  SYS_REG_BUS_HMASTER_MONITOR2  ------------------------ */
#define SYS_REG_BUS_HMASTER_MONITOR2_HMASTER_MONITOR_2_Pos 0                                          /*!< SYS_REG BUS_HMASTER_MONITOR2: HMASTER_MONITOR_2 Position */
#define SYS_REG_BUS_HMASTER_MONITOR2_HMASTER_MONITOR_2_Msk (0x0fUL << SYS_REG_BUS_HMASTER_MONITOR2_HMASTER_MONITOR_2_Pos)/*!< SYS_REG BUS_HMASTER_MONITOR2: HMASTER_MONITOR_2 Mask */

/* ------------------------  SYS_REG_BUS_ADDRESS_MONITOR_3  ----------------------- */
#define SYS_REG_BUS_ADDRESS_MONITOR_3_HADDR_MONITOR_3_Pos 0                                           /*!< SYS_REG BUS_ADDRESS_MONITOR_3: HADDR_MONITOR_3 Position */
#define SYS_REG_BUS_ADDRESS_MONITOR_3_HADDR_MONITOR_3_Msk (0xffffffffUL << SYS_REG_BUS_ADDRESS_MONITOR_3_HADDR_MONITOR_3_Pos)/*!< SYS_REG BUS_ADDRESS_MONITOR_3: HADDR_MONITOR_3 Mask */

/* ------------------------  SYS_REG_BUS_HMASTER_MONITOR3  ------------------------ */
#define SYS_REG_BUS_HMASTER_MONITOR3_HMASTER_MONITOR_3_Pos 0                                          /*!< SYS_REG BUS_HMASTER_MONITOR3: HMASTER_MONITOR_3 Position */
#define SYS_REG_BUS_HMASTER_MONITOR3_HMASTER_MONITOR_3_Msk (0x0fUL << SYS_REG_BUS_HMASTER_MONITOR3_HMASTER_MONITOR_3_Pos)/*!< SYS_REG BUS_HMASTER_MONITOR3: HMASTER_MONITOR_3 Mask */

/* ------------------------  SYS_REG_BUS_ADDRESS_MONITOR_4  ----------------------- */
#define SYS_REG_BUS_ADDRESS_MONITOR_4_HADDR_MONITOR_4_Pos 0                                           /*!< SYS_REG BUS_ADDRESS_MONITOR_4: HADDR_MONITOR_4 Position */
#define SYS_REG_BUS_ADDRESS_MONITOR_4_HADDR_MONITOR_4_Msk (0xffffffffUL << SYS_REG_BUS_ADDRESS_MONITOR_4_HADDR_MONITOR_4_Pos)/*!< SYS_REG BUS_ADDRESS_MONITOR_4: HADDR_MONITOR_4 Mask */

/* ------------------------  SYS_REG_BUS_HMASTER_MONITOR4  ------------------------ */
#define SYS_REG_BUS_HMASTER_MONITOR4_HMASTER_MONITOR_4_Pos 0                                          /*!< SYS_REG BUS_HMASTER_MONITOR4: HMASTER_MONITOR_4 Position */
#define SYS_REG_BUS_HMASTER_MONITOR4_HMASTER_MONITOR_4_Msk (0x0fUL << SYS_REG_BUS_HMASTER_MONITOR4_HMASTER_MONITOR_4_Pos)/*!< SYS_REG BUS_HMASTER_MONITOR4: HMASTER_MONITOR_4 Mask */

/* ------------------------  SYS_REG_BUS_ADDRESS_MONITOR_5  ----------------------- */
#define SYS_REG_BUS_ADDRESS_MONITOR_5_HADDR_MONITOR_5_Pos 0                                           /*!< SYS_REG BUS_ADDRESS_MONITOR_5: HADDR_MONITOR_5 Position */
#define SYS_REG_BUS_ADDRESS_MONITOR_5_HADDR_MONITOR_5_Msk (0xffffffffUL << SYS_REG_BUS_ADDRESS_MONITOR_5_HADDR_MONITOR_5_Pos)/*!< SYS_REG BUS_ADDRESS_MONITOR_5: HADDR_MONITOR_5 Mask */

/* ------------------------  SYS_REG_BUS_HMASTER_MONITOR5  ------------------------ */
#define SYS_REG_BUS_HMASTER_MONITOR5_HMASTER_MONITOR_5_Pos 0                                          /*!< SYS_REG BUS_HMASTER_MONITOR5: HMASTER_MONITOR_5 Position */
#define SYS_REG_BUS_HMASTER_MONITOR5_HMASTER_MONITOR_5_Msk (0x0fUL << SYS_REG_BUS_HMASTER_MONITOR5_HMASTER_MONITOR_5_Pos)/*!< SYS_REG BUS_HMASTER_MONITOR5: HMASTER_MONITOR_5 Mask */

/* ------------------------  SYS_REG_BUS_ADDRESS_MONITOR_6  ----------------------- */
#define SYS_REG_BUS_ADDRESS_MONITOR_6_HADDR_MONITOR_6_Pos 0                                           /*!< SYS_REG BUS_ADDRESS_MONITOR_6: HADDR_MONITOR_6 Position */
#define SYS_REG_BUS_ADDRESS_MONITOR_6_HADDR_MONITOR_6_Msk (0xffffffffUL << SYS_REG_BUS_ADDRESS_MONITOR_6_HADDR_MONITOR_6_Pos)/*!< SYS_REG BUS_ADDRESS_MONITOR_6: HADDR_MONITOR_6 Mask */

/* ------------------------  SYS_REG_BUS_HMASTER_MONITOR6  ------------------------ */
#define SYS_REG_BUS_HMASTER_MONITOR6_HMASTER_MONITOR_6_Pos 0                                          /*!< SYS_REG BUS_HMASTER_MONITOR6: HMASTER_MONITOR_6 Position */
#define SYS_REG_BUS_HMASTER_MONITOR6_HMASTER_MONITOR_6_Msk (0x0fUL << SYS_REG_BUS_HMASTER_MONITOR6_HMASTER_MONITOR_6_Pos)/*!< SYS_REG BUS_HMASTER_MONITOR6: HMASTER_MONITOR_6 Mask */

/* ------------------------  SYS_REG_BUS_ADDRESS_MONITOR_7  ----------------------- */
#define SYS_REG_BUS_ADDRESS_MONITOR_7_HADDR_MONITOR_7_Pos 0                                           /*!< SYS_REG BUS_ADDRESS_MONITOR_7: HADDR_MONITOR_7 Position */
#define SYS_REG_BUS_ADDRESS_MONITOR_7_HADDR_MONITOR_7_Msk (0xffffffffUL << SYS_REG_BUS_ADDRESS_MONITOR_7_HADDR_MONITOR_7_Pos)/*!< SYS_REG BUS_ADDRESS_MONITOR_7: HADDR_MONITOR_7 Mask */

/* ------------------------  SYS_REG_BUS_HMASTER_MONITOR7  ------------------------ */
#define SYS_REG_BUS_HMASTER_MONITOR7_HMASTER_MONITOR_7_Pos 0                                          /*!< SYS_REG BUS_HMASTER_MONITOR7: HMASTER_MONITOR_7 Position */
#define SYS_REG_BUS_HMASTER_MONITOR7_HMASTER_MONITOR_7_Msk (0x0fUL << SYS_REG_BUS_HMASTER_MONITOR7_HMASTER_MONITOR_7_Pos)/*!< SYS_REG BUS_HMASTER_MONITOR7: HMASTER_MONITOR_7 Mask */

/* ------------------------  SYS_REG_BUS_ADDRESS_MONITOR_8  ----------------------- */
#define SYS_REG_BUS_ADDRESS_MONITOR_8_HADDR_MONITOR_8_Pos 0                                           /*!< SYS_REG BUS_ADDRESS_MONITOR_8: HADDR_MONITOR_8 Position */
#define SYS_REG_BUS_ADDRESS_MONITOR_8_HADDR_MONITOR_8_Msk (0xffffffffUL << SYS_REG_BUS_ADDRESS_MONITOR_8_HADDR_MONITOR_8_Pos)/*!< SYS_REG BUS_ADDRESS_MONITOR_8: HADDR_MONITOR_8 Mask */

/* ------------------------  SYS_REG_BUS_HMASTER_MONITOR8  ------------------------ */
#define SYS_REG_BUS_HMASTER_MONITOR8_HMASTER_MONITOR_8_Pos 0                                          /*!< SYS_REG BUS_HMASTER_MONITOR8: HMASTER_MONITOR_8 Position */
#define SYS_REG_BUS_HMASTER_MONITOR8_HMASTER_MONITOR_8_Msk (0x0fUL << SYS_REG_BUS_HMASTER_MONITOR8_HMASTER_MONITOR_8_Pos)/*!< SYS_REG BUS_HMASTER_MONITOR8: HMASTER_MONITOR_8 Mask */

/* ------------------------  SYS_REG_BUS_ADDRESS_MONITOR_9  ----------------------- */
#define SYS_REG_BUS_ADDRESS_MONITOR_9_HADDR_MONITOR_9_Pos 0                                           /*!< SYS_REG BUS_ADDRESS_MONITOR_9: HADDR_MONITOR_9 Position */
#define SYS_REG_BUS_ADDRESS_MONITOR_9_HADDR_MONITOR_9_Msk (0xffffffffUL << SYS_REG_BUS_ADDRESS_MONITOR_9_HADDR_MONITOR_9_Pos)/*!< SYS_REG BUS_ADDRESS_MONITOR_9: HADDR_MONITOR_9 Mask */

/* ------------------------  SYS_REG_BUS_HMASTER_MONITOR9  ------------------------ */
#define SYS_REG_BUS_HMASTER_MONITOR9_HMASTER_MONITOR_9_Pos 0                                          /*!< SYS_REG BUS_HMASTER_MONITOR9: HMASTER_MONITOR_9 Position */
#define SYS_REG_BUS_HMASTER_MONITOR9_HMASTER_MONITOR_9_Msk (0x0fUL << SYS_REG_BUS_HMASTER_MONITOR9_HMASTER_MONITOR_9_Pos)/*!< SYS_REG BUS_HMASTER_MONITOR9: HMASTER_MONITOR_9 Mask */

/* -----------------------  SYS_REG_BUS_ADDRESS_MONITOR_10  ----------------------- */
#define SYS_REG_BUS_ADDRESS_MONITOR_10_HADDR_MONITOR_10_Pos 0                                         /*!< SYS_REG BUS_ADDRESS_MONITOR_10: HADDR_MONITOR_10 Position */
#define SYS_REG_BUS_ADDRESS_MONITOR_10_HADDR_MONITOR_10_Msk (0xffffffffUL << SYS_REG_BUS_ADDRESS_MONITOR_10_HADDR_MONITOR_10_Pos)/*!< SYS_REG BUS_ADDRESS_MONITOR_10: HADDR_MONITOR_10 Mask */

/* ------------------------  SYS_REG_BUS_HMASTER_MONITOR10  ----------------------- */
#define SYS_REG_BUS_HMASTER_MONITOR10_HMASTER_MONITOR_10_Pos 0                                        /*!< SYS_REG BUS_HMASTER_MONITOR10: HMASTER_MONITOR_10 Position */
#define SYS_REG_BUS_HMASTER_MONITOR10_HMASTER_MONITOR_10_Msk (0x0fUL << SYS_REG_BUS_HMASTER_MONITOR10_HMASTER_MONITOR_10_Pos)/*!< SYS_REG BUS_HMASTER_MONITOR10: HMASTER_MONITOR_10 Mask */

/* -----------------------  SYS_REG_BUS_ADDRESS_MONITOR_11  ----------------------- */
#define SYS_REG_BUS_ADDRESS_MONITOR_11_HADDR_MONITOR_11_Pos 0                                         /*!< SYS_REG BUS_ADDRESS_MONITOR_11: HADDR_MONITOR_11 Position */
#define SYS_REG_BUS_ADDRESS_MONITOR_11_HADDR_MONITOR_11_Msk (0xffffffffUL << SYS_REG_BUS_ADDRESS_MONITOR_11_HADDR_MONITOR_11_Pos)/*!< SYS_REG BUS_ADDRESS_MONITOR_11: HADDR_MONITOR_11 Mask */

/* ------------------------  SYS_REG_BUS_HMASTER_MONITOR11  ----------------------- */
#define SYS_REG_BUS_HMASTER_MONITOR11_HMASTER_MONITOR_11_Pos 0                                        /*!< SYS_REG BUS_HMASTER_MONITOR11: HMASTER_MONITOR_11 Position */
#define SYS_REG_BUS_HMASTER_MONITOR11_HMASTER_MONITOR_11_Msk (0x0fUL << SYS_REG_BUS_HMASTER_MONITOR11_HMASTER_MONITOR_11_Pos)/*!< SYS_REG BUS_HMASTER_MONITOR11: HMASTER_MONITOR_11 Mask */

/* -----------------------  SYS_REG_BUS_ADDRESS_MONITOR_12  ----------------------- */
#define SYS_REG_BUS_ADDRESS_MONITOR_12_HADDR_MONITOR_12_Pos 0                                         /*!< SYS_REG BUS_ADDRESS_MONITOR_12: HADDR_MONITOR_12 Position */
#define SYS_REG_BUS_ADDRESS_MONITOR_12_HADDR_MONITOR_12_Msk (0xffffffffUL << SYS_REG_BUS_ADDRESS_MONITOR_12_HADDR_MONITOR_12_Pos)/*!< SYS_REG BUS_ADDRESS_MONITOR_12: HADDR_MONITOR_12 Mask */

/* ------------------------  SYS_REG_BUS_HMASTER_MONITOR12  ----------------------- */
#define SYS_REG_BUS_HMASTER_MONITOR12_HMASTER_MONITOR_12_Pos 0                                        /*!< SYS_REG BUS_HMASTER_MONITOR12: HMASTER_MONITOR_12 Position */
#define SYS_REG_BUS_HMASTER_MONITOR12_HMASTER_MONITOR_12_Msk (0x0fUL << SYS_REG_BUS_HMASTER_MONITOR12_HMASTER_MONITOR_12_Pos)/*!< SYS_REG BUS_HMASTER_MONITOR12: HMASTER_MONITOR_12 Mask */

/* -----------------------  SYS_REG_BUS_ADDRESS_MONITOR_13  ----------------------- */
#define SYS_REG_BUS_ADDRESS_MONITOR_13_HADDR_MONITOR_13_Pos 0                                         /*!< SYS_REG BUS_ADDRESS_MONITOR_13: HADDR_MONITOR_13 Position */
#define SYS_REG_BUS_ADDRESS_MONITOR_13_HADDR_MONITOR_13_Msk (0xffffffffUL << SYS_REG_BUS_ADDRESS_MONITOR_13_HADDR_MONITOR_13_Pos)/*!< SYS_REG BUS_ADDRESS_MONITOR_13: HADDR_MONITOR_13 Mask */

/* ------------------------  SYS_REG_BUS_HMASTER_MONITOR13  ----------------------- */
#define SYS_REG_BUS_HMASTER_MONITOR13_HMASTER_MONITOR_13_Pos 0                                        /*!< SYS_REG BUS_HMASTER_MONITOR13: HMASTER_MONITOR_13 Position */
#define SYS_REG_BUS_HMASTER_MONITOR13_HMASTER_MONITOR_13_Msk (0x0fUL << SYS_REG_BUS_HMASTER_MONITOR13_HMASTER_MONITOR_13_Pos)/*!< SYS_REG BUS_HMASTER_MONITOR13: HMASTER_MONITOR_13 Mask */

/* -----------------------  SYS_REG_BUS_ADDRESS_MONITOR_14  ----------------------- */
#define SYS_REG_BUS_ADDRESS_MONITOR_14_HADDR_MONITOR_14_Pos 0                                         /*!< SYS_REG BUS_ADDRESS_MONITOR_14: HADDR_MONITOR_14 Position */
#define SYS_REG_BUS_ADDRESS_MONITOR_14_HADDR_MONITOR_14_Msk (0xffffffffUL << SYS_REG_BUS_ADDRESS_MONITOR_14_HADDR_MONITOR_14_Pos)/*!< SYS_REG BUS_ADDRESS_MONITOR_14: HADDR_MONITOR_14 Mask */

/* ------------------------  SYS_REG_BUS_HMASTER_MONITOR14  ----------------------- */
#define SYS_REG_BUS_HMASTER_MONITOR14_HMASTER_MONITOR_14_Pos 0                                        /*!< SYS_REG BUS_HMASTER_MONITOR14: HMASTER_MONITOR_14 Position */
#define SYS_REG_BUS_HMASTER_MONITOR14_HMASTER_MONITOR_14_Msk (0x0fUL << SYS_REG_BUS_HMASTER_MONITOR14_HMASTER_MONITOR_14_Pos)/*!< SYS_REG BUS_HMASTER_MONITOR14: HMASTER_MONITOR_14 Mask */

/* -----------------------  SYS_REG_BUS_ADDRESS_MONITOR_15  ----------------------- */
#define SYS_REG_BUS_ADDRESS_MONITOR_15_HADDR_MONITOR_15_Pos 0                                         /*!< SYS_REG BUS_ADDRESS_MONITOR_15: HADDR_MONITOR_15 Position */
#define SYS_REG_BUS_ADDRESS_MONITOR_15_HADDR_MONITOR_15_Msk (0xffffffffUL << SYS_REG_BUS_ADDRESS_MONITOR_15_HADDR_MONITOR_15_Pos)/*!< SYS_REG BUS_ADDRESS_MONITOR_15: HADDR_MONITOR_15 Mask */

/* ------------------------  SYS_REG_BUS_HMASTER_MONITOR15  ----------------------- */
#define SYS_REG_BUS_HMASTER_MONITOR15_HMASTER_MONITOR_15_Pos 0                                        /*!< SYS_REG BUS_HMASTER_MONITOR15: HMASTER_MONITOR_15 Position */
#define SYS_REG_BUS_HMASTER_MONITOR15_HMASTER_MONITOR_15_Msk (0x0fUL << SYS_REG_BUS_HMASTER_MONITOR15_HMASTER_MONITOR_15_Pos)/*!< SYS_REG BUS_HMASTER_MONITOR15: HMASTER_MONITOR_15 Mask */

/* ----------------------------  SYS_REG_ROM_TEST_MODE  --------------------------- */
#define SYS_REG_ROM_TEST_MODE_ROM_TEST_MODE_Pos 0                                                     /*!< SYS_REG ROM_TEST_MODE: ROM_TEST_MODE Position */
#define SYS_REG_ROM_TEST_MODE_ROM_TEST_MODE_Msk (0x0000ffffUL << SYS_REG_ROM_TEST_MODE_ROM_TEST_MODE_Pos)/*!< SYS_REG ROM_TEST_MODE: ROM_TEST_MODE Mask */

/* ----------------------------  SYS_REG_ROM_BIST_CTRL  --------------------------- */
#define SYS_REG_ROM_BIST_CTRL_ROM_BIST_ENABLE_Pos 0                                                   /*!< SYS_REG ROM_BIST_CTRL: ROM_BIST_ENABLE Position */
#define SYS_REG_ROM_BIST_CTRL_ROM_BIST_ENABLE_Msk (0x01UL << SYS_REG_ROM_BIST_CTRL_ROM_BIST_ENABLE_Pos)/*!< SYS_REG ROM_BIST_CTRL: ROM_BIST_ENABLE Mask */
#define SYS_REG_ROM_BIST_CTRL_ROM_BIST_READY_TO_READ_Pos 1                                            /*!< SYS_REG ROM_BIST_CTRL: ROM_BIST_READY_TO_READ Position */
#define SYS_REG_ROM_BIST_CTRL_ROM_BIST_READY_TO_READ_Msk (0x01UL << SYS_REG_ROM_BIST_CTRL_ROM_BIST_READY_TO_READ_Pos)/*!< SYS_REG ROM_BIST_CTRL: ROM_BIST_READY_TO_READ Mask */
#define SYS_REG_ROM_BIST_CTRL_ROM_BIST_ADDR_Pos 12                                                    /*!< SYS_REG ROM_BIST_CTRL: ROM_BIST_ADDR Position */
#define SYS_REG_ROM_BIST_CTRL_ROM_BIST_ADDR_Msk (0x000fffffUL << SYS_REG_ROM_BIST_CTRL_ROM_BIST_ADDR_Pos)/*!< SYS_REG ROM_BIST_CTRL: ROM_BIST_ADDR Mask */

/* --------------------------  SYS_REG_ROM_BIST_ADDR_SET  ------------------------- */
#define SYS_REG_ROM_BIST_ADDR_SET_ROM_BIST_TAR_ADDR_Pos 0                                             /*!< SYS_REG ROM_BIST_ADDR_SET: ROM_BIST_TAR_ADDR Position */
#define SYS_REG_ROM_BIST_ADDR_SET_ROM_BIST_TAR_ADDR_Msk (0xffffffffUL << SYS_REG_ROM_BIST_ADDR_SET_ROM_BIST_TAR_ADDR_Pos)/*!< SYS_REG ROM_BIST_ADDR_SET: ROM_BIST_TAR_ADDR Mask */

/* ------------------------------  SYS_REG_READ_PROT  ----------------------------- */
#define SYS_REG_READ_PROT_READ_PROT_Pos       0                                                       /*!< SYS_REG READ_PROT: READ_PROT Position   */
#define SYS_REG_READ_PROT_READ_PROT_Msk       (0x01UL << SYS_REG_READ_PROT_READ_PROT_Pos)             /*!< SYS_REG READ_PROT: READ_PROT Mask       */


/* ================================================================================ */
/* ================          Group 'Timer' Position & Mask         ================ */
/* ================================================================================ */


/* ---------------------------------  Timer_TIMER  -------------------------------- */
#define Timer_TIMER_TM_INIT_VALUE_Pos         0                                                       /*!< Timer TIMER: TM_INIT_VALUE Position     */
#define Timer_TIMER_TM_INIT_VALUE_Msk         (0x00ffffffUL << Timer_TIMER_TM_INIT_VALUE_Pos)         /*!< Timer TIMER: TM_INIT_VALUE Mask         */

/* -------------------------------  Timer_CFG_TIME  ------------------------------- */
#define Timer_CFG_TIME_TM_CNT_VALUE_Pos       0                                                       /*!< Timer CFG_TIME: TM_CNT_VALUE Position   */
#define Timer_CFG_TIME_TM_CNT_VALUE_Msk       (0x00ffffffUL << Timer_CFG_TIME_TM_CNT_VALUE_Pos)       /*!< Timer CFG_TIME: TM_CNT_VALUE Mask       */
#define Timer_CFG_TIME_TM_MODE_Pos            24                                                      /*!< Timer CFG_TIME: TM_MODE Position        */
#define Timer_CFG_TIME_TM_MODE_Msk            (0x01UL << Timer_CFG_TIME_TM_MODE_Pos)                  /*!< Timer CFG_TIME: TM_MODE Mask            */
#define Timer_CFG_TIME_TM_INT_STS_DONE_Pos    25                                                      /*!< Timer CFG_TIME: TM_INT_STS_DONE Position */
#define Timer_CFG_TIME_TM_INT_STS_DONE_Msk    (0x01UL << Timer_CFG_TIME_TM_INT_STS_DONE_Pos)          /*!< Timer CFG_TIME: TM_INT_STS_DONE Mask    */
#define Timer_CFG_TIME_TM_INT_MASK_Pos        26                                                      /*!< Timer CFG_TIME: TM_INT_MASK Position    */
#define Timer_CFG_TIME_TM_INT_MASK_Msk        (0x01UL << Timer_CFG_TIME_TM_INT_MASK_Pos)              /*!< Timer CFG_TIME: TM_INT_MASK Mask        */


/* ================================================================================ */
/* ================        struct 'UTimer0' Position & Mask        ================ */
/* ================================================================================ */


/* --------------------------------  UTimer0_TIMER  ------------------------------- */
#define UTimer0_TIMER_TM_INIT_VALUE_Pos       0                                                       /*!< UTimer0 TIMER: TM_INIT_VALUE Position   */
#define UTimer0_TIMER_TM_INIT_VALUE_Msk       (0x00ffffffUL << UTimer0_TIMER_TM_INIT_VALUE_Pos)       /*!< UTimer0 TIMER: TM_INIT_VALUE Mask       */

/* ------------------------------  UTimer0_CFG_TIME  ------------------------------ */
#define UTimer0_CFG_TIME_TM_CNT_VALUE_Pos     0                                                       /*!< UTimer0 CFG_TIME: TM_CNT_VALUE Position */
#define UTimer0_CFG_TIME_TM_CNT_VALUE_Msk     (0x00ffffffUL << UTimer0_CFG_TIME_TM_CNT_VALUE_Pos)     /*!< UTimer0 CFG_TIME: TM_CNT_VALUE Mask     */
#define UTimer0_CFG_TIME_TM_MODE_Pos          24                                                      /*!< UTimer0 CFG_TIME: TM_MODE Position      */
#define UTimer0_CFG_TIME_TM_MODE_Msk          (0x01UL << UTimer0_CFG_TIME_TM_MODE_Pos)                /*!< UTimer0 CFG_TIME: TM_MODE Mask          */
#define UTimer0_CFG_TIME_TM_INT_STS_DONE_Pos  25                                                      /*!< UTimer0 CFG_TIME: TM_INT_STS_DONE Position */
#define UTimer0_CFG_TIME_TM_INT_STS_DONE_Msk  (0x01UL << UTimer0_CFG_TIME_TM_INT_STS_DONE_Pos)        /*!< UTimer0 CFG_TIME: TM_INT_STS_DONE Mask  */
#define UTimer0_CFG_TIME_TM_INT_MASK_Pos      26                                                      /*!< UTimer0 CFG_TIME: TM_INT_MASK Position  */
#define UTimer0_CFG_TIME_TM_INT_MASK_Msk      (0x01UL << UTimer0_CFG_TIME_TM_INT_MASK_Pos)            /*!< UTimer0 CFG_TIME: TM_INT_MASK Mask      */


/* ================================================================================ */
/* ================        struct 'UTimer1' Position & Mask        ================ */
/* ================================================================================ */


/* --------------------------------  UTimer1_TIMER  ------------------------------- */
#define UTimer1_TIMER_TM_INIT_VALUE_Pos       0                                                       /*!< UTimer1 TIMER: TM_INIT_VALUE Position   */
#define UTimer1_TIMER_TM_INIT_VALUE_Msk       (0x00ffffffUL << UTimer1_TIMER_TM_INIT_VALUE_Pos)       /*!< UTimer1 TIMER: TM_INIT_VALUE Mask       */

/* ------------------------------  UTimer1_CFG_TIME  ------------------------------ */
#define UTimer1_CFG_TIME_TM_CNT_VALUE_Pos     0                                                       /*!< UTimer1 CFG_TIME: TM_CNT_VALUE Position */
#define UTimer1_CFG_TIME_TM_CNT_VALUE_Msk     (0x00ffffffUL << UTimer1_CFG_TIME_TM_CNT_VALUE_Pos)     /*!< UTimer1 CFG_TIME: TM_CNT_VALUE Mask     */
#define UTimer1_CFG_TIME_TM_MODE_Pos          24                                                      /*!< UTimer1 CFG_TIME: TM_MODE Position      */
#define UTimer1_CFG_TIME_TM_MODE_Msk          (0x01UL << UTimer1_CFG_TIME_TM_MODE_Pos)                /*!< UTimer1 CFG_TIME: TM_MODE Mask          */
#define UTimer1_CFG_TIME_TM_INT_STS_DONE_Pos  25                                                      /*!< UTimer1 CFG_TIME: TM_INT_STS_DONE Position */
#define UTimer1_CFG_TIME_TM_INT_STS_DONE_Msk  (0x01UL << UTimer1_CFG_TIME_TM_INT_STS_DONE_Pos)        /*!< UTimer1 CFG_TIME: TM_INT_STS_DONE Mask  */
#define UTimer1_CFG_TIME_TM_INT_MASK_Pos      26                                                      /*!< UTimer1 CFG_TIME: TM_INT_MASK Position  */
#define UTimer1_CFG_TIME_TM_INT_MASK_Msk      (0x01UL << UTimer1_CFG_TIME_TM_INT_MASK_Pos)            /*!< UTimer1 CFG_TIME: TM_INT_MASK Mask      */


/* ================================================================================ */
/* ================        struct 'MTimer0' Position & Mask        ================ */
/* ================================================================================ */


/* --------------------------------  MTimer0_TIMER  ------------------------------- */
#define MTimer0_TIMER_TM_INIT_VALUE_Pos       0                                                       /*!< MTimer0 TIMER: TM_INIT_VALUE Position   */
#define MTimer0_TIMER_TM_INIT_VALUE_Msk       (0x00ffffffUL << MTimer0_TIMER_TM_INIT_VALUE_Pos)       /*!< MTimer0 TIMER: TM_INIT_VALUE Mask       */

/* ------------------------------  MTimer0_CFG_TIME  ------------------------------ */
#define MTimer0_CFG_TIME_TM_CNT_VALUE_Pos     0                                                       /*!< MTimer0 CFG_TIME: TM_CNT_VALUE Position */
#define MTimer0_CFG_TIME_TM_CNT_VALUE_Msk     (0x00ffffffUL << MTimer0_CFG_TIME_TM_CNT_VALUE_Pos)     /*!< MTimer0 CFG_TIME: TM_CNT_VALUE Mask     */
#define MTimer0_CFG_TIME_TM_MODE_Pos          24                                                      /*!< MTimer0 CFG_TIME: TM_MODE Position      */
#define MTimer0_CFG_TIME_TM_MODE_Msk          (0x01UL << MTimer0_CFG_TIME_TM_MODE_Pos)                /*!< MTimer0 CFG_TIME: TM_MODE Mask          */
#define MTimer0_CFG_TIME_TM_INT_STS_DONE_Pos  25                                                      /*!< MTimer0 CFG_TIME: TM_INT_STS_DONE Position */
#define MTimer0_CFG_TIME_TM_INT_STS_DONE_Msk  (0x01UL << MTimer0_CFG_TIME_TM_INT_STS_DONE_Pos)        /*!< MTimer0 CFG_TIME: TM_INT_STS_DONE Mask  */
#define MTimer0_CFG_TIME_TM_INT_MASK_Pos      26                                                      /*!< MTimer0 CFG_TIME: TM_INT_MASK Position  */
#define MTimer0_CFG_TIME_TM_INT_MASK_Msk      (0x01UL << MTimer0_CFG_TIME_TM_INT_MASK_Pos)            /*!< MTimer0 CFG_TIME: TM_INT_MASK Mask      */


/* ================================================================================ */
/* ================        struct 'MTimer1' Position & Mask        ================ */
/* ================================================================================ */


/* --------------------------------  MTimer1_TIMER  ------------------------------- */
#define MTimer1_TIMER_TM_INIT_VALUE_Pos       0                                                       /*!< MTimer1 TIMER: TM_INIT_VALUE Position   */
#define MTimer1_TIMER_TM_INIT_VALUE_Msk       (0x00ffffffUL << MTimer1_TIMER_TM_INIT_VALUE_Pos)       /*!< MTimer1 TIMER: TM_INIT_VALUE Mask       */

/* ------------------------------  MTimer1_CFG_TIME  ------------------------------ */
#define MTimer1_CFG_TIME_TM_CNT_VALUE_Pos     0                                                       /*!< MTimer1 CFG_TIME: TM_CNT_VALUE Position */
#define MTimer1_CFG_TIME_TM_CNT_VALUE_Msk     (0x00ffffffUL << MTimer1_CFG_TIME_TM_CNT_VALUE_Pos)     /*!< MTimer1 CFG_TIME: TM_CNT_VALUE Mask     */
#define MTimer1_CFG_TIME_TM_MODE_Pos          24                                                      /*!< MTimer1 CFG_TIME: TM_MODE Position      */
#define MTimer1_CFG_TIME_TM_MODE_Msk          (0x01UL << MTimer1_CFG_TIME_TM_MODE_Pos)                /*!< MTimer1 CFG_TIME: TM_MODE Mask          */
#define MTimer1_CFG_TIME_TM_INT_STS_DONE_Pos  25                                                      /*!< MTimer1 CFG_TIME: TM_INT_STS_DONE Position */
#define MTimer1_CFG_TIME_TM_INT_STS_DONE_Msk  (0x01UL << MTimer1_CFG_TIME_TM_INT_STS_DONE_Pos)        /*!< MTimer1 CFG_TIME: TM_INT_STS_DONE Mask  */
#define MTimer1_CFG_TIME_TM_INT_MASK_Pos      26                                                      /*!< MTimer1 CFG_TIME: TM_INT_MASK Position  */
#define MTimer1_CFG_TIME_TM_INT_MASK_Msk      (0x01UL << MTimer1_CFG_TIME_TM_INT_MASK_Pos)            /*!< MTimer1 CFG_TIME: TM_INT_MASK Mask      */


/* ================================================================================ */
/* ================      struct 'ON0_SYS_REG' Position & Mask      ================ */
/* ================================================================================ */


/* -----------------------------  ON0_SYS_REG_CHIP_ID  ---------------------------- */
#define ON0_SYS_REG_CHIP_ID_CHIP_ID_Pos       0                                                       /*!< ON0_SYS_REG CHIP_ID: CHIP_ID Position   */
#define ON0_SYS_REG_CHIP_ID_CHIP_ID_Msk       (0xffffffffUL << ON0_SYS_REG_CHIP_ID_CHIP_ID_Pos)       /*!< ON0_SYS_REG CHIP_ID: CHIP_ID Mask       */

/* ---------------------------  ON0_SYS_REG_SYS_CLK_SEL  -------------------------- */
#define ON0_SYS_REG_SYS_CLK_SEL_SYS_CK_SEL_Pos 0                                                      /*!< ON0_SYS_REG SYS_CLK_SEL: SYS_CK_SEL Position */
#define ON0_SYS_REG_SYS_CLK_SEL_SYS_CK_SEL_Msk (0x03UL << ON0_SYS_REG_SYS_CLK_SEL_SYS_CK_SEL_Pos)     /*!< ON0_SYS_REG SYS_CLK_SEL: SYS_CK_SEL Mask */

/* -------------------------  ON0_SYS_REG_ON1_SYS_CLK_SEL  ------------------------ */
#define ON0_SYS_REG_ON1_SYS_CLK_SEL_ON1_SYS_CK_SEL_Pos 0                                              /*!< ON0_SYS_REG ON1_SYS_CLK_SEL: ON1_SYS_CK_SEL Position */
#define ON0_SYS_REG_ON1_SYS_CLK_SEL_ON1_SYS_CK_SEL_Msk (0x03UL << ON0_SYS_REG_ON1_SYS_CLK_SEL_ON1_SYS_CK_SEL_Pos)/*!< ON0_SYS_REG ON1_SYS_CLK_SEL: ON1_SYS_CK_SEL Mask */

/* ------------------------  ON0_SYS_REG_SPI_FLASH_CLK_SEL  ----------------------- */
#define ON0_SYS_REG_SPI_FLASH_CLK_SEL_SPI_FLASH_CK_SEL_Pos 0                                          /*!< ON0_SYS_REG SPI_FLASH_CLK_SEL: SPI_FLASH_CK_SEL Position */
#define ON0_SYS_REG_SPI_FLASH_CLK_SEL_SPI_FLASH_CK_SEL_Msk (0x03UL << ON0_SYS_REG_SPI_FLASH_CLK_SEL_SPI_FLASH_CK_SEL_Pos)/*!< ON0_SYS_REG SPI_FLASH_CLK_SEL: SPI_FLASH_CK_SEL Mask */

/* -------------------------  ON0_SYS_REG_LL_CLK_ASYN_EN  ------------------------- */
#define ON0_SYS_REG_LL_CLK_ASYN_EN_LL_CLK_ASYNC_EN_Pos 0                                              /*!< ON0_SYS_REG LL_CLK_ASYN_EN: LL_CLK_ASYNC_EN Position */
#define ON0_SYS_REG_LL_CLK_ASYN_EN_LL_CLK_ASYNC_EN_Msk (0x01UL << ON0_SYS_REG_LL_CLK_ASYN_EN_LL_CLK_ASYNC_EN_Pos)/*!< ON0_SYS_REG LL_CLK_ASYN_EN: LL_CLK_ASYNC_EN Mask */

/* ----------------------  ON0_SYS_REG_GROUP_1_CLOCK_ENABLE  ---------------------- */
#define ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_MCU_CLK_EN_Pos 0                                             /*!< ON0_SYS_REG GROUP_1_CLOCK_ENABLE: MCU_CLK_EN Position */
#define ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_MCU_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_MCU_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_1_CLOCK_ENABLE: MCU_CLK_EN Mask */
#define ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_INT_CTRL_CLK_EN_Pos 1                                        /*!< ON0_SYS_REG GROUP_1_CLOCK_ENABLE: INT_CTRL_CLK_EN Position */
#define ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_INT_CTRL_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_INT_CTRL_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_1_CLOCK_ENABLE: INT_CTRL_CLK_EN Mask */
#define ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_ROM_CLK_EN_Pos 2                                             /*!< ON0_SYS_REG GROUP_1_CLOCK_ENABLE: ROM_CLK_EN Position */
#define ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_ROM_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_ROM_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_1_CLOCK_ENABLE: ROM_CLK_EN Mask */
#define ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_AES_CLK_EN_Pos 3                                             /*!< ON0_SYS_REG GROUP_1_CLOCK_ENABLE: AES_CLK_EN Position */
#define ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_AES_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_AES_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_1_CLOCK_ENABLE: AES_CLK_EN Mask */
#define ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_SPI_SLV_CLK_EN_Pos 4                                         /*!< ON0_SYS_REG GROUP_1_CLOCK_ENABLE: SPI_SLV_CLK_EN Position */
#define ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_SPI_SLV_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_SPI_SLV_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_1_CLOCK_ENABLE: SPI_SLV_CLK_EN Mask */
#define ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_EFS_TOP_CLK_EN_Pos 5                                         /*!< ON0_SYS_REG GROUP_1_CLOCK_ENABLE: EFS_TOP_CLK_EN Position */
#define ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_EFS_TOP_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_EFS_TOP_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_1_CLOCK_ENABLE: EFS_TOP_CLK_EN Mask */
#define ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_APP_ROM_CLK_EN_Pos 6                                         /*!< ON0_SYS_REG GROUP_1_CLOCK_ENABLE: APP_ROM_CLK_EN Position */
#define ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_APP_ROM_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_APP_ROM_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_1_CLOCK_ENABLE: APP_ROM_CLK_EN Mask */
#define ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_SPI_FLASH_SYS_CLK_EN_Pos 7                                   /*!< ON0_SYS_REG GROUP_1_CLOCK_ENABLE: SPI_FLASH_SYS_CLK_EN Position */
#define ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_SPI_FLASH_SYS_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_SPI_FLASH_SYS_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_1_CLOCK_ENABLE: SPI_FLASH_SYS_CLK_EN Mask */
#define ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_TAS_CLK_EN_Pos 8                                             /*!< ON0_SYS_REG GROUP_1_CLOCK_ENABLE: TAS_CLK_EN Position */
#define ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_TAS_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_TAS_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_1_CLOCK_ENABLE: TAS_CLK_EN Mask */
#define ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_LFSR_CLK_EN_Pos 9                                            /*!< ON0_SYS_REG GROUP_1_CLOCK_ENABLE: LFSR_CLK_EN Position */
#define ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_LFSR_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_1_CLOCK_ENABLE_LFSR_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_1_CLOCK_ENABLE: LFSR_CLK_EN Mask */

/* ----------------------  ON0_SYS_REG_GROUP_2_CLOCK_ENABLE  ---------------------- */
#define ON0_SYS_REG_GROUP_2_CLOCK_ENABLE_DBG_UART_REG_CLK_EN_Pos 0                                    /*!< ON0_SYS_REG GROUP_2_CLOCK_ENABLE: DBG_UART_REG_CLK_EN Position */
#define ON0_SYS_REG_GROUP_2_CLOCK_ENABLE_DBG_UART_REG_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_2_CLOCK_ENABLE_DBG_UART_REG_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_2_CLOCK_ENABLE: DBG_UART_REG_CLK_EN Mask */
#define ON0_SYS_REG_GROUP_2_CLOCK_ENABLE_ICOM_UART_REG_CLK_EN_Pos 1                                   /*!< ON0_SYS_REG GROUP_2_CLOCK_ENABLE: ICOM_UART_REG_CLK_EN Position */
#define ON0_SYS_REG_GROUP_2_CLOCK_ENABLE_ICOM_UART_REG_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_2_CLOCK_ENABLE_ICOM_UART_REG_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_2_CLOCK_ENABLE: ICOM_UART_REG_CLK_EN Mask */
#define ON0_SYS_REG_GROUP_2_CLOCK_ENABLE_DAT_UART_REG_CLK_EN_Pos 2                                    /*!< ON0_SYS_REG GROUP_2_CLOCK_ENABLE: DAT_UART_REG_CLK_EN Position */
#define ON0_SYS_REG_GROUP_2_CLOCK_ENABLE_DAT_UART_REG_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_2_CLOCK_ENABLE_DAT_UART_REG_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_2_CLOCK_ENABLE: DAT_UART_REG_CLK_EN Mask */
#define ON0_SYS_REG_GROUP_2_CLOCK_ENABLE_SPIM_CLK_EN_Pos 3                                            /*!< ON0_SYS_REG GROUP_2_CLOCK_ENABLE: SPIM_CLK_EN Position */
#define ON0_SYS_REG_GROUP_2_CLOCK_ENABLE_SPIM_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_2_CLOCK_ENABLE_SPIM_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_2_CLOCK_ENABLE: SPIM_CLK_EN Mask */
#define ON0_SYS_REG_GROUP_2_CLOCK_ENABLE_I2CM_CLK_EN_Pos 4                                            /*!< ON0_SYS_REG GROUP_2_CLOCK_ENABLE: I2CM_CLK_EN Position */
#define ON0_SYS_REG_GROUP_2_CLOCK_ENABLE_I2CM_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_2_CLOCK_ENABLE_I2CM_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_2_CLOCK_ENABLE: I2CM_CLK_EN Mask */
#define ON0_SYS_REG_GROUP_2_CLOCK_ENABLE_DMA_CLK_EN_Pos 5                                             /*!< ON0_SYS_REG GROUP_2_CLOCK_ENABLE: DMA_CLK_EN Position */
#define ON0_SYS_REG_GROUP_2_CLOCK_ENABLE_DMA_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_2_CLOCK_ENABLE_DMA_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_2_CLOCK_ENABLE: DMA_CLK_EN Mask */

/* ----------------------  ON0_SYS_REG_GROUP_3_CLOCK_ENABLE  ---------------------- */
#define ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_MS0TMR_CLK_EN_Pos 0                                          /*!< ON0_SYS_REG GROUP_3_CLOCK_ENABLE: MS0TMR_CLK_EN Position */
#define ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_MS0TMR_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_MS0TMR_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_3_CLOCK_ENABLE: MS0TMR_CLK_EN Mask */
#define ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_MS1TMR_CLK_EN_Pos 1                                          /*!< ON0_SYS_REG GROUP_3_CLOCK_ENABLE: MS1TMR_CLK_EN Position */
#define ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_MS1TMR_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_MS1TMR_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_3_CLOCK_ENABLE: MS1TMR_CLK_EN Mask */
#define ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_US0TMR_CLK_EN_Pos 2                                          /*!< ON0_SYS_REG GROUP_3_CLOCK_ENABLE: US0TMR_CLK_EN Position */
#define ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_US0TMR_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_US0TMR_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_3_CLOCK_ENABLE: US0TMR_CLK_EN Mask */
#define ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_US1TMR_CLK_EN_Pos 3                                          /*!< ON0_SYS_REG GROUP_3_CLOCK_ENABLE: US1TMR_CLK_EN Position */
#define ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_US1TMR_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_US1TMR_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_3_CLOCK_ENABLE: US1TMR_CLK_EN Mask */
#define ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_PWM0_CLK_EN_Pos 4                                            /*!< ON0_SYS_REG GROUP_3_CLOCK_ENABLE: PWM0_CLK_EN Position */
#define ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_PWM0_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_PWM0_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_3_CLOCK_ENABLE: PWM0_CLK_EN Mask */
#define ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_PWM1_CLK_EN_Pos 5                                            /*!< ON0_SYS_REG GROUP_3_CLOCK_ENABLE: PWM1_CLK_EN Position */
#define ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_PWM1_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_PWM1_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_3_CLOCK_ENABLE: PWM1_CLK_EN Mask */
#define ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_PWM2_CLK_EN_Pos 6                                            /*!< ON0_SYS_REG GROUP_3_CLOCK_ENABLE: PWM2_CLK_EN Position */
#define ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_PWM2_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_PWM2_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_3_CLOCK_ENABLE: PWM2_CLK_EN Mask */
#define ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_PWM3_CLK_EN_Pos 7                                            /*!< ON0_SYS_REG GROUP_3_CLOCK_ENABLE: PWM3_CLK_EN Position */
#define ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_PWM3_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_PWM3_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_3_CLOCK_ENABLE: PWM3_CLK_EN Mask */
#define ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_PWM4_CLK_EN_Pos 8                                            /*!< ON0_SYS_REG GROUP_3_CLOCK_ENABLE: PWM4_CLK_EN Position */
#define ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_PWM4_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_3_CLOCK_ENABLE_PWM4_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_3_CLOCK_ENABLE: PWM4_CLK_EN Mask */

/* ----------------------  ON0_SYS_REG_GROUP_4_CLOCK_ENABLE  ---------------------- */
#define ON0_SYS_REG_GROUP_4_CLOCK_ENABLE_WDT_CLK_EN_Pos 0                                             /*!< ON0_SYS_REG GROUP_4_CLOCK_ENABLE: WDT_CLK_EN Position */
#define ON0_SYS_REG_GROUP_4_CLOCK_ENABLE_WDT_CLK_EN_Msk (0x01UL << ON0_SYS_REG_GROUP_4_CLOCK_ENABLE_WDT_CLK_EN_Pos)/*!< ON0_SYS_REG GROUP_4_CLOCK_ENABLE: WDT_CLK_EN Mask */

/* ------------------------  ON0_SYS_REG_ON0_CLOCK_ENABLE  ------------------------ */
#define ON0_SYS_REG_ON0_CLOCK_ENABLE_I2C_SLV_CLK_EN_Pos 0                                             /*!< ON0_SYS_REG ON0_CLOCK_ENABLE: I2C_SLV_CLK_EN Position */
#define ON0_SYS_REG_ON0_CLOCK_ENABLE_I2C_SLV_CLK_EN_Msk (0x01UL << ON0_SYS_REG_ON0_CLOCK_ENABLE_I2C_SLV_CLK_EN_Pos)/*!< ON0_SYS_REG ON0_CLOCK_ENABLE: I2C_SLV_CLK_EN Mask */
#define ON0_SYS_REG_ON0_CLOCK_ENABLE_ON0_GPIO_CLK_EN_Pos 1                                            /*!< ON0_SYS_REG ON0_CLOCK_ENABLE: ON0_GPIO_CLK_EN Position */
#define ON0_SYS_REG_ON0_CLOCK_ENABLE_ON0_GPIO_CLK_EN_Msk (0x01UL << ON0_SYS_REG_ON0_CLOCK_ENABLE_ON0_GPIO_CLK_EN_Pos)/*!< ON0_SYS_REG ON0_CLOCK_ENABLE: ON0_GPIO_CLK_EN Mask */

/* -----------------------  ON0_SYS_REG_LL_TOP_CLOCK_ENABLE  ---------------------- */
#define ON0_SYS_REG_LL_TOP_CLOCK_ENABLE_LL_TOP_CLK_EN_Pos 0                                           /*!< ON0_SYS_REG LL_TOP_CLOCK_ENABLE: LL_TOP_CLK_EN Position */
#define ON0_SYS_REG_LL_TOP_CLOCK_ENABLE_LL_TOP_CLK_EN_Msk (0x01UL << ON0_SYS_REG_LL_TOP_CLOCK_ENABLE_LL_TOP_CLK_EN_Pos)/*!< ON0_SYS_REG LL_TOP_CLOCK_ENABLE: LL_TOP_CLK_EN Mask */

/* ---------------------------  ON0_SYS_REG_ON0_SW_RST  --------------------------- */
#define ON0_SYS_REG_ON0_SW_RST_GPIO_ON0_SW_RST_Pos 0                                                  /*!< ON0_SYS_REG ON0_SW_RST: GPIO_ON0_SW_RST Position */
#define ON0_SYS_REG_ON0_SW_RST_GPIO_ON0_SW_RST_Msk (0x01UL << ON0_SYS_REG_ON0_SW_RST_GPIO_ON0_SW_RST_Pos)/*!< ON0_SYS_REG ON0_SW_RST: GPIO_ON0_SW_RST Mask */
#define ON0_SYS_REG_ON0_SW_RST_U0_SRAM_SW_RST_Pos 1                                                   /*!< ON0_SYS_REG ON0_SW_RST: U0_SRAM_SW_RST Position */
#define ON0_SYS_REG_ON0_SW_RST_U0_SRAM_SW_RST_Msk (0x01UL << ON0_SYS_REG_ON0_SW_RST_U0_SRAM_SW_RST_Pos)/*!< ON0_SYS_REG ON0_SW_RST: U0_SRAM_SW_RST Mask */
#define ON0_SYS_REG_ON0_SW_RST_ON0_SYS_REG_SW_RST_Pos 2                                               /*!< ON0_SYS_REG ON0_SW_RST: ON0_SYS_REG_SW_RST Position */
#define ON0_SYS_REG_ON0_SW_RST_ON0_SYS_REG_SW_RST_Msk (0x01UL << ON0_SYS_REG_ON0_SW_RST_ON0_SYS_REG_SW_RST_Pos)/*!< ON0_SYS_REG ON0_SW_RST: ON0_SYS_REG_SW_RST Mask */
#define ON0_SYS_REG_ON0_SW_RST_I2C_SLV_REG_SW_RST_Pos 3                                               /*!< ON0_SYS_REG ON0_SW_RST: I2C_SLV_REG_SW_RST Position */
#define ON0_SYS_REG_ON0_SW_RST_I2C_SLV_REG_SW_RST_Msk (0x01UL << ON0_SYS_REG_ON0_SW_RST_I2C_SLV_REG_SW_RST_Pos)/*!< ON0_SYS_REG ON0_SW_RST: I2C_SLV_REG_SW_RST Mask */

/* -------------------------  ON0_SYS_REG_BLE_ON3_SW_RST  ------------------------- */
#define ON0_SYS_REG_BLE_ON3_SW_RST_BLE_ON3_SW_RST_Pos 0                                               /*!< ON0_SYS_REG BLE_ON3_SW_RST: BLE_ON3_SW_RST Position */
#define ON0_SYS_REG_BLE_ON3_SW_RST_BLE_ON3_SW_RST_Msk (0x01UL << ON0_SYS_REG_BLE_ON3_SW_RST_BLE_ON3_SW_RST_Pos)/*!< ON0_SYS_REG BLE_ON3_SW_RST: BLE_ON3_SW_RST Mask */

/* -------------------------  ON0_SYS_REG_BLE_ON4_SW_RST  ------------------------- */
#define ON0_SYS_REG_BLE_ON4_SW_RST_BLE_ON4_SW_RST_Pos 0                                               /*!< ON0_SYS_REG BLE_ON4_SW_RST: BLE_ON4_SW_RST Position */
#define ON0_SYS_REG_BLE_ON4_SW_RST_BLE_ON4_SW_RST_Msk (0x01UL << ON0_SYS_REG_BLE_ON4_SW_RST_BLE_ON4_SW_RST_Pos)/*!< ON0_SYS_REG BLE_ON4_SW_RST: BLE_ON4_SW_RST Mask */

/* ---------------------------  ON0_SYS_REG_CHIP_TAG_0  --------------------------- */
#define ON0_SYS_REG_CHIP_TAG_0_VERSION_CODE_31_0_Pos 0                                                /*!< ON0_SYS_REG CHIP_TAG_0: VERSION_CODE_31_0 Position */
#define ON0_SYS_REG_CHIP_TAG_0_VERSION_CODE_31_0_Msk (0xffffffffUL << ON0_SYS_REG_CHIP_TAG_0_VERSION_CODE_31_0_Pos)/*!< ON0_SYS_REG CHIP_TAG_0: VERSION_CODE_31_0 Mask */

/* ---------------------------  ON0_SYS_REG_CHIP_TAG_1  --------------------------- */
#define ON0_SYS_REG_CHIP_TAG_1_VERSION_CODE_63_32_Pos 0                                               /*!< ON0_SYS_REG CHIP_TAG_1: VERSION_CODE_63_32 Position */
#define ON0_SYS_REG_CHIP_TAG_1_VERSION_CODE_63_32_Msk (0xffffffffUL << ON0_SYS_REG_CHIP_TAG_1_VERSION_CODE_63_32_Pos)/*!< ON0_SYS_REG CHIP_TAG_1: VERSION_CODE_63_32 Mask */

/* -------------------------  ON0_SYS_REG_MANUFATURE_TAG  ------------------------- */
#define ON0_SYS_REG_MANUFATURE_TAG_COMPILE_TYPE_Pos 0                                                 /*!< ON0_SYS_REG MANUFATURE_TAG: COMPILE_TYPE Position */
#define ON0_SYS_REG_MANUFATURE_TAG_COMPILE_TYPE_Msk (0x000000ffUL << ON0_SYS_REG_MANUFATURE_TAG_COMPILE_TYPE_Pos)/*!< ON0_SYS_REG MANUFATURE_TAG: COMPILE_TYPE Mask */

/* -----------------------------  ON0_SYS_REG_SID_TAG  ---------------------------- */
#define ON0_SYS_REG_SID_TAG_SID_Pos           0                                                       /*!< ON0_SYS_REG SID_TAG: SID Position       */
#define ON0_SYS_REG_SID_TAG_SID_Msk           (0x0000ffffUL << ON0_SYS_REG_SID_TAG_SID_Pos)           /*!< ON0_SYS_REG SID_TAG: SID Mask           */


/* ================================================================================ */
/* ================        struct 'INT_REG' Position & Mask        ================ */
/* ================================================================================ */


/* ------------------------------  INT_REG_INT1_MASK  ----------------------------- */
#define INT_REG_INT1_MASK_MASK1_US_TIMER_0_Pos 0                                                      /*!< INT_REG INT1_MASK: MASK1_US_TIMER_0 Position */
#define INT_REG_INT1_MASK_MASK1_US_TIMER_0_Msk (0x01UL << INT_REG_INT1_MASK_MASK1_US_TIMER_0_Pos)     /*!< INT_REG INT1_MASK: MASK1_US_TIMER_0 Mask */
#define INT_REG_INT1_MASK_MASK1_US_TIMER_1_Pos 1                                                      /*!< INT_REG INT1_MASK: MASK1_US_TIMER_1 Position */
#define INT_REG_INT1_MASK_MASK1_US_TIMER_1_Msk (0x01UL << INT_REG_INT1_MASK_MASK1_US_TIMER_1_Pos)     /*!< INT_REG INT1_MASK: MASK1_US_TIMER_1 Mask */
#define INT_REG_INT1_MASK_MASK1_MS_TIMER_0_Pos 2                                                      /*!< INT_REG INT1_MASK: MASK1_MS_TIMER_0 Position */
#define INT_REG_INT1_MASK_MASK1_MS_TIMER_0_Msk (0x01UL << INT_REG_INT1_MASK_MASK1_MS_TIMER_0_Pos)     /*!< INT_REG INT1_MASK: MASK1_MS_TIMER_0 Mask */
#define INT_REG_INT1_MASK_MASK1_MS_TIMER_1_Pos 3                                                      /*!< INT_REG INT1_MASK: MASK1_MS_TIMER_1 Position */
#define INT_REG_INT1_MASK_MASK1_MS_TIMER_1_Msk (0x01UL << INT_REG_INT1_MASK_MASK1_MS_TIMER_1_Pos)     /*!< INT_REG INT1_MASK: MASK1_MS_TIMER_1 Mask */
#define INT_REG_INT1_MASK_MASK1_FENCE_HIT_INT_Pos 4                                                   /*!< INT_REG INT1_MASK: MASK1_FENCE_HIT_INT Position */
#define INT_REG_INT1_MASK_MASK1_FENCE_HIT_INT_Msk (0x01UL << INT_REG_INT1_MASK_MASK1_FENCE_HIT_INT_Pos)/*!< INT_REG INT1_MASK: MASK1_FENCE_HIT_INT Mask */
#define INT_REG_INT1_MASK_MASK1_FLASH_DMA_DONE_Pos 5                                                  /*!< INT_REG INT1_MASK: MASK1_FLASH_DMA_DONE Position */
#define INT_REG_INT1_MASK_MASK1_FLASH_DMA_DONE_Msk (0x01UL << INT_REG_INT1_MASK_MASK1_FLASH_DMA_DONE_Pos)/*!< INT_REG INT1_MASK: MASK1_FLASH_DMA_DONE Mask */
#define INT_REG_INT1_MASK_MASK1_DBG_UART_TX_Pos 6                                                     /*!< INT_REG INT1_MASK: MASK1_DBG_UART_TX Position */
#define INT_REG_INT1_MASK_MASK1_DBG_UART_TX_Msk (0x01UL << INT_REG_INT1_MASK_MASK1_DBG_UART_TX_Pos)   /*!< INT_REG INT1_MASK: MASK1_DBG_UART_TX Mask */
#define INT_REG_INT1_MASK_MASK1_DBG_UART_RX_Pos 7                                                     /*!< INT_REG INT1_MASK: MASK1_DBG_UART_RX Position */
#define INT_REG_INT1_MASK_MASK1_DBG_UART_RX_Msk (0x01UL << INT_REG_INT1_MASK_MASK1_DBG_UART_RX_Pos)   /*!< INT_REG INT1_MASK: MASK1_DBG_UART_RX Mask */
#define INT_REG_INT1_MASK_MASK1_ICOM_UART_TX_Pos 8                                                    /*!< INT_REG INT1_MASK: MASK1_ICOM_UART_TX Position */
#define INT_REG_INT1_MASK_MASK1_ICOM_UART_TX_Msk (0x01UL << INT_REG_INT1_MASK_MASK1_ICOM_UART_TX_Pos) /*!< INT_REG INT1_MASK: MASK1_ICOM_UART_TX Mask */
#define INT_REG_INT1_MASK_MASK1_ICOM_UART_RX_Pos 9                                                    /*!< INT_REG INT1_MASK: MASK1_ICOM_UART_RX Position */
#define INT_REG_INT1_MASK_MASK1_ICOM_UART_RX_Msk (0x01UL << INT_REG_INT1_MASK_MASK1_ICOM_UART_RX_Pos) /*!< INT_REG INT1_MASK: MASK1_ICOM_UART_RX Mask */
#define INT_REG_INT1_MASK_MASK1_DAT_UART_TX_Pos 10                                                    /*!< INT_REG INT1_MASK: MASK1_DAT_UART_TX Position */
#define INT_REG_INT1_MASK_MASK1_DAT_UART_TX_Msk (0x01UL << INT_REG_INT1_MASK_MASK1_DAT_UART_TX_Pos)   /*!< INT_REG INT1_MASK: MASK1_DAT_UART_TX Mask */
#define INT_REG_INT1_MASK_MASK1_DAT_UART_RX_Pos 11                                                    /*!< INT_REG INT1_MASK: MASK1_DAT_UART_RX Position */
#define INT_REG_INT1_MASK_MASK1_DAT_UART_RX_Msk (0x01UL << INT_REG_INT1_MASK_MASK1_DAT_UART_RX_Pos)   /*!< INT_REG INT1_MASK: MASK1_DAT_UART_RX Mask */
#define INT_REG_INT1_MASK_MASK1_I2CM_INTR_Pos 12                                                      /*!< INT_REG INT1_MASK: MASK1_I2CM_INTR Position */
#define INT_REG_INT1_MASK_MASK1_I2CM_INTR_Msk (0x01UL << INT_REG_INT1_MASK_MASK1_I2CM_INTR_Pos)       /*!< INT_REG INT1_MASK: MASK1_I2CM_INTR Mask */
#define INT_REG_INT1_MASK_MASK1_SPI_M_DONE_INT_Pos 13                                                 /*!< INT_REG INT1_MASK: MASK1_SPI_M_DONE_INT Position */
#define INT_REG_INT1_MASK_MASK1_SPI_M_DONE_INT_Msk (0x01UL << INT_REG_INT1_MASK_MASK1_SPI_M_DONE_INT_Pos)/*!< INT_REG INT1_MASK: MASK1_SPI_M_DONE_INT Mask */
#define INT_REG_INT1_MASK_MASK1_SYS_DMA_DONE_Pos 14                                                   /*!< INT_REG INT1_MASK: MASK1_SYS_DMA_DONE Position */
#define INT_REG_INT1_MASK_MASK1_SYS_DMA_DONE_Msk (0x01UL << INT_REG_INT1_MASK_MASK1_SYS_DMA_DONE_Pos) /*!< INT_REG INT1_MASK: MASK1_SYS_DMA_DONE Mask */
#define INT_REG_INT1_MASK_MASK1_GPIO_INT_Pos  15                                                      /*!< INT_REG INT1_MASK: MASK1_GPIO_INT Position */
#define INT_REG_INT1_MASK_MASK1_GPIO_INT_Msk  (0x01UL << INT_REG_INT1_MASK_MASK1_GPIO_INT_Pos)        /*!< INT_REG INT1_MASK: MASK1_GPIO_INT Mask  */
#define INT_REG_INT1_MASK_MASK1_EXT_INTR_I_Pos 16                                                     /*!< INT_REG INT1_MASK: MASK1_EXT_INTR_I Position */
#define INT_REG_INT1_MASK_MASK1_EXT_INTR_I_Msk (0x01UL << INT_REG_INT1_MASK_MASK1_EXT_INTR_I_Pos)     /*!< INT_REG INT1_MASK: MASK1_EXT_INTR_I Mask */
#define INT_REG_INT1_MASK_MASK1_SRAM_ADDR_OVERFLOW_Pos 17                                             /*!< INT_REG INT1_MASK: MASK1_SRAM_ADDR_OVERFLOW Position */
#define INT_REG_INT1_MASK_MASK1_SRAM_ADDR_OVERFLOW_Msk (0x01UL << INT_REG_INT1_MASK_MASK1_SRAM_ADDR_OVERFLOW_Pos)/*!< INT_REG INT1_MASK: MASK1_SRAM_ADDR_OVERFLOW Mask */
#define INT_REG_INT1_MASK_MASK1_ILL_ADDR_INT_Pos 18                                                   /*!< INT_REG INT1_MASK: MASK1_ILL_ADDR_INT Position */
#define INT_REG_INT1_MASK_MASK1_ILL_ADDR_INT_Msk (0x01UL << INT_REG_INT1_MASK_MASK1_ILL_ADDR_INT_Pos) /*!< INT_REG INT1_MASK: MASK1_ILL_ADDR_INT Mask */
#define INT_REG_INT1_MASK_MASK1_CMD_DONE_INT_Pos 19                                                   /*!< INT_REG INT1_MASK: MASK1_CMD_DONE_INT Position */
#define INT_REG_INT1_MASK_MASK1_CMD_DONE_INT_Msk (0x01UL << INT_REG_INT1_MASK_MASK1_CMD_DONE_INT_Pos) /*!< INT_REG INT1_MASK: MASK1_CMD_DONE_INT Mask */
#define INT_REG_INT1_MASK_MASK1_TX_FIFO_NOT_EMPTY_INT_Pos 20                                          /*!< INT_REG INT1_MASK: MASK1_TX_FIFO_NOT_EMPTY_INT Position */
#define INT_REG_INT1_MASK_MASK1_TX_FIFO_NOT_EMPTY_INT_Msk (0x01UL << INT_REG_INT1_MASK_MASK1_TX_FIFO_NOT_EMPTY_INT_Pos)/*!< INT_REG INT1_MASK: MASK1_TX_FIFO_NOT_EMPTY_INT Mask */
#define INT_REG_INT1_MASK_MASK1_RX_FIFO_NOT_EMPTY_INT_Pos 21                                          /*!< INT_REG INT1_MASK: MASK1_RX_FIFO_NOT_EMPTY_INT Position */
#define INT_REG_INT1_MASK_MASK1_RX_FIFO_NOT_EMPTY_INT_Msk (0x01UL << INT_REG_INT1_MASK_MASK1_RX_FIFO_NOT_EMPTY_INT_Pos)/*!< INT_REG INT1_MASK: MASK1_RX_FIFO_NOT_EMPTY_INT Mask */
#define INT_REG_INT1_MASK_MASK1_LL_INT0_Pos   22                                                      /*!< INT_REG INT1_MASK: MASK1_LL_INT0 Position */
#define INT_REG_INT1_MASK_MASK1_LL_INT0_Msk   (0x01UL << INT_REG_INT1_MASK_MASK1_LL_INT0_Pos)         /*!< INT_REG INT1_MASK: MASK1_LL_INT0 Mask   */
#define INT_REG_INT1_MASK_MASK1_LL_INT1_Pos   23                                                      /*!< INT_REG INT1_MASK: MASK1_LL_INT1 Position */
#define INT_REG_INT1_MASK_MASK1_LL_INT1_Msk   (0x01UL << INT_REG_INT1_MASK_MASK1_LL_INT1_Pos)         /*!< INT_REG INT1_MASK: MASK1_LL_INT1 Mask   */
#define INT_REG_INT1_MASK_MASK1_LL_INT2_Pos   24                                                      /*!< INT_REG INT1_MASK: MASK1_LL_INT2 Position */
#define INT_REG_INT1_MASK_MASK1_LL_INT2_Msk   (0x01UL << INT_REG_INT1_MASK_MASK1_LL_INT2_Pos)         /*!< INT_REG INT1_MASK: MASK1_LL_INT2 Mask   */
#define INT_REG_INT1_MASK_MASK1_LL_INT3_Pos   25                                                      /*!< INT_REG INT1_MASK: MASK1_LL_INT3 Position */
#define INT_REG_INT1_MASK_MASK1_LL_INT3_Msk   (0x01UL << INT_REG_INT1_MASK_MASK1_LL_INT3_Pos)         /*!< INT_REG INT1_MASK: MASK1_LL_INT3 Mask   */
#define INT_REG_INT1_MASK_MASK1_LL_INT4_Pos   26                                                      /*!< INT_REG INT1_MASK: MASK1_LL_INT4 Position */
#define INT_REG_INT1_MASK_MASK1_LL_INT4_Msk   (0x01UL << INT_REG_INT1_MASK_MASK1_LL_INT4_Pos)         /*!< INT_REG INT1_MASK: MASK1_LL_INT4 Mask   */
#define INT_REG_INT1_MASK_MASK1_AES_INT_Pos   27                                                      /*!< INT_REG INT1_MASK: MASK1_AES_INT Position */
#define INT_REG_INT1_MASK_MASK1_AES_INT_Msk   (0x01UL << INT_REG_INT1_MASK_MASK1_AES_INT_Pos)         /*!< INT_REG INT1_MASK: MASK1_AES_INT Mask   */
#define INT_REG_INT1_MASK_MASK1_IRQ33_IRQ12_INT_Pos 28                                                /*!< INT_REG INT1_MASK: MASK1_IRQ33_IRQ12_INT Position */
#define INT_REG_INT1_MASK_MASK1_IRQ33_IRQ12_INT_Msk (0x01UL << INT_REG_INT1_MASK_MASK1_IRQ33_IRQ12_INT_Pos)/*!< INT_REG INT1_MASK: MASK1_IRQ33_IRQ12_INT Mask */
#define INT_REG_INT1_MASK_MASK1_IPC1_Pos      29                                                      /*!< INT_REG INT1_MASK: MASK1_IPC1 Position  */
#define INT_REG_INT1_MASK_MASK1_IPC1_Msk      (0x01UL << INT_REG_INT1_MASK_MASK1_IPC1_Pos)            /*!< INT_REG INT1_MASK: MASK1_IPC1 Mask      */
#define INT_REG_INT1_MASK_MASK1_IPC2_Pos      30                                                      /*!< INT_REG INT1_MASK: MASK1_IPC2 Position  */
#define INT_REG_INT1_MASK_MASK1_IPC2_Msk      (0x01UL << INT_REG_INT1_MASK_MASK1_IPC2_Pos)            /*!< INT_REG INT1_MASK: MASK1_IPC2 Mask      */
#define INT_REG_INT1_MASK_MASK1_TX_FIFO_NOT_FULL_INT_Pos 31                                           /*!< INT_REG INT1_MASK: MASK1_TX_FIFO_NOT_FULL_INT Position */
#define INT_REG_INT1_MASK_MASK1_TX_FIFO_NOT_FULL_INT_Msk (0x01UL << INT_REG_INT1_MASK_MASK1_TX_FIFO_NOT_FULL_INT_Pos)/*!< INT_REG INT1_MASK: MASK1_TX_FIFO_NOT_FULL_INT Mask */

/* ------------------------------  INT_REG_INT1_RAW  ------------------------------ */
#define INT_REG_INT1_RAW_RAW_US_TIMER_0_1_Pos 0                                                       /*!< INT_REG INT1_RAW: RAW_US_TIMER_0_1 Position */
#define INT_REG_INT1_RAW_RAW_US_TIMER_0_1_Msk (0x01UL << INT_REG_INT1_RAW_RAW_US_TIMER_0_1_Pos)       /*!< INT_REG INT1_RAW: RAW_US_TIMER_0_1 Mask */
#define INT_REG_INT1_RAW_RAW_US_TIMER_1_1_Pos 1                                                       /*!< INT_REG INT1_RAW: RAW_US_TIMER_1_1 Position */
#define INT_REG_INT1_RAW_RAW_US_TIMER_1_1_Msk (0x01UL << INT_REG_INT1_RAW_RAW_US_TIMER_1_1_Pos)       /*!< INT_REG INT1_RAW: RAW_US_TIMER_1_1 Mask */
#define INT_REG_INT1_RAW_RAW_MS_TIMER_0_1_Pos 2                                                       /*!< INT_REG INT1_RAW: RAW_MS_TIMER_0_1 Position */
#define INT_REG_INT1_RAW_RAW_MS_TIMER_0_1_Msk (0x01UL << INT_REG_INT1_RAW_RAW_MS_TIMER_0_1_Pos)       /*!< INT_REG INT1_RAW: RAW_MS_TIMER_0_1 Mask */
#define INT_REG_INT1_RAW_RAW_MS_TIMER_1_1_Pos 3                                                       /*!< INT_REG INT1_RAW: RAW_MS_TIMER_1_1 Position */
#define INT_REG_INT1_RAW_RAW_MS_TIMER_1_1_Msk (0x01UL << INT_REG_INT1_RAW_RAW_MS_TIMER_1_1_Pos)       /*!< INT_REG INT1_RAW: RAW_MS_TIMER_1_1 Mask */
#define INT_REG_INT1_RAW_RAW_FENCE_HIT_INT_1_Pos 4                                                    /*!< INT_REG INT1_RAW: RAW_FENCE_HIT_INT_1 Position */
#define INT_REG_INT1_RAW_RAW_FENCE_HIT_INT_1_Msk (0x01UL << INT_REG_INT1_RAW_RAW_FENCE_HIT_INT_1_Pos) /*!< INT_REG INT1_RAW: RAW_FENCE_HIT_INT_1 Mask */
#define INT_REG_INT1_RAW_RAW_FLASH_DMA_DONE_1_Pos 5                                                   /*!< INT_REG INT1_RAW: RAW_FLASH_DMA_DONE_1 Position */
#define INT_REG_INT1_RAW_RAW_FLASH_DMA_DONE_1_Msk (0x01UL << INT_REG_INT1_RAW_RAW_FLASH_DMA_DONE_1_Pos)/*!< INT_REG INT1_RAW: RAW_FLASH_DMA_DONE_1 Mask */
#define INT_REG_INT1_RAW_RAW_DBG_UART_TX_1_Pos 6                                                      /*!< INT_REG INT1_RAW: RAW_DBG_UART_TX_1 Position */
#define INT_REG_INT1_RAW_RAW_DBG_UART_TX_1_Msk (0x01UL << INT_REG_INT1_RAW_RAW_DBG_UART_TX_1_Pos)     /*!< INT_REG INT1_RAW: RAW_DBG_UART_TX_1 Mask */
#define INT_REG_INT1_RAW_RAW_DBG_UART_RX_1_Pos 7                                                      /*!< INT_REG INT1_RAW: RAW_DBG_UART_RX_1 Position */
#define INT_REG_INT1_RAW_RAW_DBG_UART_RX_1_Msk (0x01UL << INT_REG_INT1_RAW_RAW_DBG_UART_RX_1_Pos)     /*!< INT_REG INT1_RAW: RAW_DBG_UART_RX_1 Mask */
#define INT_REG_INT1_RAW_RAW_ICOM_UART_TX_1_Pos 8                                                     /*!< INT_REG INT1_RAW: RAW_ICOM_UART_TX_1 Position */
#define INT_REG_INT1_RAW_RAW_ICOM_UART_TX_1_Msk (0x01UL << INT_REG_INT1_RAW_RAW_ICOM_UART_TX_1_Pos)   /*!< INT_REG INT1_RAW: RAW_ICOM_UART_TX_1 Mask */
#define INT_REG_INT1_RAW_RAW_ICOM_UART_RX_1_Pos 9                                                     /*!< INT_REG INT1_RAW: RAW_ICOM_UART_RX_1 Position */
#define INT_REG_INT1_RAW_RAW_ICOM_UART_RX_1_Msk (0x01UL << INT_REG_INT1_RAW_RAW_ICOM_UART_RX_1_Pos)   /*!< INT_REG INT1_RAW: RAW_ICOM_UART_RX_1 Mask */
#define INT_REG_INT1_RAW_RAW_DAT_UART_TX_1_Pos 10                                                     /*!< INT_REG INT1_RAW: RAW_DAT_UART_TX_1 Position */
#define INT_REG_INT1_RAW_RAW_DAT_UART_TX_1_Msk (0x01UL << INT_REG_INT1_RAW_RAW_DAT_UART_TX_1_Pos)     /*!< INT_REG INT1_RAW: RAW_DAT_UART_TX_1 Mask */
#define INT_REG_INT1_RAW_RAW_DAT_UART_RX_1_Pos 11                                                     /*!< INT_REG INT1_RAW: RAW_DAT_UART_RX_1 Position */
#define INT_REG_INT1_RAW_RAW_DAT_UART_RX_1_Msk (0x01UL << INT_REG_INT1_RAW_RAW_DAT_UART_RX_1_Pos)     /*!< INT_REG INT1_RAW: RAW_DAT_UART_RX_1 Mask */
#define INT_REG_INT1_RAW_RAW_I2CM_INTR_1_Pos  12                                                      /*!< INT_REG INT1_RAW: RAW_I2CM_INTR_1 Position */
#define INT_REG_INT1_RAW_RAW_I2CM_INTR_1_Msk  (0x01UL << INT_REG_INT1_RAW_RAW_I2CM_INTR_1_Pos)        /*!< INT_REG INT1_RAW: RAW_I2CM_INTR_1 Mask  */
#define INT_REG_INT1_RAW_RAW_SPI_M_DONE_INT_1_Pos 13                                                  /*!< INT_REG INT1_RAW: RAW_SPI_M_DONE_INT_1 Position */
#define INT_REG_INT1_RAW_RAW_SPI_M_DONE_INT_1_Msk (0x01UL << INT_REG_INT1_RAW_RAW_SPI_M_DONE_INT_1_Pos)/*!< INT_REG INT1_RAW: RAW_SPI_M_DONE_INT_1 Mask */
#define INT_REG_INT1_RAW_RAW_SYS_DMA_DONE_1_Pos 14                                                    /*!< INT_REG INT1_RAW: RAW_SYS_DMA_DONE_1 Position */
#define INT_REG_INT1_RAW_RAW_SYS_DMA_DONE_1_Msk (0x01UL << INT_REG_INT1_RAW_RAW_SYS_DMA_DONE_1_Pos)   /*!< INT_REG INT1_RAW: RAW_SYS_DMA_DONE_1 Mask */
#define INT_REG_INT1_RAW_RAW_GPIO_INT_1_Pos   15                                                      /*!< INT_REG INT1_RAW: RAW_GPIO_INT_1 Position */
#define INT_REG_INT1_RAW_RAW_GPIO_INT_1_Msk   (0x01UL << INT_REG_INT1_RAW_RAW_GPIO_INT_1_Pos)         /*!< INT_REG INT1_RAW: RAW_GPIO_INT_1 Mask   */
#define INT_REG_INT1_RAW_RAW_EXT_INTR_I_1_Pos 16                                                      /*!< INT_REG INT1_RAW: RAW_EXT_INTR_I_1 Position */
#define INT_REG_INT1_RAW_RAW_EXT_INTR_I_1_Msk (0x01UL << INT_REG_INT1_RAW_RAW_EXT_INTR_I_1_Pos)       /*!< INT_REG INT1_RAW: RAW_EXT_INTR_I_1 Mask */
#define INT_REG_INT1_RAW_RAW_SRAM_ADDR_OVERFLOW_1_Pos 17                                              /*!< INT_REG INT1_RAW: RAW_SRAM_ADDR_OVERFLOW_1 Position */
#define INT_REG_INT1_RAW_RAW_SRAM_ADDR_OVERFLOW_1_Msk (0x01UL << INT_REG_INT1_RAW_RAW_SRAM_ADDR_OVERFLOW_1_Pos)/*!< INT_REG INT1_RAW: RAW_SRAM_ADDR_OVERFLOW_1 Mask */
#define INT_REG_INT1_RAW_RAW_ILL_ADDR_INT_1_Pos 18                                                    /*!< INT_REG INT1_RAW: RAW_ILL_ADDR_INT_1 Position */
#define INT_REG_INT1_RAW_RAW_ILL_ADDR_INT_1_Msk (0x01UL << INT_REG_INT1_RAW_RAW_ILL_ADDR_INT_1_Pos)   /*!< INT_REG INT1_RAW: RAW_ILL_ADDR_INT_1 Mask */
#define INT_REG_INT1_RAW_RAW_CMD_DONE_INT_1_Pos 19                                                    /*!< INT_REG INT1_RAW: RAW_CMD_DONE_INT_1 Position */
#define INT_REG_INT1_RAW_RAW_CMD_DONE_INT_1_Msk (0x01UL << INT_REG_INT1_RAW_RAW_CMD_DONE_INT_1_Pos)   /*!< INT_REG INT1_RAW: RAW_CMD_DONE_INT_1 Mask */
#define INT_REG_INT1_RAW_RAW_TX_FIFO_NOT_EMPTY_INT_1_Pos 20                                           /*!< INT_REG INT1_RAW: RAW_TX_FIFO_NOT_EMPTY_INT_1 Position */
#define INT_REG_INT1_RAW_RAW_TX_FIFO_NOT_EMPTY_INT_1_Msk (0x01UL << INT_REG_INT1_RAW_RAW_TX_FIFO_NOT_EMPTY_INT_1_Pos)/*!< INT_REG INT1_RAW: RAW_TX_FIFO_NOT_EMPTY_INT_1 Mask */
#define INT_REG_INT1_RAW_RAW_RX_FIFO_NOT_EMPTY_INT_1_Pos 21                                           /*!< INT_REG INT1_RAW: RAW_RX_FIFO_NOT_EMPTY_INT_1 Position */
#define INT_REG_INT1_RAW_RAW_RX_FIFO_NOT_EMPTY_INT_1_Msk (0x01UL << INT_REG_INT1_RAW_RAW_RX_FIFO_NOT_EMPTY_INT_1_Pos)/*!< INT_REG INT1_RAW: RAW_RX_FIFO_NOT_EMPTY_INT_1 Mask */
#define INT_REG_INT1_RAW_RAW_LL_INT0_1_Pos    22                                                      /*!< INT_REG INT1_RAW: RAW_LL_INT0_1 Position */
#define INT_REG_INT1_RAW_RAW_LL_INT0_1_Msk    (0x01UL << INT_REG_INT1_RAW_RAW_LL_INT0_1_Pos)          /*!< INT_REG INT1_RAW: RAW_LL_INT0_1 Mask    */
#define INT_REG_INT1_RAW_RAW_LL_INT1_1_Pos    23                                                      /*!< INT_REG INT1_RAW: RAW_LL_INT1_1 Position */
#define INT_REG_INT1_RAW_RAW_LL_INT1_1_Msk    (0x01UL << INT_REG_INT1_RAW_RAW_LL_INT1_1_Pos)          /*!< INT_REG INT1_RAW: RAW_LL_INT1_1 Mask    */
#define INT_REG_INT1_RAW_RAW_LL_INT2_1_Pos    24                                                      /*!< INT_REG INT1_RAW: RAW_LL_INT2_1 Position */
#define INT_REG_INT1_RAW_RAW_LL_INT2_1_Msk    (0x01UL << INT_REG_INT1_RAW_RAW_LL_INT2_1_Pos)          /*!< INT_REG INT1_RAW: RAW_LL_INT2_1 Mask    */
#define INT_REG_INT1_RAW_RAW_LL_INT3_1_Pos    25                                                      /*!< INT_REG INT1_RAW: RAW_LL_INT3_1 Position */
#define INT_REG_INT1_RAW_RAW_LL_INT3_1_Msk    (0x01UL << INT_REG_INT1_RAW_RAW_LL_INT3_1_Pos)          /*!< INT_REG INT1_RAW: RAW_LL_INT3_1 Mask    */
#define INT_REG_INT1_RAW_RAW_LL_INT4_1_Pos    26                                                      /*!< INT_REG INT1_RAW: RAW_LL_INT4_1 Position */
#define INT_REG_INT1_RAW_RAW_LL_INT4_1_Msk    (0x01UL << INT_REG_INT1_RAW_RAW_LL_INT4_1_Pos)          /*!< INT_REG INT1_RAW: RAW_LL_INT4_1 Mask    */
#define INT_REG_INT1_RAW_RAW_AES_INT_1_Pos    27                                                      /*!< INT_REG INT1_RAW: RAW_AES_INT_1 Position */
#define INT_REG_INT1_RAW_RAW_AES_INT_1_Msk    (0x01UL << INT_REG_INT1_RAW_RAW_AES_INT_1_Pos)          /*!< INT_REG INT1_RAW: RAW_AES_INT_1 Mask    */
#define INT_REG_INT1_RAW_RAW_IRQ33_IRQ12_INT_1_Pos 28                                                 /*!< INT_REG INT1_RAW: RAW_IRQ33_IRQ12_INT_1 Position */
#define INT_REG_INT1_RAW_RAW_IRQ33_IRQ12_INT_1_Msk (0x01UL << INT_REG_INT1_RAW_RAW_IRQ33_IRQ12_INT_1_Pos)/*!< INT_REG INT1_RAW: RAW_IRQ33_IRQ12_INT_1 Mask */
#define INT_REG_INT1_RAW_RAW_IPC1_1_Pos       29                                                      /*!< INT_REG INT1_RAW: RAW_IPC1_1 Position   */
#define INT_REG_INT1_RAW_RAW_IPC1_1_Msk       (0x01UL << INT_REG_INT1_RAW_RAW_IPC1_1_Pos)             /*!< INT_REG INT1_RAW: RAW_IPC1_1 Mask       */
#define INT_REG_INT1_RAW_RAW_IPC2_1_Pos       30                                                      /*!< INT_REG INT1_RAW: RAW_IPC2_1 Position   */
#define INT_REG_INT1_RAW_RAW_IPC2_1_Msk       (0x01UL << INT_REG_INT1_RAW_RAW_IPC2_1_Pos)             /*!< INT_REG INT1_RAW: RAW_IPC2_1 Mask       */
#define INT_REG_INT1_RAW_RAW_TX_FIFO_NOT_FULL_INT_1_Pos 31                                            /*!< INT_REG INT1_RAW: RAW_TX_FIFO_NOT_FULL_INT_1 Position */
#define INT_REG_INT1_RAW_RAW_TX_FIFO_NOT_FULL_INT_1_Msk (0x01UL << INT_REG_INT1_RAW_RAW_TX_FIFO_NOT_FULL_INT_1_Pos)/*!< INT_REG INT1_RAW: RAW_TX_FIFO_NOT_FULL_INT_1 Mask */

/* ------------------------------  INT_REG_INT1_STS  ------------------------------ */
#define INT_REG_INT1_STS_STS1_US_TIMER_0_Pos  0                                                       /*!< INT_REG INT1_STS: STS1_US_TIMER_0 Position */
#define INT_REG_INT1_STS_STS1_US_TIMER_0_Msk  (0x01UL << INT_REG_INT1_STS_STS1_US_TIMER_0_Pos)        /*!< INT_REG INT1_STS: STS1_US_TIMER_0 Mask  */
#define INT_REG_INT1_STS_STS1_US_TIMER_1_Pos  1                                                       /*!< INT_REG INT1_STS: STS1_US_TIMER_1 Position */
#define INT_REG_INT1_STS_STS1_US_TIMER_1_Msk  (0x01UL << INT_REG_INT1_STS_STS1_US_TIMER_1_Pos)        /*!< INT_REG INT1_STS: STS1_US_TIMER_1 Mask  */
#define INT_REG_INT1_STS_STS1_MS_TIMER_0_Pos  2                                                       /*!< INT_REG INT1_STS: STS1_MS_TIMER_0 Position */
#define INT_REG_INT1_STS_STS1_MS_TIMER_0_Msk  (0x01UL << INT_REG_INT1_STS_STS1_MS_TIMER_0_Pos)        /*!< INT_REG INT1_STS: STS1_MS_TIMER_0 Mask  */
#define INT_REG_INT1_STS_STS1_MS_TIMER_1_Pos  3                                                       /*!< INT_REG INT1_STS: STS1_MS_TIMER_1 Position */
#define INT_REG_INT1_STS_STS1_MS_TIMER_1_Msk  (0x01UL << INT_REG_INT1_STS_STS1_MS_TIMER_1_Pos)        /*!< INT_REG INT1_STS: STS1_MS_TIMER_1 Mask  */
#define INT_REG_INT1_STS_STS1_FENCE_HIT_INT_Pos 4                                                     /*!< INT_REG INT1_STS: STS1_FENCE_HIT_INT Position */
#define INT_REG_INT1_STS_STS1_FENCE_HIT_INT_Msk (0x01UL << INT_REG_INT1_STS_STS1_FENCE_HIT_INT_Pos)   /*!< INT_REG INT1_STS: STS1_FENCE_HIT_INT Mask */
#define INT_REG_INT1_STS_STS1_FLASH_DMA_DONE_Pos 5                                                    /*!< INT_REG INT1_STS: STS1_FLASH_DMA_DONE Position */
#define INT_REG_INT1_STS_STS1_FLASH_DMA_DONE_Msk (0x01UL << INT_REG_INT1_STS_STS1_FLASH_DMA_DONE_Pos) /*!< INT_REG INT1_STS: STS1_FLASH_DMA_DONE Mask */
#define INT_REG_INT1_STS_STS1_DBG_UART_TX_BUSY_Pos 6                                                  /*!< INT_REG INT1_STS: STS1_DBG_UART_TX_BUSY Position */
#define INT_REG_INT1_STS_STS1_DBG_UART_TX_BUSY_Msk (0x01UL << INT_REG_INT1_STS_STS1_DBG_UART_TX_BUSY_Pos)/*!< INT_REG INT1_STS: STS1_DBG_UART_TX_BUSY Mask */
#define INT_REG_INT1_STS_STS1_DBG_UART_RX_BUSY_Pos 7                                                  /*!< INT_REG INT1_STS: STS1_DBG_UART_RX_BUSY Position */
#define INT_REG_INT1_STS_STS1_DBG_UART_RX_BUSY_Msk (0x01UL << INT_REG_INT1_STS_STS1_DBG_UART_RX_BUSY_Pos)/*!< INT_REG INT1_STS: STS1_DBG_UART_RX_BUSY Mask */
#define INT_REG_INT1_STS_STS1_ICOM_UART_TX_BUSY_Pos 8                                                 /*!< INT_REG INT1_STS: STS1_ICOM_UART_TX_BUSY Position */
#define INT_REG_INT1_STS_STS1_ICOM_UART_TX_BUSY_Msk (0x01UL << INT_REG_INT1_STS_STS1_ICOM_UART_TX_BUSY_Pos)/*!< INT_REG INT1_STS: STS1_ICOM_UART_TX_BUSY Mask */
#define INT_REG_INT1_STS_STS1_ICOM_UART_RX_BUSY_Pos 9                                                 /*!< INT_REG INT1_STS: STS1_ICOM_UART_RX_BUSY Position */
#define INT_REG_INT1_STS_STS1_ICOM_UART_RX_BUSY_Msk (0x01UL << INT_REG_INT1_STS_STS1_ICOM_UART_RX_BUSY_Pos)/*!< INT_REG INT1_STS: STS1_ICOM_UART_RX_BUSY Mask */
#define INT_REG_INT1_STS_STS1_DAT_UART_TX_BUSY_Pos 10                                                 /*!< INT_REG INT1_STS: STS1_DAT_UART_TX_BUSY Position */
#define INT_REG_INT1_STS_STS1_DAT_UART_TX_BUSY_Msk (0x01UL << INT_REG_INT1_STS_STS1_DAT_UART_TX_BUSY_Pos)/*!< INT_REG INT1_STS: STS1_DAT_UART_TX_BUSY Mask */
#define INT_REG_INT1_STS_STS1_DAT_UART_RX_BUSY_Pos 11                                                 /*!< INT_REG INT1_STS: STS1_DAT_UART_RX_BUSY Position */
#define INT_REG_INT1_STS_STS1_DAT_UART_RX_BUSY_Msk (0x01UL << INT_REG_INT1_STS_STS1_DAT_UART_RX_BUSY_Pos)/*!< INT_REG INT1_STS: STS1_DAT_UART_RX_BUSY Mask */
#define INT_REG_INT1_STS_STS1_I2CM_INTR_BUSY_Pos 12                                                   /*!< INT_REG INT1_STS: STS1_I2CM_INTR_BUSY Position */
#define INT_REG_INT1_STS_STS1_I2CM_INTR_BUSY_Msk (0x01UL << INT_REG_INT1_STS_STS1_I2CM_INTR_BUSY_Pos) /*!< INT_REG INT1_STS: STS1_I2CM_INTR_BUSY Mask */
#define INT_REG_INT1_STS_STS1_SPI_M_DONE_INT_Pos 13                                                   /*!< INT_REG INT1_STS: STS1_SPI_M_DONE_INT Position */
#define INT_REG_INT1_STS_STS1_SPI_M_DONE_INT_Msk (0x01UL << INT_REG_INT1_STS_STS1_SPI_M_DONE_INT_Pos) /*!< INT_REG INT1_STS: STS1_SPI_M_DONE_INT Mask */
#define INT_REG_INT1_STS_STS1_SYS_DMA_DONE_Pos 14                                                     /*!< INT_REG INT1_STS: STS1_SYS_DMA_DONE Position */
#define INT_REG_INT1_STS_STS1_SYS_DMA_DONE_Msk (0x01UL << INT_REG_INT1_STS_STS1_SYS_DMA_DONE_Pos)     /*!< INT_REG INT1_STS: STS1_SYS_DMA_DONE Mask */
#define INT_REG_INT1_STS_STS1_GPIO_INT_BUSY_Pos 15                                                    /*!< INT_REG INT1_STS: STS1_GPIO_INT_BUSY Position */
#define INT_REG_INT1_STS_STS1_GPIO_INT_BUSY_Msk (0x01UL << INT_REG_INT1_STS_STS1_GPIO_INT_BUSY_Pos)   /*!< INT_REG INT1_STS: STS1_GPIO_INT_BUSY Mask */
#define INT_REG_INT1_STS_STS1_EXT_INTR_I_BUSY_Pos 16                                                  /*!< INT_REG INT1_STS: STS1_EXT_INTR_I_BUSY Position */
#define INT_REG_INT1_STS_STS1_EXT_INTR_I_BUSY_Msk (0x01UL << INT_REG_INT1_STS_STS1_EXT_INTR_I_BUSY_Pos)/*!< INT_REG INT1_STS: STS1_EXT_INTR_I_BUSY Mask */
#define INT_REG_INT1_STS_STS1_SRAM_ADDR_OVERFLOW_Pos 17                                               /*!< INT_REG INT1_STS: STS1_SRAM_ADDR_OVERFLOW Position */
#define INT_REG_INT1_STS_STS1_SRAM_ADDR_OVERFLOW_Msk (0x01UL << INT_REG_INT1_STS_STS1_SRAM_ADDR_OVERFLOW_Pos)/*!< INT_REG INT1_STS: STS1_SRAM_ADDR_OVERFLOW Mask */
#define INT_REG_INT1_STS_STS1_ILL_ADDR_INT_Pos 18                                                     /*!< INT_REG INT1_STS: STS1_ILL_ADDR_INT Position */
#define INT_REG_INT1_STS_STS1_ILL_ADDR_INT_Msk (0x01UL << INT_REG_INT1_STS_STS1_ILL_ADDR_INT_Pos)     /*!< INT_REG INT1_STS: STS1_ILL_ADDR_INT Mask */
#define INT_REG_INT1_STS_STS1_CMD_DONE_INT_BUSY_Pos 19                                                /*!< INT_REG INT1_STS: STS1_CMD_DONE_INT_BUSY Position */
#define INT_REG_INT1_STS_STS1_CMD_DONE_INT_BUSY_Msk (0x01UL << INT_REG_INT1_STS_STS1_CMD_DONE_INT_BUSY_Pos)/*!< INT_REG INT1_STS: STS1_CMD_DONE_INT_BUSY Mask */
#define INT_REG_INT1_STS_STS1_TX_FIFO_NOT_EMPTY_INT_BUSY_Pos 20                                       /*!< INT_REG INT1_STS: STS1_TX_FIFO_NOT_EMPTY_INT_BUSY Position */
#define INT_REG_INT1_STS_STS1_TX_FIFO_NOT_EMPTY_INT_BUSY_Msk (0x01UL << INT_REG_INT1_STS_STS1_TX_FIFO_NOT_EMPTY_INT_BUSY_Pos)/*!< INT_REG INT1_STS: STS1_TX_FIFO_NOT_EMPTY_INT_BUSY Mask */
#define INT_REG_INT1_STS_STS1_RX_FIFO_NOT_EMPTY_INT_BUSY_Pos 21                                       /*!< INT_REG INT1_STS: STS1_RX_FIFO_NOT_EMPTY_INT_BUSY Position */
#define INT_REG_INT1_STS_STS1_RX_FIFO_NOT_EMPTY_INT_BUSY_Msk (0x01UL << INT_REG_INT1_STS_STS1_RX_FIFO_NOT_EMPTY_INT_BUSY_Pos)/*!< INT_REG INT1_STS: STS1_RX_FIFO_NOT_EMPTY_INT_BUSY Mask */
#define INT_REG_INT1_STS_STS1_LL_INT0_Pos     22                                                      /*!< INT_REG INT1_STS: STS1_LL_INT0 Position */
#define INT_REG_INT1_STS_STS1_LL_INT0_Msk     (0x01UL << INT_REG_INT1_STS_STS1_LL_INT0_Pos)           /*!< INT_REG INT1_STS: STS1_LL_INT0 Mask     */
#define INT_REG_INT1_STS_STS1_LL_INT1_Pos     23                                                      /*!< INT_REG INT1_STS: STS1_LL_INT1 Position */
#define INT_REG_INT1_STS_STS1_LL_INT1_Msk     (0x01UL << INT_REG_INT1_STS_STS1_LL_INT1_Pos)           /*!< INT_REG INT1_STS: STS1_LL_INT1 Mask     */
#define INT_REG_INT1_STS_STS1_LL_INT2_Pos     24                                                      /*!< INT_REG INT1_STS: STS1_LL_INT2 Position */
#define INT_REG_INT1_STS_STS1_LL_INT2_Msk     (0x01UL << INT_REG_INT1_STS_STS1_LL_INT2_Pos)           /*!< INT_REG INT1_STS: STS1_LL_INT2 Mask     */
#define INT_REG_INT1_STS_STS1_LL_INT3_Pos     25                                                      /*!< INT_REG INT1_STS: STS1_LL_INT3 Position */
#define INT_REG_INT1_STS_STS1_LL_INT3_Msk     (0x01UL << INT_REG_INT1_STS_STS1_LL_INT3_Pos)           /*!< INT_REG INT1_STS: STS1_LL_INT3 Mask     */
#define INT_REG_INT1_STS_STS1_LL_INT4_Pos     26                                                      /*!< INT_REG INT1_STS: STS1_LL_INT4 Position */
#define INT_REG_INT1_STS_STS1_LL_INT4_Msk     (0x01UL << INT_REG_INT1_STS_STS1_LL_INT4_Pos)           /*!< INT_REG INT1_STS: STS1_LL_INT4 Mask     */
#define INT_REG_INT1_STS_STS1_AES_INT_Pos     27                                                      /*!< INT_REG INT1_STS: STS1_AES_INT Position */
#define INT_REG_INT1_STS_STS1_AES_INT_Msk     (0x01UL << INT_REG_INT1_STS_STS1_AES_INT_Pos)           /*!< INT_REG INT1_STS: STS1_AES_INT Mask     */
#define INT_REG_INT1_STS_STS1_IRQ33_IRQ12_INT_Pos 28                                                  /*!< INT_REG INT1_STS: STS1_IRQ33_IRQ12_INT Position */
#define INT_REG_INT1_STS_STS1_IRQ33_IRQ12_INT_Msk (0x01UL << INT_REG_INT1_STS_STS1_IRQ33_IRQ12_INT_Pos)/*!< INT_REG INT1_STS: STS1_IRQ33_IRQ12_INT Mask */
#define INT_REG_INT1_STS_STS1_IPC1_Pos        29                                                      /*!< INT_REG INT1_STS: STS1_IPC1 Position    */
#define INT_REG_INT1_STS_STS1_IPC1_Msk        (0x01UL << INT_REG_INT1_STS_STS1_IPC1_Pos)              /*!< INT_REG INT1_STS: STS1_IPC1 Mask        */
#define INT_REG_INT1_STS_STS1_IPC2_Pos        30                                                      /*!< INT_REG INT1_STS: STS1_IPC2 Position    */
#define INT_REG_INT1_STS_STS1_IPC2_Msk        (0x01UL << INT_REG_INT1_STS_STS1_IPC2_Pos)              /*!< INT_REG INT1_STS: STS1_IPC2 Mask        */
#define INT_REG_INT1_STS_STS1_TX_FIFO_NOT_FULL_INT_BUSY_Pos 31                                        /*!< INT_REG INT1_STS: STS1_TX_FIFO_NOT_FULL_INT_BUSY Position */
#define INT_REG_INT1_STS_STS1_TX_FIFO_NOT_FULL_INT_BUSY_Msk (0x01UL << INT_REG_INT1_STS_STS1_TX_FIFO_NOT_FULL_INT_BUSY_Pos)/*!< INT_REG INT1_STS: STS1_TX_FIFO_NOT_FULL_INT_BUSY Mask */

/* ------------------------------  INT_REG_INT2_MASK  ----------------------------- */
#define INT_REG_INT2_MASK_MASK2_I2C_SDA_ID_I_Pos 28                                                   /*!< INT_REG INT2_MASK: MASK2_I2C_SDA_ID_I Position */
#define INT_REG_INT2_MASK_MASK2_I2C_SDA_ID_I_Msk (0x01UL << INT_REG_INT2_MASK_MASK2_I2C_SDA_ID_I_Pos) /*!< INT_REG INT2_MASK: MASK2_I2C_SDA_ID_I Mask */
#define INT_REG_INT2_MASK_MASK2_I2C_SCL_ID_I_Pos 29                                                   /*!< INT_REG INT2_MASK: MASK2_I2C_SCL_ID_I Position */
#define INT_REG_INT2_MASK_MASK2_I2C_SCL_ID_I_Msk (0x01UL << INT_REG_INT2_MASK_MASK2_I2C_SCL_ID_I_Pos) /*!< INT_REG INT2_MASK: MASK2_I2C_SCL_ID_I Mask */
#define INT_REG_INT2_MASK_MASK2_UART1_ID_I_Pos 30                                                     /*!< INT_REG INT2_MASK: MASK2_UART1_ID_I Position */
#define INT_REG_INT2_MASK_MASK2_UART1_ID_I_Msk (0x01UL << INT_REG_INT2_MASK_MASK2_UART1_ID_I_Pos)     /*!< INT_REG INT2_MASK: MASK2_UART1_ID_I Mask */
#define INT_REG_INT2_MASK_MASK2_UART0_ID_I_Pos 31                                                     /*!< INT_REG INT2_MASK: MASK2_UART0_ID_I Position */
#define INT_REG_INT2_MASK_MASK2_UART0_ID_I_Msk (0x01UL << INT_REG_INT2_MASK_MASK2_UART0_ID_I_Pos)     /*!< INT_REG INT2_MASK: MASK2_UART0_ID_I Mask */

/* ------------------------------  INT_REG_INT2_RAW  ------------------------------ */
#define INT_REG_INT2_RAW_RAW_I2C_SDA_ID_I_2_Pos 28                                                    /*!< INT_REG INT2_RAW: RAW_I2C_SDA_ID_I_2 Position */
#define INT_REG_INT2_RAW_RAW_I2C_SDA_ID_I_2_Msk (0x01UL << INT_REG_INT2_RAW_RAW_I2C_SDA_ID_I_2_Pos)   /*!< INT_REG INT2_RAW: RAW_I2C_SDA_ID_I_2 Mask */
#define INT_REG_INT2_RAW_RAW_I2C_SCL_ID_I_2_Pos 29                                                    /*!< INT_REG INT2_RAW: RAW_I2C_SCL_ID_I_2 Position */
#define INT_REG_INT2_RAW_RAW_I2C_SCL_ID_I_2_Msk (0x01UL << INT_REG_INT2_RAW_RAW_I2C_SCL_ID_I_2_Pos)   /*!< INT_REG INT2_RAW: RAW_I2C_SCL_ID_I_2 Mask */
#define INT_REG_INT2_RAW_RAW_UART1_ID_I_2_Pos 30                                                      /*!< INT_REG INT2_RAW: RAW_UART1_ID_I_2 Position */
#define INT_REG_INT2_RAW_RAW_UART1_ID_I_2_Msk (0x01UL << INT_REG_INT2_RAW_RAW_UART1_ID_I_2_Pos)       /*!< INT_REG INT2_RAW: RAW_UART1_ID_I_2 Mask */
#define INT_REG_INT2_RAW_RAW_UART0_ID_I_2_Pos 31                                                      /*!< INT_REG INT2_RAW: RAW_UART0_ID_I_2 Position */
#define INT_REG_INT2_RAW_RAW_UART0_ID_I_2_Msk (0x01UL << INT_REG_INT2_RAW_RAW_UART0_ID_I_2_Pos)       /*!< INT_REG INT2_RAW: RAW_UART0_ID_I_2 Mask */

/* ------------------------------  INT_REG_INT2_STS  ------------------------------ */
#define INT_REG_INT2_STS_STS2_I2C_SDA_ID_I_Pos 28                                                     /*!< INT_REG INT2_STS: STS2_I2C_SDA_ID_I Position */
#define INT_REG_INT2_STS_STS2_I2C_SDA_ID_I_Msk (0x01UL << INT_REG_INT2_STS_STS2_I2C_SDA_ID_I_Pos)     /*!< INT_REG INT2_STS: STS2_I2C_SDA_ID_I Mask */
#define INT_REG_INT2_STS_STS2_I2C_SCL_ID_I_Pos 29                                                     /*!< INT_REG INT2_STS: STS2_I2C_SCL_ID_I Position */
#define INT_REG_INT2_STS_STS2_I2C_SCL_ID_I_Msk (0x01UL << INT_REG_INT2_STS_STS2_I2C_SCL_ID_I_Pos)     /*!< INT_REG INT2_STS: STS2_I2C_SCL_ID_I Mask */
#define INT_REG_INT2_STS_STS2_UART1_ID_I_Pos  30                                                      /*!< INT_REG INT2_STS: STS2_UART1_ID_I Position */
#define INT_REG_INT2_STS_STS2_UART1_ID_I_Msk  (0x01UL << INT_REG_INT2_STS_STS2_UART1_ID_I_Pos)        /*!< INT_REG INT2_STS: STS2_UART1_ID_I Mask  */
#define INT_REG_INT2_STS_STS2_UART0_ID_I_Pos  31                                                      /*!< INT_REG INT2_STS: STS2_UART0_ID_I Position */
#define INT_REG_INT2_STS_STS2_UART0_ID_I_Msk  (0x01UL << INT_REG_INT2_STS_STS2_UART0_ID_I_Pos)        /*!< INT_REG INT2_STS: STS2_UART0_ID_I Mask  */

/* ------------------------------  INT_REG_INT3_MASK  ----------------------------- */
#define INT_REG_INT3_MASK_MASK3_US_TIMER_0_Pos 0                                                      /*!< INT_REG INT3_MASK: MASK3_US_TIMER_0 Position */
#define INT_REG_INT3_MASK_MASK3_US_TIMER_0_Msk (0x01UL << INT_REG_INT3_MASK_MASK3_US_TIMER_0_Pos)     /*!< INT_REG INT3_MASK: MASK3_US_TIMER_0 Mask */
#define INT_REG_INT3_MASK_MASK3_US_TIMER_1_Pos 1                                                      /*!< INT_REG INT3_MASK: MASK3_US_TIMER_1 Position */
#define INT_REG_INT3_MASK_MASK3_US_TIMER_1_Msk (0x01UL << INT_REG_INT3_MASK_MASK3_US_TIMER_1_Pos)     /*!< INT_REG INT3_MASK: MASK3_US_TIMER_1 Mask */
#define INT_REG_INT3_MASK_MASK3_MS_TIMER_0_Pos 2                                                      /*!< INT_REG INT3_MASK: MASK3_MS_TIMER_0 Position */
#define INT_REG_INT3_MASK_MASK3_MS_TIMER_0_Msk (0x01UL << INT_REG_INT3_MASK_MASK3_MS_TIMER_0_Pos)     /*!< INT_REG INT3_MASK: MASK3_MS_TIMER_0 Mask */
#define INT_REG_INT3_MASK_MASK3_MS_TIMER_1_Pos 3                                                      /*!< INT_REG INT3_MASK: MASK3_MS_TIMER_1 Position */
#define INT_REG_INT3_MASK_MASK3_MS_TIMER_1_Msk (0x01UL << INT_REG_INT3_MASK_MASK3_MS_TIMER_1_Pos)     /*!< INT_REG INT3_MASK: MASK3_MS_TIMER_1 Mask */
#define INT_REG_INT3_MASK_MASK3_FENCE_HIT_INT_Pos 4                                                   /*!< INT_REG INT3_MASK: MASK3_FENCE_HIT_INT Position */
#define INT_REG_INT3_MASK_MASK3_FENCE_HIT_INT_Msk (0x01UL << INT_REG_INT3_MASK_MASK3_FENCE_HIT_INT_Pos)/*!< INT_REG INT3_MASK: MASK3_FENCE_HIT_INT Mask */
#define INT_REG_INT3_MASK_MASK3_FLASH_DMA_DONE_Pos 5                                                  /*!< INT_REG INT3_MASK: MASK3_FLASH_DMA_DONE Position */
#define INT_REG_INT3_MASK_MASK3_FLASH_DMA_DONE_Msk (0x01UL << INT_REG_INT3_MASK_MASK3_FLASH_DMA_DONE_Pos)/*!< INT_REG INT3_MASK: MASK3_FLASH_DMA_DONE Mask */
#define INT_REG_INT3_MASK_MASK3_DBG_UART_TX_Pos 6                                                     /*!< INT_REG INT3_MASK: MASK3_DBG_UART_TX Position */
#define INT_REG_INT3_MASK_MASK3_DBG_UART_TX_Msk (0x01UL << INT_REG_INT3_MASK_MASK3_DBG_UART_TX_Pos)   /*!< INT_REG INT3_MASK: MASK3_DBG_UART_TX Mask */
#define INT_REG_INT3_MASK_MASK3_DBG_UART_RX_Pos 7                                                     /*!< INT_REG INT3_MASK: MASK3_DBG_UART_RX Position */
#define INT_REG_INT3_MASK_MASK3_DBG_UART_RX_Msk (0x01UL << INT_REG_INT3_MASK_MASK3_DBG_UART_RX_Pos)   /*!< INT_REG INT3_MASK: MASK3_DBG_UART_RX Mask */
#define INT_REG_INT3_MASK_MASK3_ICOM_UART_TX_Pos 8                                                    /*!< INT_REG INT3_MASK: MASK3_ICOM_UART_TX Position */
#define INT_REG_INT3_MASK_MASK3_ICOM_UART_TX_Msk (0x01UL << INT_REG_INT3_MASK_MASK3_ICOM_UART_TX_Pos) /*!< INT_REG INT3_MASK: MASK3_ICOM_UART_TX Mask */
#define INT_REG_INT3_MASK_MASK3_ICOM_UART_RX_Pos 9                                                    /*!< INT_REG INT3_MASK: MASK3_ICOM_UART_RX Position */
#define INT_REG_INT3_MASK_MASK3_ICOM_UART_RX_Msk (0x01UL << INT_REG_INT3_MASK_MASK3_ICOM_UART_RX_Pos) /*!< INT_REG INT3_MASK: MASK3_ICOM_UART_RX Mask */
#define INT_REG_INT3_MASK_MASK3_DAT_UART_TX_Pos 10                                                    /*!< INT_REG INT3_MASK: MASK3_DAT_UART_TX Position */
#define INT_REG_INT3_MASK_MASK3_DAT_UART_TX_Msk (0x01UL << INT_REG_INT3_MASK_MASK3_DAT_UART_TX_Pos)   /*!< INT_REG INT3_MASK: MASK3_DAT_UART_TX Mask */
#define INT_REG_INT3_MASK_MASK3_DAT_UART_RX_Pos 11                                                    /*!< INT_REG INT3_MASK: MASK3_DAT_UART_RX Position */
#define INT_REG_INT3_MASK_MASK3_DAT_UART_RX_Msk (0x01UL << INT_REG_INT3_MASK_MASK3_DAT_UART_RX_Pos)   /*!< INT_REG INT3_MASK: MASK3_DAT_UART_RX Mask */
#define INT_REG_INT3_MASK_MASK3_I2CM_INTR_Pos 12                                                      /*!< INT_REG INT3_MASK: MASK3_I2CM_INTR Position */
#define INT_REG_INT3_MASK_MASK3_I2CM_INTR_Msk (0x01UL << INT_REG_INT3_MASK_MASK3_I2CM_INTR_Pos)       /*!< INT_REG INT3_MASK: MASK3_I2CM_INTR Mask */
#define INT_REG_INT3_MASK_MASK3_SPI_M_DONE_INT_Pos 13                                                 /*!< INT_REG INT3_MASK: MASK3_SPI_M_DONE_INT Position */
#define INT_REG_INT3_MASK_MASK3_SPI_M_DONE_INT_Msk (0x01UL << INT_REG_INT3_MASK_MASK3_SPI_M_DONE_INT_Pos)/*!< INT_REG INT3_MASK: MASK3_SPI_M_DONE_INT Mask */
#define INT_REG_INT3_MASK_MASK3_SYS_DMA_DONE_Pos 14                                                   /*!< INT_REG INT3_MASK: MASK3_SYS_DMA_DONE Position */
#define INT_REG_INT3_MASK_MASK3_SYS_DMA_DONE_Msk (0x01UL << INT_REG_INT3_MASK_MASK3_SYS_DMA_DONE_Pos) /*!< INT_REG INT3_MASK: MASK3_SYS_DMA_DONE Mask */
#define INT_REG_INT3_MASK_MASK3_GPIO_INT_Pos  15                                                      /*!< INT_REG INT3_MASK: MASK3_GPIO_INT Position */
#define INT_REG_INT3_MASK_MASK3_GPIO_INT_Msk  (0x01UL << INT_REG_INT3_MASK_MASK3_GPIO_INT_Pos)        /*!< INT_REG INT3_MASK: MASK3_GPIO_INT Mask  */
#define INT_REG_INT3_MASK_MASK3_EXT_INTR_I_Pos 16                                                     /*!< INT_REG INT3_MASK: MASK3_EXT_INTR_I Position */
#define INT_REG_INT3_MASK_MASK3_EXT_INTR_I_Msk (0x01UL << INT_REG_INT3_MASK_MASK3_EXT_INTR_I_Pos)     /*!< INT_REG INT3_MASK: MASK3_EXT_INTR_I Mask */
#define INT_REG_INT3_MASK_MASK3_SRAM_ADDR_OVERFLOW_Pos 17                                             /*!< INT_REG INT3_MASK: MASK3_SRAM_ADDR_OVERFLOW Position */
#define INT_REG_INT3_MASK_MASK3_SRAM_ADDR_OVERFLOW_Msk (0x01UL << INT_REG_INT3_MASK_MASK3_SRAM_ADDR_OVERFLOW_Pos)/*!< INT_REG INT3_MASK: MASK3_SRAM_ADDR_OVERFLOW Mask */
#define INT_REG_INT3_MASK_MASK3_ILL_ADDR_INT_Pos 18                                                   /*!< INT_REG INT3_MASK: MASK3_ILL_ADDR_INT Position */
#define INT_REG_INT3_MASK_MASK3_ILL_ADDR_INT_Msk (0x01UL << INT_REG_INT3_MASK_MASK3_ILL_ADDR_INT_Pos) /*!< INT_REG INT3_MASK: MASK3_ILL_ADDR_INT Mask */
#define INT_REG_INT3_MASK_MASK3_CMD_DONE_INT_Pos 19                                                   /*!< INT_REG INT3_MASK: MASK3_CMD_DONE_INT Position */
#define INT_REG_INT3_MASK_MASK3_CMD_DONE_INT_Msk (0x01UL << INT_REG_INT3_MASK_MASK3_CMD_DONE_INT_Pos) /*!< INT_REG INT3_MASK: MASK3_CMD_DONE_INT Mask */
#define INT_REG_INT3_MASK_MASK3_TX_FIFO_NOT_EMPTY_INT_Pos 20                                          /*!< INT_REG INT3_MASK: MASK3_TX_FIFO_NOT_EMPTY_INT Position */
#define INT_REG_INT3_MASK_MASK3_TX_FIFO_NOT_EMPTY_INT_Msk (0x01UL << INT_REG_INT3_MASK_MASK3_TX_FIFO_NOT_EMPTY_INT_Pos)/*!< INT_REG INT3_MASK: MASK3_TX_FIFO_NOT_EMPTY_INT Mask */
#define INT_REG_INT3_MASK_MASK3_RX_FIFO_NOT_EMPTY_INT_Pos 21                                          /*!< INT_REG INT3_MASK: MASK3_RX_FIFO_NOT_EMPTY_INT Position */
#define INT_REG_INT3_MASK_MASK3_RX_FIFO_NOT_EMPTY_INT_Msk (0x01UL << INT_REG_INT3_MASK_MASK3_RX_FIFO_NOT_EMPTY_INT_Pos)/*!< INT_REG INT3_MASK: MASK3_RX_FIFO_NOT_EMPTY_INT Mask */
#define INT_REG_INT3_MASK_MASK3_LL_INT0_Pos   22                                                      /*!< INT_REG INT3_MASK: MASK3_LL_INT0 Position */
#define INT_REG_INT3_MASK_MASK3_LL_INT0_Msk   (0x01UL << INT_REG_INT3_MASK_MASK3_LL_INT0_Pos)         /*!< INT_REG INT3_MASK: MASK3_LL_INT0 Mask   */
#define INT_REG_INT3_MASK_MASK3_LL_INT1_Pos   23                                                      /*!< INT_REG INT3_MASK: MASK3_LL_INT1 Position */
#define INT_REG_INT3_MASK_MASK3_LL_INT1_Msk   (0x01UL << INT_REG_INT3_MASK_MASK3_LL_INT1_Pos)         /*!< INT_REG INT3_MASK: MASK3_LL_INT1 Mask   */
#define INT_REG_INT3_MASK_MASK3_LL_INT2_Pos   24                                                      /*!< INT_REG INT3_MASK: MASK3_LL_INT2 Position */
#define INT_REG_INT3_MASK_MASK3_LL_INT2_Msk   (0x01UL << INT_REG_INT3_MASK_MASK3_LL_INT2_Pos)         /*!< INT_REG INT3_MASK: MASK3_LL_INT2 Mask   */
#define INT_REG_INT3_MASK_MASK3_LL_INT3_Pos   25                                                      /*!< INT_REG INT3_MASK: MASK3_LL_INT3 Position */
#define INT_REG_INT3_MASK_MASK3_LL_INT3_Msk   (0x01UL << INT_REG_INT3_MASK_MASK3_LL_INT3_Pos)         /*!< INT_REG INT3_MASK: MASK3_LL_INT3 Mask   */
#define INT_REG_INT3_MASK_MASK3_LL_INT4_Pos   26                                                      /*!< INT_REG INT3_MASK: MASK3_LL_INT4 Position */
#define INT_REG_INT3_MASK_MASK3_LL_INT4_Msk   (0x01UL << INT_REG_INT3_MASK_MASK3_LL_INT4_Pos)         /*!< INT_REG INT3_MASK: MASK3_LL_INT4 Mask   */
#define INT_REG_INT3_MASK_MASK3_AES_INT_Pos   27                                                      /*!< INT_REG INT3_MASK: MASK3_AES_INT Position */
#define INT_REG_INT3_MASK_MASK3_AES_INT_Msk   (0x01UL << INT_REG_INT3_MASK_MASK3_AES_INT_Pos)         /*!< INT_REG INT3_MASK: MASK3_AES_INT Mask   */
#define INT_REG_INT3_MASK_MASK3_IRQ33_IRQ12_INT_Pos 28                                                /*!< INT_REG INT3_MASK: MASK3_IRQ33_IRQ12_INT Position */
#define INT_REG_INT3_MASK_MASK3_IRQ33_IRQ12_INT_Msk (0x01UL << INT_REG_INT3_MASK_MASK3_IRQ33_IRQ12_INT_Pos)/*!< INT_REG INT3_MASK: MASK3_IRQ33_IRQ12_INT Mask */
#define INT_REG_INT3_MASK_MASK3_IPC1_Pos      29                                                      /*!< INT_REG INT3_MASK: MASK3_IPC1 Position  */
#define INT_REG_INT3_MASK_MASK3_IPC1_Msk      (0x01UL << INT_REG_INT3_MASK_MASK3_IPC1_Pos)            /*!< INT_REG INT3_MASK: MASK3_IPC1 Mask      */
#define INT_REG_INT3_MASK_MASK3_IPC2_Pos      30                                                      /*!< INT_REG INT3_MASK: MASK3_IPC2 Position  */
#define INT_REG_INT3_MASK_MASK3_IPC2_Msk      (0x01UL << INT_REG_INT3_MASK_MASK3_IPC2_Pos)            /*!< INT_REG INT3_MASK: MASK3_IPC2 Mask      */
#define INT_REG_INT3_MASK_MASK3_TX_FIFO_NOT_FULL_INT_Pos 31                                           /*!< INT_REG INT3_MASK: MASK3_TX_FIFO_NOT_FULL_INT Position */
#define INT_REG_INT3_MASK_MASK3_TX_FIFO_NOT_FULL_INT_Msk (0x01UL << INT_REG_INT3_MASK_MASK3_TX_FIFO_NOT_FULL_INT_Pos)/*!< INT_REG INT3_MASK: MASK3_TX_FIFO_NOT_FULL_INT Mask */

/* ------------------------------  INT_REG_INT3_RAW  ------------------------------ */
#define INT_REG_INT3_RAW_RAW_US_TIMER_0_3_Pos 0                                                       /*!< INT_REG INT3_RAW: RAW_US_TIMER_0_3 Position */
#define INT_REG_INT3_RAW_RAW_US_TIMER_0_3_Msk (0x01UL << INT_REG_INT3_RAW_RAW_US_TIMER_0_3_Pos)       /*!< INT_REG INT3_RAW: RAW_US_TIMER_0_3 Mask */
#define INT_REG_INT3_RAW_RAW_US_TIMER_1_3_Pos 1                                                       /*!< INT_REG INT3_RAW: RAW_US_TIMER_1_3 Position */
#define INT_REG_INT3_RAW_RAW_US_TIMER_1_3_Msk (0x01UL << INT_REG_INT3_RAW_RAW_US_TIMER_1_3_Pos)       /*!< INT_REG INT3_RAW: RAW_US_TIMER_1_3 Mask */
#define INT_REG_INT3_RAW_RAW_MS_TIMER_0_3_Pos 2                                                       /*!< INT_REG INT3_RAW: RAW_MS_TIMER_0_3 Position */
#define INT_REG_INT3_RAW_RAW_MS_TIMER_0_3_Msk (0x01UL << INT_REG_INT3_RAW_RAW_MS_TIMER_0_3_Pos)       /*!< INT_REG INT3_RAW: RAW_MS_TIMER_0_3 Mask */
#define INT_REG_INT3_RAW_RAW_MS_TIMER_1_3_Pos 3                                                       /*!< INT_REG INT3_RAW: RAW_MS_TIMER_1_3 Position */
#define INT_REG_INT3_RAW_RAW_MS_TIMER_1_3_Msk (0x01UL << INT_REG_INT3_RAW_RAW_MS_TIMER_1_3_Pos)       /*!< INT_REG INT3_RAW: RAW_MS_TIMER_1_3 Mask */
#define INT_REG_INT3_RAW_RAW_FENCE_HIT_INT_3_Pos 4                                                    /*!< INT_REG INT3_RAW: RAW_FENCE_HIT_INT_3 Position */
#define INT_REG_INT3_RAW_RAW_FENCE_HIT_INT_3_Msk (0x01UL << INT_REG_INT3_RAW_RAW_FENCE_HIT_INT_3_Pos) /*!< INT_REG INT3_RAW: RAW_FENCE_HIT_INT_3 Mask */
#define INT_REG_INT3_RAW_RAW_FLASH_DMA_DONE_3_Pos 5                                                   /*!< INT_REG INT3_RAW: RAW_FLASH_DMA_DONE_3 Position */
#define INT_REG_INT3_RAW_RAW_FLASH_DMA_DONE_3_Msk (0x01UL << INT_REG_INT3_RAW_RAW_FLASH_DMA_DONE_3_Pos)/*!< INT_REG INT3_RAW: RAW_FLASH_DMA_DONE_3 Mask */
#define INT_REG_INT3_RAW_RAW_DBG_UART_TX_3_Pos 6                                                      /*!< INT_REG INT3_RAW: RAW_DBG_UART_TX_3 Position */
#define INT_REG_INT3_RAW_RAW_DBG_UART_TX_3_Msk (0x01UL << INT_REG_INT3_RAW_RAW_DBG_UART_TX_3_Pos)     /*!< INT_REG INT3_RAW: RAW_DBG_UART_TX_3 Mask */
#define INT_REG_INT3_RAW_RAW_DBG_UART_RX_3_Pos 7                                                      /*!< INT_REG INT3_RAW: RAW_DBG_UART_RX_3 Position */
#define INT_REG_INT3_RAW_RAW_DBG_UART_RX_3_Msk (0x01UL << INT_REG_INT3_RAW_RAW_DBG_UART_RX_3_Pos)     /*!< INT_REG INT3_RAW: RAW_DBG_UART_RX_3 Mask */
#define INT_REG_INT3_RAW_RAW_ICOM_UART_TX_3_Pos 8                                                     /*!< INT_REG INT3_RAW: RAW_ICOM_UART_TX_3 Position */
#define INT_REG_INT3_RAW_RAW_ICOM_UART_TX_3_Msk (0x01UL << INT_REG_INT3_RAW_RAW_ICOM_UART_TX_3_Pos)   /*!< INT_REG INT3_RAW: RAW_ICOM_UART_TX_3 Mask */
#define INT_REG_INT3_RAW_RAW_ICOM_UART_RX_3_Pos 9                                                     /*!< INT_REG INT3_RAW: RAW_ICOM_UART_RX_3 Position */
#define INT_REG_INT3_RAW_RAW_ICOM_UART_RX_3_Msk (0x01UL << INT_REG_INT3_RAW_RAW_ICOM_UART_RX_3_Pos)   /*!< INT_REG INT3_RAW: RAW_ICOM_UART_RX_3 Mask */
#define INT_REG_INT3_RAW_RAW_DAT_UART_TX_3_Pos 10                                                     /*!< INT_REG INT3_RAW: RAW_DAT_UART_TX_3 Position */
#define INT_REG_INT3_RAW_RAW_DAT_UART_TX_3_Msk (0x01UL << INT_REG_INT3_RAW_RAW_DAT_UART_TX_3_Pos)     /*!< INT_REG INT3_RAW: RAW_DAT_UART_TX_3 Mask */
#define INT_REG_INT3_RAW_RAW_DAT_UART_RX_3_Pos 11                                                     /*!< INT_REG INT3_RAW: RAW_DAT_UART_RX_3 Position */
#define INT_REG_INT3_RAW_RAW_DAT_UART_RX_3_Msk (0x01UL << INT_REG_INT3_RAW_RAW_DAT_UART_RX_3_Pos)     /*!< INT_REG INT3_RAW: RAW_DAT_UART_RX_3 Mask */
#define INT_REG_INT3_RAW_RAW_I2CM_INTR_3_Pos  12                                                      /*!< INT_REG INT3_RAW: RAW_I2CM_INTR_3 Position */
#define INT_REG_INT3_RAW_RAW_I2CM_INTR_3_Msk  (0x01UL << INT_REG_INT3_RAW_RAW_I2CM_INTR_3_Pos)        /*!< INT_REG INT3_RAW: RAW_I2CM_INTR_3 Mask  */
#define INT_REG_INT3_RAW_RAW_SPI_M_DONE_INT_3_Pos 13                                                  /*!< INT_REG INT3_RAW: RAW_SPI_M_DONE_INT_3 Position */
#define INT_REG_INT3_RAW_RAW_SPI_M_DONE_INT_3_Msk (0x01UL << INT_REG_INT3_RAW_RAW_SPI_M_DONE_INT_3_Pos)/*!< INT_REG INT3_RAW: RAW_SPI_M_DONE_INT_3 Mask */
#define INT_REG_INT3_RAW_RAW_SYS_DMA_DONE_3_Pos 14                                                    /*!< INT_REG INT3_RAW: RAW_SYS_DMA_DONE_3 Position */
#define INT_REG_INT3_RAW_RAW_SYS_DMA_DONE_3_Msk (0x01UL << INT_REG_INT3_RAW_RAW_SYS_DMA_DONE_3_Pos)   /*!< INT_REG INT3_RAW: RAW_SYS_DMA_DONE_3 Mask */
#define INT_REG_INT3_RAW_RAW_GPIO_INT_3_Pos   15                                                      /*!< INT_REG INT3_RAW: RAW_GPIO_INT_3 Position */
#define INT_REG_INT3_RAW_RAW_GPIO_INT_3_Msk   (0x01UL << INT_REG_INT3_RAW_RAW_GPIO_INT_3_Pos)         /*!< INT_REG INT3_RAW: RAW_GPIO_INT_3 Mask   */
#define INT_REG_INT3_RAW_RAW_EXT_INTR_I_3_Pos 16                                                      /*!< INT_REG INT3_RAW: RAW_EXT_INTR_I_3 Position */
#define INT_REG_INT3_RAW_RAW_EXT_INTR_I_3_Msk (0x01UL << INT_REG_INT3_RAW_RAW_EXT_INTR_I_3_Pos)       /*!< INT_REG INT3_RAW: RAW_EXT_INTR_I_3 Mask */
#define INT_REG_INT3_RAW_RAW_SRAM_ADDR_OVERFLOW_3_Pos 17                                              /*!< INT_REG INT3_RAW: RAW_SRAM_ADDR_OVERFLOW_3 Position */
#define INT_REG_INT3_RAW_RAW_SRAM_ADDR_OVERFLOW_3_Msk (0x01UL << INT_REG_INT3_RAW_RAW_SRAM_ADDR_OVERFLOW_3_Pos)/*!< INT_REG INT3_RAW: RAW_SRAM_ADDR_OVERFLOW_3 Mask */
#define INT_REG_INT3_RAW_RAW_ILL_ADDR_INT_3_Pos 18                                                    /*!< INT_REG INT3_RAW: RAW_ILL_ADDR_INT_3 Position */
#define INT_REG_INT3_RAW_RAW_ILL_ADDR_INT_3_Msk (0x01UL << INT_REG_INT3_RAW_RAW_ILL_ADDR_INT_3_Pos)   /*!< INT_REG INT3_RAW: RAW_ILL_ADDR_INT_3 Mask */
#define INT_REG_INT3_RAW_RAW_CMD_DONE_INT_3_Pos 19                                                    /*!< INT_REG INT3_RAW: RAW_CMD_DONE_INT_3 Position */
#define INT_REG_INT3_RAW_RAW_CMD_DONE_INT_3_Msk (0x01UL << INT_REG_INT3_RAW_RAW_CMD_DONE_INT_3_Pos)   /*!< INT_REG INT3_RAW: RAW_CMD_DONE_INT_3 Mask */
#define INT_REG_INT3_RAW_RAW_TX_FIFO_NOT_EMPTY_INT_3_Pos 20                                           /*!< INT_REG INT3_RAW: RAW_TX_FIFO_NOT_EMPTY_INT_3 Position */
#define INT_REG_INT3_RAW_RAW_TX_FIFO_NOT_EMPTY_INT_3_Msk (0x01UL << INT_REG_INT3_RAW_RAW_TX_FIFO_NOT_EMPTY_INT_3_Pos)/*!< INT_REG INT3_RAW: RAW_TX_FIFO_NOT_EMPTY_INT_3 Mask */
#define INT_REG_INT3_RAW_RAW_RX_FIFO_NOT_EMPTY_INT_3_Pos 21                                           /*!< INT_REG INT3_RAW: RAW_RX_FIFO_NOT_EMPTY_INT_3 Position */
#define INT_REG_INT3_RAW_RAW_RX_FIFO_NOT_EMPTY_INT_3_Msk (0x01UL << INT_REG_INT3_RAW_RAW_RX_FIFO_NOT_EMPTY_INT_3_Pos)/*!< INT_REG INT3_RAW: RAW_RX_FIFO_NOT_EMPTY_INT_3 Mask */
#define INT_REG_INT3_RAW_RAW_LL_INT0_3_Pos    22                                                      /*!< INT_REG INT3_RAW: RAW_LL_INT0_3 Position */
#define INT_REG_INT3_RAW_RAW_LL_INT0_3_Msk    (0x01UL << INT_REG_INT3_RAW_RAW_LL_INT0_3_Pos)          /*!< INT_REG INT3_RAW: RAW_LL_INT0_3 Mask    */
#define INT_REG_INT3_RAW_RAW_LL_INT1_3_Pos    23                                                      /*!< INT_REG INT3_RAW: RAW_LL_INT1_3 Position */
#define INT_REG_INT3_RAW_RAW_LL_INT1_3_Msk    (0x01UL << INT_REG_INT3_RAW_RAW_LL_INT1_3_Pos)          /*!< INT_REG INT3_RAW: RAW_LL_INT1_3 Mask    */
#define INT_REG_INT3_RAW_RAW_LL_INT2_3_Pos    24                                                      /*!< INT_REG INT3_RAW: RAW_LL_INT2_3 Position */
#define INT_REG_INT3_RAW_RAW_LL_INT2_3_Msk    (0x01UL << INT_REG_INT3_RAW_RAW_LL_INT2_3_Pos)          /*!< INT_REG INT3_RAW: RAW_LL_INT2_3 Mask    */
#define INT_REG_INT3_RAW_RAW_LL_INT3_3_Pos    25                                                      /*!< INT_REG INT3_RAW: RAW_LL_INT3_3 Position */
#define INT_REG_INT3_RAW_RAW_LL_INT3_3_Msk    (0x01UL << INT_REG_INT3_RAW_RAW_LL_INT3_3_Pos)          /*!< INT_REG INT3_RAW: RAW_LL_INT3_3 Mask    */
#define INT_REG_INT3_RAW_RAW_LL_INT4_3_Pos    26                                                      /*!< INT_REG INT3_RAW: RAW_LL_INT4_3 Position */
#define INT_REG_INT3_RAW_RAW_LL_INT4_3_Msk    (0x01UL << INT_REG_INT3_RAW_RAW_LL_INT4_3_Pos)          /*!< INT_REG INT3_RAW: RAW_LL_INT4_3 Mask    */
#define INT_REG_INT3_RAW_RAW_AES_INT_3_Pos    27                                                      /*!< INT_REG INT3_RAW: RAW_AES_INT_3 Position */
#define INT_REG_INT3_RAW_RAW_AES_INT_3_Msk    (0x01UL << INT_REG_INT3_RAW_RAW_AES_INT_3_Pos)          /*!< INT_REG INT3_RAW: RAW_AES_INT_3 Mask    */
#define INT_REG_INT3_RAW_RAW_IRQ33_IRQ12_INT_3_Pos 28                                                 /*!< INT_REG INT3_RAW: RAW_IRQ33_IRQ12_INT_3 Position */
#define INT_REG_INT3_RAW_RAW_IRQ33_IRQ12_INT_3_Msk (0x01UL << INT_REG_INT3_RAW_RAW_IRQ33_IRQ12_INT_3_Pos)/*!< INT_REG INT3_RAW: RAW_IRQ33_IRQ12_INT_3 Mask */
#define INT_REG_INT3_RAW_RAW_IPC1_3_Pos       29                                                      /*!< INT_REG INT3_RAW: RAW_IPC1_3 Position   */
#define INT_REG_INT3_RAW_RAW_IPC1_3_Msk       (0x01UL << INT_REG_INT3_RAW_RAW_IPC1_3_Pos)             /*!< INT_REG INT3_RAW: RAW_IPC1_3 Mask       */
#define INT_REG_INT3_RAW_RAW_IPC2_3_Pos       30                                                      /*!< INT_REG INT3_RAW: RAW_IPC2_3 Position   */
#define INT_REG_INT3_RAW_RAW_IPC2_3_Msk       (0x01UL << INT_REG_INT3_RAW_RAW_IPC2_3_Pos)             /*!< INT_REG INT3_RAW: RAW_IPC2_3 Mask       */
#define INT_REG_INT3_RAW_RAW_TX_FIFO_NOT_FULL_INT_3_Pos 31                                            /*!< INT_REG INT3_RAW: RAW_TX_FIFO_NOT_FULL_INT_3 Position */
#define INT_REG_INT3_RAW_RAW_TX_FIFO_NOT_FULL_INT_3_Msk (0x01UL << INT_REG_INT3_RAW_RAW_TX_FIFO_NOT_FULL_INT_3_Pos)/*!< INT_REG INT3_RAW: RAW_TX_FIFO_NOT_FULL_INT_3 Mask */

/* ------------------------------  INT_REG_INT3_STS  ------------------------------ */
#define INT_REG_INT3_STS_STS3_US_TIMER_0_Pos  0                                                       /*!< INT_REG INT3_STS: STS3_US_TIMER_0 Position */
#define INT_REG_INT3_STS_STS3_US_TIMER_0_Msk  (0x01UL << INT_REG_INT3_STS_STS3_US_TIMER_0_Pos)        /*!< INT_REG INT3_STS: STS3_US_TIMER_0 Mask  */
#define INT_REG_INT3_STS_STS3_US_TIMER_1_Pos  1                                                       /*!< INT_REG INT3_STS: STS3_US_TIMER_1 Position */
#define INT_REG_INT3_STS_STS3_US_TIMER_1_Msk  (0x01UL << INT_REG_INT3_STS_STS3_US_TIMER_1_Pos)        /*!< INT_REG INT3_STS: STS3_US_TIMER_1 Mask  */
#define INT_REG_INT3_STS_STS3_MS_TIMER_0_Pos  2                                                       /*!< INT_REG INT3_STS: STS3_MS_TIMER_0 Position */
#define INT_REG_INT3_STS_STS3_MS_TIMER_0_Msk  (0x01UL << INT_REG_INT3_STS_STS3_MS_TIMER_0_Pos)        /*!< INT_REG INT3_STS: STS3_MS_TIMER_0 Mask  */
#define INT_REG_INT3_STS_STS3_MS_TIMER_1_Pos  3                                                       /*!< INT_REG INT3_STS: STS3_MS_TIMER_1 Position */
#define INT_REG_INT3_STS_STS3_MS_TIMER_1_Msk  (0x01UL << INT_REG_INT3_STS_STS3_MS_TIMER_1_Pos)        /*!< INT_REG INT3_STS: STS3_MS_TIMER_1 Mask  */
#define INT_REG_INT3_STS_STS3_FENCE_HIT_INT_Pos 4                                                     /*!< INT_REG INT3_STS: STS3_FENCE_HIT_INT Position */
#define INT_REG_INT3_STS_STS3_FENCE_HIT_INT_Msk (0x01UL << INT_REG_INT3_STS_STS3_FENCE_HIT_INT_Pos)   /*!< INT_REG INT3_STS: STS3_FENCE_HIT_INT Mask */
#define INT_REG_INT3_STS_STS3_FLASH_DMA_DONE_Pos 5                                                    /*!< INT_REG INT3_STS: STS3_FLASH_DMA_DONE Position */
#define INT_REG_INT3_STS_STS3_FLASH_DMA_DONE_Msk (0x01UL << INT_REG_INT3_STS_STS3_FLASH_DMA_DONE_Pos) /*!< INT_REG INT3_STS: STS3_FLASH_DMA_DONE Mask */
#define INT_REG_INT3_STS_STS3_DBG_UART_TX_BUSY_Pos 6                                                  /*!< INT_REG INT3_STS: STS3_DBG_UART_TX_BUSY Position */
#define INT_REG_INT3_STS_STS3_DBG_UART_TX_BUSY_Msk (0x01UL << INT_REG_INT3_STS_STS3_DBG_UART_TX_BUSY_Pos)/*!< INT_REG INT3_STS: STS3_DBG_UART_TX_BUSY Mask */
#define INT_REG_INT3_STS_STS3_DBG_UART_RX_BUSY_Pos 7                                                  /*!< INT_REG INT3_STS: STS3_DBG_UART_RX_BUSY Position */
#define INT_REG_INT3_STS_STS3_DBG_UART_RX_BUSY_Msk (0x01UL << INT_REG_INT3_STS_STS3_DBG_UART_RX_BUSY_Pos)/*!< INT_REG INT3_STS: STS3_DBG_UART_RX_BUSY Mask */
#define INT_REG_INT3_STS_STS3_ICOM_UART_TX_BUSY_Pos 8                                                 /*!< INT_REG INT3_STS: STS3_ICOM_UART_TX_BUSY Position */
#define INT_REG_INT3_STS_STS3_ICOM_UART_TX_BUSY_Msk (0x01UL << INT_REG_INT3_STS_STS3_ICOM_UART_TX_BUSY_Pos)/*!< INT_REG INT3_STS: STS3_ICOM_UART_TX_BUSY Mask */
#define INT_REG_INT3_STS_STS3_ICOM_UART_RX_BUSY_Pos 9                                                 /*!< INT_REG INT3_STS: STS3_ICOM_UART_RX_BUSY Position */
#define INT_REG_INT3_STS_STS3_ICOM_UART_RX_BUSY_Msk (0x01UL << INT_REG_INT3_STS_STS3_ICOM_UART_RX_BUSY_Pos)/*!< INT_REG INT3_STS: STS3_ICOM_UART_RX_BUSY Mask */
#define INT_REG_INT3_STS_STS3_DAT_UART_TX_BUSY_Pos 10                                                 /*!< INT_REG INT3_STS: STS3_DAT_UART_TX_BUSY Position */
#define INT_REG_INT3_STS_STS3_DAT_UART_TX_BUSY_Msk (0x01UL << INT_REG_INT3_STS_STS3_DAT_UART_TX_BUSY_Pos)/*!< INT_REG INT3_STS: STS3_DAT_UART_TX_BUSY Mask */
#define INT_REG_INT3_STS_STS3_DAT_UART_RX_BUSY_Pos 11                                                 /*!< INT_REG INT3_STS: STS3_DAT_UART_RX_BUSY Position */
#define INT_REG_INT3_STS_STS3_DAT_UART_RX_BUSY_Msk (0x01UL << INT_REG_INT3_STS_STS3_DAT_UART_RX_BUSY_Pos)/*!< INT_REG INT3_STS: STS3_DAT_UART_RX_BUSY Mask */
#define INT_REG_INT3_STS_STS3_I2CM_INTR_BUSY_Pos 12                                                   /*!< INT_REG INT3_STS: STS3_I2CM_INTR_BUSY Position */
#define INT_REG_INT3_STS_STS3_I2CM_INTR_BUSY_Msk (0x01UL << INT_REG_INT3_STS_STS3_I2CM_INTR_BUSY_Pos) /*!< INT_REG INT3_STS: STS3_I2CM_INTR_BUSY Mask */
#define INT_REG_INT3_STS_STS3_SPI_M_DONE_INT_Pos 13                                                   /*!< INT_REG INT3_STS: STS3_SPI_M_DONE_INT Position */
#define INT_REG_INT3_STS_STS3_SPI_M_DONE_INT_Msk (0x01UL << INT_REG_INT3_STS_STS3_SPI_M_DONE_INT_Pos) /*!< INT_REG INT3_STS: STS3_SPI_M_DONE_INT Mask */
#define INT_REG_INT3_STS_STS3_SYS_DMA_DONE_Pos 14                                                     /*!< INT_REG INT3_STS: STS3_SYS_DMA_DONE Position */
#define INT_REG_INT3_STS_STS3_SYS_DMA_DONE_Msk (0x01UL << INT_REG_INT3_STS_STS3_SYS_DMA_DONE_Pos)     /*!< INT_REG INT3_STS: STS3_SYS_DMA_DONE Mask */
#define INT_REG_INT3_STS_STS3_GPIO_INT_BUSY_Pos 15                                                    /*!< INT_REG INT3_STS: STS3_GPIO_INT_BUSY Position */
#define INT_REG_INT3_STS_STS3_GPIO_INT_BUSY_Msk (0x01UL << INT_REG_INT3_STS_STS3_GPIO_INT_BUSY_Pos)   /*!< INT_REG INT3_STS: STS3_GPIO_INT_BUSY Mask */
#define INT_REG_INT3_STS_STS3_EXT_INTR_I_BUSY_Pos 16                                                  /*!< INT_REG INT3_STS: STS3_EXT_INTR_I_BUSY Position */
#define INT_REG_INT3_STS_STS3_EXT_INTR_I_BUSY_Msk (0x01UL << INT_REG_INT3_STS_STS3_EXT_INTR_I_BUSY_Pos)/*!< INT_REG INT3_STS: STS3_EXT_INTR_I_BUSY Mask */
#define INT_REG_INT3_STS_STS3_SRAM_ADDR_OVERFLOW_Pos 17                                               /*!< INT_REG INT3_STS: STS3_SRAM_ADDR_OVERFLOW Position */
#define INT_REG_INT3_STS_STS3_SRAM_ADDR_OVERFLOW_Msk (0x01UL << INT_REG_INT3_STS_STS3_SRAM_ADDR_OVERFLOW_Pos)/*!< INT_REG INT3_STS: STS3_SRAM_ADDR_OVERFLOW Mask */
#define INT_REG_INT3_STS_STS3_ILL_ADDR_INT_Pos 18                                                     /*!< INT_REG INT3_STS: STS3_ILL_ADDR_INT Position */
#define INT_REG_INT3_STS_STS3_ILL_ADDR_INT_Msk (0x01UL << INT_REG_INT3_STS_STS3_ILL_ADDR_INT_Pos)     /*!< INT_REG INT3_STS: STS3_ILL_ADDR_INT Mask */
#define INT_REG_INT3_STS_STS3_CMD_DONE_INT_BUSY_Pos 19                                                /*!< INT_REG INT3_STS: STS3_CMD_DONE_INT_BUSY Position */
#define INT_REG_INT3_STS_STS3_CMD_DONE_INT_BUSY_Msk (0x01UL << INT_REG_INT3_STS_STS3_CMD_DONE_INT_BUSY_Pos)/*!< INT_REG INT3_STS: STS3_CMD_DONE_INT_BUSY Mask */
#define INT_REG_INT3_STS_STS3_TX_FIFO_NOT_EMPTY_INT_BUSY_Pos 20                                       /*!< INT_REG INT3_STS: STS3_TX_FIFO_NOT_EMPTY_INT_BUSY Position */
#define INT_REG_INT3_STS_STS3_TX_FIFO_NOT_EMPTY_INT_BUSY_Msk (0x01UL << INT_REG_INT3_STS_STS3_TX_FIFO_NOT_EMPTY_INT_BUSY_Pos)/*!< INT_REG INT3_STS: STS3_TX_FIFO_NOT_EMPTY_INT_BUSY Mask */
#define INT_REG_INT3_STS_STS3_RX_FIFO_NOT_EMPTY_INT_BUSY_Pos 21                                       /*!< INT_REG INT3_STS: STS3_RX_FIFO_NOT_EMPTY_INT_BUSY Position */
#define INT_REG_INT3_STS_STS3_RX_FIFO_NOT_EMPTY_INT_BUSY_Msk (0x01UL << INT_REG_INT3_STS_STS3_RX_FIFO_NOT_EMPTY_INT_BUSY_Pos)/*!< INT_REG INT3_STS: STS3_RX_FIFO_NOT_EMPTY_INT_BUSY Mask */
#define INT_REG_INT3_STS_STS3_LL_INT0_Pos     22                                                      /*!< INT_REG INT3_STS: STS3_LL_INT0 Position */
#define INT_REG_INT3_STS_STS3_LL_INT0_Msk     (0x01UL << INT_REG_INT3_STS_STS3_LL_INT0_Pos)           /*!< INT_REG INT3_STS: STS3_LL_INT0 Mask     */
#define INT_REG_INT3_STS_STS3_LL_INT1_Pos     23                                                      /*!< INT_REG INT3_STS: STS3_LL_INT1 Position */
#define INT_REG_INT3_STS_STS3_LL_INT1_Msk     (0x01UL << INT_REG_INT3_STS_STS3_LL_INT1_Pos)           /*!< INT_REG INT3_STS: STS3_LL_INT1 Mask     */
#define INT_REG_INT3_STS_STS3_LL_INT2_Pos     24                                                      /*!< INT_REG INT3_STS: STS3_LL_INT2 Position */
#define INT_REG_INT3_STS_STS3_LL_INT2_Msk     (0x01UL << INT_REG_INT3_STS_STS3_LL_INT2_Pos)           /*!< INT_REG INT3_STS: STS3_LL_INT2 Mask     */
#define INT_REG_INT3_STS_STS3_LL_INT3_Pos     25                                                      /*!< INT_REG INT3_STS: STS3_LL_INT3 Position */
#define INT_REG_INT3_STS_STS3_LL_INT3_Msk     (0x01UL << INT_REG_INT3_STS_STS3_LL_INT3_Pos)           /*!< INT_REG INT3_STS: STS3_LL_INT3 Mask     */
#define INT_REG_INT3_STS_STS3_LL_INT4_Pos     26                                                      /*!< INT_REG INT3_STS: STS3_LL_INT4 Position */
#define INT_REG_INT3_STS_STS3_LL_INT4_Msk     (0x01UL << INT_REG_INT3_STS_STS3_LL_INT4_Pos)           /*!< INT_REG INT3_STS: STS3_LL_INT4 Mask     */
#define INT_REG_INT3_STS_STS3_AES_INT_Pos     27                                                      /*!< INT_REG INT3_STS: STS3_AES_INT Position */
#define INT_REG_INT3_STS_STS3_AES_INT_Msk     (0x01UL << INT_REG_INT3_STS_STS3_AES_INT_Pos)           /*!< INT_REG INT3_STS: STS3_AES_INT Mask     */
#define INT_REG_INT3_STS_STS3_IRQ33_IRQ12_INT_Pos 28                                                  /*!< INT_REG INT3_STS: STS3_IRQ33_IRQ12_INT Position */
#define INT_REG_INT3_STS_STS3_IRQ33_IRQ12_INT_Msk (0x01UL << INT_REG_INT3_STS_STS3_IRQ33_IRQ12_INT_Pos)/*!< INT_REG INT3_STS: STS3_IRQ33_IRQ12_INT Mask */
#define INT_REG_INT3_STS_STS3_IPC1_Pos        29                                                      /*!< INT_REG INT3_STS: STS3_IPC1 Position    */
#define INT_REG_INT3_STS_STS3_IPC1_Msk        (0x01UL << INT_REG_INT3_STS_STS3_IPC1_Pos)              /*!< INT_REG INT3_STS: STS3_IPC1 Mask        */
#define INT_REG_INT3_STS_STS3_IPC2_Pos        30                                                      /*!< INT_REG INT3_STS: STS3_IPC2 Position    */
#define INT_REG_INT3_STS_STS3_IPC2_Msk        (0x01UL << INT_REG_INT3_STS_STS3_IPC2_Pos)              /*!< INT_REG INT3_STS: STS3_IPC2 Mask        */
#define INT_REG_INT3_STS_STS3_TX_FIFO_NOT_FULL_INT_BUSY_Pos 31                                        /*!< INT_REG INT3_STS: STS3_TX_FIFO_NOT_FULL_INT_BUSY Position */
#define INT_REG_INT3_STS_STS3_TX_FIFO_NOT_FULL_INT_BUSY_Msk (0x01UL << INT_REG_INT3_STS_STS3_TX_FIFO_NOT_FULL_INT_BUSY_Pos)/*!< INT_REG INT3_STS: STS3_TX_FIFO_NOT_FULL_INT_BUSY Mask */

/* ------------------------------  INT_REG_INT_CNT0  ------------------------------ */
#define INT_REG_INT_CNT0_REG_SRAM_ADDR_OVERFLOW_Pos 0                                                 /*!< INT_REG INT_CNT0: REG_SRAM_ADDR_OVERFLOW Position */
#define INT_REG_INT_CNT0_REG_SRAM_ADDR_OVERFLOW_Msk (0x0fUL << INT_REG_INT_CNT0_REG_SRAM_ADDR_OVERFLOW_Pos)/*!< INT_REG INT_CNT0: REG_SRAM_ADDR_OVERFLOW Mask */
#define INT_REG_INT_CNT0_REG_LL_INT0_Pos      4                                                       /*!< INT_REG INT_CNT0: REG_LL_INT0 Position  */
#define INT_REG_INT_CNT0_REG_LL_INT0_Msk      (0x0fUL << INT_REG_INT_CNT0_REG_LL_INT0_Pos)            /*!< INT_REG INT_CNT0: REG_LL_INT0 Mask      */
#define INT_REG_INT_CNT0_REG_LL_INT1_Pos      8                                                       /*!< INT_REG INT_CNT0: REG_LL_INT1 Position  */
#define INT_REG_INT_CNT0_REG_LL_INT1_Msk      (0x0fUL << INT_REG_INT_CNT0_REG_LL_INT1_Pos)            /*!< INT_REG INT_CNT0: REG_LL_INT1 Mask      */
#define INT_REG_INT_CNT0_REG_LL_INT2_Pos      12                                                      /*!< INT_REG INT_CNT0: REG_LL_INT2 Position  */
#define INT_REG_INT_CNT0_REG_LL_INT2_Msk      (0x0fUL << INT_REG_INT_CNT0_REG_LL_INT2_Pos)            /*!< INT_REG INT_CNT0: REG_LL_INT2 Mask      */
#define INT_REG_INT_CNT0_REG_LL_INT3_Pos      16                                                      /*!< INT_REG INT_CNT0: REG_LL_INT3 Position  */
#define INT_REG_INT_CNT0_REG_LL_INT3_Msk      (0x0fUL << INT_REG_INT_CNT0_REG_LL_INT3_Pos)            /*!< INT_REG INT_CNT0: REG_LL_INT3 Mask      */
#define INT_REG_INT_CNT0_REG_LL_INT4_Pos      20                                                      /*!< INT_REG INT_CNT0: REG_LL_INT4 Position  */
#define INT_REG_INT_CNT0_REG_LL_INT4_Msk      (0x0fUL << INT_REG_INT_CNT0_REG_LL_INT4_Pos)            /*!< INT_REG INT_CNT0: REG_LL_INT4 Mask      */
#define INT_REG_INT_CNT0_REG_I2C_SDA_ID_I_Pos 24                                                      /*!< INT_REG INT_CNT0: REG_I2C_SDA_ID_I Position */
#define INT_REG_INT_CNT0_REG_I2C_SDA_ID_I_Msk (0x0fUL << INT_REG_INT_CNT0_REG_I2C_SDA_ID_I_Pos)       /*!< INT_REG INT_CNT0: REG_I2C_SDA_ID_I Mask */
#define INT_REG_INT_CNT0_REG_I2C_SCL_ID_I_Pos 28                                                      /*!< INT_REG INT_CNT0: REG_I2C_SCL_ID_I Position */
#define INT_REG_INT_CNT0_REG_I2C_SCL_ID_I_Msk (0x0fUL << INT_REG_INT_CNT0_REG_I2C_SCL_ID_I_Pos)       /*!< INT_REG INT_CNT0: REG_I2C_SCL_ID_I Mask */

/* ------------------------------  INT_REG_INT_CNT1  ------------------------------ */
#define INT_REG_INT_CNT1_REG_UART1_ID_I_Pos   0                                                       /*!< INT_REG INT_CNT1: REG_UART1_ID_I Position */
#define INT_REG_INT_CNT1_REG_UART1_ID_I_Msk   (0x0fUL << INT_REG_INT_CNT1_REG_UART1_ID_I_Pos)         /*!< INT_REG INT_CNT1: REG_UART1_ID_I Mask   */
#define INT_REG_INT_CNT1_REG_UART0_ID_I_Pos   4                                                       /*!< INT_REG INT_CNT1: REG_UART0_ID_I Position */
#define INT_REG_INT_CNT1_REG_UART0_ID_I_Msk   (0x0fUL << INT_REG_INT_CNT1_REG_UART0_ID_I_Pos)         /*!< INT_REG INT_CNT1: REG_UART0_ID_I Mask   */

/* ----------------------------  INT_REG_INTN_IN_SEL0  ---------------------------- */
#define INT_REG_INTN_IN_SEL0_I2C_SDA_ID_I_IN_SEL_Pos 0                                                /*!< INT_REG INTN_IN_SEL0: I2C_SDA_ID_I_IN_SEL Position */
#define INT_REG_INTN_IN_SEL0_I2C_SDA_ID_I_IN_SEL_Msk (0x07UL << INT_REG_INTN_IN_SEL0_I2C_SDA_ID_I_IN_SEL_Pos)/*!< INT_REG INTN_IN_SEL0: I2C_SDA_ID_I_IN_SEL Mask */
#define INT_REG_INTN_IN_SEL0_I2C_SCL_ID_I_IN_SEL_Pos 3                                                /*!< INT_REG INTN_IN_SEL0: I2C_SCL_ID_I_IN_SEL Position */
#define INT_REG_INTN_IN_SEL0_I2C_SCL_ID_I_IN_SEL_Msk (0x07UL << INT_REG_INTN_IN_SEL0_I2C_SCL_ID_I_IN_SEL_Pos)/*!< INT_REG INTN_IN_SEL0: I2C_SCL_ID_I_IN_SEL Mask */
#define INT_REG_INTN_IN_SEL0_UART1_ID_I_IN_SEL_Pos 6                                                  /*!< INT_REG INTN_IN_SEL0: UART1_ID_I_IN_SEL Position */
#define INT_REG_INTN_IN_SEL0_UART1_ID_I_IN_SEL_Msk (0x07UL << INT_REG_INTN_IN_SEL0_UART1_ID_I_IN_SEL_Pos)/*!< INT_REG INTN_IN_SEL0: UART1_ID_I_IN_SEL Mask */
#define INT_REG_INTN_IN_SEL0_UART0_ID_I_IN_SEL_Pos 9                                                  /*!< INT_REG INTN_IN_SEL0: UART0_ID_I_IN_SEL Position */
#define INT_REG_INTN_IN_SEL0_UART0_ID_I_IN_SEL_Msk (0x07UL << INT_REG_INTN_IN_SEL0_UART0_ID_I_IN_SEL_Pos)/*!< INT_REG INTN_IN_SEL0: UART0_ID_I_IN_SEL Mask */
#define INT_REG_INTN_IN_SEL0_SRAM_ADDR_OVERFLOW_IN_SEL_Pos 12                                         /*!< INT_REG INTN_IN_SEL0: SRAM_ADDR_OVERFLOW_IN_SEL Position */
#define INT_REG_INTN_IN_SEL0_SRAM_ADDR_OVERFLOW_IN_SEL_Msk (0x07UL << INT_REG_INTN_IN_SEL0_SRAM_ADDR_OVERFLOW_IN_SEL_Pos)/*!< INT_REG INTN_IN_SEL0: SRAM_ADDR_OVERFLOW_IN_SEL Mask */
#define INT_REG_INTN_IN_SEL0_LL_INT0_IN_SEL_Pos 15                                                    /*!< INT_REG INTN_IN_SEL0: LL_INT0_IN_SEL Position */
#define INT_REG_INTN_IN_SEL0_LL_INT0_IN_SEL_Msk (0x07UL << INT_REG_INTN_IN_SEL0_LL_INT0_IN_SEL_Pos)   /*!< INT_REG INTN_IN_SEL0: LL_INT0_IN_SEL Mask */
#define INT_REG_INTN_IN_SEL0_LL_INT1_IN_SEL_Pos 18                                                    /*!< INT_REG INTN_IN_SEL0: LL_INT1_IN_SEL Position */
#define INT_REG_INTN_IN_SEL0_LL_INT1_IN_SEL_Msk (0x07UL << INT_REG_INTN_IN_SEL0_LL_INT1_IN_SEL_Pos)   /*!< INT_REG INTN_IN_SEL0: LL_INT1_IN_SEL Mask */
#define INT_REG_INTN_IN_SEL0_LL_INT2_IN_SEL_Pos 21                                                    /*!< INT_REG INTN_IN_SEL0: LL_INT2_IN_SEL Position */
#define INT_REG_INTN_IN_SEL0_LL_INT2_IN_SEL_Msk (0x07UL << INT_REG_INTN_IN_SEL0_LL_INT2_IN_SEL_Pos)   /*!< INT_REG INTN_IN_SEL0: LL_INT2_IN_SEL Mask */
#define INT_REG_INTN_IN_SEL0_LL_INT3_IN_SEL_Pos 24                                                    /*!< INT_REG INTN_IN_SEL0: LL_INT3_IN_SEL Position */
#define INT_REG_INTN_IN_SEL0_LL_INT3_IN_SEL_Msk (0x07UL << INT_REG_INTN_IN_SEL0_LL_INT3_IN_SEL_Pos)   /*!< INT_REG INTN_IN_SEL0: LL_INT3_IN_SEL Mask */
#define INT_REG_INTN_IN_SEL0_LL_INT4_IN_SEL_Pos 27                                                    /*!< INT_REG INTN_IN_SEL0: LL_INT4_IN_SEL Position */
#define INT_REG_INTN_IN_SEL0_LL_INT4_IN_SEL_Msk (0x07UL << INT_REG_INTN_IN_SEL0_LL_INT4_IN_SEL_Pos)   /*!< INT_REG INTN_IN_SEL0: LL_INT4_IN_SEL Mask */

/* ------------------------------  INT_REG_IPC_IPC2  ------------------------------ */
#define INT_REG_IPC_IPC2_IPC2_Pos             0                                                       /*!< INT_REG IPC_IPC2: IPC2 Position         */
#define INT_REG_IPC_IPC2_IPC2_Msk             (0xffffffffUL << INT_REG_IPC_IPC2_IPC2_Pos)             /*!< INT_REG IPC_IPC2: IPC2 Mask             */

/* ------------------------------  INT_REG_IPC_IPC1  ------------------------------ */
#define INT_REG_IPC_IPC1_IPC1_Pos             0                                                       /*!< INT_REG IPC_IPC1: IPC1 Position         */
#define INT_REG_IPC_IPC1_IPC1_Msk             (0xffffffffUL << INT_REG_IPC_IPC1_IPC1_Pos)             /*!< INT_REG IPC_IPC1: IPC1 Mask             */

/* ---------------------------  INT_REG_MCU_INT_OR_MASK  -------------------------- */
#define INT_REG_MCU_INT_OR_MASK_MCU_INT_OR_MASK_Pos 0                                                 /*!< INT_REG MCU_INT_OR_MASK: MCU_INT_OR_MASK Position */
#define INT_REG_MCU_INT_OR_MASK_MCU_INT_OR_MASK_Msk (0xffffffffUL << INT_REG_MCU_INT_OR_MASK_MCU_INT_OR_MASK_Pos)/*!< INT_REG MCU_INT_OR_MASK: MCU_INT_OR_MASK Mask */


/* ================================================================================ */
/* ================        struct 'CSR_DMA' Position & Mask        ================ */
/* ================================================================================ */


/* -----------------------------  CSR_DMA_DMA_ADR_SRC  ---------------------------- */
#define CSR_DMA_DMA_ADR_SRC_DMA_ADR_SRC_Pos   0                                                       /*!< CSR_DMA DMA_ADR_SRC: DMA_ADR_SRC Position */
#define CSR_DMA_DMA_ADR_SRC_DMA_ADR_SRC_Msk   (0xffffffffUL << CSR_DMA_DMA_ADR_SRC_DMA_ADR_SRC_Pos)   /*!< CSR_DMA DMA_ADR_SRC: DMA_ADR_SRC Mask   */

/* -----------------------------  CSR_DMA_DMA_ADR_DST  ---------------------------- */
#define CSR_DMA_DMA_ADR_DST_DMA_ADR_DST_Pos   0                                                       /*!< CSR_DMA DMA_ADR_DST: DMA_ADR_DST Position */
#define CSR_DMA_DMA_ADR_DST_DMA_ADR_DST_Msk   (0xffffffffUL << CSR_DMA_DMA_ADR_DST_DMA_ADR_DST_Pos)   /*!< CSR_DMA DMA_ADR_DST: DMA_ADR_DST Mask   */

/* ------------------------------  CSR_DMA_DMA_CTRL  ------------------------------ */
#define CSR_DMA_DMA_CTRL_DMA_SRC_SIZE_Pos     0                                                       /*!< CSR_DMA DMA_CTRL: DMA_SRC_SIZE Position */
#define CSR_DMA_DMA_CTRL_DMA_SRC_SIZE_Msk     (0x07UL << CSR_DMA_DMA_CTRL_DMA_SRC_SIZE_Pos)           /*!< CSR_DMA DMA_CTRL: DMA_SRC_SIZE Mask     */
#define CSR_DMA_DMA_CTRL_DMA_SRC_INC_Pos      3                                                       /*!< CSR_DMA DMA_CTRL: DMA_SRC_INC Position  */
#define CSR_DMA_DMA_CTRL_DMA_SRC_INC_Msk      (0x01UL << CSR_DMA_DMA_CTRL_DMA_SRC_INC_Pos)            /*!< CSR_DMA DMA_CTRL: DMA_SRC_INC Mask      */
#define CSR_DMA_DMA_CTRL_DMA_DST_SIZE_Pos     4                                                       /*!< CSR_DMA DMA_CTRL: DMA_DST_SIZE Position */
#define CSR_DMA_DMA_CTRL_DMA_DST_SIZE_Msk     (0x07UL << CSR_DMA_DMA_CTRL_DMA_DST_SIZE_Pos)           /*!< CSR_DMA DMA_CTRL: DMA_DST_SIZE Mask     */
#define CSR_DMA_DMA_CTRL_DMA_DST_INC_Pos      7                                                       /*!< CSR_DMA DMA_CTRL: DMA_DST_INC Position  */
#define CSR_DMA_DMA_CTRL_DMA_DST_INC_Msk      (0x01UL << CSR_DMA_DMA_CTRL_DMA_DST_INC_Pos)            /*!< CSR_DMA DMA_CTRL: DMA_DST_INC Mask      */
#define CSR_DMA_DMA_CTRL_DMA_FAST_FILL_Pos    8                                                       /*!< CSR_DMA DMA_CTRL: DMA_FAST_FILL Position */
#define CSR_DMA_DMA_CTRL_DMA_FAST_FILL_Msk    (0x01UL << CSR_DMA_DMA_CTRL_DMA_FAST_FILL_Pos)          /*!< CSR_DMA DMA_CTRL: DMA_FAST_FILL Mask    */
#define CSR_DMA_DMA_CTRL_DMA_SDIO_KICK_Pos    12                                                      /*!< CSR_DMA DMA_CTRL: DMA_SDIO_KICK Position */
#define CSR_DMA_DMA_CTRL_DMA_SDIO_KICK_Msk    (0x01UL << CSR_DMA_DMA_CTRL_DMA_SDIO_KICK_Pos)          /*!< CSR_DMA DMA_CTRL: DMA_SDIO_KICK Mask    */
#define CSR_DMA_DMA_CTRL_DMA_BADR_EN_Pos      13                                                      /*!< CSR_DMA DMA_CTRL: DMA_BADR_EN Position  */
#define CSR_DMA_DMA_CTRL_DMA_BADR_EN_Msk      (0x01UL << CSR_DMA_DMA_CTRL_DMA_BADR_EN_Pos)            /*!< CSR_DMA DMA_CTRL: DMA_BADR_EN Mask      */
#define CSR_DMA_DMA_CTRL_DMA_READ_ONLY_Pos    24                                                      /*!< CSR_DMA DMA_CTRL: DMA_READ_ONLY Position */
#define CSR_DMA_DMA_CTRL_DMA_READ_ONLY_Msk    (0x01UL << CSR_DMA_DMA_CTRL_DMA_READ_ONLY_Pos)          /*!< CSR_DMA DMA_CTRL: DMA_READ_ONLY Mask    */

/* -------------------------------  CSR_DMA_DMA_LEN  ------------------------------ */
#define CSR_DMA_DMA_LEN_DMA_LEN_Pos           0                                                       /*!< CSR_DMA DMA_LEN: DMA_LEN Position       */
#define CSR_DMA_DMA_LEN_DMA_LEN_Msk           (0x0000ffffUL << CSR_DMA_DMA_LEN_DMA_LEN_Pos)           /*!< CSR_DMA DMA_LEN: DMA_LEN Mask           */

/* -------------------------------  CSR_DMA_DMA_INT  ------------------------------ */
#define CSR_DMA_DMA_INT_DMA_INT_MASK_Pos      0                                                       /*!< CSR_DMA DMA_INT: DMA_INT_MASK Position  */
#define CSR_DMA_DMA_INT_DMA_INT_MASK_Msk      (0x01UL << CSR_DMA_DMA_INT_DMA_INT_MASK_Pos)            /*!< CSR_DMA DMA_INT: DMA_INT_MASK Mask      */
#define CSR_DMA_DMA_INT_DMA_STS_Pos           8                                                       /*!< CSR_DMA DMA_INT: DMA_STS Position       */
#define CSR_DMA_DMA_INT_DMA_STS_Msk           (0x01UL << CSR_DMA_DMA_INT_DMA_STS_Pos)                 /*!< CSR_DMA DMA_INT: DMA_STS Mask           */
#define CSR_DMA_DMA_INT_DMA_FINISH_Pos        31                                                      /*!< CSR_DMA DMA_INT: DMA_FINISH Position    */
#define CSR_DMA_DMA_INT_DMA_FINISH_Msk        (0x01UL << CSR_DMA_DMA_INT_DMA_FINISH_Pos)              /*!< CSR_DMA DMA_INT: DMA_FINISH Mask        */

/* ---------------------------  CSR_DMA_DMA_FILL_CONST  --------------------------- */
#define CSR_DMA_DMA_FILL_CONST_DMA_CONST_Pos  0                                                       /*!< CSR_DMA DMA_FILL_CONST: DMA_CONST Position */
#define CSR_DMA_DMA_FILL_CONST_DMA_CONST_Msk  (0xffffffffUL << CSR_DMA_DMA_FILL_CONST_DMA_CONST_Pos)  /*!< CSR_DMA DMA_FILL_CONST: DMA_CONST Mask  */

/* ----------------------------  CSR_DMA_DMA_CHECK_SUM  --------------------------- */
#define CSR_DMA_DMA_CHECK_SUM_DMA_CHECK_SUM_Pos 0                                                     /*!< CSR_DMA DMA_CHECK_SUM: DMA_CHECK_SUM Position */
#define CSR_DMA_DMA_CHECK_SUM_DMA_CHECK_SUM_Msk (0xffffffffUL << CSR_DMA_DMA_CHECK_SUM_DMA_CHECK_SUM_Pos)/*!< CSR_DMA DMA_CHECK_SUM: DMA_CHECK_SUM Mask */

/* ------------------------------  CSR_DMA_DMA_ORDER  ----------------------------- */
#define CSR_DMA_DMA_ORDER_DAT_REVERSE_Pos     0                                                       /*!< CSR_DMA DMA_ORDER: DAT_REVERSE Position */
#define CSR_DMA_DMA_ORDER_DAT_REVERSE_Msk     (0x01UL << CSR_DMA_DMA_ORDER_DAT_REVERSE_Pos)           /*!< CSR_DMA DMA_ORDER: DAT_REVERSE Mask     */
#define CSR_DMA_DMA_ORDER_DAT_NIBBLE_Pos      1                                                       /*!< CSR_DMA DMA_ORDER: DAT_NIBBLE Position  */
#define CSR_DMA_DMA_ORDER_DAT_NIBBLE_Msk      (0x01UL << CSR_DMA_DMA_ORDER_DAT_NIBBLE_Pos)            /*!< CSR_DMA DMA_ORDER: DAT_NIBBLE Mask      */
#define CSR_DMA_DMA_ORDER_AES_16_MODE_Pos     4                                                       /*!< CSR_DMA DMA_ORDER: AES_16_MODE Position */
#define CSR_DMA_DMA_ORDER_AES_16_MODE_Msk     (0x01UL << CSR_DMA_DMA_ORDER_AES_16_MODE_Pos)           /*!< CSR_DMA DMA_ORDER: AES_16_MODE Mask     */


/* ================================================================================ */
/* ================     struct 'FLASH_SPI_REG' Position & Mask     ================ */
/* ================================================================================ */


/* ---------------------------  FLASH_SPI_REG_BOOT_ADDR  -------------------------- */
#define FLASH_SPI_REG_BOOT_ADDR_BOOT_ADDR_Pos 0                                                       /*!< FLASH_SPI_REG BOOT_ADDR: BOOT_ADDR Position */
#define FLASH_SPI_REG_BOOT_ADDR_BOOT_ADDR_Msk (0x00ffffffUL << FLASH_SPI_REG_BOOT_ADDR_BOOT_ADDR_Pos) /*!< FLASH_SPI_REG BOOT_ADDR: BOOT_ADDR Mask */
#define FLASH_SPI_REG_BOOT_ADDR_CHECK_SUM_FAIL_Pos 31                                                 /*!< FLASH_SPI_REG BOOT_ADDR: CHECK_SUM_FAIL Position */
#define FLASH_SPI_REG_BOOT_ADDR_CHECK_SUM_FAIL_Msk (0x01UL << FLASH_SPI_REG_BOOT_ADDR_CHECK_SUM_FAIL_Pos)/*!< FLASH_SPI_REG BOOT_ADDR: CHECK_SUM_FAIL Mask */

/* --------------------------  FLASH_SPI_REG_VERIFY_DATA  ------------------------- */
#define FLASH_SPI_REG_VERIFY_DATA_VERIFY_DATA_Pos 0                                                   /*!< FLASH_SPI_REG VERIFY_DATA: VERIFY_DATA Position */
#define FLASH_SPI_REG_VERIFY_DATA_VERIFY_DATA_Msk (0xffffffffUL << FLASH_SPI_REG_VERIFY_DATA_VERIFY_DATA_Pos)/*!< FLASH_SPI_REG VERIFY_DATA: VERIFY_DATA Mask */

/* --------------------------  FLASH_SPI_REG_FLASH_ADDR  -------------------------- */
#define FLASH_SPI_REG_FLASH_ADDR_FLASH_ADDR_Pos 0                                                     /*!< FLASH_SPI_REG FLASH_ADDR: FLASH_ADDR Position */
#define FLASH_SPI_REG_FLASH_ADDR_FLASH_ADDR_Msk (0x00ffffffUL << FLASH_SPI_REG_FLASH_ADDR_FLASH_ADDR_Pos)/*!< FLASH_SPI_REG FLASH_ADDR: FLASH_ADDR Mask */
#define FLASH_SPI_REG_FLASH_ADDR_FLASH_CMD_CLR_Pos 28                                                 /*!< FLASH_SPI_REG FLASH_ADDR: FLASH_CMD_CLR Position */
#define FLASH_SPI_REG_FLASH_ADDR_FLASH_CMD_CLR_Msk (0x01UL << FLASH_SPI_REG_FLASH_ADDR_FLASH_CMD_CLR_Pos)/*!< FLASH_SPI_REG FLASH_ADDR: FLASH_CMD_CLR Mask */
#define FLASH_SPI_REG_FLASH_ADDR_FLASH_DMA_CLR_Pos 29                                                 /*!< FLASH_SPI_REG FLASH_ADDR: FLASH_DMA_CLR Position */
#define FLASH_SPI_REG_FLASH_ADDR_FLASH_DMA_CLR_Msk (0x01UL << FLASH_SPI_REG_FLASH_ADDR_FLASH_DMA_CLR_Pos)/*!< FLASH_SPI_REG FLASH_ADDR: FLASH_DMA_CLR Mask */
#define FLASH_SPI_REG_FLASH_ADDR_DMA_EN_Pos   30                                                      /*!< FLASH_SPI_REG FLASH_ADDR: DMA_EN Position */
#define FLASH_SPI_REG_FLASH_ADDR_DMA_EN_Msk   (0x01UL << FLASH_SPI_REG_FLASH_ADDR_DMA_EN_Pos)         /*!< FLASH_SPI_REG FLASH_ADDR: DMA_EN Mask   */
#define FLASH_SPI_REG_FLASH_ADDR_DMA_BUSY_Pos 31                                                      /*!< FLASH_SPI_REG FLASH_ADDR: DMA_BUSY Position */
#define FLASH_SPI_REG_FLASH_ADDR_DMA_BUSY_Msk (0x01UL << FLASH_SPI_REG_FLASH_ADDR_DMA_BUSY_Pos)       /*!< FLASH_SPI_REG FLASH_ADDR: DMA_BUSY Mask */

/* ---------------------------  FLASH_SPI_REG_SRAM_ADDR  -------------------------- */
#define FLASH_SPI_REG_SRAM_ADDR_SRAM_ADDR_Pos 0                                                       /*!< FLASH_SPI_REG SRAM_ADDR: SRAM_ADDR Position */
#define FLASH_SPI_REG_SRAM_ADDR_SRAM_ADDR_Msk (0xffffffffUL << FLASH_SPI_REG_SRAM_ADDR_SRAM_ADDR_Pos) /*!< FLASH_SPI_REG SRAM_ADDR: SRAM_ADDR Mask */

/* ------------------------------  FLASH_SPI_REG_LEN  ----------------------------- */
#define FLASH_SPI_REG_LEN_FLASH_DMA_LEN_Pos   0                                                       /*!< FLASH_SPI_REG LEN: FLASH_DMA_LEN Position */
#define FLASH_SPI_REG_LEN_FLASH_DMA_LEN_Msk   (0xffffffffUL << FLASH_SPI_REG_LEN_FLASH_DMA_LEN_Pos)   /*!< FLASH_SPI_REG LEN: FLASH_DMA_LEN Mask   */

/* ---------------------------  FLASH_SPI_REG_SPI_PARAM  -------------------------- */
#define FLASH_SPI_REG_SPI_PARAM_FLASH_FRONT_DLY_Pos 0                                                 /*!< FLASH_SPI_REG SPI_PARAM: FLASH_FRONT_DLY Position */
#define FLASH_SPI_REG_SPI_PARAM_FLASH_FRONT_DLY_Msk (0x0000ffffUL << FLASH_SPI_REG_SPI_PARAM_FLASH_FRONT_DLY_Pos)/*!< FLASH_SPI_REG SPI_PARAM: FLASH_FRONT_DLY Mask */
#define FLASH_SPI_REG_SPI_PARAM_FLASH_BACK_DLY_Pos 16                                                 /*!< FLASH_SPI_REG SPI_PARAM: FLASH_BACK_DLY Position */
#define FLASH_SPI_REG_SPI_PARAM_FLASH_BACK_DLY_Msk (0x0000ffffUL << FLASH_SPI_REG_SPI_PARAM_FLASH_BACK_DLY_Pos)/*!< FLASH_SPI_REG SPI_PARAM: FLASH_BACK_DLY Mask */

/* --------------------------  FLASH_SPI_REG_SPI_PARAM2  -------------------------- */
#define FLASH_SPI_REG_SPI_PARAM2_FLASH_CLK_WIDTH_Pos 0                                                /*!< FLASH_SPI_REG SPI_PARAM2: FLASH_CLK_WIDTH Position */
#define FLASH_SPI_REG_SPI_PARAM2_FLASH_CLK_WIDTH_Msk (0x03UL << FLASH_SPI_REG_SPI_PARAM2_FLASH_CLK_WIDTH_Pos)/*!< FLASH_SPI_REG SPI_PARAM2: FLASH_CLK_WIDTH Mask */
#define FLASH_SPI_REG_SPI_PARAM2_SPI_BUSY_Pos 16                                                      /*!< FLASH_SPI_REG SPI_PARAM2: SPI_BUSY Position */
#define FLASH_SPI_REG_SPI_PARAM2_SPI_BUSY_Msk (0x01UL << FLASH_SPI_REG_SPI_PARAM2_SPI_BUSY_Pos)       /*!< FLASH_SPI_REG SPI_PARAM2: SPI_BUSY Mask */
#define FLASH_SPI_REG_SPI_PARAM2_FLS_REMAP_Pos 17                                                     /*!< FLASH_SPI_REG SPI_PARAM2: FLS_REMAP Position */
#define FLASH_SPI_REG_SPI_PARAM2_FLS_REMAP_Msk (0x01UL << FLASH_SPI_REG_SPI_PARAM2_FLS_REMAP_Pos)     /*!< FLASH_SPI_REG SPI_PARAM2: FLS_REMAP Mask */
#define FLASH_SPI_REG_SPI_PARAM2_PBUS_SWP_Pos 18                                                      /*!< FLASH_SPI_REG SPI_PARAM2: PBUS_SWP Position */
#define FLASH_SPI_REG_SPI_PARAM2_PBUS_SWP_Msk (0x01UL << FLASH_SPI_REG_SPI_PARAM2_PBUS_SWP_Pos)       /*!< FLASH_SPI_REG SPI_PARAM2: PBUS_SWP Mask */
#define FLASH_SPI_REG_SPI_PARAM2_BIT_MODE1_Pos 19                                                     /*!< FLASH_SPI_REG SPI_PARAM2: BIT_MODE1 Position */
#define FLASH_SPI_REG_SPI_PARAM2_BIT_MODE1_Msk (0x01UL << FLASH_SPI_REG_SPI_PARAM2_BIT_MODE1_Pos)     /*!< FLASH_SPI_REG SPI_PARAM2: BIT_MODE1 Mask */
#define FLASH_SPI_REG_SPI_PARAM2_BIT_MODE2_Pos 20                                                     /*!< FLASH_SPI_REG SPI_PARAM2: BIT_MODE2 Position */
#define FLASH_SPI_REG_SPI_PARAM2_BIT_MODE2_Msk (0x01UL << FLASH_SPI_REG_SPI_PARAM2_BIT_MODE2_Pos)     /*!< FLASH_SPI_REG SPI_PARAM2: BIT_MODE2 Mask */
#define FLASH_SPI_REG_SPI_PARAM2_BIT_MODE4_Pos 21                                                     /*!< FLASH_SPI_REG SPI_PARAM2: BIT_MODE4 Position */
#define FLASH_SPI_REG_SPI_PARAM2_BIT_MODE4_Msk (0x01UL << FLASH_SPI_REG_SPI_PARAM2_BIT_MODE4_Pos)     /*!< FLASH_SPI_REG SPI_PARAM2: BIT_MODE4 Mask */
#define FLASH_SPI_REG_SPI_PARAM2_FAST_CLK_EN_Pos 22                                                   /*!< FLASH_SPI_REG SPI_PARAM2: FAST_CLK_EN Position */
#define FLASH_SPI_REG_SPI_PARAM2_FAST_CLK_EN_Msk (0x01UL << FLASH_SPI_REG_SPI_PARAM2_FAST_CLK_EN_Pos) /*!< FLASH_SPI_REG SPI_PARAM2: FAST_CLK_EN Mask */
#define FLASH_SPI_REG_SPI_PARAM2_FLS_SRAM_EN_Pos 23                                                   /*!< FLASH_SPI_REG SPI_PARAM2: FLS_SRAM_EN Position */
#define FLASH_SPI_REG_SPI_PARAM2_FLS_SRAM_EN_Msk (0x01UL << FLASH_SPI_REG_SPI_PARAM2_FLS_SRAM_EN_Pos) /*!< FLASH_SPI_REG SPI_PARAM2: FLS_SRAM_EN Mask */
#define FLASH_SPI_REG_SPI_PARAM2_PRG_ONLY_Pos 24                                                      /*!< FLASH_SPI_REG SPI_PARAM2: PRG_ONLY Position */
#define FLASH_SPI_REG_SPI_PARAM2_PRG_ONLY_Msk (0x01UL << FLASH_SPI_REG_SPI_PARAM2_PRG_ONLY_Pos)       /*!< FLASH_SPI_REG SPI_PARAM2: PRG_ONLY Mask */
#define FLASH_SPI_REG_SPI_PARAM2_BIT_MODE2_DUALOUT_Pos 25                                             /*!< FLASH_SPI_REG SPI_PARAM2: BIT_MODE2_DUALOUT Position */
#define FLASH_SPI_REG_SPI_PARAM2_BIT_MODE2_DUALOUT_Msk (0x01UL << FLASH_SPI_REG_SPI_PARAM2_BIT_MODE2_DUALOUT_Pos)/*!< FLASH_SPI_REG SPI_PARAM2: BIT_MODE2_DUALOUT Mask */
#define FLASH_SPI_REG_SPI_PARAM2_INV_DLY_SCLK_Pos 31                                                  /*!< FLASH_SPI_REG SPI_PARAM2: INV_DLY_SCLK Position */
#define FLASH_SPI_REG_SPI_PARAM2_INV_DLY_SCLK_Msk (0x01UL << FLASH_SPI_REG_SPI_PARAM2_INV_DLY_SCLK_Pos)/*!< FLASH_SPI_REG SPI_PARAM2: INV_DLY_SCLK Mask */

/* -----------------------  FLASH_SPI_REG_CHECK_SUM_RESULT  ----------------------- */
#define FLASH_SPI_REG_CHECK_SUM_RESULT_BOOT_CHECK_SUM_Pos 0                                           /*!< FLASH_SPI_REG CHECK_SUM_RESULT: BOOT_CHECK_SUM Position */
#define FLASH_SPI_REG_CHECK_SUM_RESULT_BOOT_CHECK_SUM_Msk (0xffffffffUL << FLASH_SPI_REG_CHECK_SUM_RESULT_BOOT_CHECK_SUM_Pos)/*!< FLASH_SPI_REG CHECK_SUM_RESULT: BOOT_CHECK_SUM Mask */

/* -----------------------  FLASH_SPI_REG_CHECK_SUM_IN_FILE  ---------------------- */
#define FLASH_SPI_REG_CHECK_SUM_IN_FILE_CHECK_SUM_TAG_Pos 0                                           /*!< FLASH_SPI_REG CHECK_SUM_IN_FILE: CHECK_SUM_TAG Position */
#define FLASH_SPI_REG_CHECK_SUM_IN_FILE_CHECK_SUM_TAG_Msk (0xffffffffUL << FLASH_SPI_REG_CHECK_SUM_IN_FILE_CHECK_SUM_TAG_Pos)/*!< FLASH_SPI_REG CHECK_SUM_IN_FILE: CHECK_SUM_TAG Mask */

/* --------------------------  FLASH_SPI_REG_COMMAND_LEN  ------------------------- */
#define FLASH_SPI_REG_COMMAND_LEN_CMD_LEN_Pos 0                                                       /*!< FLASH_SPI_REG COMMAND_LEN: CMD_LEN Position */
#define FLASH_SPI_REG_COMMAND_LEN_CMD_LEN_Msk (0x0000ffffUL << FLASH_SPI_REG_COMMAND_LEN_CMD_LEN_Pos) /*!< FLASH_SPI_REG COMMAND_LEN: CMD_LEN Mask */

/* -------------------------  FLASH_SPI_REG_COMMAND_ADDR  ------------------------- */
#define FLASH_SPI_REG_COMMAND_ADDR_CMD_ADDR_Pos 0                                                     /*!< FLASH_SPI_REG COMMAND_ADDR: CMD_ADDR Position */
#define FLASH_SPI_REG_COMMAND_ADDR_CMD_ADDR_Msk (0xffffffffUL << FLASH_SPI_REG_COMMAND_ADDR_CMD_ADDR_Pos)/*!< FLASH_SPI_REG COMMAND_ADDR: CMD_ADDR Mask */

/* ----------------------------  FLASH_SPI_REG_CMD_SET  --------------------------- */
#define FLASH_SPI_REG_CMD_SET_BIT1_RD_CMD_Pos 0                                                       /*!< FLASH_SPI_REG CMD_SET: BIT1_RD_CMD Position */
#define FLASH_SPI_REG_CMD_SET_BIT1_RD_CMD_Msk (0x000000ffUL << FLASH_SPI_REG_CMD_SET_BIT1_RD_CMD_Pos) /*!< FLASH_SPI_REG CMD_SET: BIT1_RD_CMD Mask */
#define FLASH_SPI_REG_CMD_SET_BIT1_WR_CMD_Pos 8                                                       /*!< FLASH_SPI_REG CMD_SET: BIT1_WR_CMD Position */
#define FLASH_SPI_REG_CMD_SET_BIT1_WR_CMD_Msk (0x000000ffUL << FLASH_SPI_REG_CMD_SET_BIT1_WR_CMD_Pos) /*!< FLASH_SPI_REG CMD_SET: BIT1_WR_CMD Mask */
#define FLASH_SPI_REG_CMD_SET_BIT2_RD_CMD_Pos 16                                                      /*!< FLASH_SPI_REG CMD_SET: BIT2_RD_CMD Position */
#define FLASH_SPI_REG_CMD_SET_BIT2_RD_CMD_Msk (0x000000ffUL << FLASH_SPI_REG_CMD_SET_BIT2_RD_CMD_Pos) /*!< FLASH_SPI_REG CMD_SET: BIT2_RD_CMD Mask */
#define FLASH_SPI_REG_CMD_SET_BIT4_RD_CMD_Pos 24                                                      /*!< FLASH_SPI_REG CMD_SET: BIT4_RD_CMD Position */
#define FLASH_SPI_REG_CMD_SET_BIT4_RD_CMD_Msk (0x000000ffUL << FLASH_SPI_REG_CMD_SET_BIT4_RD_CMD_Pos) /*!< FLASH_SPI_REG CMD_SET: BIT4_RD_CMD Mask */

/* -----------------------  FLASH_SPI_REG_DECRYPT_INI_ADDR  ----------------------- */
#define FLASH_SPI_REG_DECRYPT_INI_ADDR_SCM_INI_ADDR_Pos 0                                             /*!< FLASH_SPI_REG DECRYPT_INI_ADDR: SCM_INI_ADDR Position */
#define FLASH_SPI_REG_DECRYPT_INI_ADDR_SCM_INI_ADDR_Msk (0x00ffffffUL << FLASH_SPI_REG_DECRYPT_INI_ADDR_SCM_INI_ADDR_Pos)/*!< FLASH_SPI_REG DECRYPT_INI_ADDR: SCM_INI_ADDR Mask */

/* -----------------------  FLASH_SPI_REG_DECRYPT_END_ADDR  ----------------------- */
#define FLASH_SPI_REG_DECRYPT_END_ADDR_SCM_END_ADDR_Pos 0                                             /*!< FLASH_SPI_REG DECRYPT_END_ADDR: SCM_END_ADDR Position */
#define FLASH_SPI_REG_DECRYPT_END_ADDR_SCM_END_ADDR_Msk (0x00ffffffUL << FLASH_SPI_REG_DECRYPT_END_ADDR_SCM_END_ADDR_Pos)/*!< FLASH_SPI_REG DECRYPT_END_ADDR: SCM_END_ADDR Mask */

/* -------------------------  FLASH_SPI_REG_DECRYPT_SEED  ------------------------- */
#define FLASH_SPI_REG_DECRYPT_SEED_SCM_SEED_Pos 0                                                     /*!< FLASH_SPI_REG DECRYPT_SEED: SCM_SEED Position */
#define FLASH_SPI_REG_DECRYPT_SEED_SCM_SEED_Msk (0xffffffffUL << FLASH_SPI_REG_DECRYPT_SEED_SCM_SEED_Pos)/*!< FLASH_SPI_REG DECRYPT_SEED: SCM_SEED Mask */

/* --------------------------  FLASH_SPI_REG_RELAY_MODE  -------------------------- */
#define FLASH_SPI_REG_RELAY_MODE_FLASH_RLY_MODE_Pos 0                                                 /*!< FLASH_SPI_REG RELAY_MODE: FLASH_RLY_MODE Position */
#define FLASH_SPI_REG_RELAY_MODE_FLASH_RLY_MODE_Msk (0x01UL << FLASH_SPI_REG_RELAY_MODE_FLASH_RLY_MODE_Pos)/*!< FLASH_SPI_REG RELAY_MODE: FLASH_RLY_MODE Mask */

/* -------------------------  FLASH_SPI_REG_FLASH_OFFSET  ------------------------- */
#define FLASH_SPI_REG_FLASH_OFFSET_FLASH_ADDR_OFSET_Pos 0                                             /*!< FLASH_SPI_REG FLASH_OFFSET: FLASH_ADDR_OFSET Position */
#define FLASH_SPI_REG_FLASH_OFFSET_FLASH_ADDR_OFSET_Msk (0x000001ffUL << FLASH_SPI_REG_FLASH_OFFSET_FLASH_ADDR_OFSET_Pos)/*!< FLASH_SPI_REG FLASH_OFFSET: FLASH_ADDR_OFSET Mask */

/* --------------------------  FLASH_SPI_REG_FLASH_SIZE  -------------------------- */
#define FLASH_SPI_REG_FLASH_SIZE_FLASH_SIZE_Pos 0                                                     /*!< FLASH_SPI_REG FLASH_SIZE: FLASH_SIZE Position */
#define FLASH_SPI_REG_FLASH_SIZE_FLASH_SIZE_Msk (0x00ffffffUL << FLASH_SPI_REG_FLASH_SIZE_FLASH_SIZE_Pos)/*!< FLASH_SPI_REG FLASH_SIZE: FLASH_SIZE Mask */

/* -------------------------  FLASH_SPI_REG_FLASH_IO0_DLY  ------------------------ */
#define FLASH_SPI_REG_FLASH_IO0_DLY_FLS_CLK_IN_DLY_SEL_Pos 0                                          /*!< FLASH_SPI_REG FLASH_IO0_DLY: FLS_CLK_IN_DLY_SEL Position */
#define FLASH_SPI_REG_FLASH_IO0_DLY_FLS_CLK_IN_DLY_SEL_Msk (0x07UL << FLASH_SPI_REG_FLASH_IO0_DLY_FLS_CLK_IN_DLY_SEL_Pos)/*!< FLASH_SPI_REG FLASH_IO0_DLY: FLS_CLK_IN_DLY_SEL Mask */
#define FLASH_SPI_REG_FLASH_IO0_DLY_FLS_CLK_OUT_DLY_SEL_Pos 4                                         /*!< FLASH_SPI_REG FLASH_IO0_DLY: FLS_CLK_OUT_DLY_SEL Position */
#define FLASH_SPI_REG_FLASH_IO0_DLY_FLS_CLK_OUT_DLY_SEL_Msk (0x07UL << FLASH_SPI_REG_FLASH_IO0_DLY_FLS_CLK_OUT_DLY_SEL_Pos)/*!< FLASH_SPI_REG FLASH_IO0_DLY: FLS_CLK_OUT_DLY_SEL Mask */
#define FLASH_SPI_REG_FLASH_IO0_DLY_FLS_MOSI_IN_DLY_SEL_Pos 8                                         /*!< FLASH_SPI_REG FLASH_IO0_DLY: FLS_MOSI_IN_DLY_SEL Position */
#define FLASH_SPI_REG_FLASH_IO0_DLY_FLS_MOSI_IN_DLY_SEL_Msk (0x07UL << FLASH_SPI_REG_FLASH_IO0_DLY_FLS_MOSI_IN_DLY_SEL_Pos)/*!< FLASH_SPI_REG FLASH_IO0_DLY: FLS_MOSI_IN_DLY_SEL Mask */
#define FLASH_SPI_REG_FLASH_IO0_DLY_FLS_MOSI_OUT_DLY_SEL_Pos 12                                       /*!< FLASH_SPI_REG FLASH_IO0_DLY: FLS_MOSI_OUT_DLY_SEL Position */
#define FLASH_SPI_REG_FLASH_IO0_DLY_FLS_MOSI_OUT_DLY_SEL_Msk (0x07UL << FLASH_SPI_REG_FLASH_IO0_DLY_FLS_MOSI_OUT_DLY_SEL_Pos)/*!< FLASH_SPI_REG FLASH_IO0_DLY: FLS_MOSI_OUT_DLY_SEL Mask */
#define FLASH_SPI_REG_FLASH_IO0_DLY_FLS_MISO_IN_DLY_SEL_Pos 16                                        /*!< FLASH_SPI_REG FLASH_IO0_DLY: FLS_MISO_IN_DLY_SEL Position */
#define FLASH_SPI_REG_FLASH_IO0_DLY_FLS_MISO_IN_DLY_SEL_Msk (0x07UL << FLASH_SPI_REG_FLASH_IO0_DLY_FLS_MISO_IN_DLY_SEL_Pos)/*!< FLASH_SPI_REG FLASH_IO0_DLY: FLS_MISO_IN_DLY_SEL Mask */
#define FLASH_SPI_REG_FLASH_IO0_DLY_FLS_MISO_OUT_DLY_SEL_Pos 20                                       /*!< FLASH_SPI_REG FLASH_IO0_DLY: FLS_MISO_OUT_DLY_SEL Position */
#define FLASH_SPI_REG_FLASH_IO0_DLY_FLS_MISO_OUT_DLY_SEL_Msk (0x07UL << FLASH_SPI_REG_FLASH_IO0_DLY_FLS_MISO_OUT_DLY_SEL_Pos)/*!< FLASH_SPI_REG FLASH_IO0_DLY: FLS_MISO_OUT_DLY_SEL Mask */
#define FLASH_SPI_REG_FLASH_IO0_DLY_FLS_WP_IN_DLY_SEL_Pos 24                                          /*!< FLASH_SPI_REG FLASH_IO0_DLY: FLS_WP_IN_DLY_SEL Position */
#define FLASH_SPI_REG_FLASH_IO0_DLY_FLS_WP_IN_DLY_SEL_Msk (0x07UL << FLASH_SPI_REG_FLASH_IO0_DLY_FLS_WP_IN_DLY_SEL_Pos)/*!< FLASH_SPI_REG FLASH_IO0_DLY: FLS_WP_IN_DLY_SEL Mask */
#define FLASH_SPI_REG_FLASH_IO0_DLY_FLS_WP_OUT_DLY_SEL_Pos 28                                         /*!< FLASH_SPI_REG FLASH_IO0_DLY: FLS_WP_OUT_DLY_SEL Position */
#define FLASH_SPI_REG_FLASH_IO0_DLY_FLS_WP_OUT_DLY_SEL_Msk (0x07UL << FLASH_SPI_REG_FLASH_IO0_DLY_FLS_WP_OUT_DLY_SEL_Pos)/*!< FLASH_SPI_REG FLASH_IO0_DLY: FLS_WP_OUT_DLY_SEL Mask */

/* -------------------------  FLASH_SPI_REG_FLASH_IO1_DLY  ------------------------ */
#define FLASH_SPI_REG_FLASH_IO1_DLY_FLS_NC_IN_DLY_SEL_Pos 0                                           /*!< FLASH_SPI_REG FLASH_IO1_DLY: FLS_NC_IN_DLY_SEL Position */
#define FLASH_SPI_REG_FLASH_IO1_DLY_FLS_NC_IN_DLY_SEL_Msk (0x07UL << FLASH_SPI_REG_FLASH_IO1_DLY_FLS_NC_IN_DLY_SEL_Pos)/*!< FLASH_SPI_REG FLASH_IO1_DLY: FLS_NC_IN_DLY_SEL Mask */
#define FLASH_SPI_REG_FLASH_IO1_DLY_FLS_NC_OUT_DLY_SEL_Pos 4                                          /*!< FLASH_SPI_REG FLASH_IO1_DLY: FLS_NC_OUT_DLY_SEL Position */
#define FLASH_SPI_REG_FLASH_IO1_DLY_FLS_NC_OUT_DLY_SEL_Msk (0x07UL << FLASH_SPI_REG_FLASH_IO1_DLY_FLS_NC_OUT_DLY_SEL_Pos)/*!< FLASH_SPI_REG FLASH_IO1_DLY: FLS_NC_OUT_DLY_SEL Mask */

/* ---------------------------  FLASH_SPI_REG_CMD_SET2  --------------------------- */
#define FLASH_SPI_REG_CMD_SET2_BIT2_DUALOUT_RD_CMD_Pos 0                                              /*!< FLASH_SPI_REG CMD_SET2: BIT2_DUALOUT_RD_CMD Position */
#define FLASH_SPI_REG_CMD_SET2_BIT2_DUALOUT_RD_CMD_Msk (0x000000ffUL << FLASH_SPI_REG_CMD_SET2_BIT2_DUALOUT_RD_CMD_Pos)/*!< FLASH_SPI_REG CMD_SET2: BIT2_DUALOUT_RD_CMD Mask */


/* ================================================================================ */
/* ================       struct 'U0_CSR_PWM' Position & Mask      ================ */
/* ================================================================================ */


/* ---------------------------  U0_CSR_PWM_U0_PWM_CTRL  --------------------------- */
#define U0_CSR_PWM_U0_PWM_CTRL_U0_PWM_POST_SCALER_Pos 0                                               /*!< U0_CSR_PWM U0_PWM_CTRL: U0_PWM_POST_SCALER Position */
#define U0_CSR_PWM_U0_PWM_CTRL_U0_PWM_POST_SCALER_Msk (0x000000ffUL << U0_CSR_PWM_U0_PWM_CTRL_U0_PWM_POST_SCALER_Pos)/*!< U0_CSR_PWM U0_PWM_CTRL: U0_PWM_POST_SCALER Mask */
#define U0_CSR_PWM_U0_PWM_CTRL_U0_PWM_ALWAYSON_Pos 29                                                 /*!< U0_CSR_PWM U0_PWM_CTRL: U0_PWM_ALWAYSON Position */
#define U0_CSR_PWM_U0_PWM_CTRL_U0_PWM_ALWAYSON_Msk (0x01UL << U0_CSR_PWM_U0_PWM_CTRL_U0_PWM_ALWAYSON_Pos)/*!< U0_CSR_PWM U0_PWM_CTRL: U0_PWM_ALWAYSON Mask */
#define U0_CSR_PWM_U0_PWM_CTRL_U0_PWM_INVERT_Pos 30                                                   /*!< U0_CSR_PWM U0_PWM_CTRL: U0_PWM_INVERT Position */
#define U0_CSR_PWM_U0_PWM_CTRL_U0_PWM_INVERT_Msk (0x01UL << U0_CSR_PWM_U0_PWM_CTRL_U0_PWM_INVERT_Pos) /*!< U0_CSR_PWM U0_PWM_CTRL: U0_PWM_INVERT Mask */
#define U0_CSR_PWM_U0_PWM_CTRL_U0_PWM_ENABLE_Pos 31                                                   /*!< U0_CSR_PWM U0_PWM_CTRL: U0_PWM_ENABLE Position */
#define U0_CSR_PWM_U0_PWM_CTRL_U0_PWM_ENABLE_Msk (0x01UL << U0_CSR_PWM_U0_PWM_CTRL_U0_PWM_ENABLE_Pos) /*!< U0_CSR_PWM U0_PWM_CTRL: U0_PWM_ENABLE Mask */

/* ----------------------------  U0_CSR_PWM_U0_PWM_SET  --------------------------- */
#define U0_CSR_PWM_U0_PWM_SET_U0_PWM_INI_VALUE_PERIOD_Pos 0                                           /*!< U0_CSR_PWM U0_PWM_SET: U0_PWM_INI_VALUE_PERIOD Position */
#define U0_CSR_PWM_U0_PWM_SET_U0_PWM_INI_VALUE_PERIOD_Msk (0x0000ffffUL << U0_CSR_PWM_U0_PWM_SET_U0_PWM_INI_VALUE_PERIOD_Pos)/*!< U0_CSR_PWM U0_PWM_SET: U0_PWM_INI_VALUE_PERIOD Mask */
#define U0_CSR_PWM_U0_PWM_SET_U0_PWM_INI_VALUE_P_Pos 16                                               /*!< U0_CSR_PWM U0_PWM_SET: U0_PWM_INI_VALUE_P Position */
#define U0_CSR_PWM_U0_PWM_SET_U0_PWM_INI_VALUE_P_Msk (0x0000ffffUL << U0_CSR_PWM_U0_PWM_SET_U0_PWM_INI_VALUE_P_Pos)/*!< U0_CSR_PWM U0_PWM_SET: U0_PWM_INI_VALUE_P Mask */


/* ================================================================================ */
/* ================       struct 'U1_CSR_PWM' Position & Mask      ================ */
/* ================================================================================ */


/* ---------------------------  U1_CSR_PWM_U1_PWM_CTRL  --------------------------- */
#define U1_CSR_PWM_U1_PWM_CTRL_U1_PWM_POST_SCALER_Pos 0                                               /*!< U1_CSR_PWM U1_PWM_CTRL: U1_PWM_POST_SCALER Position */
#define U1_CSR_PWM_U1_PWM_CTRL_U1_PWM_POST_SCALER_Msk (0x000000ffUL << U1_CSR_PWM_U1_PWM_CTRL_U1_PWM_POST_SCALER_Pos)/*!< U1_CSR_PWM U1_PWM_CTRL: U1_PWM_POST_SCALER Mask */
#define U1_CSR_PWM_U1_PWM_CTRL_U1_PWM_ALWAYSON_Pos 29                                                 /*!< U1_CSR_PWM U1_PWM_CTRL: U1_PWM_ALWAYSON Position */
#define U1_CSR_PWM_U1_PWM_CTRL_U1_PWM_ALWAYSON_Msk (0x01UL << U1_CSR_PWM_U1_PWM_CTRL_U1_PWM_ALWAYSON_Pos)/*!< U1_CSR_PWM U1_PWM_CTRL: U1_PWM_ALWAYSON Mask */
#define U1_CSR_PWM_U1_PWM_CTRL_U1_PWM_INVERT_Pos 30                                                   /*!< U1_CSR_PWM U1_PWM_CTRL: U1_PWM_INVERT Position */
#define U1_CSR_PWM_U1_PWM_CTRL_U1_PWM_INVERT_Msk (0x01UL << U1_CSR_PWM_U1_PWM_CTRL_U1_PWM_INVERT_Pos) /*!< U1_CSR_PWM U1_PWM_CTRL: U1_PWM_INVERT Mask */
#define U1_CSR_PWM_U1_PWM_CTRL_U1_PWM_ENABLE_Pos 31                                                   /*!< U1_CSR_PWM U1_PWM_CTRL: U1_PWM_ENABLE Position */
#define U1_CSR_PWM_U1_PWM_CTRL_U1_PWM_ENABLE_Msk (0x01UL << U1_CSR_PWM_U1_PWM_CTRL_U1_PWM_ENABLE_Pos) /*!< U1_CSR_PWM U1_PWM_CTRL: U1_PWM_ENABLE Mask */

/* ----------------------------  U1_CSR_PWM_U1_PWM_SET  --------------------------- */
#define U1_CSR_PWM_U1_PWM_SET_U1_PWM_INI_VALUE_PERIOD_Pos 0                                           /*!< U1_CSR_PWM U1_PWM_SET: U1_PWM_INI_VALUE_PERIOD Position */
#define U1_CSR_PWM_U1_PWM_SET_U1_PWM_INI_VALUE_PERIOD_Msk (0x0000ffffUL << U1_CSR_PWM_U1_PWM_SET_U1_PWM_INI_VALUE_PERIOD_Pos)/*!< U1_CSR_PWM U1_PWM_SET: U1_PWM_INI_VALUE_PERIOD Mask */
#define U1_CSR_PWM_U1_PWM_SET_U1_PWM_INI_VALUE_P_Pos 16                                               /*!< U1_CSR_PWM U1_PWM_SET: U1_PWM_INI_VALUE_P Position */
#define U1_CSR_PWM_U1_PWM_SET_U1_PWM_INI_VALUE_P_Msk (0x0000ffffUL << U1_CSR_PWM_U1_PWM_SET_U1_PWM_INI_VALUE_P_Pos)/*!< U1_CSR_PWM U1_PWM_SET: U1_PWM_INI_VALUE_P Mask */


/* ================================================================================ */
/* ================       struct 'U2_CSR_PWM' Position & Mask      ================ */
/* ================================================================================ */


/* ---------------------------  U2_CSR_PWM_U2_PWM_CTRL  --------------------------- */
#define U2_CSR_PWM_U2_PWM_CTRL_U2_PWM_POST_SCALER_Pos 0                                               /*!< U2_CSR_PWM U2_PWM_CTRL: U2_PWM_POST_SCALER Position */
#define U2_CSR_PWM_U2_PWM_CTRL_U2_PWM_POST_SCALER_Msk (0x000000ffUL << U2_CSR_PWM_U2_PWM_CTRL_U2_PWM_POST_SCALER_Pos)/*!< U2_CSR_PWM U2_PWM_CTRL: U2_PWM_POST_SCALER Mask */
#define U2_CSR_PWM_U2_PWM_CTRL_U2_PWM_ALWAYSON_Pos 29                                                 /*!< U2_CSR_PWM U2_PWM_CTRL: U2_PWM_ALWAYSON Position */
#define U2_CSR_PWM_U2_PWM_CTRL_U2_PWM_ALWAYSON_Msk (0x01UL << U2_CSR_PWM_U2_PWM_CTRL_U2_PWM_ALWAYSON_Pos)/*!< U2_CSR_PWM U2_PWM_CTRL: U2_PWM_ALWAYSON Mask */
#define U2_CSR_PWM_U2_PWM_CTRL_U2_PWM_INVERT_Pos 30                                                   /*!< U2_CSR_PWM U2_PWM_CTRL: U2_PWM_INVERT Position */
#define U2_CSR_PWM_U2_PWM_CTRL_U2_PWM_INVERT_Msk (0x01UL << U2_CSR_PWM_U2_PWM_CTRL_U2_PWM_INVERT_Pos) /*!< U2_CSR_PWM U2_PWM_CTRL: U2_PWM_INVERT Mask */
#define U2_CSR_PWM_U2_PWM_CTRL_U2_PWM_ENABLE_Pos 31                                                   /*!< U2_CSR_PWM U2_PWM_CTRL: U2_PWM_ENABLE Position */
#define U2_CSR_PWM_U2_PWM_CTRL_U2_PWM_ENABLE_Msk (0x01UL << U2_CSR_PWM_U2_PWM_CTRL_U2_PWM_ENABLE_Pos) /*!< U2_CSR_PWM U2_PWM_CTRL: U2_PWM_ENABLE Mask */

/* ----------------------------  U2_CSR_PWM_U2_PWM_SET  --------------------------- */
#define U2_CSR_PWM_U2_PWM_SET_U2_PWM_INI_VALUE_PERIOD_Pos 0                                           /*!< U2_CSR_PWM U2_PWM_SET: U2_PWM_INI_VALUE_PERIOD Position */
#define U2_CSR_PWM_U2_PWM_SET_U2_PWM_INI_VALUE_PERIOD_Msk (0x0000ffffUL << U2_CSR_PWM_U2_PWM_SET_U2_PWM_INI_VALUE_PERIOD_Pos)/*!< U2_CSR_PWM U2_PWM_SET: U2_PWM_INI_VALUE_PERIOD Mask */
#define U2_CSR_PWM_U2_PWM_SET_U2_PWM_INI_VALUE_P_Pos 16                                               /*!< U2_CSR_PWM U2_PWM_SET: U2_PWM_INI_VALUE_P Position */
#define U2_CSR_PWM_U2_PWM_SET_U2_PWM_INI_VALUE_P_Msk (0x0000ffffUL << U2_CSR_PWM_U2_PWM_SET_U2_PWM_INI_VALUE_P_Pos)/*!< U2_CSR_PWM U2_PWM_SET: U2_PWM_INI_VALUE_P Mask */


/* ================================================================================ */
/* ================       struct 'U3_CSR_PWM' Position & Mask      ================ */
/* ================================================================================ */


/* ---------------------------  U3_CSR_PWM_U3_PWM_CTRL  --------------------------- */
#define U3_CSR_PWM_U3_PWM_CTRL_U3_PWM_POST_SCALER_Pos 0                                               /*!< U3_CSR_PWM U3_PWM_CTRL: U3_PWM_POST_SCALER Position */
#define U3_CSR_PWM_U3_PWM_CTRL_U3_PWM_POST_SCALER_Msk (0x000000ffUL << U3_CSR_PWM_U3_PWM_CTRL_U3_PWM_POST_SCALER_Pos)/*!< U3_CSR_PWM U3_PWM_CTRL: U3_PWM_POST_SCALER Mask */
#define U3_CSR_PWM_U3_PWM_CTRL_U3_PWM_ALWAYSON_Pos 29                                                 /*!< U3_CSR_PWM U3_PWM_CTRL: U3_PWM_ALWAYSON Position */
#define U3_CSR_PWM_U3_PWM_CTRL_U3_PWM_ALWAYSON_Msk (0x01UL << U3_CSR_PWM_U3_PWM_CTRL_U3_PWM_ALWAYSON_Pos)/*!< U3_CSR_PWM U3_PWM_CTRL: U3_PWM_ALWAYSON Mask */
#define U3_CSR_PWM_U3_PWM_CTRL_U3_PWM_INVERT_Pos 30                                                   /*!< U3_CSR_PWM U3_PWM_CTRL: U3_PWM_INVERT Position */
#define U3_CSR_PWM_U3_PWM_CTRL_U3_PWM_INVERT_Msk (0x01UL << U3_CSR_PWM_U3_PWM_CTRL_U3_PWM_INVERT_Pos) /*!< U3_CSR_PWM U3_PWM_CTRL: U3_PWM_INVERT Mask */
#define U3_CSR_PWM_U3_PWM_CTRL_U3_PWM_ENABLE_Pos 31                                                   /*!< U3_CSR_PWM U3_PWM_CTRL: U3_PWM_ENABLE Position */
#define U3_CSR_PWM_U3_PWM_CTRL_U3_PWM_ENABLE_Msk (0x01UL << U3_CSR_PWM_U3_PWM_CTRL_U3_PWM_ENABLE_Pos) /*!< U3_CSR_PWM U3_PWM_CTRL: U3_PWM_ENABLE Mask */

/* ----------------------------  U3_CSR_PWM_U3_PWM_SET  --------------------------- */
#define U3_CSR_PWM_U3_PWM_SET_U3_PWM_INI_VALUE_PERIOD_Pos 0                                           /*!< U3_CSR_PWM U3_PWM_SET: U3_PWM_INI_VALUE_PERIOD Position */
#define U3_CSR_PWM_U3_PWM_SET_U3_PWM_INI_VALUE_PERIOD_Msk (0x0000ffffUL << U3_CSR_PWM_U3_PWM_SET_U3_PWM_INI_VALUE_PERIOD_Pos)/*!< U3_CSR_PWM U3_PWM_SET: U3_PWM_INI_VALUE_PERIOD Mask */
#define U3_CSR_PWM_U3_PWM_SET_U3_PWM_INI_VALUE_P_Pos 16                                               /*!< U3_CSR_PWM U3_PWM_SET: U3_PWM_INI_VALUE_P Position */
#define U3_CSR_PWM_U3_PWM_SET_U3_PWM_INI_VALUE_P_Msk (0x0000ffffUL << U3_CSR_PWM_U3_PWM_SET_U3_PWM_INI_VALUE_P_Pos)/*!< U3_CSR_PWM U3_PWM_SET: U3_PWM_INI_VALUE_P Mask */


/* ================================================================================ */
/* ================       struct 'U4_CSR_PWM' Position & Mask      ================ */
/* ================================================================================ */


/* ---------------------------  U4_CSR_PWM_U4_PWM_CTRL  --------------------------- */
#define U4_CSR_PWM_U4_PWM_CTRL_U4_PWM_POST_SCALER_Pos 0                                               /*!< U4_CSR_PWM U4_PWM_CTRL: U4_PWM_POST_SCALER Position */
#define U4_CSR_PWM_U4_PWM_CTRL_U4_PWM_POST_SCALER_Msk (0x000000ffUL << U4_CSR_PWM_U4_PWM_CTRL_U4_PWM_POST_SCALER_Pos)/*!< U4_CSR_PWM U4_PWM_CTRL: U4_PWM_POST_SCALER Mask */
#define U4_CSR_PWM_U4_PWM_CTRL_U4_PWM_ALWAYSON_Pos 29                                                 /*!< U4_CSR_PWM U4_PWM_CTRL: U4_PWM_ALWAYSON Position */
#define U4_CSR_PWM_U4_PWM_CTRL_U4_PWM_ALWAYSON_Msk (0x01UL << U4_CSR_PWM_U4_PWM_CTRL_U4_PWM_ALWAYSON_Pos)/*!< U4_CSR_PWM U4_PWM_CTRL: U4_PWM_ALWAYSON Mask */
#define U4_CSR_PWM_U4_PWM_CTRL_U4_PWM_INVERT_Pos 30                                                   /*!< U4_CSR_PWM U4_PWM_CTRL: U4_PWM_INVERT Position */
#define U4_CSR_PWM_U4_PWM_CTRL_U4_PWM_INVERT_Msk (0x01UL << U4_CSR_PWM_U4_PWM_CTRL_U4_PWM_INVERT_Pos) /*!< U4_CSR_PWM U4_PWM_CTRL: U4_PWM_INVERT Mask */
#define U4_CSR_PWM_U4_PWM_CTRL_U4_PWM_ENABLE_Pos 31                                                   /*!< U4_CSR_PWM U4_PWM_CTRL: U4_PWM_ENABLE Position */
#define U4_CSR_PWM_U4_PWM_CTRL_U4_PWM_ENABLE_Msk (0x01UL << U4_CSR_PWM_U4_PWM_CTRL_U4_PWM_ENABLE_Pos) /*!< U4_CSR_PWM U4_PWM_CTRL: U4_PWM_ENABLE Mask */

/* ----------------------------  U4_CSR_PWM_U4_PWM_SET  --------------------------- */
#define U4_CSR_PWM_U4_PWM_SET_U4_PWM_INI_VALUE_PERIOD_Pos 0                                           /*!< U4_CSR_PWM U4_PWM_SET: U4_PWM_INI_VALUE_PERIOD Position */
#define U4_CSR_PWM_U4_PWM_SET_U4_PWM_INI_VALUE_PERIOD_Msk (0x0000ffffUL << U4_CSR_PWM_U4_PWM_SET_U4_PWM_INI_VALUE_PERIOD_Pos)/*!< U4_CSR_PWM U4_PWM_SET: U4_PWM_INI_VALUE_PERIOD Mask */
#define U4_CSR_PWM_U4_PWM_SET_U4_PWM_INI_VALUE_P_Pos 16                                               /*!< U4_CSR_PWM U4_PWM_SET: U4_PWM_INI_VALUE_P Position */
#define U4_CSR_PWM_U4_PWM_SET_U4_PWM_INI_VALUE_P_Msk (0x0000ffffUL << U4_CSR_PWM_U4_PWM_SET_U4_PWM_INI_VALUE_P_Pos)/*!< U4_CSR_PWM U4_PWM_SET: U4_PWM_INI_VALUE_P Mask */


/* ================================================================================ */
/* ================          struct 'PWM0' Position & Mask         ================ */
/* ================================================================================ */


/* ----------------------------------  PWM0_CTRL  --------------------------------- */
#define PWM0_CTRL_POST_SCALER_Pos             0                                                       /*!< PWM0 CTRL: POST_SCALER Position         */
#define PWM0_CTRL_POST_SCALER_Msk             (0x000000ffUL << PWM0_CTRL_POST_SCALER_Pos)             /*!< PWM0 CTRL: POST_SCALER Mask             */
#define PWM0_CTRL_ALWAYSON_Pos                29                                                      /*!< PWM0 CTRL: ALWAYSON Position            */
#define PWM0_CTRL_ALWAYSON_Msk                (0x01UL << PWM0_CTRL_ALWAYSON_Pos)                      /*!< PWM0 CTRL: ALWAYSON Mask                */
#define PWM0_CTRL_INVERT_Pos                  30                                                      /*!< PWM0 CTRL: INVERT Position              */
#define PWM0_CTRL_INVERT_Msk                  (0x01UL << PWM0_CTRL_INVERT_Pos)                        /*!< PWM0 CTRL: INVERT Mask                  */
#define PWM0_CTRL_ENABLE_Pos                  31                                                      /*!< PWM0 CTRL: ENABLE Position              */
#define PWM0_CTRL_ENABLE_Msk                  (0x01UL << PWM0_CTRL_ENABLE_Pos)                        /*!< PWM0 CTRL: ENABLE Mask                  */

/* ----------------------------------  PWM0_SET  ---------------------------------- */
#define PWM0_SET_INI_VALUE_PERIOD_Pos         0                                                       /*!< PWM0 SET: INI_VALUE_PERIOD Position     */
#define PWM0_SET_INI_VALUE_PERIOD_Msk         (0x0000ffffUL << PWM0_SET_INI_VALUE_PERIOD_Pos)         /*!< PWM0 SET: INI_VALUE_PERIOD Mask         */
#define PWM0_SET_INI_VALUE_P_Pos              16                                                      /*!< PWM0 SET: INI_VALUE_P Position          */
#define PWM0_SET_INI_VALUE_P_Msk              (0x0000ffffUL << PWM0_SET_INI_VALUE_P_Pos)              /*!< PWM0 SET: INI_VALUE_P Mask              */


/* ================================================================================ */
/* ================          struct 'PWM1' Position & Mask         ================ */
/* ================================================================================ */


/* ----------------------------------  PWM1_CTRL  --------------------------------- */
#define PWM1_CTRL_POST_SCALER_Pos             0                                                       /*!< PWM1 CTRL: POST_SCALER Position         */
#define PWM1_CTRL_POST_SCALER_Msk             (0x000000ffUL << PWM1_CTRL_POST_SCALER_Pos)             /*!< PWM1 CTRL: POST_SCALER Mask             */
#define PWM1_CTRL_ALWAYSON_Pos                29                                                      /*!< PWM1 CTRL: ALWAYSON Position            */
#define PWM1_CTRL_ALWAYSON_Msk                (0x01UL << PWM1_CTRL_ALWAYSON_Pos)                      /*!< PWM1 CTRL: ALWAYSON Mask                */
#define PWM1_CTRL_INVERT_Pos                  30                                                      /*!< PWM1 CTRL: INVERT Position              */
#define PWM1_CTRL_INVERT_Msk                  (0x01UL << PWM1_CTRL_INVERT_Pos)                        /*!< PWM1 CTRL: INVERT Mask                  */
#define PWM1_CTRL_ENABLE_Pos                  31                                                      /*!< PWM1 CTRL: ENABLE Position              */
#define PWM1_CTRL_ENABLE_Msk                  (0x01UL << PWM1_CTRL_ENABLE_Pos)                        /*!< PWM1 CTRL: ENABLE Mask                  */

/* ----------------------------------  PWM1_SET  ---------------------------------- */
#define PWM1_SET_INI_VALUE_PERIOD_Pos         0                                                       /*!< PWM1 SET: INI_VALUE_PERIOD Position     */
#define PWM1_SET_INI_VALUE_PERIOD_Msk         (0x0000ffffUL << PWM1_SET_INI_VALUE_PERIOD_Pos)         /*!< PWM1 SET: INI_VALUE_PERIOD Mask         */
#define PWM1_SET_INI_VALUE_P_Pos              16                                                      /*!< PWM1 SET: INI_VALUE_P Position          */
#define PWM1_SET_INI_VALUE_P_Msk              (0x0000ffffUL << PWM1_SET_INI_VALUE_P_Pos)              /*!< PWM1 SET: INI_VALUE_P Mask              */


/* ================================================================================ */
/* ================          struct 'PWM2' Position & Mask         ================ */
/* ================================================================================ */


/* ----------------------------------  PWM2_CTRL  --------------------------------- */
#define PWM2_CTRL_POST_SCALER_Pos             0                                                       /*!< PWM2 CTRL: POST_SCALER Position         */
#define PWM2_CTRL_POST_SCALER_Msk             (0x000000ffUL << PWM2_CTRL_POST_SCALER_Pos)             /*!< PWM2 CTRL: POST_SCALER Mask             */
#define PWM2_CTRL_ALWAYSON_Pos                29                                                      /*!< PWM2 CTRL: ALWAYSON Position            */
#define PWM2_CTRL_ALWAYSON_Msk                (0x01UL << PWM2_CTRL_ALWAYSON_Pos)                      /*!< PWM2 CTRL: ALWAYSON Mask                */
#define PWM2_CTRL_INVERT_Pos                  30                                                      /*!< PWM2 CTRL: INVERT Position              */
#define PWM2_CTRL_INVERT_Msk                  (0x01UL << PWM2_CTRL_INVERT_Pos)                        /*!< PWM2 CTRL: INVERT Mask                  */
#define PWM2_CTRL_ENABLE_Pos                  31                                                      /*!< PWM2 CTRL: ENABLE Position              */
#define PWM2_CTRL_ENABLE_Msk                  (0x01UL << PWM2_CTRL_ENABLE_Pos)                        /*!< PWM2 CTRL: ENABLE Mask                  */

/* ----------------------------------  PWM2_SET  ---------------------------------- */
#define PWM2_SET_INI_VALUE_PERIOD_Pos         0                                                       /*!< PWM2 SET: INI_VALUE_PERIOD Position     */
#define PWM2_SET_INI_VALUE_PERIOD_Msk         (0x0000ffffUL << PWM2_SET_INI_VALUE_PERIOD_Pos)         /*!< PWM2 SET: INI_VALUE_PERIOD Mask         */
#define PWM2_SET_INI_VALUE_P_Pos              16                                                      /*!< PWM2 SET: INI_VALUE_P Position          */
#define PWM2_SET_INI_VALUE_P_Msk              (0x0000ffffUL << PWM2_SET_INI_VALUE_P_Pos)              /*!< PWM2 SET: INI_VALUE_P Mask              */


/* ================================================================================ */
/* ================          struct 'PWM3' Position & Mask         ================ */
/* ================================================================================ */


/* ----------------------------------  PWM3_CTRL  --------------------------------- */
#define PWM3_CTRL_POST_SCALER_Pos             0                                                       /*!< PWM3 CTRL: POST_SCALER Position         */
#define PWM3_CTRL_POST_SCALER_Msk             (0x000000ffUL << PWM3_CTRL_POST_SCALER_Pos)             /*!< PWM3 CTRL: POST_SCALER Mask             */
#define PWM3_CTRL_ALWAYSON_Pos                29                                                      /*!< PWM3 CTRL: ALWAYSON Position            */
#define PWM3_CTRL_ALWAYSON_Msk                (0x01UL << PWM3_CTRL_ALWAYSON_Pos)                      /*!< PWM3 CTRL: ALWAYSON Mask                */
#define PWM3_CTRL_INVERT_Pos                  30                                                      /*!< PWM3 CTRL: INVERT Position              */
#define PWM3_CTRL_INVERT_Msk                  (0x01UL << PWM3_CTRL_INVERT_Pos)                        /*!< PWM3 CTRL: INVERT Mask                  */
#define PWM3_CTRL_ENABLE_Pos                  31                                                      /*!< PWM3 CTRL: ENABLE Position              */
#define PWM3_CTRL_ENABLE_Msk                  (0x01UL << PWM3_CTRL_ENABLE_Pos)                        /*!< PWM3 CTRL: ENABLE Mask                  */

/* ----------------------------------  PWM3_SET  ---------------------------------- */
#define PWM3_SET_INI_VALUE_PERIOD_Pos         0                                                       /*!< PWM3 SET: INI_VALUE_PERIOD Position     */
#define PWM3_SET_INI_VALUE_PERIOD_Msk         (0x0000ffffUL << PWM3_SET_INI_VALUE_PERIOD_Pos)         /*!< PWM3 SET: INI_VALUE_PERIOD Mask         */
#define PWM3_SET_INI_VALUE_P_Pos              16                                                      /*!< PWM3 SET: INI_VALUE_P Position          */
#define PWM3_SET_INI_VALUE_P_Msk              (0x0000ffffUL << PWM3_SET_INI_VALUE_P_Pos)              /*!< PWM3 SET: INI_VALUE_P Mask              */


/* ================================================================================ */
/* ================          struct 'PWM4' Position & Mask         ================ */
/* ================================================================================ */


/* ----------------------------------  PWM4_CTRL  --------------------------------- */
#define PWM4_CTRL_POST_SCALER_Pos             0                                                       /*!< PWM4 CTRL: POST_SCALER Position         */
#define PWM4_CTRL_POST_SCALER_Msk             (0x000000ffUL << PWM4_CTRL_POST_SCALER_Pos)             /*!< PWM4 CTRL: POST_SCALER Mask             */
#define PWM4_CTRL_ALWAYSON_Pos                29                                                      /*!< PWM4 CTRL: ALWAYSON Position            */
#define PWM4_CTRL_ALWAYSON_Msk                (0x01UL << PWM4_CTRL_ALWAYSON_Pos)                      /*!< PWM4 CTRL: ALWAYSON Mask                */
#define PWM4_CTRL_INVERT_Pos                  30                                                      /*!< PWM4 CTRL: INVERT Position              */
#define PWM4_CTRL_INVERT_Msk                  (0x01UL << PWM4_CTRL_INVERT_Pos)                        /*!< PWM4 CTRL: INVERT Mask                  */
#define PWM4_CTRL_ENABLE_Pos                  31                                                      /*!< PWM4 CTRL: ENABLE Position              */
#define PWM4_CTRL_ENABLE_Msk                  (0x01UL << PWM4_CTRL_ENABLE_Pos)                        /*!< PWM4 CTRL: ENABLE Mask                  */

/* ----------------------------------  PWM4_SET  ---------------------------------- */
#define PWM4_SET_INI_VALUE_PERIOD_Pos         0                                                       /*!< PWM4 SET: INI_VALUE_PERIOD Position     */
#define PWM4_SET_INI_VALUE_PERIOD_Msk         (0x0000ffffUL << PWM4_SET_INI_VALUE_PERIOD_Pos)         /*!< PWM4 SET: INI_VALUE_PERIOD Mask         */
#define PWM4_SET_INI_VALUE_P_Pos              16                                                      /*!< PWM4 SET: INI_VALUE_P Position          */
#define PWM4_SET_INI_VALUE_P_Msk              (0x0000ffffUL << PWM4_SET_INI_VALUE_P_Pos)              /*!< PWM4 SET: INI_VALUE_P Mask              */


/* ================================================================================ */
/* ================      struct 'CSR_I2C_MST' Position & Mask      ================ */
/* ================================================================================ */


/* -----------------------------  CSR_I2C_MST_TWIM_EN  ---------------------------- */
#define CSR_I2C_MST_TWIM_EN_TWI_START_TRIG_Pos 0                                                      /*!< CSR_I2C_MST TWIM_EN: TWI_START_TRIG Position */
#define CSR_I2C_MST_TWIM_EN_TWI_START_TRIG_Msk (0x01UL << CSR_I2C_MST_TWIM_EN_TWI_START_TRIG_Pos)     /*!< CSR_I2C_MST TWIM_EN: TWI_START_TRIG Mask */
#define CSR_I2C_MST_TWIM_EN_TWI_STOP_TRIG_Pos 1                                                       /*!< CSR_I2C_MST TWIM_EN: TWI_STOP_TRIG Position */
#define CSR_I2C_MST_TWIM_EN_TWI_STOP_TRIG_Msk (0x01UL << CSR_I2C_MST_TWIM_EN_TWI_STOP_TRIG_Pos)       /*!< CSR_I2C_MST TWIM_EN: TWI_STOP_TRIG Mask */
#define CSR_I2C_MST_TWIM_EN_TWI_TRANS_CONTINUE_Pos 2                                                  /*!< CSR_I2C_MST TWIM_EN: TWI_TRANS_CONTINUE Position */
#define CSR_I2C_MST_TWIM_EN_TWI_TRANS_CONTINUE_Msk (0x01UL << CSR_I2C_MST_TWIM_EN_TWI_TRANS_CONTINUE_Pos)/*!< CSR_I2C_MST TWIM_EN: TWI_TRANS_CONTINUE Mask */

/* -----------------------  CSR_I2C_MST_TWIM_STATUS_SETTING  ---------------------- */
#define CSR_I2C_MST_TWIM_STATUS_SETTING_TWI_DEV_A_10B_Pos 0                                           /*!< CSR_I2C_MST TWIM_STATUS_SETTING: TWI_DEV_A_10B Position */
#define CSR_I2C_MST_TWIM_STATUS_SETTING_TWI_DEV_A_10B_Msk (0x01UL << CSR_I2C_MST_TWIM_STATUS_SETTING_TWI_DEV_A_10B_Pos)/*!< CSR_I2C_MST TWIM_STATUS_SETTING: TWI_DEV_A_10B Mask */
#define CSR_I2C_MST_TWIM_STATUS_SETTING_TWI_MODE_Pos 1                                                /*!< CSR_I2C_MST TWIM_STATUS_SETTING: TWI_MODE Position */
#define CSR_I2C_MST_TWIM_STATUS_SETTING_TWI_MODE_Msk (0x01UL << CSR_I2C_MST_TWIM_STATUS_SETTING_TWI_MODE_Pos)/*!< CSR_I2C_MST TWIM_STATUS_SETTING: TWI_MODE Mask */
#define CSR_I2C_MST_TWIM_STATUS_SETTING_SCL_Pos 16                                                    /*!< CSR_I2C_MST TWIM_STATUS_SETTING: SCL Position */
#define CSR_I2C_MST_TWIM_STATUS_SETTING_SCL_Msk (0x01UL << CSR_I2C_MST_TWIM_STATUS_SETTING_SCL_Pos)   /*!< CSR_I2C_MST TWIM_STATUS_SETTING: SCL Mask */
#define CSR_I2C_MST_TWIM_STATUS_SETTING_SDA_Pos 17                                                    /*!< CSR_I2C_MST TWIM_STATUS_SETTING: SDA Position */
#define CSR_I2C_MST_TWIM_STATUS_SETTING_SDA_Msk (0x01UL << CSR_I2C_MST_TWIM_STATUS_SETTING_SDA_Pos)   /*!< CSR_I2C_MST TWIM_STATUS_SETTING: SDA Mask */

/* ------------------------  CSR_I2C_MST_TWIM_INTERRUPT_EN  ----------------------- */
#define CSR_I2C_MST_TWIM_INTERRUPT_EN_TWI_INT_TXD_STALL_EN_Pos 0                                      /*!< CSR_I2C_MST TWIM_INTERRUPT_EN: TWI_INT_TXD_STALL_EN Position */
#define CSR_I2C_MST_TWIM_INTERRUPT_EN_TWI_INT_TXD_STALL_EN_Msk (0x01UL << CSR_I2C_MST_TWIM_INTERRUPT_EN_TWI_INT_TXD_STALL_EN_Pos)/*!< CSR_I2C_MST TWIM_INTERRUPT_EN: TWI_INT_TXD_STALL_EN Mask */
#define CSR_I2C_MST_TWIM_INTERRUPT_EN_TWI_INT_RXD_STALL_EN_Pos 1                                      /*!< CSR_I2C_MST TWIM_INTERRUPT_EN: TWI_INT_RXD_STALL_EN Position */
#define CSR_I2C_MST_TWIM_INTERRUPT_EN_TWI_INT_RXD_STALL_EN_Msk (0x01UL << CSR_I2C_MST_TWIM_INTERRUPT_EN_TWI_INT_RXD_STALL_EN_Pos)/*!< CSR_I2C_MST TWIM_INTERRUPT_EN: TWI_INT_RXD_STALL_EN Mask */
#define CSR_I2C_MST_TWIM_INTERRUPT_EN_TWI_INT_TRANS_FINISH_EN_Pos 2                                   /*!< CSR_I2C_MST TWIM_INTERRUPT_EN: TWI_INT_TRANS_FINISH_EN Position */
#define CSR_I2C_MST_TWIM_INTERRUPT_EN_TWI_INT_TRANS_FINISH_EN_Msk (0x01UL << CSR_I2C_MST_TWIM_INTERRUPT_EN_TWI_INT_TRANS_FINISH_EN_Pos)/*!< CSR_I2C_MST TWIM_INTERRUPT_EN: TWI_INT_TRANS_FINISH_EN Mask */
#define CSR_I2C_MST_TWIM_INTERRUPT_EN_TWI_INT_MISMATCH_EN_Pos 3                                       /*!< CSR_I2C_MST TWIM_INTERRUPT_EN: TWI_INT_MISMATCH_EN Position */
#define CSR_I2C_MST_TWIM_INTERRUPT_EN_TWI_INT_MISMATCH_EN_Msk (0x01UL << CSR_I2C_MST_TWIM_INTERRUPT_EN_TWI_INT_MISMATCH_EN_Pos)/*!< CSR_I2C_MST TWIM_INTERRUPT_EN: TWI_INT_MISMATCH_EN Mask */
#define CSR_I2C_MST_TWIM_INTERRUPT_EN_TWI_INT_TRANS_FAIL_EN_Pos 4                                     /*!< CSR_I2C_MST TWIM_INTERRUPT_EN: TWI_INT_TRANS_FAIL_EN Position */
#define CSR_I2C_MST_TWIM_INTERRUPT_EN_TWI_INT_TRANS_FAIL_EN_Msk (0x01UL << CSR_I2C_MST_TWIM_INTERRUPT_EN_TWI_INT_TRANS_FAIL_EN_Pos)/*!< CSR_I2C_MST TWIM_INTERRUPT_EN: TWI_INT_TRANS_FAIL_EN Mask */
#define CSR_I2C_MST_TWIM_INTERRUPT_EN_TWI_INT_HOLD_BUS_EN_Pos 5                                       /*!< CSR_I2C_MST TWIM_INTERRUPT_EN: TWI_INT_HOLD_BUS_EN Position */
#define CSR_I2C_MST_TWIM_INTERRUPT_EN_TWI_INT_HOLD_BUS_EN_Msk (0x01UL << CSR_I2C_MST_TWIM_INTERRUPT_EN_TWI_INT_HOLD_BUS_EN_Pos)/*!< CSR_I2C_MST TWIM_INTERRUPT_EN: TWI_INT_HOLD_BUS_EN Mask */

/* -------------------------  CSR_I2C_MST_TWIM_INTERRUPT  ------------------------- */
#define CSR_I2C_MST_TWIM_INTERRUPT_TWI_INT_TXD_STALL_Pos 0                                            /*!< CSR_I2C_MST TWIM_INTERRUPT: TWI_INT_TXD_STALL Position */
#define CSR_I2C_MST_TWIM_INTERRUPT_TWI_INT_TXD_STALL_Msk (0x01UL << CSR_I2C_MST_TWIM_INTERRUPT_TWI_INT_TXD_STALL_Pos)/*!< CSR_I2C_MST TWIM_INTERRUPT: TWI_INT_TXD_STALL Mask */
#define CSR_I2C_MST_TWIM_INTERRUPT_TWI_INT_RXD_STALL_Pos 1                                            /*!< CSR_I2C_MST TWIM_INTERRUPT: TWI_INT_RXD_STALL Position */
#define CSR_I2C_MST_TWIM_INTERRUPT_TWI_INT_RXD_STALL_Msk (0x01UL << CSR_I2C_MST_TWIM_INTERRUPT_TWI_INT_RXD_STALL_Pos)/*!< CSR_I2C_MST TWIM_INTERRUPT: TWI_INT_RXD_STALL Mask */
#define CSR_I2C_MST_TWIM_INTERRUPT_TWI_INT_TRANS_FINISH_Pos 2                                         /*!< CSR_I2C_MST TWIM_INTERRUPT: TWI_INT_TRANS_FINISH Position */
#define CSR_I2C_MST_TWIM_INTERRUPT_TWI_INT_TRANS_FINISH_Msk (0x01UL << CSR_I2C_MST_TWIM_INTERRUPT_TWI_INT_TRANS_FINISH_Pos)/*!< CSR_I2C_MST TWIM_INTERRUPT: TWI_INT_TRANS_FINISH Mask */
#define CSR_I2C_MST_TWIM_INTERRUPT_TWI_INT_MISMATCH_Pos 3                                             /*!< CSR_I2C_MST TWIM_INTERRUPT: TWI_INT_MISMATCH Position */
#define CSR_I2C_MST_TWIM_INTERRUPT_TWI_INT_MISMATCH_Msk (0x01UL << CSR_I2C_MST_TWIM_INTERRUPT_TWI_INT_MISMATCH_Pos)/*!< CSR_I2C_MST TWIM_INTERRUPT: TWI_INT_MISMATCH Mask */
#define CSR_I2C_MST_TWIM_INTERRUPT_TWI_INT_TRANS_FAIL_Pos 4                                           /*!< CSR_I2C_MST TWIM_INTERRUPT: TWI_INT_TRANS_FAIL Position */
#define CSR_I2C_MST_TWIM_INTERRUPT_TWI_INT_TRANS_FAIL_Msk (0x01UL << CSR_I2C_MST_TWIM_INTERRUPT_TWI_INT_TRANS_FAIL_Pos)/*!< CSR_I2C_MST TWIM_INTERRUPT: TWI_INT_TRANS_FAIL Mask */
#define CSR_I2C_MST_TWIM_INTERRUPT_TWI_INT_HOLD_BUS_Pos 5                                             /*!< CSR_I2C_MST TWIM_INTERRUPT: TWI_INT_HOLD_BUS Position */
#define CSR_I2C_MST_TWIM_INTERRUPT_TWI_INT_HOLD_BUS_Msk (0x01UL << CSR_I2C_MST_TWIM_INTERRUPT_TWI_INT_HOLD_BUS_Pos)/*!< CSR_I2C_MST TWIM_INTERRUPT: TWI_INT_HOLD_BUS Mask */

/* ----------------------  CSR_I2C_MST_TWIM_INTERRUPT_STATUS  --------------------- */
#define CSR_I2C_MST_TWIM_INTERRUPT_STATUS_TWI_INT_TXD_STALL_ST_Pos 0                                  /*!< CSR_I2C_MST TWIM_INTERRUPT_STATUS: TWI_INT_TXD_STALL_ST Position */
#define CSR_I2C_MST_TWIM_INTERRUPT_STATUS_TWI_INT_TXD_STALL_ST_Msk (0x01UL << CSR_I2C_MST_TWIM_INTERRUPT_STATUS_TWI_INT_TXD_STALL_ST_Pos)/*!< CSR_I2C_MST TWIM_INTERRUPT_STATUS: TWI_INT_TXD_STALL_ST Mask */
#define CSR_I2C_MST_TWIM_INTERRUPT_STATUS_TWI_INT_RXD_STALL_ST_Pos 1                                  /*!< CSR_I2C_MST TWIM_INTERRUPT_STATUS: TWI_INT_RXD_STALL_ST Position */
#define CSR_I2C_MST_TWIM_INTERRUPT_STATUS_TWI_INT_RXD_STALL_ST_Msk (0x01UL << CSR_I2C_MST_TWIM_INTERRUPT_STATUS_TWI_INT_RXD_STALL_ST_Pos)/*!< CSR_I2C_MST TWIM_INTERRUPT_STATUS: TWI_INT_RXD_STALL_ST Mask */
#define CSR_I2C_MST_TWIM_INTERRUPT_STATUS_TWI_INT_TRANS_FINISH_ST_Pos 2                               /*!< CSR_I2C_MST TWIM_INTERRUPT_STATUS: TWI_INT_TRANS_FINISH_ST Position */
#define CSR_I2C_MST_TWIM_INTERRUPT_STATUS_TWI_INT_TRANS_FINISH_ST_Msk (0x01UL << CSR_I2C_MST_TWIM_INTERRUPT_STATUS_TWI_INT_TRANS_FINISH_ST_Pos)/*!< CSR_I2C_MST TWIM_INTERRUPT_STATUS: TWI_INT_TRANS_FINISH_ST Mask */
#define CSR_I2C_MST_TWIM_INTERRUPT_STATUS_TWI_INT_MISMATCH_ST_Pos 3                                   /*!< CSR_I2C_MST TWIM_INTERRUPT_STATUS: TWI_INT_MISMATCH_ST Position */
#define CSR_I2C_MST_TWIM_INTERRUPT_STATUS_TWI_INT_MISMATCH_ST_Msk (0x01UL << CSR_I2C_MST_TWIM_INTERRUPT_STATUS_TWI_INT_MISMATCH_ST_Pos)/*!< CSR_I2C_MST TWIM_INTERRUPT_STATUS: TWI_INT_MISMATCH_ST Mask */
#define CSR_I2C_MST_TWIM_INTERRUPT_STATUS_TWI_INT_TRANS_FAIL_ST_Pos 4                                 /*!< CSR_I2C_MST TWIM_INTERRUPT_STATUS: TWI_INT_TRANS_FAIL_ST Position */
#define CSR_I2C_MST_TWIM_INTERRUPT_STATUS_TWI_INT_TRANS_FAIL_ST_Msk (0x01UL << CSR_I2C_MST_TWIM_INTERRUPT_STATUS_TWI_INT_TRANS_FAIL_ST_Pos)/*!< CSR_I2C_MST TWIM_INTERRUPT_STATUS: TWI_INT_TRANS_FAIL_ST Mask */
#define CSR_I2C_MST_TWIM_INTERRUPT_STATUS_TWI_INT_HOLD_BUS_ST_Pos 5                                   /*!< CSR_I2C_MST TWIM_INTERRUPT_STATUS: TWI_INT_HOLD_BUS_ST Position */
#define CSR_I2C_MST_TWIM_INTERRUPT_STATUS_TWI_INT_HOLD_BUS_ST_Msk (0x01UL << CSR_I2C_MST_TWIM_INTERRUPT_STATUS_TWI_INT_HOLD_BUS_ST_Pos)/*!< CSR_I2C_MST TWIM_INTERRUPT_STATUS: TWI_INT_HOLD_BUS_ST Mask */

/* ----------------------  CSR_I2C_MST_TWIM_STATUS_RECORD_0  ---------------------- */
#define CSR_I2C_MST_TWIM_STATUS_RECORD_0_TWI_STATUS_RECORD_0_Pos 0                                    /*!< CSR_I2C_MST TWIM_STATUS_RECORD_0: TWI_STATUS_RECORD_0 Position */
#define CSR_I2C_MST_TWIM_STATUS_RECORD_0_TWI_STATUS_RECORD_0_Msk (0xffffffffUL << CSR_I2C_MST_TWIM_STATUS_RECORD_0_TWI_STATUS_RECORD_0_Pos)/*!< CSR_I2C_MST TWIM_STATUS_RECORD_0: TWI_STATUS_RECORD_0 Mask */

/* ----------------------  CSR_I2C_MST_TWIM_STATUS_RECORD_1  ---------------------- */
#define CSR_I2C_MST_TWIM_STATUS_RECORD_1_TWI_STATUS_RECORD_1_Pos 0                                    /*!< CSR_I2C_MST TWIM_STATUS_RECORD_1: TWI_STATUS_RECORD_1 Position */
#define CSR_I2C_MST_TWIM_STATUS_RECORD_1_TWI_STATUS_RECORD_1_Msk (0xffffffffUL << CSR_I2C_MST_TWIM_STATUS_RECORD_1_TWI_STATUS_RECORD_1_Pos)/*!< CSR_I2C_MST TWIM_STATUS_RECORD_1: TWI_STATUS_RECORD_1 Mask */

/* ---------------------------  CSR_I2C_MST_TWIM_DEV_A  --------------------------- */
#define CSR_I2C_MST_TWIM_DEV_A_TWI_RX_Pos     0                                                       /*!< CSR_I2C_MST TWIM_DEV_A: TWI_RX Position */
#define CSR_I2C_MST_TWIM_DEV_A_TWI_RX_Msk     (0x01UL << CSR_I2C_MST_TWIM_DEV_A_TWI_RX_Pos)           /*!< CSR_I2C_MST TWIM_DEV_A: TWI_RX Mask     */
#define CSR_I2C_MST_TWIM_DEV_A_TWI_DEV_A10B_Pos 1                                                     /*!< CSR_I2C_MST TWIM_DEV_A: TWI_DEV_A10B Position */
#define CSR_I2C_MST_TWIM_DEV_A_TWI_DEV_A10B_Msk (0x000003ffUL << CSR_I2C_MST_TWIM_DEV_A_TWI_DEV_A10B_Pos)/*!< CSR_I2C_MST TWIM_DEV_A: TWI_DEV_A10B Mask */

/* --------------------------  CSR_I2C_MST_TWIM_TXD_DATA  ------------------------- */
#define CSR_I2C_MST_TWIM_TXD_DATA_TWI_TXD_DATA_Pos 0                                                  /*!< CSR_I2C_MST TWIM_TXD_DATA: TWI_TXD_DATA Position */
#define CSR_I2C_MST_TWIM_TXD_DATA_TWI_TXD_DATA_Msk (0x000000ffUL << CSR_I2C_MST_TWIM_TXD_DATA_TWI_TXD_DATA_Pos)/*!< CSR_I2C_MST TWIM_TXD_DATA: TWI_TXD_DATA Mask */

/* --------------------------  CSR_I2C_MST_TWIM_RXD_DATA  ------------------------- */
#define CSR_I2C_MST_TWIM_RXD_DATA_TWI_RXD_DATA_Pos 0                                                  /*!< CSR_I2C_MST TWIM_RXD_DATA: TWI_RXD_DATA Position */
#define CSR_I2C_MST_TWIM_RXD_DATA_TWI_RXD_DATA_Msk (0x000000ffUL << CSR_I2C_MST_TWIM_RXD_DATA_TWI_RXD_DATA_Pos)/*!< CSR_I2C_MST TWIM_RXD_DATA: TWI_RXD_DATA Mask */

/* ----------------------------  CSR_I2C_MST_TWIM_PSCL  --------------------------- */
#define CSR_I2C_MST_TWIM_PSCL_TWI_PSCL_Pos    0                                                       /*!< CSR_I2C_MST TWIM_PSCL: TWI_PSCL Position */
#define CSR_I2C_MST_TWIM_PSCL_TWI_PSCL_Msk    (0x000003ffUL << CSR_I2C_MST_TWIM_PSCL_TWI_PSCL_Pos)    /*!< CSR_I2C_MST TWIM_PSCL: TWI_PSCL Mask    */
#define CSR_I2C_MST_TWIM_PSCL_TWI_STA_STO_PSCL_Pos 16                                                 /*!< CSR_I2C_MST TWIM_PSCL: TWI_STA_STO_PSCL Position */
#define CSR_I2C_MST_TWIM_PSCL_TWI_STA_STO_PSCL_Msk (0x000003ffUL << CSR_I2C_MST_TWIM_PSCL_TWI_STA_STO_PSCL_Pos)/*!< CSR_I2C_MST TWIM_PSCL: TWI_STA_STO_PSCL Mask */

/* -------------------------  CSR_I2C_MST_TWIM_TRANS_PSDA  ------------------------ */
#define CSR_I2C_MST_TWIM_TRANS_PSDA_TWI_TRANS_PSDA_Pos 0                                              /*!< CSR_I2C_MST TWIM_TRANS_PSDA: TWI_TRANS_PSDA Position */
#define CSR_I2C_MST_TWIM_TRANS_PSDA_TWI_TRANS_PSDA_Msk (0x000003ffUL << CSR_I2C_MST_TWIM_TRANS_PSDA_TWI_TRANS_PSDA_Pos)/*!< CSR_I2C_MST TWIM_TRANS_PSDA: TWI_TRANS_PSDA Mask */

/* -------------------------  CSR_I2C_MST_TWIM_DELAY_ACK  ------------------------- */
#define CSR_I2C_MST_TWIM_DELAY_ACK_TWI_DELAY_ACK_Pos 0                                                /*!< CSR_I2C_MST TWIM_DELAY_ACK: TWI_DELAY_ACK Position */
#define CSR_I2C_MST_TWIM_DELAY_ACK_TWI_DELAY_ACK_Msk (0x000003ffUL << CSR_I2C_MST_TWIM_DELAY_ACK_TWI_DELAY_ACK_Pos)/*!< CSR_I2C_MST TWIM_DELAY_ACK: TWI_DELAY_ACK Mask */

/* -----------------------------  CSR_I2C_MST_I2CM_EN  ---------------------------- */
#define CSR_I2C_MST_I2CM_EN_I2CM_INT_WDONE_Pos 0                                                      /*!< CSR_I2C_MST I2CM_EN: I2CM_INT_WDONE Position */
#define CSR_I2C_MST_I2CM_EN_I2CM_INT_WDONE_Msk (0x01UL << CSR_I2C_MST_I2CM_EN_I2CM_INT_WDONE_Pos)     /*!< CSR_I2C_MST I2CM_EN: I2CM_INT_WDONE Mask */
#define CSR_I2C_MST_I2CM_EN_I2CM_INT_RDONE_Pos 1                                                      /*!< CSR_I2C_MST I2CM_EN: I2CM_INT_RDONE Position */
#define CSR_I2C_MST_I2CM_EN_I2CM_INT_RDONE_Msk (0x01UL << CSR_I2C_MST_I2CM_EN_I2CM_INT_RDONE_Pos)     /*!< CSR_I2C_MST I2CM_EN: I2CM_INT_RDONE Mask */
#define CSR_I2C_MST_I2CM_EN_I2CM_IDLE_Pos     2                                                       /*!< CSR_I2C_MST I2CM_EN: I2CM_IDLE Position */
#define CSR_I2C_MST_I2CM_EN_I2CM_IDLE_Msk     (0x01UL << CSR_I2C_MST_I2CM_EN_I2CM_IDLE_Pos)           /*!< CSR_I2C_MST I2CM_EN: I2CM_IDLE Mask     */
#define CSR_I2C_MST_I2CM_EN_I2CM_INT_MISMATCH_Pos 3                                                   /*!< CSR_I2C_MST I2CM_EN: I2CM_INT_MISMATCH Position */
#define CSR_I2C_MST_I2CM_EN_I2CM_INT_MISMATCH_Msk (0x01UL << CSR_I2C_MST_I2CM_EN_I2CM_INT_MISMATCH_Pos)/*!< CSR_I2C_MST I2CM_EN: I2CM_INT_MISMATCH Mask */
#define CSR_I2C_MST_I2CM_EN_I2CM_PSCL_Pos     4                                                       /*!< CSR_I2C_MST I2CM_EN: I2CM_PSCL Position */
#define CSR_I2C_MST_I2CM_EN_I2CM_PSCL_Msk     (0x000003ffUL << CSR_I2C_MST_I2CM_EN_I2CM_PSCL_Pos)     /*!< CSR_I2C_MST I2CM_EN: I2CM_PSCL Mask     */
#define CSR_I2C_MST_I2CM_EN_I2CM_MANUAL_MODE_Pos 16                                                   /*!< CSR_I2C_MST I2CM_EN: I2CM_MANUAL_MODE Position */
#define CSR_I2C_MST_I2CM_EN_I2CM_MANUAL_MODE_Msk (0x01UL << CSR_I2C_MST_I2CM_EN_I2CM_MANUAL_MODE_Pos) /*!< CSR_I2C_MST I2CM_EN: I2CM_MANUAL_MODE Mask */
#define CSR_I2C_MST_I2CM_EN_I2CM_INT_WDATA_NEED_Pos 17                                                /*!< CSR_I2C_MST I2CM_EN: I2CM_INT_WDATA_NEED Position */
#define CSR_I2C_MST_I2CM_EN_I2CM_INT_WDATA_NEED_Msk (0x01UL << CSR_I2C_MST_I2CM_EN_I2CM_INT_WDATA_NEED_Pos)/*!< CSR_I2C_MST I2CM_EN: I2CM_INT_WDATA_NEED Mask */
#define CSR_I2C_MST_I2CM_EN_I2CM_INT_RDATA_NEED_Pos 18                                                /*!< CSR_I2C_MST I2CM_EN: I2CM_INT_RDATA_NEED Position */
#define CSR_I2C_MST_I2CM_EN_I2CM_INT_RDATA_NEED_Msk (0x01UL << CSR_I2C_MST_I2CM_EN_I2CM_INT_RDATA_NEED_Pos)/*!< CSR_I2C_MST I2CM_EN: I2CM_INT_RDATA_NEED Mask */

/* ---------------------------  CSR_I2C_MST_I2CM_DEV_A  --------------------------- */
#define CSR_I2C_MST_I2CM_DEV_A_I2CM_DEV_A_Pos 0                                                       /*!< CSR_I2C_MST I2CM_DEV_A: I2CM_DEV_A Position */
#define CSR_I2C_MST_I2CM_DEV_A_I2CM_DEV_A_Msk (0x000003ffUL << CSR_I2C_MST_I2CM_DEV_A_I2CM_DEV_A_Pos) /*!< CSR_I2C_MST I2CM_DEV_A: I2CM_DEV_A Mask */
#define CSR_I2C_MST_I2CM_DEV_A_I2CM_DEV_A10B_Pos 14                                                   /*!< CSR_I2C_MST I2CM_DEV_A: I2CM_DEV_A10B Position */
#define CSR_I2C_MST_I2CM_DEV_A_I2CM_DEV_A10B_Msk (0x01UL << CSR_I2C_MST_I2CM_DEV_A_I2CM_DEV_A10B_Pos) /*!< CSR_I2C_MST I2CM_DEV_A: I2CM_DEV_A10B Mask */
#define CSR_I2C_MST_I2CM_DEV_A_I2CM_RX_Pos    15                                                      /*!< CSR_I2C_MST I2CM_DEV_A: I2CM_RX Position */
#define CSR_I2C_MST_I2CM_DEV_A_I2CM_RX_Msk    (0x01UL << CSR_I2C_MST_I2CM_DEV_A_I2CM_RX_Pos)          /*!< CSR_I2C_MST I2CM_DEV_A: I2CM_RX Mask    */

/* ----------------------------  CSR_I2C_MST_I2CM_LEN  ---------------------------- */
#define CSR_I2C_MST_I2CM_LEN_I2CM_LEN_Pos     0                                                       /*!< CSR_I2C_MST I2CM_LEN: I2CM_LEN Position */
#define CSR_I2C_MST_I2CM_LEN_I2CM_LEN_Msk     (0x0000ffffUL << CSR_I2C_MST_I2CM_LEN_I2CM_LEN_Pos)     /*!< CSR_I2C_MST I2CM_LEN: I2CM_LEN Mask     */
#define CSR_I2C_MST_I2CM_LEN_I2CM_T_LEFT_Pos  16                                                      /*!< CSR_I2C_MST I2CM_LEN: I2CM_T_LEFT Position */
#define CSR_I2C_MST_I2CM_LEN_I2CM_T_LEFT_Msk  (0x07UL << CSR_I2C_MST_I2CM_LEN_I2CM_T_LEFT_Pos)        /*!< CSR_I2C_MST I2CM_LEN: I2CM_T_LEFT Mask  */
#define CSR_I2C_MST_I2CM_LEN_I2CM_R_GET_Pos   24                                                      /*!< CSR_I2C_MST I2CM_LEN: I2CM_R_GET Position */
#define CSR_I2C_MST_I2CM_LEN_I2CM_R_GET_Msk   (0x07UL << CSR_I2C_MST_I2CM_LEN_I2CM_R_GET_Pos)         /*!< CSR_I2C_MST I2CM_LEN: I2CM_R_GET Mask   */

/* ----------------------------  CSR_I2C_MST_I2CM_WDAT  --------------------------- */
#define CSR_I2C_MST_I2CM_WDAT_I2CM_WDAT_Pos   0                                                       /*!< CSR_I2C_MST I2CM_WDAT: I2CM_WDAT Position */
#define CSR_I2C_MST_I2CM_WDAT_I2CM_WDAT_Msk   (0xffffffffUL << CSR_I2C_MST_I2CM_WDAT_I2CM_WDAT_Pos)   /*!< CSR_I2C_MST I2CM_WDAT: I2CM_WDAT Mask   */

/* ----------------------------  CSR_I2C_MST_I2CM_RDAT  --------------------------- */
#define CSR_I2C_MST_I2CM_RDAT_I2CM_RDAT_Pos   0                                                       /*!< CSR_I2C_MST I2CM_RDAT: I2CM_RDAT Position */
#define CSR_I2C_MST_I2CM_RDAT_I2CM_RDAT_Msk   (0xffffffffUL << CSR_I2C_MST_I2CM_RDAT_I2CM_RDAT_Pos)   /*!< CSR_I2C_MST I2CM_RDAT: I2CM_RDAT Mask   */

/* ----------------------------  CSR_I2C_MST_I2CM_EN_2  --------------------------- */
#define CSR_I2C_MST_I2CM_EN_2_I2CM_SR_LEN_Pos 0                                                       /*!< CSR_I2C_MST I2CM_EN_2: I2CM_SR_LEN Position */
#define CSR_I2C_MST_I2CM_EN_2_I2CM_SR_LEN_Msk (0x0000ffffUL << CSR_I2C_MST_I2CM_EN_2_I2CM_SR_LEN_Pos) /*!< CSR_I2C_MST I2CM_EN_2: I2CM_SR_LEN Mask */
#define CSR_I2C_MST_I2CM_EN_2_I2CM_SR_RX_Pos  16                                                      /*!< CSR_I2C_MST I2CM_EN_2: I2CM_SR_RX Position */
#define CSR_I2C_MST_I2CM_EN_2_I2CM_SR_RX_Msk  (0x01UL << CSR_I2C_MST_I2CM_EN_2_I2CM_SR_RX_Pos)        /*!< CSR_I2C_MST I2CM_EN_2: I2CM_SR_RX Mask  */
#define CSR_I2C_MST_I2CM_EN_2_I2CM_REPEAT_START_Pos 17                                                /*!< CSR_I2C_MST I2CM_EN_2: I2CM_REPEAT_START Position */
#define CSR_I2C_MST_I2CM_EN_2_I2CM_REPEAT_START_Msk (0x01UL << CSR_I2C_MST_I2CM_EN_2_I2CM_REPEAT_START_Pos)/*!< CSR_I2C_MST I2CM_EN_2: I2CM_REPEAT_START Mask */

/* ---------------------  CSR_I2C_MST_I2CM_START_STOP_PERIOD  --------------------- */
#define CSR_I2C_MST_I2CM_START_STOP_PERIOD_I2CM_STA_STO_PSCL_Pos 0                                    /*!< CSR_I2C_MST I2CM_START_STOP_PERIOD: I2CM_STA_STO_PSCL Position */
#define CSR_I2C_MST_I2CM_START_STOP_PERIOD_I2CM_STA_STO_PSCL_Msk (0x000003ffUL << CSR_I2C_MST_I2CM_START_STOP_PERIOD_I2CM_STA_STO_PSCL_Pos)/*!< CSR_I2C_MST I2CM_START_STOP_PERIOD: I2CM_STA_STO_PSCL Mask */


/* ================================================================================ */
/* ================      struct 'CSR_I2C_SLV' Position & Mask      ================ */
/* ================================================================================ */


/* --------------------------  CSR_I2C_SLV_I2CS_ID_ADDR  -------------------------- */
#define CSR_I2C_SLV_I2CS_ID_ADDR_I2CS_ADDR_DC_Pos 0                                                   /*!< CSR_I2C_SLV I2CS_ID_ADDR: I2CS_ADDR_DC Position */
#define CSR_I2C_SLV_I2CS_ID_ADDR_I2CS_ADDR_DC_Msk (0x01UL << CSR_I2C_SLV_I2CS_ID_ADDR_I2CS_ADDR_DC_Pos)/*!< CSR_I2C_SLV I2CS_ID_ADDR: I2CS_ADDR_DC Mask */
#define CSR_I2C_SLV_I2CS_ID_ADDR_I2CS_ADDR_Pos 1                                                      /*!< CSR_I2C_SLV I2CS_ID_ADDR: I2CS_ADDR Position */
#define CSR_I2C_SLV_I2CS_ID_ADDR_I2CS_ADDR_Msk (0x7fUL << CSR_I2C_SLV_I2CS_ID_ADDR_I2CS_ADDR_Pos)     /*!< CSR_I2C_SLV I2CS_ID_ADDR: I2CS_ADDR Mask */
#define CSR_I2C_SLV_I2CS_ID_ADDR_I2CS_ADDR_RESET_Pos 9                                                /*!< CSR_I2C_SLV I2CS_ID_ADDR: I2CS_ADDR_RESET Position */
#define CSR_I2C_SLV_I2CS_ID_ADDR_I2CS_ADDR_RESET_Msk (0x7fUL << CSR_I2C_SLV_I2CS_ID_ADDR_I2CS_ADDR_RESET_Pos)/*!< CSR_I2C_SLV I2CS_ID_ADDR: I2CS_ADDR_RESET Mask */
#define CSR_I2C_SLV_I2CS_ID_ADDR_I2CS_ADDR_WAKEUP_Pos 17                                              /*!< CSR_I2C_SLV I2CS_ID_ADDR: I2CS_ADDR_WAKEUP Position */
#define CSR_I2C_SLV_I2CS_ID_ADDR_I2CS_ADDR_WAKEUP_Msk (0x7fUL << CSR_I2C_SLV_I2CS_ID_ADDR_I2CS_ADDR_WAKEUP_Pos)/*!< CSR_I2C_SLV I2CS_ID_ADDR: I2CS_ADDR_WAKEUP Mask */
#define CSR_I2C_SLV_I2CS_ID_ADDR_I2CS_ADDR_NONCLK_Pos 25                                              /*!< CSR_I2C_SLV I2CS_ID_ADDR: I2CS_ADDR_NONCLK Position */
#define CSR_I2C_SLV_I2CS_ID_ADDR_I2CS_ADDR_NONCLK_Msk (0x7fUL << CSR_I2C_SLV_I2CS_ID_ADDR_I2CS_ADDR_NONCLK_Pos)/*!< CSR_I2C_SLV I2CS_ID_ADDR: I2CS_ADDR_NONCLK Mask */

/* ---------------------------  CSR_I2C_SLV_I2CS_STATUS  -------------------------- */
#define CSR_I2C_SLV_I2CS_STATUS_I2CS_INT_Pos  0                                                       /*!< CSR_I2C_SLV I2CS_STATUS: I2CS_INT Position */
#define CSR_I2C_SLV_I2CS_STATUS_I2CS_INT_Msk  (0x1fUL << CSR_I2C_SLV_I2CS_STATUS_I2CS_INT_Pos)        /*!< CSR_I2C_SLV I2CS_STATUS: I2CS_INT Mask  */
#define CSR_I2C_SLV_I2CS_STATUS_I2CS_IDLE_Pos 10                                                      /*!< CSR_I2C_SLV I2CS_STATUS: I2CS_IDLE Position */
#define CSR_I2C_SLV_I2CS_STATUS_I2CS_IDLE_Msk (0x01UL << CSR_I2C_SLV_I2CS_STATUS_I2CS_IDLE_Pos)       /*!< CSR_I2C_SLV I2CS_STATUS: I2CS_IDLE Mask */

/* --------------------------  CSR_I2C_SLV_I2CS_TIME_CNT  ------------------------- */
#define CSR_I2C_SLV_I2CS_TIME_CNT_I2CS_TIME_OUT_CNT_Pos 0                                             /*!< CSR_I2C_SLV I2CS_TIME_CNT: I2CS_TIME_OUT_CNT Position */
#define CSR_I2C_SLV_I2CS_TIME_CNT_I2CS_TIME_OUT_CNT_Msk (0x0000ffffUL << CSR_I2C_SLV_I2CS_TIME_CNT_I2CS_TIME_OUT_CNT_Pos)/*!< CSR_I2C_SLV I2CS_TIME_CNT: I2CS_TIME_OUT_CNT Mask */

/* ---------------------------  CSR_I2C_SLV_I2CS_STATE  --------------------------- */
#define CSR_I2C_SLV_I2CS_STATE_I2CS_STATE_Pos 0                                                       /*!< CSR_I2C_SLV I2CS_STATE: I2CS_STATE Position */
#define CSR_I2C_SLV_I2CS_STATE_I2CS_STATE_Msk (0x000000ffUL << CSR_I2C_SLV_I2CS_STATE_I2CS_STATE_Pos) /*!< CSR_I2C_SLV I2CS_STATE: I2CS_STATE Mask */

/* ----------------------------  CSR_I2C_SLV_I2CS_CTRL  --------------------------- */
#define CSR_I2C_SLV_I2CS_CTRL_I2CS_DATA_CONFIG_Pos 0                                                  /*!< CSR_I2C_SLV I2CS_CTRL: I2CS_DATA_CONFIG Position */
#define CSR_I2C_SLV_I2CS_CTRL_I2CS_DATA_CONFIG_Msk (0x01UL << CSR_I2C_SLV_I2CS_CTRL_I2CS_DATA_CONFIG_Pos)/*!< CSR_I2C_SLV I2CS_CTRL: I2CS_DATA_CONFIG Mask */
#define CSR_I2C_SLV_I2CS_CTRL_I2CS_HOLD_BUS_EN_Pos 1                                                  /*!< CSR_I2C_SLV I2CS_CTRL: I2CS_HOLD_BUS_EN Position */
#define CSR_I2C_SLV_I2CS_CTRL_I2CS_HOLD_BUS_EN_Msk (0x01UL << CSR_I2C_SLV_I2CS_CTRL_I2CS_HOLD_BUS_EN_Pos)/*!< CSR_I2C_SLV I2CS_CTRL: I2CS_HOLD_BUS_EN Mask */


/* ================================================================================ */
/* ================      struct 'DBG_UART_REG' Position & Mask     ================ */
/* ================================================================================ */


/* -------------------------  DBG_UART_REG_DBG_UART_DATA  ------------------------- */
#define DBG_UART_REG_DBG_UART_DATA_DBG_UART_DATA_Pos 0                                                /*!< DBG_UART_REG DBG_UART_DATA: DBG_UART_DATA Position */
#define DBG_UART_REG_DBG_UART_DATA_DBG_UART_DATA_Msk (0x000000ffUL << DBG_UART_REG_DBG_UART_DATA_DBG_UART_DATA_Pos)/*!< DBG_UART_REG DBG_UART_DATA: DBG_UART_DATA Mask */

/* --------------------------  DBG_UART_REG_DBG_UART_IER  ------------------------- */
#define DBG_UART_REG_DBG_UART_IER_DBG_DATA_RDY_IE_Pos 0                                               /*!< DBG_UART_REG DBG_UART_IER: DBG_DATA_RDY_IE Position */
#define DBG_UART_REG_DBG_UART_IER_DBG_DATA_RDY_IE_Msk (0x01UL << DBG_UART_REG_DBG_UART_IER_DBG_DATA_RDY_IE_Pos)/*!< DBG_UART_REG DBG_UART_IER: DBG_DATA_RDY_IE Mask */
#define DBG_UART_REG_DBG_UART_IER_DBG_THR_EMPTY_IE_Pos 1                                              /*!< DBG_UART_REG DBG_UART_IER: DBG_THR_EMPTY_IE Position */
#define DBG_UART_REG_DBG_UART_IER_DBG_THR_EMPTY_IE_Msk (0x01UL << DBG_UART_REG_DBG_UART_IER_DBG_THR_EMPTY_IE_Pos)/*!< DBG_UART_REG DBG_UART_IER: DBG_THR_EMPTY_IE Mask */
#define DBG_UART_REG_DBG_UART_IER_DBG_RX_LINESTS_IE_Pos 2                                             /*!< DBG_UART_REG DBG_UART_IER: DBG_RX_LINESTS_IE Position */
#define DBG_UART_REG_DBG_UART_IER_DBG_RX_LINESTS_IE_Msk (0x01UL << DBG_UART_REG_DBG_UART_IER_DBG_RX_LINESTS_IE_Pos)/*!< DBG_UART_REG DBG_UART_IER: DBG_RX_LINESTS_IE Mask */
#define DBG_UART_REG_DBG_UART_IER_DBG_MDM_STS_IE_Pos 3                                                /*!< DBG_UART_REG DBG_UART_IER: DBG_MDM_STS_IE Position */
#define DBG_UART_REG_DBG_UART_IER_DBG_MDM_STS_IE_Msk (0x01UL << DBG_UART_REG_DBG_UART_IER_DBG_MDM_STS_IE_Pos)/*!< DBG_UART_REG DBG_UART_IER: DBG_MDM_STS_IE Mask */
#define DBG_UART_REG_DBG_UART_IER_DBG_TX_THRH_IE_Pos 4                                                /*!< DBG_UART_REG DBG_UART_IER: DBG_TX_THRH_IE Position */
#define DBG_UART_REG_DBG_UART_IER_DBG_TX_THRH_IE_Msk (0x01UL << DBG_UART_REG_DBG_UART_IER_DBG_TX_THRH_IE_Pos)/*!< DBG_UART_REG DBG_UART_IER: DBG_TX_THRH_IE Mask */
#define DBG_UART_REG_DBG_UART_IER_DBG_TX_THRL_IE_Pos 5                                                /*!< DBG_UART_REG DBG_UART_IER: DBG_TX_THRL_IE Position */
#define DBG_UART_REG_DBG_UART_IER_DBG_TX_THRL_IE_Msk (0x01UL << DBG_UART_REG_DBG_UART_IER_DBG_TX_THRL_IE_Pos)/*!< DBG_UART_REG DBG_UART_IER: DBG_TX_THRL_IE Mask */

/* --------------------------  DBG_UART_REG_DBG_UART_FCR  ------------------------- */
#define DBG_UART_REG_DBG_UART_FCR_DBG_FIFO_EN_Pos 0                                                   /*!< DBG_UART_REG DBG_UART_FCR: DBG_FIFO_EN Position */
#define DBG_UART_REG_DBG_UART_FCR_DBG_FIFO_EN_Msk (0x01UL << DBG_UART_REG_DBG_UART_FCR_DBG_FIFO_EN_Pos)/*!< DBG_UART_REG DBG_UART_FCR: DBG_FIFO_EN Mask */
#define DBG_UART_REG_DBG_UART_FCR_DBG_RXFIFO_RST_Pos 1                                                /*!< DBG_UART_REG DBG_UART_FCR: DBG_RXFIFO_RST Position */
#define DBG_UART_REG_DBG_UART_FCR_DBG_RXFIFO_RST_Msk (0x01UL << DBG_UART_REG_DBG_UART_FCR_DBG_RXFIFO_RST_Pos)/*!< DBG_UART_REG DBG_UART_FCR: DBG_RXFIFO_RST Mask */
#define DBG_UART_REG_DBG_UART_FCR_DBG_TXFIFO_RST_Pos 2                                                /*!< DBG_UART_REG DBG_UART_FCR: DBG_TXFIFO_RST Position */
#define DBG_UART_REG_DBG_UART_FCR_DBG_TXFIFO_RST_Msk (0x01UL << DBG_UART_REG_DBG_UART_FCR_DBG_TXFIFO_RST_Pos)/*!< DBG_UART_REG DBG_UART_FCR: DBG_TXFIFO_RST Mask */
#define DBG_UART_REG_DBG_UART_FCR_DBG_DMA_MODE_Pos 3                                                  /*!< DBG_UART_REG DBG_UART_FCR: DBG_DMA_MODE Position */
#define DBG_UART_REG_DBG_UART_FCR_DBG_DMA_MODE_Msk (0x01UL << DBG_UART_REG_DBG_UART_FCR_DBG_DMA_MODE_Pos)/*!< DBG_UART_REG DBG_UART_FCR: DBG_DMA_MODE Mask */
#define DBG_UART_REG_DBG_UART_FCR_DBG_EN_AUTO_RTS_Pos 4                                               /*!< DBG_UART_REG DBG_UART_FCR: DBG_EN_AUTO_RTS Position */
#define DBG_UART_REG_DBG_UART_FCR_DBG_EN_AUTO_RTS_Msk (0x01UL << DBG_UART_REG_DBG_UART_FCR_DBG_EN_AUTO_RTS_Pos)/*!< DBG_UART_REG DBG_UART_FCR: DBG_EN_AUTO_RTS Mask */
#define DBG_UART_REG_DBG_UART_FCR_DBG_EN_AUTO_CTS_Pos 5                                               /*!< DBG_UART_REG DBG_UART_FCR: DBG_EN_AUTO_CTS Position */
#define DBG_UART_REG_DBG_UART_FCR_DBG_EN_AUTO_CTS_Msk (0x01UL << DBG_UART_REG_DBG_UART_FCR_DBG_EN_AUTO_CTS_Pos)/*!< DBG_UART_REG DBG_UART_FCR: DBG_EN_AUTO_CTS Mask */
#define DBG_UART_REG_DBG_UART_FCR_DBG_RXFIFO_TRGLVL_Pos 6                                             /*!< DBG_UART_REG DBG_UART_FCR: DBG_RXFIFO_TRGLVL Position */
#define DBG_UART_REG_DBG_UART_FCR_DBG_RXFIFO_TRGLVL_Msk (0x03UL << DBG_UART_REG_DBG_UART_FCR_DBG_RXFIFO_TRGLVL_Pos)/*!< DBG_UART_REG DBG_UART_FCR: DBG_RXFIFO_TRGLVL Mask */

/* --------------------------  DBG_UART_REG_DBG_UART_LCR  ------------------------- */
#define DBG_UART_REG_DBG_UART_LCR_DBG_WORD_LEN_Pos 0                                                  /*!< DBG_UART_REG DBG_UART_LCR: DBG_WORD_LEN Position */
#define DBG_UART_REG_DBG_UART_LCR_DBG_WORD_LEN_Msk (0x03UL << DBG_UART_REG_DBG_UART_LCR_DBG_WORD_LEN_Pos)/*!< DBG_UART_REG DBG_UART_LCR: DBG_WORD_LEN Mask */
#define DBG_UART_REG_DBG_UART_LCR_DBG_STOP_BIT_Pos 2                                                  /*!< DBG_UART_REG DBG_UART_LCR: DBG_STOP_BIT Position */
#define DBG_UART_REG_DBG_UART_LCR_DBG_STOP_BIT_Msk (0x01UL << DBG_UART_REG_DBG_UART_LCR_DBG_STOP_BIT_Pos)/*!< DBG_UART_REG DBG_UART_LCR: DBG_STOP_BIT Mask */
#define DBG_UART_REG_DBG_UART_LCR_DBG_PARITY_EN_Pos 3                                                 /*!< DBG_UART_REG DBG_UART_LCR: DBG_PARITY_EN Position */
#define DBG_UART_REG_DBG_UART_LCR_DBG_PARITY_EN_Msk (0x01UL << DBG_UART_REG_DBG_UART_LCR_DBG_PARITY_EN_Pos)/*!< DBG_UART_REG DBG_UART_LCR: DBG_PARITY_EN Mask */
#define DBG_UART_REG_DBG_UART_LCR_DBG_EVEN_PARITY_Pos 4                                               /*!< DBG_UART_REG DBG_UART_LCR: DBG_EVEN_PARITY Position */
#define DBG_UART_REG_DBG_UART_LCR_DBG_EVEN_PARITY_Msk (0x01UL << DBG_UART_REG_DBG_UART_LCR_DBG_EVEN_PARITY_Pos)/*!< DBG_UART_REG DBG_UART_LCR: DBG_EVEN_PARITY Mask */
#define DBG_UART_REG_DBG_UART_LCR_DBG_FORCE_PARITY_Pos 5                                              /*!< DBG_UART_REG DBG_UART_LCR: DBG_FORCE_PARITY Position */
#define DBG_UART_REG_DBG_UART_LCR_DBG_FORCE_PARITY_Msk (0x01UL << DBG_UART_REG_DBG_UART_LCR_DBG_FORCE_PARITY_Pos)/*!< DBG_UART_REG DBG_UART_LCR: DBG_FORCE_PARITY Mask */
#define DBG_UART_REG_DBG_UART_LCR_DBG_SET_BREAK_Pos 6                                                 /*!< DBG_UART_REG DBG_UART_LCR: DBG_SET_BREAK Position */
#define DBG_UART_REG_DBG_UART_LCR_DBG_SET_BREAK_Msk (0x01UL << DBG_UART_REG_DBG_UART_LCR_DBG_SET_BREAK_Pos)/*!< DBG_UART_REG DBG_UART_LCR: DBG_SET_BREAK Mask */
#define DBG_UART_REG_DBG_UART_LCR_DBG_DLAB_Pos 7                                                      /*!< DBG_UART_REG DBG_UART_LCR: DBG_DLAB Position */
#define DBG_UART_REG_DBG_UART_LCR_DBG_DLAB_Msk (0x01UL << DBG_UART_REG_DBG_UART_LCR_DBG_DLAB_Pos)     /*!< DBG_UART_REG DBG_UART_LCR: DBG_DLAB Mask */

/* --------------------------  DBG_UART_REG_DBG_UART_MCR  ------------------------- */
#define DBG_UART_REG_DBG_UART_MCR_DBG_DTR_Pos 0                                                       /*!< DBG_UART_REG DBG_UART_MCR: DBG_DTR Position */
#define DBG_UART_REG_DBG_UART_MCR_DBG_DTR_Msk (0x01UL << DBG_UART_REG_DBG_UART_MCR_DBG_DTR_Pos)       /*!< DBG_UART_REG DBG_UART_MCR: DBG_DTR Mask */
#define DBG_UART_REG_DBG_UART_MCR_DBG_RTS_Pos 1                                                       /*!< DBG_UART_REG DBG_UART_MCR: DBG_RTS Position */
#define DBG_UART_REG_DBG_UART_MCR_DBG_RTS_Msk (0x01UL << DBG_UART_REG_DBG_UART_MCR_DBG_RTS_Pos)       /*!< DBG_UART_REG DBG_UART_MCR: DBG_RTS Mask */
#define DBG_UART_REG_DBG_UART_MCR_DBG_OUT_1_Pos 2                                                     /*!< DBG_UART_REG DBG_UART_MCR: DBG_OUT_1 Position */
#define DBG_UART_REG_DBG_UART_MCR_DBG_OUT_1_Msk (0x01UL << DBG_UART_REG_DBG_UART_MCR_DBG_OUT_1_Pos)   /*!< DBG_UART_REG DBG_UART_MCR: DBG_OUT_1 Mask */
#define DBG_UART_REG_DBG_UART_MCR_DBG_OUT_2_Pos 3                                                     /*!< DBG_UART_REG DBG_UART_MCR: DBG_OUT_2 Position */
#define DBG_UART_REG_DBG_UART_MCR_DBG_OUT_2_Msk (0x01UL << DBG_UART_REG_DBG_UART_MCR_DBG_OUT_2_Pos)   /*!< DBG_UART_REG DBG_UART_MCR: DBG_OUT_2 Mask */
#define DBG_UART_REG_DBG_UART_MCR_DBG_LOOP_BACK_Pos 4                                                 /*!< DBG_UART_REG DBG_UART_MCR: DBG_LOOP_BACK Position */
#define DBG_UART_REG_DBG_UART_MCR_DBG_LOOP_BACK_Msk (0x01UL << DBG_UART_REG_DBG_UART_MCR_DBG_LOOP_BACK_Pos)/*!< DBG_UART_REG DBG_UART_MCR: DBG_LOOP_BACK Mask */
#define DBG_UART_REG_DBG_UART_MCR_DBG_DE_RTS_Pos 5                                                    /*!< DBG_UART_REG DBG_UART_MCR: DBG_DE_RTS Position */
#define DBG_UART_REG_DBG_UART_MCR_DBG_DE_RTS_Msk (0x01UL << DBG_UART_REG_DBG_UART_MCR_DBG_DE_RTS_Pos) /*!< DBG_UART_REG DBG_UART_MCR: DBG_DE_RTS Mask */

/* --------------------------  DBG_UART_REG_DBG_UART_LSR  ------------------------- */
#define DBG_UART_REG_DBG_UART_LSR_DBG_DATA_RDY_Pos 0                                                  /*!< DBG_UART_REG DBG_UART_LSR: DBG_DATA_RDY Position */
#define DBG_UART_REG_DBG_UART_LSR_DBG_DATA_RDY_Msk (0x01UL << DBG_UART_REG_DBG_UART_LSR_DBG_DATA_RDY_Pos)/*!< DBG_UART_REG DBG_UART_LSR: DBG_DATA_RDY Mask */
#define DBG_UART_REG_DBG_UART_LSR_DBG_OVERRUN_ERR_Pos 1                                               /*!< DBG_UART_REG DBG_UART_LSR: DBG_OVERRUN_ERR Position */
#define DBG_UART_REG_DBG_UART_LSR_DBG_OVERRUN_ERR_Msk (0x01UL << DBG_UART_REG_DBG_UART_LSR_DBG_OVERRUN_ERR_Pos)/*!< DBG_UART_REG DBG_UART_LSR: DBG_OVERRUN_ERR Mask */
#define DBG_UART_REG_DBG_UART_LSR_DBG_PARITY_ERR_Pos 2                                                /*!< DBG_UART_REG DBG_UART_LSR: DBG_PARITY_ERR Position */
#define DBG_UART_REG_DBG_UART_LSR_DBG_PARITY_ERR_Msk (0x01UL << DBG_UART_REG_DBG_UART_LSR_DBG_PARITY_ERR_Pos)/*!< DBG_UART_REG DBG_UART_LSR: DBG_PARITY_ERR Mask */
#define DBG_UART_REG_DBG_UART_LSR_DBG_FRAMING_ERR_Pos 3                                               /*!< DBG_UART_REG DBG_UART_LSR: DBG_FRAMING_ERR Position */
#define DBG_UART_REG_DBG_UART_LSR_DBG_FRAMING_ERR_Msk (0x01UL << DBG_UART_REG_DBG_UART_LSR_DBG_FRAMING_ERR_Pos)/*!< DBG_UART_REG DBG_UART_LSR: DBG_FRAMING_ERR Mask */
#define DBG_UART_REG_DBG_UART_LSR_DBG_BREAK_INT_Pos 4                                                 /*!< DBG_UART_REG DBG_UART_LSR: DBG_BREAK_INT Position */
#define DBG_UART_REG_DBG_UART_LSR_DBG_BREAK_INT_Msk (0x01UL << DBG_UART_REG_DBG_UART_LSR_DBG_BREAK_INT_Pos)/*!< DBG_UART_REG DBG_UART_LSR: DBG_BREAK_INT Mask */
#define DBG_UART_REG_DBG_UART_LSR_DBG_THR_EMPTY_Pos 5                                                 /*!< DBG_UART_REG DBG_UART_LSR: DBG_THR_EMPTY Position */
#define DBG_UART_REG_DBG_UART_LSR_DBG_THR_EMPTY_Msk (0x01UL << DBG_UART_REG_DBG_UART_LSR_DBG_THR_EMPTY_Pos)/*!< DBG_UART_REG DBG_UART_LSR: DBG_THR_EMPTY Mask */
#define DBG_UART_REG_DBG_UART_LSR_DBG_TX_EMPTY_Pos 6                                                  /*!< DBG_UART_REG DBG_UART_LSR: DBG_TX_EMPTY Position */
#define DBG_UART_REG_DBG_UART_LSR_DBG_TX_EMPTY_Msk (0x01UL << DBG_UART_REG_DBG_UART_LSR_DBG_TX_EMPTY_Pos)/*!< DBG_UART_REG DBG_UART_LSR: DBG_TX_EMPTY Mask */
#define DBG_UART_REG_DBG_UART_LSR_DBG_FIFODATA_ERR_Pos 7                                              /*!< DBG_UART_REG DBG_UART_LSR: DBG_FIFODATA_ERR Position */
#define DBG_UART_REG_DBG_UART_LSR_DBG_FIFODATA_ERR_Msk (0x01UL << DBG_UART_REG_DBG_UART_LSR_DBG_FIFODATA_ERR_Pos)/*!< DBG_UART_REG DBG_UART_LSR: DBG_FIFODATA_ERR Mask */

/* --------------------------  DBG_UART_REG_DBG_UART_MSR  ------------------------- */
#define DBG_UART_REG_DBG_UART_MSR_DBG_DELTA_CTS_Pos 0                                                 /*!< DBG_UART_REG DBG_UART_MSR: DBG_DELTA_CTS Position */
#define DBG_UART_REG_DBG_UART_MSR_DBG_DELTA_CTS_Msk (0x01UL << DBG_UART_REG_DBG_UART_MSR_DBG_DELTA_CTS_Pos)/*!< DBG_UART_REG DBG_UART_MSR: DBG_DELTA_CTS Mask */
#define DBG_UART_REG_DBG_UART_MSR_DBG_DELTA_DSR_Pos 1                                                 /*!< DBG_UART_REG DBG_UART_MSR: DBG_DELTA_DSR Position */
#define DBG_UART_REG_DBG_UART_MSR_DBG_DELTA_DSR_Msk (0x01UL << DBG_UART_REG_DBG_UART_MSR_DBG_DELTA_DSR_Pos)/*!< DBG_UART_REG DBG_UART_MSR: DBG_DELTA_DSR Mask */
#define DBG_UART_REG_DBG_UART_MSR_DBG_TRAILEDGE_RI_Pos 2                                              /*!< DBG_UART_REG DBG_UART_MSR: DBG_TRAILEDGE_RI Position */
#define DBG_UART_REG_DBG_UART_MSR_DBG_TRAILEDGE_RI_Msk (0x01UL << DBG_UART_REG_DBG_UART_MSR_DBG_TRAILEDGE_RI_Pos)/*!< DBG_UART_REG DBG_UART_MSR: DBG_TRAILEDGE_RI Mask */
#define DBG_UART_REG_DBG_UART_MSR_DBG_DELTA_CD_Pos 3                                                  /*!< DBG_UART_REG DBG_UART_MSR: DBG_DELTA_CD Position */
#define DBG_UART_REG_DBG_UART_MSR_DBG_DELTA_CD_Msk (0x01UL << DBG_UART_REG_DBG_UART_MSR_DBG_DELTA_CD_Pos)/*!< DBG_UART_REG DBG_UART_MSR: DBG_DELTA_CD Mask */
#define DBG_UART_REG_DBG_UART_MSR_DBG_CTS_Pos 4                                                       /*!< DBG_UART_REG DBG_UART_MSR: DBG_CTS Position */
#define DBG_UART_REG_DBG_UART_MSR_DBG_CTS_Msk (0x01UL << DBG_UART_REG_DBG_UART_MSR_DBG_CTS_Pos)       /*!< DBG_UART_REG DBG_UART_MSR: DBG_CTS Mask */
#define DBG_UART_REG_DBG_UART_MSR_DBG_DSR_Pos 5                                                       /*!< DBG_UART_REG DBG_UART_MSR: DBG_DSR Position */
#define DBG_UART_REG_DBG_UART_MSR_DBG_DSR_Msk (0x01UL << DBG_UART_REG_DBG_UART_MSR_DBG_DSR_Pos)       /*!< DBG_UART_REG DBG_UART_MSR: DBG_DSR Mask */
#define DBG_UART_REG_DBG_UART_MSR_DBG_RI_Pos  6                                                       /*!< DBG_UART_REG DBG_UART_MSR: DBG_RI Position */
#define DBG_UART_REG_DBG_UART_MSR_DBG_RI_Msk  (0x01UL << DBG_UART_REG_DBG_UART_MSR_DBG_RI_Pos)        /*!< DBG_UART_REG DBG_UART_MSR: DBG_RI Mask  */
#define DBG_UART_REG_DBG_UART_MSR_DBG_CD_Pos  7                                                       /*!< DBG_UART_REG DBG_UART_MSR: DBG_CD Position */
#define DBG_UART_REG_DBG_UART_MSR_DBG_CD_Msk  (0x01UL << DBG_UART_REG_DBG_UART_MSR_DBG_CD_Pos)        /*!< DBG_UART_REG DBG_UART_MSR: DBG_CD Mask  */

/* --------------------------  DBG_UART_REG_DBG_UART_SPR  ------------------------- */
#define DBG_UART_REG_DBG_UART_SPR_DBG_BRDC_DIV_Pos 0                                                  /*!< DBG_UART_REG DBG_UART_SPR: DBG_BRDC_DIV Position */
#define DBG_UART_REG_DBG_UART_SPR_DBG_BRDC_DIV_Msk (0x0000ffffUL << DBG_UART_REG_DBG_UART_SPR_DBG_BRDC_DIV_Pos)/*!< DBG_UART_REG DBG_UART_SPR: DBG_BRDC_DIV Mask */

/* -------------------------  DBG_UART_REG_DBG_UART_RTHR  ------------------------- */
#define DBG_UART_REG_DBG_UART_RTHR_DBG_RTHR_L_Pos 0                                                   /*!< DBG_UART_REG DBG_UART_RTHR: DBG_RTHR_L Position */
#define DBG_UART_REG_DBG_UART_RTHR_DBG_RTHR_L_Msk (0x0fUL << DBG_UART_REG_DBG_UART_RTHR_DBG_RTHR_L_Pos)/*!< DBG_UART_REG DBG_UART_RTHR: DBG_RTHR_L Mask */
#define DBG_UART_REG_DBG_UART_RTHR_DBG_RTHR_H_Pos 4                                                   /*!< DBG_UART_REG DBG_UART_RTHR: DBG_RTHR_H Position */
#define DBG_UART_REG_DBG_UART_RTHR_DBG_RTHR_H_Msk (0x0fUL << DBG_UART_REG_DBG_UART_RTHR_DBG_RTHR_H_Pos)/*!< DBG_UART_REG DBG_UART_RTHR: DBG_RTHR_H Mask */

/* --------------------------  DBG_UART_REG_DBG_UART_ISR  ------------------------- */
#define DBG_UART_REG_DBG_UART_ISR_DBG_INT_IDCODE_Pos 0                                                /*!< DBG_UART_REG DBG_UART_ISR: DBG_INT_IDCODE Position */
#define DBG_UART_REG_DBG_UART_ISR_DBG_INT_IDCODE_Msk (0x0fUL << DBG_UART_REG_DBG_UART_ISR_DBG_INT_IDCODE_Pos)/*!< DBG_UART_REG DBG_UART_ISR: DBG_INT_IDCODE Mask */
#define DBG_UART_REG_DBG_UART_ISR_DBG_RX_IDLE_Pos 4                                                   /*!< DBG_UART_REG DBG_UART_ISR: DBG_RX_IDLE Position */
#define DBG_UART_REG_DBG_UART_ISR_DBG_RX_IDLE_Msk (0x01UL << DBG_UART_REG_DBG_UART_ISR_DBG_RX_IDLE_Pos)/*!< DBG_UART_REG DBG_UART_ISR: DBG_RX_IDLE Mask */
#define DBG_UART_REG_DBG_UART_ISR_DBG_TX_IDLE_Pos 5                                                   /*!< DBG_UART_REG DBG_UART_ISR: DBG_TX_IDLE Position */
#define DBG_UART_REG_DBG_UART_ISR_DBG_TX_IDLE_Msk (0x01UL << DBG_UART_REG_DBG_UART_ISR_DBG_TX_IDLE_Pos)/*!< DBG_UART_REG DBG_UART_ISR: DBG_TX_IDLE Mask */
#define DBG_UART_REG_DBG_UART_ISR_DBG_FIFOS_ENABLED_Pos 6                                             /*!< DBG_UART_REG DBG_UART_ISR: DBG_FIFOS_ENABLED Position */
#define DBG_UART_REG_DBG_UART_ISR_DBG_FIFOS_ENABLED_Msk (0x03UL << DBG_UART_REG_DBG_UART_ISR_DBG_FIFOS_ENABLED_Pos)/*!< DBG_UART_REG DBG_UART_ISR: DBG_FIFOS_ENABLED Mask */

/* -------------------------  DBG_UART_REG_DBG_UART_TTHR  ------------------------- */
#define DBG_UART_REG_DBG_UART_TTHR_DBG_TTHR_L_Pos 0                                                   /*!< DBG_UART_REG DBG_UART_TTHR: DBG_TTHR_L Position */
#define DBG_UART_REG_DBG_UART_TTHR_DBG_TTHR_L_Msk (0x0fUL << DBG_UART_REG_DBG_UART_TTHR_DBG_TTHR_L_Pos)/*!< DBG_UART_REG DBG_UART_TTHR: DBG_TTHR_L Mask */
#define DBG_UART_REG_DBG_UART_TTHR_DBG_TTHR_H_Pos 4                                                   /*!< DBG_UART_REG DBG_UART_TTHR: DBG_TTHR_H Position */
#define DBG_UART_REG_DBG_UART_TTHR_DBG_TTHR_H_Msk (0x0fUL << DBG_UART_REG_DBG_UART_TTHR_DBG_TTHR_H_Pos)/*!< DBG_UART_REG DBG_UART_TTHR: DBG_TTHR_H Mask */

/* ------------------------  DBG_UART_REG_DBG_UART_INT_MAP  ----------------------- */
#define DBG_UART_REG_DBG_UART_INT_MAP_DBG_RX_RECIEVED_Pos 0                                           /*!< DBG_UART_REG DBG_UART_INT_MAP: DBG_RX_RECIEVED Position */
#define DBG_UART_REG_DBG_UART_INT_MAP_DBG_RX_RECIEVED_Msk (0x01UL << DBG_UART_REG_DBG_UART_INT_MAP_DBG_RX_RECIEVED_Pos)/*!< DBG_UART_REG DBG_UART_INT_MAP: DBG_RX_RECIEVED Mask */
#define DBG_UART_REG_DBG_UART_INT_MAP_DBG_RX_FIFO_TO_Pos 1                                            /*!< DBG_UART_REG DBG_UART_INT_MAP: DBG_RX_FIFO_TO Position */
#define DBG_UART_REG_DBG_UART_INT_MAP_DBG_RX_FIFO_TO_Msk (0x01UL << DBG_UART_REG_DBG_UART_INT_MAP_DBG_RX_FIFO_TO_Pos)/*!< DBG_UART_REG DBG_UART_INT_MAP: DBG_RX_FIFO_TO Mask */
#define DBG_UART_REG_DBG_UART_INT_MAP_DBG_TX_L_Pos 2                                                  /*!< DBG_UART_REG DBG_UART_INT_MAP: DBG_TX_L Position */
#define DBG_UART_REG_DBG_UART_INT_MAP_DBG_TX_L_Msk (0x01UL << DBG_UART_REG_DBG_UART_INT_MAP_DBG_TX_L_Pos)/*!< DBG_UART_REG DBG_UART_INT_MAP: DBG_TX_L Mask */
#define DBG_UART_REG_DBG_UART_INT_MAP_DBG_TX_H_Pos 3                                                  /*!< DBG_UART_REG DBG_UART_INT_MAP: DBG_TX_H Position */
#define DBG_UART_REG_DBG_UART_INT_MAP_DBG_TX_H_Msk (0x01UL << DBG_UART_REG_DBG_UART_INT_MAP_DBG_TX_H_Pos)/*!< DBG_UART_REG DBG_UART_INT_MAP: DBG_TX_H Mask */
#define DBG_UART_REG_DBG_UART_INT_MAP_DBG_TX_EMPTY2_Pos 4                                             /*!< DBG_UART_REG DBG_UART_INT_MAP: DBG_TX_EMPTY2 Position */
#define DBG_UART_REG_DBG_UART_INT_MAP_DBG_TX_EMPTY2_Msk (0x01UL << DBG_UART_REG_DBG_UART_INT_MAP_DBG_TX_EMPTY2_Pos)/*!< DBG_UART_REG DBG_UART_INT_MAP: DBG_TX_EMPTY2 Mask */
#define DBG_UART_REG_DBG_UART_INT_MAP_DBG_OVERRUN_Pos 5                                               /*!< DBG_UART_REG DBG_UART_INT_MAP: DBG_OVERRUN Position */
#define DBG_UART_REG_DBG_UART_INT_MAP_DBG_OVERRUN_Msk (0x01UL << DBG_UART_REG_DBG_UART_INT_MAP_DBG_OVERRUN_Pos)/*!< DBG_UART_REG DBG_UART_INT_MAP: DBG_OVERRUN Mask */
#define DBG_UART_REG_DBG_UART_INT_MAP_DBG_FRAMING_Pos 6                                               /*!< DBG_UART_REG DBG_UART_INT_MAP: DBG_FRAMING Position */
#define DBG_UART_REG_DBG_UART_INT_MAP_DBG_FRAMING_Msk (0x01UL << DBG_UART_REG_DBG_UART_INT_MAP_DBG_FRAMING_Pos)/*!< DBG_UART_REG DBG_UART_INT_MAP: DBG_FRAMING Mask */
#define DBG_UART_REG_DBG_UART_INT_MAP_DBG_BREAK_Pos 7                                                 /*!< DBG_UART_REG DBG_UART_INT_MAP: DBG_BREAK Position */
#define DBG_UART_REG_DBG_UART_INT_MAP_DBG_BREAK_Msk (0x01UL << DBG_UART_REG_DBG_UART_INT_MAP_DBG_BREAK_Pos)/*!< DBG_UART_REG DBG_UART_INT_MAP: DBG_BREAK Mask */
#define DBG_UART_REG_DBG_UART_INT_MAP_DBG_PARITY_Pos 8                                                /*!< DBG_UART_REG DBG_UART_INT_MAP: DBG_PARITY Position */
#define DBG_UART_REG_DBG_UART_INT_MAP_DBG_PARITY_Msk (0x01UL << DBG_UART_REG_DBG_UART_INT_MAP_DBG_PARITY_Pos)/*!< DBG_UART_REG DBG_UART_INT_MAP: DBG_PARITY Mask */
#define DBG_UART_REG_DBG_UART_INT_MAP_DBG_MODEN_INT_Pos 9                                             /*!< DBG_UART_REG DBG_UART_INT_MAP: DBG_MODEN_INT Position */
#define DBG_UART_REG_DBG_UART_INT_MAP_DBG_MODEN_INT_Msk (0x01UL << DBG_UART_REG_DBG_UART_INT_MAP_DBG_MODEN_INT_Pos)/*!< DBG_UART_REG DBG_UART_INT_MAP: DBG_MODEN_INT Mask */

/* ------------------------  DBG_UART_REG_DBG_UART_POINTER  ----------------------- */
#define DBG_UART_REG_DBG_UART_POINTER_DBG_ROP_A_Pos 0                                                 /*!< DBG_UART_REG DBG_UART_POINTER: DBG_ROP_A Position */
#define DBG_UART_REG_DBG_UART_POINTER_DBG_ROP_A_Msk (0x0fUL << DBG_UART_REG_DBG_UART_POINTER_DBG_ROP_A_Pos)/*!< DBG_UART_REG DBG_UART_POINTER: DBG_ROP_A Mask */
#define DBG_UART_REG_DBG_UART_POINTER_DBG_RIP_A_Pos 4                                                 /*!< DBG_UART_REG DBG_UART_POINTER: DBG_RIP_A Position */
#define DBG_UART_REG_DBG_UART_POINTER_DBG_RIP_A_Msk (0x0fUL << DBG_UART_REG_DBG_UART_POINTER_DBG_RIP_A_Pos)/*!< DBG_UART_REG DBG_UART_POINTER: DBG_RIP_A Mask */
#define DBG_UART_REG_DBG_UART_POINTER_DBG_TOP_A_Pos 8                                                 /*!< DBG_UART_REG DBG_UART_POINTER: DBG_TOP_A Position */
#define DBG_UART_REG_DBG_UART_POINTER_DBG_TOP_A_Msk (0x0fUL << DBG_UART_REG_DBG_UART_POINTER_DBG_TOP_A_Pos)/*!< DBG_UART_REG DBG_UART_POINTER: DBG_TOP_A Mask */
#define DBG_UART_REG_DBG_UART_POINTER_DBG_TIP_A_Pos 12                                                /*!< DBG_UART_REG DBG_UART_POINTER: DBG_TIP_A Position */
#define DBG_UART_REG_DBG_UART_POINTER_DBG_TIP_A_Msk (0x0fUL << DBG_UART_REG_DBG_UART_POINTER_DBG_TIP_A_Pos)/*!< DBG_UART_REG DBG_UART_POINTER: DBG_TIP_A Mask */


/* ================================================================================ */
/* ================     struct 'ICOM_UART_REG' Position & Mask     ================ */
/* ================================================================================ */


/* ------------------------  ICOM_UART_REG_ICOM_UART_DATA  ------------------------ */
#define ICOM_UART_REG_ICOM_UART_DATA_ICOM_UART_DATA_Pos 0                                             /*!< ICOM_UART_REG ICOM_UART_DATA: ICOM_UART_DATA Position */
#define ICOM_UART_REG_ICOM_UART_DATA_ICOM_UART_DATA_Msk (0x000000ffUL << ICOM_UART_REG_ICOM_UART_DATA_ICOM_UART_DATA_Pos)/*!< ICOM_UART_REG ICOM_UART_DATA: ICOM_UART_DATA Mask */

/* -------------------------  ICOM_UART_REG_ICOM_UART_IER  ------------------------ */
#define ICOM_UART_REG_ICOM_UART_IER_ICOM_DATA_RDY_IE_Pos 0                                            /*!< ICOM_UART_REG ICOM_UART_IER: ICOM_DATA_RDY_IE Position */
#define ICOM_UART_REG_ICOM_UART_IER_ICOM_DATA_RDY_IE_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_IER_ICOM_DATA_RDY_IE_Pos)/*!< ICOM_UART_REG ICOM_UART_IER: ICOM_DATA_RDY_IE Mask */
#define ICOM_UART_REG_ICOM_UART_IER_ICOM_THR_EMPTY_IE_Pos 1                                           /*!< ICOM_UART_REG ICOM_UART_IER: ICOM_THR_EMPTY_IE Position */
#define ICOM_UART_REG_ICOM_UART_IER_ICOM_THR_EMPTY_IE_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_IER_ICOM_THR_EMPTY_IE_Pos)/*!< ICOM_UART_REG ICOM_UART_IER: ICOM_THR_EMPTY_IE Mask */
#define ICOM_UART_REG_ICOM_UART_IER_ICOM_RX_LINESTS_IE_Pos 2                                          /*!< ICOM_UART_REG ICOM_UART_IER: ICOM_RX_LINESTS_IE Position */
#define ICOM_UART_REG_ICOM_UART_IER_ICOM_RX_LINESTS_IE_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_IER_ICOM_RX_LINESTS_IE_Pos)/*!< ICOM_UART_REG ICOM_UART_IER: ICOM_RX_LINESTS_IE Mask */
#define ICOM_UART_REG_ICOM_UART_IER_ICOM_MDM_STS_IE_Pos 3                                             /*!< ICOM_UART_REG ICOM_UART_IER: ICOM_MDM_STS_IE Position */
#define ICOM_UART_REG_ICOM_UART_IER_ICOM_MDM_STS_IE_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_IER_ICOM_MDM_STS_IE_Pos)/*!< ICOM_UART_REG ICOM_UART_IER: ICOM_MDM_STS_IE Mask */
#define ICOM_UART_REG_ICOM_UART_IER_ICOM_TX_THRH_IE_Pos 4                                             /*!< ICOM_UART_REG ICOM_UART_IER: ICOM_TX_THRH_IE Position */
#define ICOM_UART_REG_ICOM_UART_IER_ICOM_TX_THRH_IE_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_IER_ICOM_TX_THRH_IE_Pos)/*!< ICOM_UART_REG ICOM_UART_IER: ICOM_TX_THRH_IE Mask */
#define ICOM_UART_REG_ICOM_UART_IER_ICOM_TX_THRL_IE_Pos 5                                             /*!< ICOM_UART_REG ICOM_UART_IER: ICOM_TX_THRL_IE Position */
#define ICOM_UART_REG_ICOM_UART_IER_ICOM_TX_THRL_IE_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_IER_ICOM_TX_THRL_IE_Pos)/*!< ICOM_UART_REG ICOM_UART_IER: ICOM_TX_THRL_IE Mask */

/* -------------------------  ICOM_UART_REG_ICOM_UART_FCR  ------------------------ */
#define ICOM_UART_REG_ICOM_UART_FCR_ICOM_FIFO_EN_Pos 0                                                /*!< ICOM_UART_REG ICOM_UART_FCR: ICOM_FIFO_EN Position */
#define ICOM_UART_REG_ICOM_UART_FCR_ICOM_FIFO_EN_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_FCR_ICOM_FIFO_EN_Pos)/*!< ICOM_UART_REG ICOM_UART_FCR: ICOM_FIFO_EN Mask */
#define ICOM_UART_REG_ICOM_UART_FCR_ICOM_RXFIFO_RST_Pos 1                                             /*!< ICOM_UART_REG ICOM_UART_FCR: ICOM_RXFIFO_RST Position */
#define ICOM_UART_REG_ICOM_UART_FCR_ICOM_RXFIFO_RST_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_FCR_ICOM_RXFIFO_RST_Pos)/*!< ICOM_UART_REG ICOM_UART_FCR: ICOM_RXFIFO_RST Mask */
#define ICOM_UART_REG_ICOM_UART_FCR_ICOM_TXFIFO_RST_Pos 2                                             /*!< ICOM_UART_REG ICOM_UART_FCR: ICOM_TXFIFO_RST Position */
#define ICOM_UART_REG_ICOM_UART_FCR_ICOM_TXFIFO_RST_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_FCR_ICOM_TXFIFO_RST_Pos)/*!< ICOM_UART_REG ICOM_UART_FCR: ICOM_TXFIFO_RST Mask */
#define ICOM_UART_REG_ICOM_UART_FCR_ICOM_DMA_MODE_Pos 3                                               /*!< ICOM_UART_REG ICOM_UART_FCR: ICOM_DMA_MODE Position */
#define ICOM_UART_REG_ICOM_UART_FCR_ICOM_DMA_MODE_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_FCR_ICOM_DMA_MODE_Pos)/*!< ICOM_UART_REG ICOM_UART_FCR: ICOM_DMA_MODE Mask */
#define ICOM_UART_REG_ICOM_UART_FCR_ICOM_EN_AUTO_RTS_Pos 4                                            /*!< ICOM_UART_REG ICOM_UART_FCR: ICOM_EN_AUTO_RTS Position */
#define ICOM_UART_REG_ICOM_UART_FCR_ICOM_EN_AUTO_RTS_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_FCR_ICOM_EN_AUTO_RTS_Pos)/*!< ICOM_UART_REG ICOM_UART_FCR: ICOM_EN_AUTO_RTS Mask */
#define ICOM_UART_REG_ICOM_UART_FCR_ICOM_EN_AUTO_CTS_Pos 5                                            /*!< ICOM_UART_REG ICOM_UART_FCR: ICOM_EN_AUTO_CTS Position */
#define ICOM_UART_REG_ICOM_UART_FCR_ICOM_EN_AUTO_CTS_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_FCR_ICOM_EN_AUTO_CTS_Pos)/*!< ICOM_UART_REG ICOM_UART_FCR: ICOM_EN_AUTO_CTS Mask */
#define ICOM_UART_REG_ICOM_UART_FCR_ICOM_RXFIFO_TRGLVL_Pos 6                                          /*!< ICOM_UART_REG ICOM_UART_FCR: ICOM_RXFIFO_TRGLVL Position */
#define ICOM_UART_REG_ICOM_UART_FCR_ICOM_RXFIFO_TRGLVL_Msk (0x03UL << ICOM_UART_REG_ICOM_UART_FCR_ICOM_RXFIFO_TRGLVL_Pos)/*!< ICOM_UART_REG ICOM_UART_FCR: ICOM_RXFIFO_TRGLVL Mask */

/* -------------------------  ICOM_UART_REG_ICOM_UART_LCR  ------------------------ */
#define ICOM_UART_REG_ICOM_UART_LCR_ICOM_WORD_LEN_Pos 0                                               /*!< ICOM_UART_REG ICOM_UART_LCR: ICOM_WORD_LEN Position */
#define ICOM_UART_REG_ICOM_UART_LCR_ICOM_WORD_LEN_Msk (0x03UL << ICOM_UART_REG_ICOM_UART_LCR_ICOM_WORD_LEN_Pos)/*!< ICOM_UART_REG ICOM_UART_LCR: ICOM_WORD_LEN Mask */
#define ICOM_UART_REG_ICOM_UART_LCR_ICOM_STOP_BIT_Pos 2                                               /*!< ICOM_UART_REG ICOM_UART_LCR: ICOM_STOP_BIT Position */
#define ICOM_UART_REG_ICOM_UART_LCR_ICOM_STOP_BIT_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_LCR_ICOM_STOP_BIT_Pos)/*!< ICOM_UART_REG ICOM_UART_LCR: ICOM_STOP_BIT Mask */
#define ICOM_UART_REG_ICOM_UART_LCR_ICOM_PARITY_EN_Pos 3                                              /*!< ICOM_UART_REG ICOM_UART_LCR: ICOM_PARITY_EN Position */
#define ICOM_UART_REG_ICOM_UART_LCR_ICOM_PARITY_EN_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_LCR_ICOM_PARITY_EN_Pos)/*!< ICOM_UART_REG ICOM_UART_LCR: ICOM_PARITY_EN Mask */
#define ICOM_UART_REG_ICOM_UART_LCR_ICOM_EVEN_PARITY_Pos 4                                            /*!< ICOM_UART_REG ICOM_UART_LCR: ICOM_EVEN_PARITY Position */
#define ICOM_UART_REG_ICOM_UART_LCR_ICOM_EVEN_PARITY_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_LCR_ICOM_EVEN_PARITY_Pos)/*!< ICOM_UART_REG ICOM_UART_LCR: ICOM_EVEN_PARITY Mask */
#define ICOM_UART_REG_ICOM_UART_LCR_ICOM_FORCE_PARITY_Pos 5                                           /*!< ICOM_UART_REG ICOM_UART_LCR: ICOM_FORCE_PARITY Position */
#define ICOM_UART_REG_ICOM_UART_LCR_ICOM_FORCE_PARITY_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_LCR_ICOM_FORCE_PARITY_Pos)/*!< ICOM_UART_REG ICOM_UART_LCR: ICOM_FORCE_PARITY Mask */
#define ICOM_UART_REG_ICOM_UART_LCR_ICOM_SET_BREAK_Pos 6                                              /*!< ICOM_UART_REG ICOM_UART_LCR: ICOM_SET_BREAK Position */
#define ICOM_UART_REG_ICOM_UART_LCR_ICOM_SET_BREAK_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_LCR_ICOM_SET_BREAK_Pos)/*!< ICOM_UART_REG ICOM_UART_LCR: ICOM_SET_BREAK Mask */
#define ICOM_UART_REG_ICOM_UART_LCR_ICOM_DLAB_Pos 7                                                   /*!< ICOM_UART_REG ICOM_UART_LCR: ICOM_DLAB Position */
#define ICOM_UART_REG_ICOM_UART_LCR_ICOM_DLAB_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_LCR_ICOM_DLAB_Pos)/*!< ICOM_UART_REG ICOM_UART_LCR: ICOM_DLAB Mask */

/* -------------------------  ICOM_UART_REG_ICOM_UART_MCR  ------------------------ */
#define ICOM_UART_REG_ICOM_UART_MCR_ICOM_DTR_Pos 0                                                    /*!< ICOM_UART_REG ICOM_UART_MCR: ICOM_DTR Position */
#define ICOM_UART_REG_ICOM_UART_MCR_ICOM_DTR_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_MCR_ICOM_DTR_Pos) /*!< ICOM_UART_REG ICOM_UART_MCR: ICOM_DTR Mask */
#define ICOM_UART_REG_ICOM_UART_MCR_ICOM_RTS_Pos 1                                                    /*!< ICOM_UART_REG ICOM_UART_MCR: ICOM_RTS Position */
#define ICOM_UART_REG_ICOM_UART_MCR_ICOM_RTS_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_MCR_ICOM_RTS_Pos) /*!< ICOM_UART_REG ICOM_UART_MCR: ICOM_RTS Mask */
#define ICOM_UART_REG_ICOM_UART_MCR_ICOM_OUT_1_Pos 2                                                  /*!< ICOM_UART_REG ICOM_UART_MCR: ICOM_OUT_1 Position */
#define ICOM_UART_REG_ICOM_UART_MCR_ICOM_OUT_1_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_MCR_ICOM_OUT_1_Pos)/*!< ICOM_UART_REG ICOM_UART_MCR: ICOM_OUT_1 Mask */
#define ICOM_UART_REG_ICOM_UART_MCR_ICOM_OUT_2_Pos 3                                                  /*!< ICOM_UART_REG ICOM_UART_MCR: ICOM_OUT_2 Position */
#define ICOM_UART_REG_ICOM_UART_MCR_ICOM_OUT_2_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_MCR_ICOM_OUT_2_Pos)/*!< ICOM_UART_REG ICOM_UART_MCR: ICOM_OUT_2 Mask */
#define ICOM_UART_REG_ICOM_UART_MCR_ICOM_LOOP_BACK_Pos 4                                              /*!< ICOM_UART_REG ICOM_UART_MCR: ICOM_LOOP_BACK Position */
#define ICOM_UART_REG_ICOM_UART_MCR_ICOM_LOOP_BACK_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_MCR_ICOM_LOOP_BACK_Pos)/*!< ICOM_UART_REG ICOM_UART_MCR: ICOM_LOOP_BACK Mask */
#define ICOM_UART_REG_ICOM_UART_MCR_ICOM_DE_RTS_Pos 5                                                 /*!< ICOM_UART_REG ICOM_UART_MCR: ICOM_DE_RTS Position */
#define ICOM_UART_REG_ICOM_UART_MCR_ICOM_DE_RTS_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_MCR_ICOM_DE_RTS_Pos)/*!< ICOM_UART_REG ICOM_UART_MCR: ICOM_DE_RTS Mask */

/* -------------------------  ICOM_UART_REG_ICOM_UART_LSR  ------------------------ */
#define ICOM_UART_REG_ICOM_UART_LSR_ICOM_DATA_RDY_Pos 0                                               /*!< ICOM_UART_REG ICOM_UART_LSR: ICOM_DATA_RDY Position */
#define ICOM_UART_REG_ICOM_UART_LSR_ICOM_DATA_RDY_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_LSR_ICOM_DATA_RDY_Pos)/*!< ICOM_UART_REG ICOM_UART_LSR: ICOM_DATA_RDY Mask */
#define ICOM_UART_REG_ICOM_UART_LSR_ICOM_OVERRUN_ERR_Pos 1                                            /*!< ICOM_UART_REG ICOM_UART_LSR: ICOM_OVERRUN_ERR Position */
#define ICOM_UART_REG_ICOM_UART_LSR_ICOM_OVERRUN_ERR_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_LSR_ICOM_OVERRUN_ERR_Pos)/*!< ICOM_UART_REG ICOM_UART_LSR: ICOM_OVERRUN_ERR Mask */
#define ICOM_UART_REG_ICOM_UART_LSR_ICOM_PARITY_ERR_Pos 2                                             /*!< ICOM_UART_REG ICOM_UART_LSR: ICOM_PARITY_ERR Position */
#define ICOM_UART_REG_ICOM_UART_LSR_ICOM_PARITY_ERR_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_LSR_ICOM_PARITY_ERR_Pos)/*!< ICOM_UART_REG ICOM_UART_LSR: ICOM_PARITY_ERR Mask */
#define ICOM_UART_REG_ICOM_UART_LSR_ICOM_FRAMING_ERR_Pos 3                                            /*!< ICOM_UART_REG ICOM_UART_LSR: ICOM_FRAMING_ERR Position */
#define ICOM_UART_REG_ICOM_UART_LSR_ICOM_FRAMING_ERR_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_LSR_ICOM_FRAMING_ERR_Pos)/*!< ICOM_UART_REG ICOM_UART_LSR: ICOM_FRAMING_ERR Mask */
#define ICOM_UART_REG_ICOM_UART_LSR_ICOM_BREAK_INT_Pos 4                                              /*!< ICOM_UART_REG ICOM_UART_LSR: ICOM_BREAK_INT Position */
#define ICOM_UART_REG_ICOM_UART_LSR_ICOM_BREAK_INT_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_LSR_ICOM_BREAK_INT_Pos)/*!< ICOM_UART_REG ICOM_UART_LSR: ICOM_BREAK_INT Mask */
#define ICOM_UART_REG_ICOM_UART_LSR_ICOM_THR_EMPTY_Pos 5                                              /*!< ICOM_UART_REG ICOM_UART_LSR: ICOM_THR_EMPTY Position */
#define ICOM_UART_REG_ICOM_UART_LSR_ICOM_THR_EMPTY_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_LSR_ICOM_THR_EMPTY_Pos)/*!< ICOM_UART_REG ICOM_UART_LSR: ICOM_THR_EMPTY Mask */
#define ICOM_UART_REG_ICOM_UART_LSR_ICOM_TX_EMPTY_Pos 6                                               /*!< ICOM_UART_REG ICOM_UART_LSR: ICOM_TX_EMPTY Position */
#define ICOM_UART_REG_ICOM_UART_LSR_ICOM_TX_EMPTY_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_LSR_ICOM_TX_EMPTY_Pos)/*!< ICOM_UART_REG ICOM_UART_LSR: ICOM_TX_EMPTY Mask */
#define ICOM_UART_REG_ICOM_UART_LSR_ICOM_FIFODATA_ERR_Pos 7                                           /*!< ICOM_UART_REG ICOM_UART_LSR: ICOM_FIFODATA_ERR Position */
#define ICOM_UART_REG_ICOM_UART_LSR_ICOM_FIFODATA_ERR_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_LSR_ICOM_FIFODATA_ERR_Pos)/*!< ICOM_UART_REG ICOM_UART_LSR: ICOM_FIFODATA_ERR Mask */

/* -------------------------  ICOM_UART_REG_ICOM_UART_MSR  ------------------------ */
#define ICOM_UART_REG_ICOM_UART_MSR_ICOM_DELTA_CTS_Pos 0                                              /*!< ICOM_UART_REG ICOM_UART_MSR: ICOM_DELTA_CTS Position */
#define ICOM_UART_REG_ICOM_UART_MSR_ICOM_DELTA_CTS_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_MSR_ICOM_DELTA_CTS_Pos)/*!< ICOM_UART_REG ICOM_UART_MSR: ICOM_DELTA_CTS Mask */
#define ICOM_UART_REG_ICOM_UART_MSR_ICOM_DELTA_DSR_Pos 1                                              /*!< ICOM_UART_REG ICOM_UART_MSR: ICOM_DELTA_DSR Position */
#define ICOM_UART_REG_ICOM_UART_MSR_ICOM_DELTA_DSR_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_MSR_ICOM_DELTA_DSR_Pos)/*!< ICOM_UART_REG ICOM_UART_MSR: ICOM_DELTA_DSR Mask */
#define ICOM_UART_REG_ICOM_UART_MSR_ICOM_TRAILEDGE_RI_Pos 2                                           /*!< ICOM_UART_REG ICOM_UART_MSR: ICOM_TRAILEDGE_RI Position */
#define ICOM_UART_REG_ICOM_UART_MSR_ICOM_TRAILEDGE_RI_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_MSR_ICOM_TRAILEDGE_RI_Pos)/*!< ICOM_UART_REG ICOM_UART_MSR: ICOM_TRAILEDGE_RI Mask */
#define ICOM_UART_REG_ICOM_UART_MSR_ICOM_DELTA_CD_Pos 3                                               /*!< ICOM_UART_REG ICOM_UART_MSR: ICOM_DELTA_CD Position */
#define ICOM_UART_REG_ICOM_UART_MSR_ICOM_DELTA_CD_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_MSR_ICOM_DELTA_CD_Pos)/*!< ICOM_UART_REG ICOM_UART_MSR: ICOM_DELTA_CD Mask */
#define ICOM_UART_REG_ICOM_UART_MSR_ICOM_CTS_Pos 4                                                    /*!< ICOM_UART_REG ICOM_UART_MSR: ICOM_CTS Position */
#define ICOM_UART_REG_ICOM_UART_MSR_ICOM_CTS_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_MSR_ICOM_CTS_Pos) /*!< ICOM_UART_REG ICOM_UART_MSR: ICOM_CTS Mask */
#define ICOM_UART_REG_ICOM_UART_MSR_ICOM_DSR_Pos 5                                                    /*!< ICOM_UART_REG ICOM_UART_MSR: ICOM_DSR Position */
#define ICOM_UART_REG_ICOM_UART_MSR_ICOM_DSR_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_MSR_ICOM_DSR_Pos) /*!< ICOM_UART_REG ICOM_UART_MSR: ICOM_DSR Mask */
#define ICOM_UART_REG_ICOM_UART_MSR_ICOM_RI_Pos 6                                                     /*!< ICOM_UART_REG ICOM_UART_MSR: ICOM_RI Position */
#define ICOM_UART_REG_ICOM_UART_MSR_ICOM_RI_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_MSR_ICOM_RI_Pos)   /*!< ICOM_UART_REG ICOM_UART_MSR: ICOM_RI Mask */
#define ICOM_UART_REG_ICOM_UART_MSR_ICOM_CD_Pos 7                                                     /*!< ICOM_UART_REG ICOM_UART_MSR: ICOM_CD Position */
#define ICOM_UART_REG_ICOM_UART_MSR_ICOM_CD_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_MSR_ICOM_CD_Pos)   /*!< ICOM_UART_REG ICOM_UART_MSR: ICOM_CD Mask */

/* -------------------------  ICOM_UART_REG_ICOM_UART_SPR  ------------------------ */
#define ICOM_UART_REG_ICOM_UART_SPR_ICOM_BRDC_DIV_Pos 0                                               /*!< ICOM_UART_REG ICOM_UART_SPR: ICOM_BRDC_DIV Position */
#define ICOM_UART_REG_ICOM_UART_SPR_ICOM_BRDC_DIV_Msk (0x0000ffffUL << ICOM_UART_REG_ICOM_UART_SPR_ICOM_BRDC_DIV_Pos)/*!< ICOM_UART_REG ICOM_UART_SPR: ICOM_BRDC_DIV Mask */

/* ------------------------  ICOM_UART_REG_ICOM_UART_RTHR  ------------------------ */
#define ICOM_UART_REG_ICOM_UART_RTHR_ICOM_RTHR_L_Pos 0                                                /*!< ICOM_UART_REG ICOM_UART_RTHR: ICOM_RTHR_L Position */
#define ICOM_UART_REG_ICOM_UART_RTHR_ICOM_RTHR_L_Msk (0x0fUL << ICOM_UART_REG_ICOM_UART_RTHR_ICOM_RTHR_L_Pos)/*!< ICOM_UART_REG ICOM_UART_RTHR: ICOM_RTHR_L Mask */
#define ICOM_UART_REG_ICOM_UART_RTHR_ICOM_RTHR_H_Pos 4                                                /*!< ICOM_UART_REG ICOM_UART_RTHR: ICOM_RTHR_H Position */
#define ICOM_UART_REG_ICOM_UART_RTHR_ICOM_RTHR_H_Msk (0x0fUL << ICOM_UART_REG_ICOM_UART_RTHR_ICOM_RTHR_H_Pos)/*!< ICOM_UART_REG ICOM_UART_RTHR: ICOM_RTHR_H Mask */

/* -------------------------  ICOM_UART_REG_ICOM_UART_ISR  ------------------------ */
#define ICOM_UART_REG_ICOM_UART_ISR_ICOM_INT_IDCODE_Pos 0                                             /*!< ICOM_UART_REG ICOM_UART_ISR: ICOM_INT_IDCODE Position */
#define ICOM_UART_REG_ICOM_UART_ISR_ICOM_INT_IDCODE_Msk (0x0fUL << ICOM_UART_REG_ICOM_UART_ISR_ICOM_INT_IDCODE_Pos)/*!< ICOM_UART_REG ICOM_UART_ISR: ICOM_INT_IDCODE Mask */
#define ICOM_UART_REG_ICOM_UART_ISR_ICOM_RX_IDLE_Pos 4                                                /*!< ICOM_UART_REG ICOM_UART_ISR: ICOM_RX_IDLE Position */
#define ICOM_UART_REG_ICOM_UART_ISR_ICOM_RX_IDLE_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_ISR_ICOM_RX_IDLE_Pos)/*!< ICOM_UART_REG ICOM_UART_ISR: ICOM_RX_IDLE Mask */
#define ICOM_UART_REG_ICOM_UART_ISR_ICOM_TX_IDLE_Pos 5                                                /*!< ICOM_UART_REG ICOM_UART_ISR: ICOM_TX_IDLE Position */
#define ICOM_UART_REG_ICOM_UART_ISR_ICOM_TX_IDLE_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_ISR_ICOM_TX_IDLE_Pos)/*!< ICOM_UART_REG ICOM_UART_ISR: ICOM_TX_IDLE Mask */
#define ICOM_UART_REG_ICOM_UART_ISR_ICOM_FIFOS_ENABLED_Pos 6                                          /*!< ICOM_UART_REG ICOM_UART_ISR: ICOM_FIFOS_ENABLED Position */
#define ICOM_UART_REG_ICOM_UART_ISR_ICOM_FIFOS_ENABLED_Msk (0x03UL << ICOM_UART_REG_ICOM_UART_ISR_ICOM_FIFOS_ENABLED_Pos)/*!< ICOM_UART_REG ICOM_UART_ISR: ICOM_FIFOS_ENABLED Mask */

/* ------------------------  ICOM_UART_REG_ICOM_UART_TTHR  ------------------------ */
#define ICOM_UART_REG_ICOM_UART_TTHR_ICOM_TTHR_L_Pos 0                                                /*!< ICOM_UART_REG ICOM_UART_TTHR: ICOM_TTHR_L Position */
#define ICOM_UART_REG_ICOM_UART_TTHR_ICOM_TTHR_L_Msk (0x0fUL << ICOM_UART_REG_ICOM_UART_TTHR_ICOM_TTHR_L_Pos)/*!< ICOM_UART_REG ICOM_UART_TTHR: ICOM_TTHR_L Mask */
#define ICOM_UART_REG_ICOM_UART_TTHR_ICOM_TTHR_H_Pos 4                                                /*!< ICOM_UART_REG ICOM_UART_TTHR: ICOM_TTHR_H Position */
#define ICOM_UART_REG_ICOM_UART_TTHR_ICOM_TTHR_H_Msk (0x0fUL << ICOM_UART_REG_ICOM_UART_TTHR_ICOM_TTHR_H_Pos)/*!< ICOM_UART_REG ICOM_UART_TTHR: ICOM_TTHR_H Mask */

/* -----------------------  ICOM_UART_REG_ICOM_UART_INT_MAP  ---------------------- */
#define ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_RX_RECIEVED_Pos 0                                        /*!< ICOM_UART_REG ICOM_UART_INT_MAP: ICOM_RX_RECIEVED Position */
#define ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_RX_RECIEVED_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_RX_RECIEVED_Pos)/*!< ICOM_UART_REG ICOM_UART_INT_MAP: ICOM_RX_RECIEVED Mask */
#define ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_RX_FIFO_TO_Pos 1                                         /*!< ICOM_UART_REG ICOM_UART_INT_MAP: ICOM_RX_FIFO_TO Position */
#define ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_RX_FIFO_TO_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_RX_FIFO_TO_Pos)/*!< ICOM_UART_REG ICOM_UART_INT_MAP: ICOM_RX_FIFO_TO Mask */
#define ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_TX_L_Pos 2                                               /*!< ICOM_UART_REG ICOM_UART_INT_MAP: ICOM_TX_L Position */
#define ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_TX_L_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_TX_L_Pos)/*!< ICOM_UART_REG ICOM_UART_INT_MAP: ICOM_TX_L Mask */
#define ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_TX_H_Pos 3                                               /*!< ICOM_UART_REG ICOM_UART_INT_MAP: ICOM_TX_H Position */
#define ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_TX_H_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_TX_H_Pos)/*!< ICOM_UART_REG ICOM_UART_INT_MAP: ICOM_TX_H Mask */
#define ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_TX_EMPTY2_Pos 4                                          /*!< ICOM_UART_REG ICOM_UART_INT_MAP: ICOM_TX_EMPTY2 Position */
#define ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_TX_EMPTY2_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_TX_EMPTY2_Pos)/*!< ICOM_UART_REG ICOM_UART_INT_MAP: ICOM_TX_EMPTY2 Mask */
#define ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_OVERRUN_Pos 5                                            /*!< ICOM_UART_REG ICOM_UART_INT_MAP: ICOM_OVERRUN Position */
#define ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_OVERRUN_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_OVERRUN_Pos)/*!< ICOM_UART_REG ICOM_UART_INT_MAP: ICOM_OVERRUN Mask */
#define ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_FRAMING_Pos 6                                            /*!< ICOM_UART_REG ICOM_UART_INT_MAP: ICOM_FRAMING Position */
#define ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_FRAMING_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_FRAMING_Pos)/*!< ICOM_UART_REG ICOM_UART_INT_MAP: ICOM_FRAMING Mask */
#define ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_BREAK_Pos 7                                              /*!< ICOM_UART_REG ICOM_UART_INT_MAP: ICOM_BREAK Position */
#define ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_BREAK_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_BREAK_Pos)/*!< ICOM_UART_REG ICOM_UART_INT_MAP: ICOM_BREAK Mask */
#define ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_PARITY_Pos 8                                             /*!< ICOM_UART_REG ICOM_UART_INT_MAP: ICOM_PARITY Position */
#define ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_PARITY_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_PARITY_Pos)/*!< ICOM_UART_REG ICOM_UART_INT_MAP: ICOM_PARITY Mask */
#define ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_MODEN_INT_Pos 9                                          /*!< ICOM_UART_REG ICOM_UART_INT_MAP: ICOM_MODEN_INT Position */
#define ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_MODEN_INT_Msk (0x01UL << ICOM_UART_REG_ICOM_UART_INT_MAP_ICOM_MODEN_INT_Pos)/*!< ICOM_UART_REG ICOM_UART_INT_MAP: ICOM_MODEN_INT Mask */

/* -----------------------  ICOM_UART_REG_ICOM_UART_POINTER  ---------------------- */
#define ICOM_UART_REG_ICOM_UART_POINTER_ICOM_ROP_A_Pos 0                                              /*!< ICOM_UART_REG ICOM_UART_POINTER: ICOM_ROP_A Position */
#define ICOM_UART_REG_ICOM_UART_POINTER_ICOM_ROP_A_Msk (0x0fUL << ICOM_UART_REG_ICOM_UART_POINTER_ICOM_ROP_A_Pos)/*!< ICOM_UART_REG ICOM_UART_POINTER: ICOM_ROP_A Mask */
#define ICOM_UART_REG_ICOM_UART_POINTER_ICOM_RIP_A_Pos 4                                              /*!< ICOM_UART_REG ICOM_UART_POINTER: ICOM_RIP_A Position */
#define ICOM_UART_REG_ICOM_UART_POINTER_ICOM_RIP_A_Msk (0x0fUL << ICOM_UART_REG_ICOM_UART_POINTER_ICOM_RIP_A_Pos)/*!< ICOM_UART_REG ICOM_UART_POINTER: ICOM_RIP_A Mask */
#define ICOM_UART_REG_ICOM_UART_POINTER_ICOM_TOP_A_Pos 8                                              /*!< ICOM_UART_REG ICOM_UART_POINTER: ICOM_TOP_A Position */
#define ICOM_UART_REG_ICOM_UART_POINTER_ICOM_TOP_A_Msk (0x0fUL << ICOM_UART_REG_ICOM_UART_POINTER_ICOM_TOP_A_Pos)/*!< ICOM_UART_REG ICOM_UART_POINTER: ICOM_TOP_A Mask */
#define ICOM_UART_REG_ICOM_UART_POINTER_ICOM_TIP_A_Pos 12                                             /*!< ICOM_UART_REG ICOM_UART_POINTER: ICOM_TIP_A Position */
#define ICOM_UART_REG_ICOM_UART_POINTER_ICOM_TIP_A_Msk (0x0fUL << ICOM_UART_REG_ICOM_UART_POINTER_ICOM_TIP_A_Pos)/*!< ICOM_UART_REG ICOM_UART_POINTER: ICOM_TIP_A Mask */


/* ================================================================================ */
/* ================      struct 'DAT_UART_REG' Position & Mask     ================ */
/* ================================================================================ */


/* -------------------------  DAT_UART_REG_DAT_UART_DATA  ------------------------- */
#define DAT_UART_REG_DAT_UART_DATA_DAT_UART_DATA_Pos 0                                                /*!< DAT_UART_REG DAT_UART_DATA: DAT_UART_DATA Position */
#define DAT_UART_REG_DAT_UART_DATA_DAT_UART_DATA_Msk (0x000000ffUL << DAT_UART_REG_DAT_UART_DATA_DAT_UART_DATA_Pos)/*!< DAT_UART_REG DAT_UART_DATA: DAT_UART_DATA Mask */

/* --------------------------  DAT_UART_REG_DAT_UART_IER  ------------------------- */
#define DAT_UART_REG_DAT_UART_IER_DAT_DATA_RDY_IE_Pos 0                                               /*!< DAT_UART_REG DAT_UART_IER: DAT_DATA_RDY_IE Position */
#define DAT_UART_REG_DAT_UART_IER_DAT_DATA_RDY_IE_Msk (0x01UL << DAT_UART_REG_DAT_UART_IER_DAT_DATA_RDY_IE_Pos)/*!< DAT_UART_REG DAT_UART_IER: DAT_DATA_RDY_IE Mask */
#define DAT_UART_REG_DAT_UART_IER_DAT_THR_EMPTY_IE_Pos 1                                              /*!< DAT_UART_REG DAT_UART_IER: DAT_THR_EMPTY_IE Position */
#define DAT_UART_REG_DAT_UART_IER_DAT_THR_EMPTY_IE_Msk (0x01UL << DAT_UART_REG_DAT_UART_IER_DAT_THR_EMPTY_IE_Pos)/*!< DAT_UART_REG DAT_UART_IER: DAT_THR_EMPTY_IE Mask */
#define DAT_UART_REG_DAT_UART_IER_DAT_RX_LINESTS_IE_Pos 2                                             /*!< DAT_UART_REG DAT_UART_IER: DAT_RX_LINESTS_IE Position */
#define DAT_UART_REG_DAT_UART_IER_DAT_RX_LINESTS_IE_Msk (0x01UL << DAT_UART_REG_DAT_UART_IER_DAT_RX_LINESTS_IE_Pos)/*!< DAT_UART_REG DAT_UART_IER: DAT_RX_LINESTS_IE Mask */
#define DAT_UART_REG_DAT_UART_IER_DAT_MDM_STS_IE_Pos 3                                                /*!< DAT_UART_REG DAT_UART_IER: DAT_MDM_STS_IE Position */
#define DAT_UART_REG_DAT_UART_IER_DAT_MDM_STS_IE_Msk (0x01UL << DAT_UART_REG_DAT_UART_IER_DAT_MDM_STS_IE_Pos)/*!< DAT_UART_REG DAT_UART_IER: DAT_MDM_STS_IE Mask */
#define DAT_UART_REG_DAT_UART_IER_DAT_TX_THRH_IE_Pos 4                                                /*!< DAT_UART_REG DAT_UART_IER: DAT_TX_THRH_IE Position */
#define DAT_UART_REG_DAT_UART_IER_DAT_TX_THRH_IE_Msk (0x01UL << DAT_UART_REG_DAT_UART_IER_DAT_TX_THRH_IE_Pos)/*!< DAT_UART_REG DAT_UART_IER: DAT_TX_THRH_IE Mask */
#define DAT_UART_REG_DAT_UART_IER_DAT_TX_THRL_IE_Pos 5                                                /*!< DAT_UART_REG DAT_UART_IER: DAT_TX_THRL_IE Position */
#define DAT_UART_REG_DAT_UART_IER_DAT_TX_THRL_IE_Msk (0x01UL << DAT_UART_REG_DAT_UART_IER_DAT_TX_THRL_IE_Pos)/*!< DAT_UART_REG DAT_UART_IER: DAT_TX_THRL_IE Mask */

/* --------------------------  DAT_UART_REG_DAT_UART_FCR  ------------------------- */
#define DAT_UART_REG_DAT_UART_FCR_DAT_FIFO_EN_Pos 0                                                   /*!< DAT_UART_REG DAT_UART_FCR: DAT_FIFO_EN Position */
#define DAT_UART_REG_DAT_UART_FCR_DAT_FIFO_EN_Msk (0x01UL << DAT_UART_REG_DAT_UART_FCR_DAT_FIFO_EN_Pos)/*!< DAT_UART_REG DAT_UART_FCR: DAT_FIFO_EN Mask */
#define DAT_UART_REG_DAT_UART_FCR_DAT_RXFIFO_RST_Pos 1                                                /*!< DAT_UART_REG DAT_UART_FCR: DAT_RXFIFO_RST Position */
#define DAT_UART_REG_DAT_UART_FCR_DAT_RXFIFO_RST_Msk (0x01UL << DAT_UART_REG_DAT_UART_FCR_DAT_RXFIFO_RST_Pos)/*!< DAT_UART_REG DAT_UART_FCR: DAT_RXFIFO_RST Mask */
#define DAT_UART_REG_DAT_UART_FCR_DAT_TXFIFO_RST_Pos 2                                                /*!< DAT_UART_REG DAT_UART_FCR: DAT_TXFIFO_RST Position */
#define DAT_UART_REG_DAT_UART_FCR_DAT_TXFIFO_RST_Msk (0x01UL << DAT_UART_REG_DAT_UART_FCR_DAT_TXFIFO_RST_Pos)/*!< DAT_UART_REG DAT_UART_FCR: DAT_TXFIFO_RST Mask */
#define DAT_UART_REG_DAT_UART_FCR_DAT_DMA_MODE_Pos 3                                                  /*!< DAT_UART_REG DAT_UART_FCR: DAT_DMA_MODE Position */
#define DAT_UART_REG_DAT_UART_FCR_DAT_DMA_MODE_Msk (0x01UL << DAT_UART_REG_DAT_UART_FCR_DAT_DMA_MODE_Pos)/*!< DAT_UART_REG DAT_UART_FCR: DAT_DMA_MODE Mask */
#define DAT_UART_REG_DAT_UART_FCR_DAT_EN_AUTO_RTS_Pos 4                                               /*!< DAT_UART_REG DAT_UART_FCR: DAT_EN_AUTO_RTS Position */
#define DAT_UART_REG_DAT_UART_FCR_DAT_EN_AUTO_RTS_Msk (0x01UL << DAT_UART_REG_DAT_UART_FCR_DAT_EN_AUTO_RTS_Pos)/*!< DAT_UART_REG DAT_UART_FCR: DAT_EN_AUTO_RTS Mask */
#define DAT_UART_REG_DAT_UART_FCR_DAT_EN_AUTO_CTS_Pos 5                                               /*!< DAT_UART_REG DAT_UART_FCR: DAT_EN_AUTO_CTS Position */
#define DAT_UART_REG_DAT_UART_FCR_DAT_EN_AUTO_CTS_Msk (0x01UL << DAT_UART_REG_DAT_UART_FCR_DAT_EN_AUTO_CTS_Pos)/*!< DAT_UART_REG DAT_UART_FCR: DAT_EN_AUTO_CTS Mask */
#define DAT_UART_REG_DAT_UART_FCR_DAT_RXFIFO_TRGLVL_Pos 6                                             /*!< DAT_UART_REG DAT_UART_FCR: DAT_RXFIFO_TRGLVL Position */
#define DAT_UART_REG_DAT_UART_FCR_DAT_RXFIFO_TRGLVL_Msk (0x03UL << DAT_UART_REG_DAT_UART_FCR_DAT_RXFIFO_TRGLVL_Pos)/*!< DAT_UART_REG DAT_UART_FCR: DAT_RXFIFO_TRGLVL Mask */

/* --------------------------  DAT_UART_REG_DAT_UART_LCR  ------------------------- */
#define DAT_UART_REG_DAT_UART_LCR_DAT_WORD_LEN_Pos 0                                                  /*!< DAT_UART_REG DAT_UART_LCR: DAT_WORD_LEN Position */
#define DAT_UART_REG_DAT_UART_LCR_DAT_WORD_LEN_Msk (0x03UL << DAT_UART_REG_DAT_UART_LCR_DAT_WORD_LEN_Pos)/*!< DAT_UART_REG DAT_UART_LCR: DAT_WORD_LEN Mask */
#define DAT_UART_REG_DAT_UART_LCR_DAT_STOP_BIT_Pos 2                                                  /*!< DAT_UART_REG DAT_UART_LCR: DAT_STOP_BIT Position */
#define DAT_UART_REG_DAT_UART_LCR_DAT_STOP_BIT_Msk (0x01UL << DAT_UART_REG_DAT_UART_LCR_DAT_STOP_BIT_Pos)/*!< DAT_UART_REG DAT_UART_LCR: DAT_STOP_BIT Mask */
#define DAT_UART_REG_DAT_UART_LCR_DAT_PARITY_EN_Pos 3                                                 /*!< DAT_UART_REG DAT_UART_LCR: DAT_PARITY_EN Position */
#define DAT_UART_REG_DAT_UART_LCR_DAT_PARITY_EN_Msk (0x01UL << DAT_UART_REG_DAT_UART_LCR_DAT_PARITY_EN_Pos)/*!< DAT_UART_REG DAT_UART_LCR: DAT_PARITY_EN Mask */
#define DAT_UART_REG_DAT_UART_LCR_DAT_EVEN_PARITY_Pos 4                                               /*!< DAT_UART_REG DAT_UART_LCR: DAT_EVEN_PARITY Position */
#define DAT_UART_REG_DAT_UART_LCR_DAT_EVEN_PARITY_Msk (0x01UL << DAT_UART_REG_DAT_UART_LCR_DAT_EVEN_PARITY_Pos)/*!< DAT_UART_REG DAT_UART_LCR: DAT_EVEN_PARITY Mask */
#define DAT_UART_REG_DAT_UART_LCR_DAT_FORCE_PARITY_Pos 5                                              /*!< DAT_UART_REG DAT_UART_LCR: DAT_FORCE_PARITY Position */
#define DAT_UART_REG_DAT_UART_LCR_DAT_FORCE_PARITY_Msk (0x01UL << DAT_UART_REG_DAT_UART_LCR_DAT_FORCE_PARITY_Pos)/*!< DAT_UART_REG DAT_UART_LCR: DAT_FORCE_PARITY Mask */
#define DAT_UART_REG_DAT_UART_LCR_DAT_SET_BREAK_Pos 6                                                 /*!< DAT_UART_REG DAT_UART_LCR: DAT_SET_BREAK Position */
#define DAT_UART_REG_DAT_UART_LCR_DAT_SET_BREAK_Msk (0x01UL << DAT_UART_REG_DAT_UART_LCR_DAT_SET_BREAK_Pos)/*!< DAT_UART_REG DAT_UART_LCR: DAT_SET_BREAK Mask */
#define DAT_UART_REG_DAT_UART_LCR_DAT_DLAB_Pos 7                                                      /*!< DAT_UART_REG DAT_UART_LCR: DAT_DLAB Position */
#define DAT_UART_REG_DAT_UART_LCR_DAT_DLAB_Msk (0x01UL << DAT_UART_REG_DAT_UART_LCR_DAT_DLAB_Pos)     /*!< DAT_UART_REG DAT_UART_LCR: DAT_DLAB Mask */

/* --------------------------  DAT_UART_REG_DAT_UART_MCR  ------------------------- */
#define DAT_UART_REG_DAT_UART_MCR_DAT_DTR_Pos 0                                                       /*!< DAT_UART_REG DAT_UART_MCR: DAT_DTR Position */
#define DAT_UART_REG_DAT_UART_MCR_DAT_DTR_Msk (0x01UL << DAT_UART_REG_DAT_UART_MCR_DAT_DTR_Pos)       /*!< DAT_UART_REG DAT_UART_MCR: DAT_DTR Mask */
#define DAT_UART_REG_DAT_UART_MCR_DAT_RTS_Pos 1                                                       /*!< DAT_UART_REG DAT_UART_MCR: DAT_RTS Position */
#define DAT_UART_REG_DAT_UART_MCR_DAT_RTS_Msk (0x01UL << DAT_UART_REG_DAT_UART_MCR_DAT_RTS_Pos)       /*!< DAT_UART_REG DAT_UART_MCR: DAT_RTS Mask */
#define DAT_UART_REG_DAT_UART_MCR_DAT_OUT_1_Pos 2                                                     /*!< DAT_UART_REG DAT_UART_MCR: DAT_OUT_1 Position */
#define DAT_UART_REG_DAT_UART_MCR_DAT_OUT_1_Msk (0x01UL << DAT_UART_REG_DAT_UART_MCR_DAT_OUT_1_Pos)   /*!< DAT_UART_REG DAT_UART_MCR: DAT_OUT_1 Mask */
#define DAT_UART_REG_DAT_UART_MCR_DAT_OUT_2_Pos 3                                                     /*!< DAT_UART_REG DAT_UART_MCR: DAT_OUT_2 Position */
#define DAT_UART_REG_DAT_UART_MCR_DAT_OUT_2_Msk (0x01UL << DAT_UART_REG_DAT_UART_MCR_DAT_OUT_2_Pos)   /*!< DAT_UART_REG DAT_UART_MCR: DAT_OUT_2 Mask */
#define DAT_UART_REG_DAT_UART_MCR_DAT_LOOP_BACK_Pos 4                                                 /*!< DAT_UART_REG DAT_UART_MCR: DAT_LOOP_BACK Position */
#define DAT_UART_REG_DAT_UART_MCR_DAT_LOOP_BACK_Msk (0x01UL << DAT_UART_REG_DAT_UART_MCR_DAT_LOOP_BACK_Pos)/*!< DAT_UART_REG DAT_UART_MCR: DAT_LOOP_BACK Mask */
#define DAT_UART_REG_DAT_UART_MCR_DAT_DE_RTS_Pos 5                                                    /*!< DAT_UART_REG DAT_UART_MCR: DAT_DE_RTS Position */
#define DAT_UART_REG_DAT_UART_MCR_DAT_DE_RTS_Msk (0x01UL << DAT_UART_REG_DAT_UART_MCR_DAT_DE_RTS_Pos) /*!< DAT_UART_REG DAT_UART_MCR: DAT_DE_RTS Mask */

/* --------------------------  DAT_UART_REG_DAT_UART_LSR  ------------------------- */
#define DAT_UART_REG_DAT_UART_LSR_DAT_DATA_RDY_Pos 0                                                  /*!< DAT_UART_REG DAT_UART_LSR: DAT_DATA_RDY Position */
#define DAT_UART_REG_DAT_UART_LSR_DAT_DATA_RDY_Msk (0x01UL << DAT_UART_REG_DAT_UART_LSR_DAT_DATA_RDY_Pos)/*!< DAT_UART_REG DAT_UART_LSR: DAT_DATA_RDY Mask */
#define DAT_UART_REG_DAT_UART_LSR_DAT_OVERRUN_ERR_Pos 1                                               /*!< DAT_UART_REG DAT_UART_LSR: DAT_OVERRUN_ERR Position */
#define DAT_UART_REG_DAT_UART_LSR_DAT_OVERRUN_ERR_Msk (0x01UL << DAT_UART_REG_DAT_UART_LSR_DAT_OVERRUN_ERR_Pos)/*!< DAT_UART_REG DAT_UART_LSR: DAT_OVERRUN_ERR Mask */
#define DAT_UART_REG_DAT_UART_LSR_DAT_PARITY_ERR_Pos 2                                                /*!< DAT_UART_REG DAT_UART_LSR: DAT_PARITY_ERR Position */
#define DAT_UART_REG_DAT_UART_LSR_DAT_PARITY_ERR_Msk (0x01UL << DAT_UART_REG_DAT_UART_LSR_DAT_PARITY_ERR_Pos)/*!< DAT_UART_REG DAT_UART_LSR: DAT_PARITY_ERR Mask */
#define DAT_UART_REG_DAT_UART_LSR_DAT_FRAMING_ERR_Pos 3                                               /*!< DAT_UART_REG DAT_UART_LSR: DAT_FRAMING_ERR Position */
#define DAT_UART_REG_DAT_UART_LSR_DAT_FRAMING_ERR_Msk (0x01UL << DAT_UART_REG_DAT_UART_LSR_DAT_FRAMING_ERR_Pos)/*!< DAT_UART_REG DAT_UART_LSR: DAT_FRAMING_ERR Mask */
#define DAT_UART_REG_DAT_UART_LSR_DAT_BREAK_INT_Pos 4                                                 /*!< DAT_UART_REG DAT_UART_LSR: DAT_BREAK_INT Position */
#define DAT_UART_REG_DAT_UART_LSR_DAT_BREAK_INT_Msk (0x01UL << DAT_UART_REG_DAT_UART_LSR_DAT_BREAK_INT_Pos)/*!< DAT_UART_REG DAT_UART_LSR: DAT_BREAK_INT Mask */
#define DAT_UART_REG_DAT_UART_LSR_DAT_THR_EMPTY_Pos 5                                                 /*!< DAT_UART_REG DAT_UART_LSR: DAT_THR_EMPTY Position */
#define DAT_UART_REG_DAT_UART_LSR_DAT_THR_EMPTY_Msk (0x01UL << DAT_UART_REG_DAT_UART_LSR_DAT_THR_EMPTY_Pos)/*!< DAT_UART_REG DAT_UART_LSR: DAT_THR_EMPTY Mask */
#define DAT_UART_REG_DAT_UART_LSR_DAT_TX_EMPTY_Pos 6                                                  /*!< DAT_UART_REG DAT_UART_LSR: DAT_TX_EMPTY Position */
#define DAT_UART_REG_DAT_UART_LSR_DAT_TX_EMPTY_Msk (0x01UL << DAT_UART_REG_DAT_UART_LSR_DAT_TX_EMPTY_Pos)/*!< DAT_UART_REG DAT_UART_LSR: DAT_TX_EMPTY Mask */
#define DAT_UART_REG_DAT_UART_LSR_DAT_FIFODATA_ERR_Pos 7                                              /*!< DAT_UART_REG DAT_UART_LSR: DAT_FIFODATA_ERR Position */
#define DAT_UART_REG_DAT_UART_LSR_DAT_FIFODATA_ERR_Msk (0x01UL << DAT_UART_REG_DAT_UART_LSR_DAT_FIFODATA_ERR_Pos)/*!< DAT_UART_REG DAT_UART_LSR: DAT_FIFODATA_ERR Mask */

/* --------------------------  DAT_UART_REG_DAT_UART_MSR  ------------------------- */
#define DAT_UART_REG_DAT_UART_MSR_DAT_DELTA_CTS_Pos 0                                                 /*!< DAT_UART_REG DAT_UART_MSR: DAT_DELTA_CTS Position */
#define DAT_UART_REG_DAT_UART_MSR_DAT_DELTA_CTS_Msk (0x01UL << DAT_UART_REG_DAT_UART_MSR_DAT_DELTA_CTS_Pos)/*!< DAT_UART_REG DAT_UART_MSR: DAT_DELTA_CTS Mask */
#define DAT_UART_REG_DAT_UART_MSR_DAT_DELTA_DSR_Pos 1                                                 /*!< DAT_UART_REG DAT_UART_MSR: DAT_DELTA_DSR Position */
#define DAT_UART_REG_DAT_UART_MSR_DAT_DELTA_DSR_Msk (0x01UL << DAT_UART_REG_DAT_UART_MSR_DAT_DELTA_DSR_Pos)/*!< DAT_UART_REG DAT_UART_MSR: DAT_DELTA_DSR Mask */
#define DAT_UART_REG_DAT_UART_MSR_DAT_TRAILEDGE_RI_Pos 2                                              /*!< DAT_UART_REG DAT_UART_MSR: DAT_TRAILEDGE_RI Position */
#define DAT_UART_REG_DAT_UART_MSR_DAT_TRAILEDGE_RI_Msk (0x01UL << DAT_UART_REG_DAT_UART_MSR_DAT_TRAILEDGE_RI_Pos)/*!< DAT_UART_REG DAT_UART_MSR: DAT_TRAILEDGE_RI Mask */
#define DAT_UART_REG_DAT_UART_MSR_DAT_DELTA_CD_Pos 3                                                  /*!< DAT_UART_REG DAT_UART_MSR: DAT_DELTA_CD Position */
#define DAT_UART_REG_DAT_UART_MSR_DAT_DELTA_CD_Msk (0x01UL << DAT_UART_REG_DAT_UART_MSR_DAT_DELTA_CD_Pos)/*!< DAT_UART_REG DAT_UART_MSR: DAT_DELTA_CD Mask */
#define DAT_UART_REG_DAT_UART_MSR_DAT_CTS_Pos 4                                                       /*!< DAT_UART_REG DAT_UART_MSR: DAT_CTS Position */
#define DAT_UART_REG_DAT_UART_MSR_DAT_CTS_Msk (0x01UL << DAT_UART_REG_DAT_UART_MSR_DAT_CTS_Pos)       /*!< DAT_UART_REG DAT_UART_MSR: DAT_CTS Mask */
#define DAT_UART_REG_DAT_UART_MSR_DAT_DSR_Pos 5                                                       /*!< DAT_UART_REG DAT_UART_MSR: DAT_DSR Position */
#define DAT_UART_REG_DAT_UART_MSR_DAT_DSR_Msk (0x01UL << DAT_UART_REG_DAT_UART_MSR_DAT_DSR_Pos)       /*!< DAT_UART_REG DAT_UART_MSR: DAT_DSR Mask */
#define DAT_UART_REG_DAT_UART_MSR_DAT_RI_Pos  6                                                       /*!< DAT_UART_REG DAT_UART_MSR: DAT_RI Position */
#define DAT_UART_REG_DAT_UART_MSR_DAT_RI_Msk  (0x01UL << DAT_UART_REG_DAT_UART_MSR_DAT_RI_Pos)        /*!< DAT_UART_REG DAT_UART_MSR: DAT_RI Mask  */
#define DAT_UART_REG_DAT_UART_MSR_DAT_CD_Pos  7                                                       /*!< DAT_UART_REG DAT_UART_MSR: DAT_CD Position */
#define DAT_UART_REG_DAT_UART_MSR_DAT_CD_Msk  (0x01UL << DAT_UART_REG_DAT_UART_MSR_DAT_CD_Pos)        /*!< DAT_UART_REG DAT_UART_MSR: DAT_CD Mask  */

/* --------------------------  DAT_UART_REG_DAT_UART_SPR  ------------------------- */
#define DAT_UART_REG_DAT_UART_SPR_DAT_BRDC_DIV_Pos 0                                                  /*!< DAT_UART_REG DAT_UART_SPR: DAT_BRDC_DIV Position */
#define DAT_UART_REG_DAT_UART_SPR_DAT_BRDC_DIV_Msk (0x0000ffffUL << DAT_UART_REG_DAT_UART_SPR_DAT_BRDC_DIV_Pos)/*!< DAT_UART_REG DAT_UART_SPR: DAT_BRDC_DIV Mask */

/* -------------------------  DAT_UART_REG_DAT_UART_RTHR  ------------------------- */
#define DAT_UART_REG_DAT_UART_RTHR_DAT_RTHR_L_Pos 0                                                   /*!< DAT_UART_REG DAT_UART_RTHR: DAT_RTHR_L Position */
#define DAT_UART_REG_DAT_UART_RTHR_DAT_RTHR_L_Msk (0x0fUL << DAT_UART_REG_DAT_UART_RTHR_DAT_RTHR_L_Pos)/*!< DAT_UART_REG DAT_UART_RTHR: DAT_RTHR_L Mask */
#define DAT_UART_REG_DAT_UART_RTHR_DAT_RTHR_H_Pos 4                                                   /*!< DAT_UART_REG DAT_UART_RTHR: DAT_RTHR_H Position */
#define DAT_UART_REG_DAT_UART_RTHR_DAT_RTHR_H_Msk (0x0fUL << DAT_UART_REG_DAT_UART_RTHR_DAT_RTHR_H_Pos)/*!< DAT_UART_REG DAT_UART_RTHR: DAT_RTHR_H Mask */

/* --------------------------  DAT_UART_REG_DAT_UART_ISR  ------------------------- */
#define DAT_UART_REG_DAT_UART_ISR_DAT_INT_IDCODE_Pos 0                                                /*!< DAT_UART_REG DAT_UART_ISR: DAT_INT_IDCODE Position */
#define DAT_UART_REG_DAT_UART_ISR_DAT_INT_IDCODE_Msk (0x0fUL << DAT_UART_REG_DAT_UART_ISR_DAT_INT_IDCODE_Pos)/*!< DAT_UART_REG DAT_UART_ISR: DAT_INT_IDCODE Mask */
#define DAT_UART_REG_DAT_UART_ISR_DAT_RX_IDLE_Pos 4                                                   /*!< DAT_UART_REG DAT_UART_ISR: DAT_RX_IDLE Position */
#define DAT_UART_REG_DAT_UART_ISR_DAT_RX_IDLE_Msk (0x01UL << DAT_UART_REG_DAT_UART_ISR_DAT_RX_IDLE_Pos)/*!< DAT_UART_REG DAT_UART_ISR: DAT_RX_IDLE Mask */
#define DAT_UART_REG_DAT_UART_ISR_DAT_TX_IDLE_Pos 5                                                   /*!< DAT_UART_REG DAT_UART_ISR: DAT_TX_IDLE Position */
#define DAT_UART_REG_DAT_UART_ISR_DAT_TX_IDLE_Msk (0x01UL << DAT_UART_REG_DAT_UART_ISR_DAT_TX_IDLE_Pos)/*!< DAT_UART_REG DAT_UART_ISR: DAT_TX_IDLE Mask */
#define DAT_UART_REG_DAT_UART_ISR_DAT_FIFOS_ENABLED_Pos 6                                             /*!< DAT_UART_REG DAT_UART_ISR: DAT_FIFOS_ENABLED Position */
#define DAT_UART_REG_DAT_UART_ISR_DAT_FIFOS_ENABLED_Msk (0x03UL << DAT_UART_REG_DAT_UART_ISR_DAT_FIFOS_ENABLED_Pos)/*!< DAT_UART_REG DAT_UART_ISR: DAT_FIFOS_ENABLED Mask */

/* -------------------------  DAT_UART_REG_DAT_UART_TTHR  ------------------------- */
#define DAT_UART_REG_DAT_UART_TTHR_DAT_TTHR_L_Pos 0                                                   /*!< DAT_UART_REG DAT_UART_TTHR: DAT_TTHR_L Position */
#define DAT_UART_REG_DAT_UART_TTHR_DAT_TTHR_L_Msk (0x0fUL << DAT_UART_REG_DAT_UART_TTHR_DAT_TTHR_L_Pos)/*!< DAT_UART_REG DAT_UART_TTHR: DAT_TTHR_L Mask */
#define DAT_UART_REG_DAT_UART_TTHR_DAT_TTHR_H_Pos 4                                                   /*!< DAT_UART_REG DAT_UART_TTHR: DAT_TTHR_H Position */
#define DAT_UART_REG_DAT_UART_TTHR_DAT_TTHR_H_Msk (0x0fUL << DAT_UART_REG_DAT_UART_TTHR_DAT_TTHR_H_Pos)/*!< DAT_UART_REG DAT_UART_TTHR: DAT_TTHR_H Mask */

/* ------------------------  DAT_UART_REG_DAT_UART_INT_MAP  ----------------------- */
#define DAT_UART_REG_DAT_UART_INT_MAP_DAT_RX_RECIEVED_Pos 0                                           /*!< DAT_UART_REG DAT_UART_INT_MAP: DAT_RX_RECIEVED Position */
#define DAT_UART_REG_DAT_UART_INT_MAP_DAT_RX_RECIEVED_Msk (0x01UL << DAT_UART_REG_DAT_UART_INT_MAP_DAT_RX_RECIEVED_Pos)/*!< DAT_UART_REG DAT_UART_INT_MAP: DAT_RX_RECIEVED Mask */
#define DAT_UART_REG_DAT_UART_INT_MAP_DAT_RX_FIFO_TO_Pos 1                                            /*!< DAT_UART_REG DAT_UART_INT_MAP: DAT_RX_FIFO_TO Position */
#define DAT_UART_REG_DAT_UART_INT_MAP_DAT_RX_FIFO_TO_Msk (0x01UL << DAT_UART_REG_DAT_UART_INT_MAP_DAT_RX_FIFO_TO_Pos)/*!< DAT_UART_REG DAT_UART_INT_MAP: DAT_RX_FIFO_TO Mask */
#define DAT_UART_REG_DAT_UART_INT_MAP_DAT_TX_L_Pos 2                                                  /*!< DAT_UART_REG DAT_UART_INT_MAP: DAT_TX_L Position */
#define DAT_UART_REG_DAT_UART_INT_MAP_DAT_TX_L_Msk (0x01UL << DAT_UART_REG_DAT_UART_INT_MAP_DAT_TX_L_Pos)/*!< DAT_UART_REG DAT_UART_INT_MAP: DAT_TX_L Mask */
#define DAT_UART_REG_DAT_UART_INT_MAP_DAT_TX_H_Pos 3                                                  /*!< DAT_UART_REG DAT_UART_INT_MAP: DAT_TX_H Position */
#define DAT_UART_REG_DAT_UART_INT_MAP_DAT_TX_H_Msk (0x01UL << DAT_UART_REG_DAT_UART_INT_MAP_DAT_TX_H_Pos)/*!< DAT_UART_REG DAT_UART_INT_MAP: DAT_TX_H Mask */
#define DAT_UART_REG_DAT_UART_INT_MAP_DAT_TX_EMPTY2_Pos 4                                             /*!< DAT_UART_REG DAT_UART_INT_MAP: DAT_TX_EMPTY2 Position */
#define DAT_UART_REG_DAT_UART_INT_MAP_DAT_TX_EMPTY2_Msk (0x01UL << DAT_UART_REG_DAT_UART_INT_MAP_DAT_TX_EMPTY2_Pos)/*!< DAT_UART_REG DAT_UART_INT_MAP: DAT_TX_EMPTY2 Mask */
#define DAT_UART_REG_DAT_UART_INT_MAP_DAT_OVERRUN_Pos 5                                               /*!< DAT_UART_REG DAT_UART_INT_MAP: DAT_OVERRUN Position */
#define DAT_UART_REG_DAT_UART_INT_MAP_DAT_OVERRUN_Msk (0x01UL << DAT_UART_REG_DAT_UART_INT_MAP_DAT_OVERRUN_Pos)/*!< DAT_UART_REG DAT_UART_INT_MAP: DAT_OVERRUN Mask */
#define DAT_UART_REG_DAT_UART_INT_MAP_DAT_FRAMING_Pos 6                                               /*!< DAT_UART_REG DAT_UART_INT_MAP: DAT_FRAMING Position */
#define DAT_UART_REG_DAT_UART_INT_MAP_DAT_FRAMING_Msk (0x01UL << DAT_UART_REG_DAT_UART_INT_MAP_DAT_FRAMING_Pos)/*!< DAT_UART_REG DAT_UART_INT_MAP: DAT_FRAMING Mask */
#define DAT_UART_REG_DAT_UART_INT_MAP_DAT_BREAK_Pos 7                                                 /*!< DAT_UART_REG DAT_UART_INT_MAP: DAT_BREAK Position */
#define DAT_UART_REG_DAT_UART_INT_MAP_DAT_BREAK_Msk (0x01UL << DAT_UART_REG_DAT_UART_INT_MAP_DAT_BREAK_Pos)/*!< DAT_UART_REG DAT_UART_INT_MAP: DAT_BREAK Mask */
#define DAT_UART_REG_DAT_UART_INT_MAP_DAT_PARITY_Pos 8                                                /*!< DAT_UART_REG DAT_UART_INT_MAP: DAT_PARITY Position */
#define DAT_UART_REG_DAT_UART_INT_MAP_DAT_PARITY_Msk (0x01UL << DAT_UART_REG_DAT_UART_INT_MAP_DAT_PARITY_Pos)/*!< DAT_UART_REG DAT_UART_INT_MAP: DAT_PARITY Mask */
#define DAT_UART_REG_DAT_UART_INT_MAP_DAT_MODEN_INT_Pos 9                                             /*!< DAT_UART_REG DAT_UART_INT_MAP: DAT_MODEN_INT Position */
#define DAT_UART_REG_DAT_UART_INT_MAP_DAT_MODEN_INT_Msk (0x01UL << DAT_UART_REG_DAT_UART_INT_MAP_DAT_MODEN_INT_Pos)/*!< DAT_UART_REG DAT_UART_INT_MAP: DAT_MODEN_INT Mask */

/* ------------------------  DAT_UART_REG_DAT_UART_POINTER  ----------------------- */
#define DAT_UART_REG_DAT_UART_POINTER_DAT_ROP_A_Pos 0                                                 /*!< DAT_UART_REG DAT_UART_POINTER: DAT_ROP_A Position */
#define DAT_UART_REG_DAT_UART_POINTER_DAT_ROP_A_Msk (0x0fUL << DAT_UART_REG_DAT_UART_POINTER_DAT_ROP_A_Pos)/*!< DAT_UART_REG DAT_UART_POINTER: DAT_ROP_A Mask */
#define DAT_UART_REG_DAT_UART_POINTER_DAT_RIP_A_Pos 4                                                 /*!< DAT_UART_REG DAT_UART_POINTER: DAT_RIP_A Position */
#define DAT_UART_REG_DAT_UART_POINTER_DAT_RIP_A_Msk (0x0fUL << DAT_UART_REG_DAT_UART_POINTER_DAT_RIP_A_Pos)/*!< DAT_UART_REG DAT_UART_POINTER: DAT_RIP_A Mask */
#define DAT_UART_REG_DAT_UART_POINTER_DAT_TOP_A_Pos 8                                                 /*!< DAT_UART_REG DAT_UART_POINTER: DAT_TOP_A Position */
#define DAT_UART_REG_DAT_UART_POINTER_DAT_TOP_A_Msk (0x0fUL << DAT_UART_REG_DAT_UART_POINTER_DAT_TOP_A_Pos)/*!< DAT_UART_REG DAT_UART_POINTER: DAT_TOP_A Mask */
#define DAT_UART_REG_DAT_UART_POINTER_DAT_TIP_A_Pos 12                                                /*!< DAT_UART_REG DAT_UART_POINTER: DAT_TIP_A Position */
#define DAT_UART_REG_DAT_UART_POINTER_DAT_TIP_A_Msk (0x0fUL << DAT_UART_REG_DAT_UART_POINTER_DAT_TIP_A_Pos)/*!< DAT_UART_REG DAT_UART_POINTER: DAT_TIP_A Mask */


/* ================================================================================ */
/* ================          Group 'UART' Position & Mask          ================ */
/* ================================================================================ */


/* ----------------------------------  UART_DATA  --------------------------------- */
#define UART_DATA_DATA_Pos                    0                                                       /*!< UART DATA: DATA Position                */
#define UART_DATA_DATA_Msk                    (0x000000ffUL << UART_DATA_DATA_Pos)                    /*!< UART DATA: DATA Mask                    */

/* ----------------------------------  UART_IER  ---------------------------------- */
#define UART_IER_DATA_RDY_IE_Pos              0                                                       /*!< UART IER: DATA_RDY_IE Position          */
#define UART_IER_DATA_RDY_IE_Msk              (0x01UL << UART_IER_DATA_RDY_IE_Pos)                    /*!< UART IER: DATA_RDY_IE Mask              */
#define UART_IER_THR_EMPTY_IE_Pos             1                                                       /*!< UART IER: THR_EMPTY_IE Position         */
#define UART_IER_THR_EMPTY_IE_Msk             (0x01UL << UART_IER_THR_EMPTY_IE_Pos)                   /*!< UART IER: THR_EMPTY_IE Mask             */
#define UART_IER_RX_LINESTS_IE_Pos            2                                                       /*!< UART IER: RX_LINESTS_IE Position        */
#define UART_IER_RX_LINESTS_IE_Msk            (0x01UL << UART_IER_RX_LINESTS_IE_Pos)                  /*!< UART IER: RX_LINESTS_IE Mask            */
#define UART_IER_MDM_STS_IE_Pos               3                                                       /*!< UART IER: MDM_STS_IE Position           */
#define UART_IER_MDM_STS_IE_Msk               (0x01UL << UART_IER_MDM_STS_IE_Pos)                     /*!< UART IER: MDM_STS_IE Mask               */
#define UART_IER_TX_THRH_IE_Pos               4                                                       /*!< UART IER: TX_THRH_IE Position           */
#define UART_IER_TX_THRH_IE_Msk               (0x01UL << UART_IER_TX_THRH_IE_Pos)                     /*!< UART IER: TX_THRH_IE Mask               */
#define UART_IER_TX_THRL_IE_Pos               5                                                       /*!< UART IER: TX_THRL_IE Position           */
#define UART_IER_TX_THRL_IE_Msk               (0x01UL << UART_IER_TX_THRL_IE_Pos)                     /*!< UART IER: TX_THRL_IE Mask               */

/* ----------------------------------  UART_FCR  ---------------------------------- */
#define UART_FCR_FIFO_EN_Pos                  0                                                       /*!< UART FCR: FIFO_EN Position              */
#define UART_FCR_FIFO_EN_Msk                  (0x01UL << UART_FCR_FIFO_EN_Pos)                        /*!< UART FCR: FIFO_EN Mask                  */
#define UART_FCR_RXFIFO_RST_Pos               1                                                       /*!< UART FCR: RXFIFO_RST Position           */
#define UART_FCR_RXFIFO_RST_Msk               (0x01UL << UART_FCR_RXFIFO_RST_Pos)                     /*!< UART FCR: RXFIFO_RST Mask               */
#define UART_FCR_TXFIFO_RST_Pos               2                                                       /*!< UART FCR: TXFIFO_RST Position           */
#define UART_FCR_TXFIFO_RST_Msk               (0x01UL << UART_FCR_TXFIFO_RST_Pos)                     /*!< UART FCR: TXFIFO_RST Mask               */
#define UART_FCR_DMA_MODE_Pos                 3                                                       /*!< UART FCR: DMA_MODE Position             */
#define UART_FCR_DMA_MODE_Msk                 (0x01UL << UART_FCR_DMA_MODE_Pos)                       /*!< UART FCR: DMA_MODE Mask                 */
#define UART_FCR_AUTO_RTS_Pos                 4                                                       /*!< UART FCR: AUTO_RTS Position             */
#define UART_FCR_AUTO_RTS_Msk                 (0x01UL << UART_FCR_AUTO_RTS_Pos)                       /*!< UART FCR: AUTO_RTS Mask                 */
#define UART_FCR_AUTO_CTS_Pos                 5                                                       /*!< UART FCR: AUTO_CTS Position             */
#define UART_FCR_AUTO_CTS_Msk                 (0x01UL << UART_FCR_AUTO_CTS_Pos)                       /*!< UART FCR: AUTO_CTS Mask                 */
#define UART_FCR_RXFIFO_TRGLVL_Pos            6                                                       /*!< UART FCR: RXFIFO_TRGLVL Position        */
#define UART_FCR_RXFIFO_TRGLVL_Msk            (0x03UL << UART_FCR_RXFIFO_TRGLVL_Pos)                  /*!< UART FCR: RXFIFO_TRGLVL Mask            */

/* ----------------------------------  UART_LCR  ---------------------------------- */
#define UART_LCR_WORD_LEN_Pos                 0                                                       /*!< UART LCR: WORD_LEN Position             */
#define UART_LCR_WORD_LEN_Msk                 (0x03UL << UART_LCR_WORD_LEN_Pos)                       /*!< UART LCR: WORD_LEN Mask                 */
#define UART_LCR_STOP_BIT_Pos                 2                                                       /*!< UART LCR: STOP_BIT Position             */
#define UART_LCR_STOP_BIT_Msk                 (0x01UL << UART_LCR_STOP_BIT_Pos)                       /*!< UART LCR: STOP_BIT Mask                 */
#define UART_LCR_PARITY_EN_Pos                3                                                       /*!< UART LCR: PARITY_EN Position            */
#define UART_LCR_PARITY_EN_Msk                (0x01UL << UART_LCR_PARITY_EN_Pos)                      /*!< UART LCR: PARITY_EN Mask                */
#define UART_LCR_EVEN_PARITY_Pos              4                                                       /*!< UART LCR: EVEN_PARITY Position          */
#define UART_LCR_EVEN_PARITY_Msk              (0x01UL << UART_LCR_EVEN_PARITY_Pos)                    /*!< UART LCR: EVEN_PARITY Mask              */
#define UART_LCR_FORCE_PARITY_Pos             5                                                       /*!< UART LCR: FORCE_PARITY Position         */
#define UART_LCR_FORCE_PARITY_Msk             (0x01UL << UART_LCR_FORCE_PARITY_Pos)                   /*!< UART LCR: FORCE_PARITY Mask             */
#define UART_LCR_SET_BREAK_Pos                6                                                       /*!< UART LCR: SET_BREAK Position            */
#define UART_LCR_SET_BREAK_Msk                (0x01UL << UART_LCR_SET_BREAK_Pos)                      /*!< UART LCR: SET_BREAK Mask                */
#define UART_LCR_DLAB_Pos                     7                                                       /*!< UART LCR: DLAB Position                 */
#define UART_LCR_DLAB_Msk                     (0x01UL << UART_LCR_DLAB_Pos)                           /*!< UART LCR: DLAB Mask                     */

/* ----------------------------------  UART_MCR  ---------------------------------- */
#define UART_MCR_DTR_Pos                      0                                                       /*!< UART MCR: DTR Position                  */
#define UART_MCR_DTR_Msk                      (0x01UL << UART_MCR_DTR_Pos)                            /*!< UART MCR: DTR Mask                      */
#define UART_MCR_RTS_Pos                      1                                                       /*!< UART MCR: RTS Position                  */
#define UART_MCR_RTS_Msk                      (0x01UL << UART_MCR_RTS_Pos)                            /*!< UART MCR: RTS Mask                      */
#define UART_MCR_OUT_1_Pos                    2                                                       /*!< UART MCR: OUT_1 Position                */
#define UART_MCR_OUT_1_Msk                    (0x01UL << UART_MCR_OUT_1_Pos)                          /*!< UART MCR: OUT_1 Mask                    */
#define UART_MCR_OUT_2_Pos                    3                                                       /*!< UART MCR: OUT_2 Position                */
#define UART_MCR_OUT_2_Msk                    (0x01UL << UART_MCR_OUT_2_Pos)                          /*!< UART MCR: OUT_2 Mask                    */
#define UART_MCR_LOOP_BACK_Pos                4                                                       /*!< UART MCR: LOOP_BACK Position            */
#define UART_MCR_LOOP_BACK_Msk                (0x01UL << UART_MCR_LOOP_BACK_Pos)                      /*!< UART MCR: LOOP_BACK Mask                */
#define UART_MCR_DE_RTS_Pos                   5                                                       /*!< UART MCR: DE_RTS Position               */
#define UART_MCR_DE_RTS_Msk                   (0x01UL << UART_MCR_DE_RTS_Pos)                         /*!< UART MCR: DE_RTS Mask                   */

/* ----------------------------------  UART_LSR  ---------------------------------- */
#define UART_LSR_DATA_RDY_Pos                 0                                                       /*!< UART LSR: DATA_RDY Position             */
#define UART_LSR_DATA_RDY_Msk                 (0x01UL << UART_LSR_DATA_RDY_Pos)                       /*!< UART LSR: DATA_RDY Mask                 */
#define UART_LSR_OVERRUN_ERR_Pos              1                                                       /*!< UART LSR: OVERRUN_ERR Position          */
#define UART_LSR_OVERRUN_ERR_Msk              (0x01UL << UART_LSR_OVERRUN_ERR_Pos)                    /*!< UART LSR: OVERRUN_ERR Mask              */
#define UART_LSR_PARITY_ERR_Pos               2                                                       /*!< UART LSR: PARITY_ERR Position           */
#define UART_LSR_PARITY_ERR_Msk               (0x01UL << UART_LSR_PARITY_ERR_Pos)                     /*!< UART LSR: PARITY_ERR Mask               */
#define UART_LSR_FRAMING_ERR_Pos              3                                                       /*!< UART LSR: FRAMING_ERR Position          */
#define UART_LSR_FRAMING_ERR_Msk              (0x01UL << UART_LSR_FRAMING_ERR_Pos)                    /*!< UART LSR: FRAMING_ERR Mask              */
#define UART_LSR_BREAK_INT_Pos                4                                                       /*!< UART LSR: BREAK_INT Position            */
#define UART_LSR_BREAK_INT_Msk                (0x01UL << UART_LSR_BREAK_INT_Pos)                      /*!< UART LSR: BREAK_INT Mask                */
#define UART_LSR_THR_EMPTY_Pos                5                                                       /*!< UART LSR: THR_EMPTY Position            */
#define UART_LSR_THR_EMPTY_Msk                (0x01UL << UART_LSR_THR_EMPTY_Pos)                      /*!< UART LSR: THR_EMPTY Mask                */
#define UART_LSR_TX_EMPTY_Pos                 6                                                       /*!< UART LSR: TX_EMPTY Position             */
#define UART_LSR_TX_EMPTY_Msk                 (0x01UL << UART_LSR_TX_EMPTY_Pos)                       /*!< UART LSR: TX_EMPTY Mask                 */
#define UART_LSR_FIFODATA_ERR_Pos             7                                                       /*!< UART LSR: FIFODATA_ERR Position         */
#define UART_LSR_FIFODATA_ERR_Msk             (0x01UL << UART_LSR_FIFODATA_ERR_Pos)                   /*!< UART LSR: FIFODATA_ERR Mask             */

/* ----------------------------------  UART_MSR  ---------------------------------- */
#define UART_MSR_DELTA_CTS_Pos                0                                                       /*!< UART MSR: DELTA_CTS Position            */
#define UART_MSR_DELTA_CTS_Msk                (0x01UL << UART_MSR_DELTA_CTS_Pos)                      /*!< UART MSR: DELTA_CTS Mask                */
#define UART_MSR_DELTA_DSR_Pos                1                                                       /*!< UART MSR: DELTA_DSR Position            */
#define UART_MSR_DELTA_DSR_Msk                (0x01UL << UART_MSR_DELTA_DSR_Pos)                      /*!< UART MSR: DELTA_DSR Mask                */
#define UART_MSR_TRAILEDGE_RI_Pos             2                                                       /*!< UART MSR: TRAILEDGE_RI Position         */
#define UART_MSR_TRAILEDGE_RI_Msk             (0x01UL << UART_MSR_TRAILEDGE_RI_Pos)                   /*!< UART MSR: TRAILEDGE_RI Mask             */
#define UART_MSR_DELTA_CD_Pos                 3                                                       /*!< UART MSR: DELTA_CD Position             */
#define UART_MSR_DELTA_CD_Msk                 (0x01UL << UART_MSR_DELTA_CD_Pos)                       /*!< UART MSR: DELTA_CD Mask                 */
#define UART_MSR_CTS_Pos                      4                                                       /*!< UART MSR: CTS Position                  */
#define UART_MSR_CTS_Msk                      (0x01UL << UART_MSR_CTS_Pos)                            /*!< UART MSR: CTS Mask                      */
#define UART_MSR_DSR_Pos                      5                                                       /*!< UART MSR: DSR Position                  */
#define UART_MSR_DSR_Msk                      (0x01UL << UART_MSR_DSR_Pos)                            /*!< UART MSR: DSR Mask                      */
#define UART_MSR_RI_Pos                       6                                                       /*!< UART MSR: RI Position                   */
#define UART_MSR_RI_Msk                       (0x01UL << UART_MSR_RI_Pos)                             /*!< UART MSR: RI Mask                       */
#define UART_MSR_CD_Pos                       7                                                       /*!< UART MSR: CD Position                   */
#define UART_MSR_CD_Msk                       (0x01UL << UART_MSR_CD_Pos)                             /*!< UART MSR: CD Mask                       */

/* ----------------------------------  UART_SPR  ---------------------------------- */
#define UART_SPR_BRDC_DIV_Pos                 0                                                       /*!< UART SPR: BRDC_DIV Position             */
#define UART_SPR_BRDC_DIV_Msk                 (0x0000ffffUL << UART_SPR_BRDC_DIV_Pos)                 /*!< UART SPR: BRDC_DIV Mask                 */

/* ----------------------------------  UART_RTHR  --------------------------------- */
#define UART_RTHR_RTHR_L_Pos                  0                                                       /*!< UART RTHR: RTHR_L Position              */
#define UART_RTHR_RTHR_L_Msk                  (0x0fUL << UART_RTHR_RTHR_L_Pos)                        /*!< UART RTHR: RTHR_L Mask                  */
#define UART_RTHR_RTHR_H_Pos                  4                                                       /*!< UART RTHR: RTHR_H Position              */
#define UART_RTHR_RTHR_H_Msk                  (0x0fUL << UART_RTHR_RTHR_H_Pos)                        /*!< UART RTHR: RTHR_H Mask                  */

/* ----------------------------------  UART_ISR  ---------------------------------- */
#define UART_ISR_INT_IDCODE_Pos               0                                                       /*!< UART ISR: INT_IDCODE Position           */
#define UART_ISR_INT_IDCODE_Msk               (0x0fUL << UART_ISR_INT_IDCODE_Pos)                     /*!< UART ISR: INT_IDCODE Mask               */
#define UART_ISR_RX_IDLE_Pos                  4                                                       /*!< UART ISR: RX_IDLE Position              */
#define UART_ISR_RX_IDLE_Msk                  (0x01UL << UART_ISR_RX_IDLE_Pos)                        /*!< UART ISR: RX_IDLE Mask                  */
#define UART_ISR_TX_IDLE_Pos                  5                                                       /*!< UART ISR: TX_IDLE Position              */
#define UART_ISR_TX_IDLE_Msk                  (0x01UL << UART_ISR_TX_IDLE_Pos)                        /*!< UART ISR: TX_IDLE Mask                  */
#define UART_ISR_FIFOS_ENABLED_Pos            6                                                       /*!< UART ISR: FIFOS_ENABLED Position        */
#define UART_ISR_FIFOS_ENABLED_Msk            (0x03UL << UART_ISR_FIFOS_ENABLED_Pos)                  /*!< UART ISR: FIFOS_ENABLED Mask            */

/* ----------------------------------  UART_TTHR  --------------------------------- */
#define UART_TTHR_TTHR_L_Pos                  0                                                       /*!< UART TTHR: TTHR_L Position              */
#define UART_TTHR_TTHR_L_Msk                  (0x0fUL << UART_TTHR_TTHR_L_Pos)                        /*!< UART TTHR: TTHR_L Mask                  */
#define UART_TTHR_TTHR_H_Pos                  4                                                       /*!< UART TTHR: TTHR_H Position              */
#define UART_TTHR_TTHR_H_Msk                  (0x0fUL << UART_TTHR_TTHR_H_Pos)                        /*!< UART TTHR: TTHR_H Mask                  */

/* --------------------------------  UART_INT_MAP  -------------------------------- */
#define UART_INT_MAP_RX_RECIEVED_Pos          0                                                       /*!< UART INT_MAP: RX_RECIEVED Position      */
#define UART_INT_MAP_RX_RECIEVED_Msk          (0x01UL << UART_INT_MAP_RX_RECIEVED_Pos)                /*!< UART INT_MAP: RX_RECIEVED Mask          */
#define UART_INT_MAP_RX_FIFO_TO_Pos           1                                                       /*!< UART INT_MAP: RX_FIFO_TO Position       */
#define UART_INT_MAP_RX_FIFO_TO_Msk           (0x01UL << UART_INT_MAP_RX_FIFO_TO_Pos)                 /*!< UART INT_MAP: RX_FIFO_TO Mask           */
#define UART_INT_MAP_TX_L_Pos                 2                                                       /*!< UART INT_MAP: TX_L Position             */
#define UART_INT_MAP_TX_L_Msk                 (0x01UL << UART_INT_MAP_TX_L_Pos)                       /*!< UART INT_MAP: TX_L Mask                 */
#define UART_INT_MAP_TX_H_Pos                 3                                                       /*!< UART INT_MAP: TX_H Position             */
#define UART_INT_MAP_TX_H_Msk                 (0x01UL << UART_INT_MAP_TX_H_Pos)                       /*!< UART INT_MAP: TX_H Mask                 */
#define UART_INT_MAP_TX_EMPTY2_Pos            4                                                       /*!< UART INT_MAP: TX_EMPTY2 Position        */
#define UART_INT_MAP_TX_EMPTY2_Msk            (0x01UL << UART_INT_MAP_TX_EMPTY2_Pos)                  /*!< UART INT_MAP: TX_EMPTY2 Mask            */
#define UART_INT_MAP_OVERRUN_Pos              5                                                       /*!< UART INT_MAP: OVERRUN Position          */
#define UART_INT_MAP_OVERRUN_Msk              (0x01UL << UART_INT_MAP_OVERRUN_Pos)                    /*!< UART INT_MAP: OVERRUN Mask              */
#define UART_INT_MAP_FRAMING_Pos              6                                                       /*!< UART INT_MAP: FRAMING Position          */
#define UART_INT_MAP_FRAMING_Msk              (0x01UL << UART_INT_MAP_FRAMING_Pos)                    /*!< UART INT_MAP: FRAMING Mask              */
#define UART_INT_MAP_BREAK_Pos                7                                                       /*!< UART INT_MAP: BREAK Position            */
#define UART_INT_MAP_BREAK_Msk                (0x01UL << UART_INT_MAP_BREAK_Pos)                      /*!< UART INT_MAP: BREAK Mask                */
#define UART_INT_MAP_PARITY_Pos               8                                                       /*!< UART INT_MAP: PARITY Position           */
#define UART_INT_MAP_PARITY_Msk               (0x01UL << UART_INT_MAP_PARITY_Pos)                     /*!< UART INT_MAP: PARITY Mask               */
#define UART_INT_MAP_MODEN_INT_Pos            9                                                       /*!< UART INT_MAP: MODEN_INT Position        */
#define UART_INT_MAP_MODEN_INT_Msk            (0x01UL << UART_INT_MAP_MODEN_INT_Pos)                  /*!< UART INT_MAP: MODEN_INT Mask            */

/* --------------------------------  UART_POINTER  -------------------------------- */
#define UART_POINTER_ROP_A_Pos                0                                                       /*!< UART POINTER: ROP_A Position            */
#define UART_POINTER_ROP_A_Msk                (0x0fUL << UART_POINTER_ROP_A_Pos)                      /*!< UART POINTER: ROP_A Mask                */
#define UART_POINTER_RIP_A_Pos                4                                                       /*!< UART POINTER: RIP_A Position            */
#define UART_POINTER_RIP_A_Msk                (0x0fUL << UART_POINTER_RIP_A_Pos)                      /*!< UART POINTER: RIP_A Mask                */
#define UART_POINTER_TOP_A_Pos                8                                                       /*!< UART POINTER: TOP_A Position            */
#define UART_POINTER_TOP_A_Msk                (0x0fUL << UART_POINTER_TOP_A_Pos)                      /*!< UART POINTER: TOP_A Mask                */
#define UART_POINTER_TIP_A_Pos                12                                                      /*!< UART POINTER: TIP_A Position            */
#define UART_POINTER_TIP_A_Msk                (0x0fUL << UART_POINTER_TIP_A_Pos)                      /*!< UART POINTER: TIP_A Mask                */


/* ================================================================================ */
/* ================          struct 'DBG' Position & Mask          ================ */
/* ================================================================================ */


/* ----------------------------------  DBG_DATA  ---------------------------------- */
#define DBG_DATA_DATA_Pos                     0                                                       /*!< DBG DATA: DATA Position                 */
#define DBG_DATA_DATA_Msk                     (0x000000ffUL << DBG_DATA_DATA_Pos)                     /*!< DBG DATA: DATA Mask                     */

/* -----------------------------------  DBG_IER  ---------------------------------- */
#define DBG_IER_DATA_RDY_IE_Pos               0                                                       /*!< DBG IER: DATA_RDY_IE Position           */
#define DBG_IER_DATA_RDY_IE_Msk               (0x01UL << DBG_IER_DATA_RDY_IE_Pos)                     /*!< DBG IER: DATA_RDY_IE Mask               */
#define DBG_IER_THR_EMPTY_IE_Pos              1                                                       /*!< DBG IER: THR_EMPTY_IE Position          */
#define DBG_IER_THR_EMPTY_IE_Msk              (0x01UL << DBG_IER_THR_EMPTY_IE_Pos)                    /*!< DBG IER: THR_EMPTY_IE Mask              */
#define DBG_IER_RX_LINESTS_IE_Pos             2                                                       /*!< DBG IER: RX_LINESTS_IE Position         */
#define DBG_IER_RX_LINESTS_IE_Msk             (0x01UL << DBG_IER_RX_LINESTS_IE_Pos)                   /*!< DBG IER: RX_LINESTS_IE Mask             */
#define DBG_IER_MDM_STS_IE_Pos                3                                                       /*!< DBG IER: MDM_STS_IE Position            */
#define DBG_IER_MDM_STS_IE_Msk                (0x01UL << DBG_IER_MDM_STS_IE_Pos)                      /*!< DBG IER: MDM_STS_IE Mask                */
#define DBG_IER_TX_THRH_IE_Pos                4                                                       /*!< DBG IER: TX_THRH_IE Position            */
#define DBG_IER_TX_THRH_IE_Msk                (0x01UL << DBG_IER_TX_THRH_IE_Pos)                      /*!< DBG IER: TX_THRH_IE Mask                */
#define DBG_IER_TX_THRL_IE_Pos                5                                                       /*!< DBG IER: TX_THRL_IE Position            */
#define DBG_IER_TX_THRL_IE_Msk                (0x01UL << DBG_IER_TX_THRL_IE_Pos)                      /*!< DBG IER: TX_THRL_IE Mask                */

/* -----------------------------------  DBG_FCR  ---------------------------------- */
#define DBG_FCR_FIFO_EN_Pos                   0                                                       /*!< DBG FCR: FIFO_EN Position               */
#define DBG_FCR_FIFO_EN_Msk                   (0x01UL << DBG_FCR_FIFO_EN_Pos)                         /*!< DBG FCR: FIFO_EN Mask                   */
#define DBG_FCR_RXFIFO_RST_Pos                1                                                       /*!< DBG FCR: RXFIFO_RST Position            */
#define DBG_FCR_RXFIFO_RST_Msk                (0x01UL << DBG_FCR_RXFIFO_RST_Pos)                      /*!< DBG FCR: RXFIFO_RST Mask                */
#define DBG_FCR_TXFIFO_RST_Pos                2                                                       /*!< DBG FCR: TXFIFO_RST Position            */
#define DBG_FCR_TXFIFO_RST_Msk                (0x01UL << DBG_FCR_TXFIFO_RST_Pos)                      /*!< DBG FCR: TXFIFO_RST Mask                */
#define DBG_FCR_DMA_MODE_Pos                  3                                                       /*!< DBG FCR: DMA_MODE Position              */
#define DBG_FCR_DMA_MODE_Msk                  (0x01UL << DBG_FCR_DMA_MODE_Pos)                        /*!< DBG FCR: DMA_MODE Mask                  */
#define DBG_FCR_AUTO_RTS_Pos                  4                                                       /*!< DBG FCR: AUTO_RTS Position              */
#define DBG_FCR_AUTO_RTS_Msk                  (0x01UL << DBG_FCR_AUTO_RTS_Pos)                        /*!< DBG FCR: AUTO_RTS Mask                  */
#define DBG_FCR_AUTO_CTS_Pos                  5                                                       /*!< DBG FCR: AUTO_CTS Position              */
#define DBG_FCR_AUTO_CTS_Msk                  (0x01UL << DBG_FCR_AUTO_CTS_Pos)                        /*!< DBG FCR: AUTO_CTS Mask                  */
#define DBG_FCR_RXFIFO_TRGLVL_Pos             6                                                       /*!< DBG FCR: RXFIFO_TRGLVL Position         */
#define DBG_FCR_RXFIFO_TRGLVL_Msk             (0x03UL << DBG_FCR_RXFIFO_TRGLVL_Pos)                   /*!< DBG FCR: RXFIFO_TRGLVL Mask             */

/* -----------------------------------  DBG_LCR  ---------------------------------- */
#define DBG_LCR_WORD_LEN_Pos                  0                                                       /*!< DBG LCR: WORD_LEN Position              */
#define DBG_LCR_WORD_LEN_Msk                  (0x03UL << DBG_LCR_WORD_LEN_Pos)                        /*!< DBG LCR: WORD_LEN Mask                  */
#define DBG_LCR_STOP_BIT_Pos                  2                                                       /*!< DBG LCR: STOP_BIT Position              */
#define DBG_LCR_STOP_BIT_Msk                  (0x01UL << DBG_LCR_STOP_BIT_Pos)                        /*!< DBG LCR: STOP_BIT Mask                  */
#define DBG_LCR_PARITY_EN_Pos                 3                                                       /*!< DBG LCR: PARITY_EN Position             */
#define DBG_LCR_PARITY_EN_Msk                 (0x01UL << DBG_LCR_PARITY_EN_Pos)                       /*!< DBG LCR: PARITY_EN Mask                 */
#define DBG_LCR_EVEN_PARITY_Pos               4                                                       /*!< DBG LCR: EVEN_PARITY Position           */
#define DBG_LCR_EVEN_PARITY_Msk               (0x01UL << DBG_LCR_EVEN_PARITY_Pos)                     /*!< DBG LCR: EVEN_PARITY Mask               */
#define DBG_LCR_FORCE_PARITY_Pos              5                                                       /*!< DBG LCR: FORCE_PARITY Position          */
#define DBG_LCR_FORCE_PARITY_Msk              (0x01UL << DBG_LCR_FORCE_PARITY_Pos)                    /*!< DBG LCR: FORCE_PARITY Mask              */
#define DBG_LCR_SET_BREAK_Pos                 6                                                       /*!< DBG LCR: SET_BREAK Position             */
#define DBG_LCR_SET_BREAK_Msk                 (0x01UL << DBG_LCR_SET_BREAK_Pos)                       /*!< DBG LCR: SET_BREAK Mask                 */
#define DBG_LCR_DLAB_Pos                      7                                                       /*!< DBG LCR: DLAB Position                  */
#define DBG_LCR_DLAB_Msk                      (0x01UL << DBG_LCR_DLAB_Pos)                            /*!< DBG LCR: DLAB Mask                      */

/* -----------------------------------  DBG_MCR  ---------------------------------- */
#define DBG_MCR_DTR_Pos                       0                                                       /*!< DBG MCR: DTR Position                   */
#define DBG_MCR_DTR_Msk                       (0x01UL << DBG_MCR_DTR_Pos)                             /*!< DBG MCR: DTR Mask                       */
#define DBG_MCR_RTS_Pos                       1                                                       /*!< DBG MCR: RTS Position                   */
#define DBG_MCR_RTS_Msk                       (0x01UL << DBG_MCR_RTS_Pos)                             /*!< DBG MCR: RTS Mask                       */
#define DBG_MCR_OUT_1_Pos                     2                                                       /*!< DBG MCR: OUT_1 Position                 */
#define DBG_MCR_OUT_1_Msk                     (0x01UL << DBG_MCR_OUT_1_Pos)                           /*!< DBG MCR: OUT_1 Mask                     */
#define DBG_MCR_OUT_2_Pos                     3                                                       /*!< DBG MCR: OUT_2 Position                 */
#define DBG_MCR_OUT_2_Msk                     (0x01UL << DBG_MCR_OUT_2_Pos)                           /*!< DBG MCR: OUT_2 Mask                     */
#define DBG_MCR_LOOP_BACK_Pos                 4                                                       /*!< DBG MCR: LOOP_BACK Position             */
#define DBG_MCR_LOOP_BACK_Msk                 (0x01UL << DBG_MCR_LOOP_BACK_Pos)                       /*!< DBG MCR: LOOP_BACK Mask                 */
#define DBG_MCR_DE_RTS_Pos                    5                                                       /*!< DBG MCR: DE_RTS Position                */
#define DBG_MCR_DE_RTS_Msk                    (0x01UL << DBG_MCR_DE_RTS_Pos)                          /*!< DBG MCR: DE_RTS Mask                    */

/* -----------------------------------  DBG_LSR  ---------------------------------- */
#define DBG_LSR_DATA_RDY_Pos                  0                                                       /*!< DBG LSR: DATA_RDY Position              */
#define DBG_LSR_DATA_RDY_Msk                  (0x01UL << DBG_LSR_DATA_RDY_Pos)                        /*!< DBG LSR: DATA_RDY Mask                  */
#define DBG_LSR_OVERRUN_ERR_Pos               1                                                       /*!< DBG LSR: OVERRUN_ERR Position           */
#define DBG_LSR_OVERRUN_ERR_Msk               (0x01UL << DBG_LSR_OVERRUN_ERR_Pos)                     /*!< DBG LSR: OVERRUN_ERR Mask               */
#define DBG_LSR_PARITY_ERR_Pos                2                                                       /*!< DBG LSR: PARITY_ERR Position            */
#define DBG_LSR_PARITY_ERR_Msk                (0x01UL << DBG_LSR_PARITY_ERR_Pos)                      /*!< DBG LSR: PARITY_ERR Mask                */
#define DBG_LSR_FRAMING_ERR_Pos               3                                                       /*!< DBG LSR: FRAMING_ERR Position           */
#define DBG_LSR_FRAMING_ERR_Msk               (0x01UL << DBG_LSR_FRAMING_ERR_Pos)                     /*!< DBG LSR: FRAMING_ERR Mask               */
#define DBG_LSR_BREAK_INT_Pos                 4                                                       /*!< DBG LSR: BREAK_INT Position             */
#define DBG_LSR_BREAK_INT_Msk                 (0x01UL << DBG_LSR_BREAK_INT_Pos)                       /*!< DBG LSR: BREAK_INT Mask                 */
#define DBG_LSR_THR_EMPTY_Pos                 5                                                       /*!< DBG LSR: THR_EMPTY Position             */
#define DBG_LSR_THR_EMPTY_Msk                 (0x01UL << DBG_LSR_THR_EMPTY_Pos)                       /*!< DBG LSR: THR_EMPTY Mask                 */
#define DBG_LSR_TX_EMPTY_Pos                  6                                                       /*!< DBG LSR: TX_EMPTY Position              */
#define DBG_LSR_TX_EMPTY_Msk                  (0x01UL << DBG_LSR_TX_EMPTY_Pos)                        /*!< DBG LSR: TX_EMPTY Mask                  */
#define DBG_LSR_FIFODATA_ERR_Pos              7                                                       /*!< DBG LSR: FIFODATA_ERR Position          */
#define DBG_LSR_FIFODATA_ERR_Msk              (0x01UL << DBG_LSR_FIFODATA_ERR_Pos)                    /*!< DBG LSR: FIFODATA_ERR Mask              */

/* -----------------------------------  DBG_MSR  ---------------------------------- */
#define DBG_MSR_DELTA_CTS_Pos                 0                                                       /*!< DBG MSR: DELTA_CTS Position             */
#define DBG_MSR_DELTA_CTS_Msk                 (0x01UL << DBG_MSR_DELTA_CTS_Pos)                       /*!< DBG MSR: DELTA_CTS Mask                 */
#define DBG_MSR_DELTA_DSR_Pos                 1                                                       /*!< DBG MSR: DELTA_DSR Position             */
#define DBG_MSR_DELTA_DSR_Msk                 (0x01UL << DBG_MSR_DELTA_DSR_Pos)                       /*!< DBG MSR: DELTA_DSR Mask                 */
#define DBG_MSR_TRAILEDGE_RI_Pos              2                                                       /*!< DBG MSR: TRAILEDGE_RI Position          */
#define DBG_MSR_TRAILEDGE_RI_Msk              (0x01UL << DBG_MSR_TRAILEDGE_RI_Pos)                    /*!< DBG MSR: TRAILEDGE_RI Mask              */
#define DBG_MSR_DELTA_CD_Pos                  3                                                       /*!< DBG MSR: DELTA_CD Position              */
#define DBG_MSR_DELTA_CD_Msk                  (0x01UL << DBG_MSR_DELTA_CD_Pos)                        /*!< DBG MSR: DELTA_CD Mask                  */
#define DBG_MSR_CTS_Pos                       4                                                       /*!< DBG MSR: CTS Position                   */
#define DBG_MSR_CTS_Msk                       (0x01UL << DBG_MSR_CTS_Pos)                             /*!< DBG MSR: CTS Mask                       */
#define DBG_MSR_DSR_Pos                       5                                                       /*!< DBG MSR: DSR Position                   */
#define DBG_MSR_DSR_Msk                       (0x01UL << DBG_MSR_DSR_Pos)                             /*!< DBG MSR: DSR Mask                       */
#define DBG_MSR_RI_Pos                        6                                                       /*!< DBG MSR: RI Position                    */
#define DBG_MSR_RI_Msk                        (0x01UL << DBG_MSR_RI_Pos)                              /*!< DBG MSR: RI Mask                        */
#define DBG_MSR_CD_Pos                        7                                                       /*!< DBG MSR: CD Position                    */
#define DBG_MSR_CD_Msk                        (0x01UL << DBG_MSR_CD_Pos)                              /*!< DBG MSR: CD Mask                        */

/* -----------------------------------  DBG_SPR  ---------------------------------- */
#define DBG_SPR_BRDC_DIV_Pos                  0                                                       /*!< DBG SPR: BRDC_DIV Position              */
#define DBG_SPR_BRDC_DIV_Msk                  (0x0000ffffUL << DBG_SPR_BRDC_DIV_Pos)                  /*!< DBG SPR: BRDC_DIV Mask                  */

/* ----------------------------------  DBG_RTHR  ---------------------------------- */
#define DBG_RTHR_RTHR_L_Pos                   0                                                       /*!< DBG RTHR: RTHR_L Position               */
#define DBG_RTHR_RTHR_L_Msk                   (0x0fUL << DBG_RTHR_RTHR_L_Pos)                         /*!< DBG RTHR: RTHR_L Mask                   */
#define DBG_RTHR_RTHR_H_Pos                   4                                                       /*!< DBG RTHR: RTHR_H Position               */
#define DBG_RTHR_RTHR_H_Msk                   (0x0fUL << DBG_RTHR_RTHR_H_Pos)                         /*!< DBG RTHR: RTHR_H Mask                   */

/* -----------------------------------  DBG_ISR  ---------------------------------- */
#define DBG_ISR_INT_IDCODE_Pos                0                                                       /*!< DBG ISR: INT_IDCODE Position            */
#define DBG_ISR_INT_IDCODE_Msk                (0x0fUL << DBG_ISR_INT_IDCODE_Pos)                      /*!< DBG ISR: INT_IDCODE Mask                */
#define DBG_ISR_RX_IDLE_Pos                   4                                                       /*!< DBG ISR: RX_IDLE Position               */
#define DBG_ISR_RX_IDLE_Msk                   (0x01UL << DBG_ISR_RX_IDLE_Pos)                         /*!< DBG ISR: RX_IDLE Mask                   */
#define DBG_ISR_TX_IDLE_Pos                   5                                                       /*!< DBG ISR: TX_IDLE Position               */
#define DBG_ISR_TX_IDLE_Msk                   (0x01UL << DBG_ISR_TX_IDLE_Pos)                         /*!< DBG ISR: TX_IDLE Mask                   */
#define DBG_ISR_FIFOS_ENABLED_Pos             6                                                       /*!< DBG ISR: FIFOS_ENABLED Position         */
#define DBG_ISR_FIFOS_ENABLED_Msk             (0x03UL << DBG_ISR_FIFOS_ENABLED_Pos)                   /*!< DBG ISR: FIFOS_ENABLED Mask             */

/* ----------------------------------  DBG_TTHR  ---------------------------------- */
#define DBG_TTHR_TTHR_L_Pos                   0                                                       /*!< DBG TTHR: TTHR_L Position               */
#define DBG_TTHR_TTHR_L_Msk                   (0x0fUL << DBG_TTHR_TTHR_L_Pos)                         /*!< DBG TTHR: TTHR_L Mask                   */
#define DBG_TTHR_TTHR_H_Pos                   4                                                       /*!< DBG TTHR: TTHR_H Position               */
#define DBG_TTHR_TTHR_H_Msk                   (0x0fUL << DBG_TTHR_TTHR_H_Pos)                         /*!< DBG TTHR: TTHR_H Mask                   */

/* ---------------------------------  DBG_INT_MAP  -------------------------------- */
#define DBG_INT_MAP_RX_RECIEVED_Pos           0                                                       /*!< DBG INT_MAP: RX_RECIEVED Position       */
#define DBG_INT_MAP_RX_RECIEVED_Msk           (0x01UL << DBG_INT_MAP_RX_RECIEVED_Pos)                 /*!< DBG INT_MAP: RX_RECIEVED Mask           */
#define DBG_INT_MAP_RX_FIFO_TO_Pos            1                                                       /*!< DBG INT_MAP: RX_FIFO_TO Position        */
#define DBG_INT_MAP_RX_FIFO_TO_Msk            (0x01UL << DBG_INT_MAP_RX_FIFO_TO_Pos)                  /*!< DBG INT_MAP: RX_FIFO_TO Mask            */
#define DBG_INT_MAP_TX_L_Pos                  2                                                       /*!< DBG INT_MAP: TX_L Position              */
#define DBG_INT_MAP_TX_L_Msk                  (0x01UL << DBG_INT_MAP_TX_L_Pos)                        /*!< DBG INT_MAP: TX_L Mask                  */
#define DBG_INT_MAP_TX_H_Pos                  3                                                       /*!< DBG INT_MAP: TX_H Position              */
#define DBG_INT_MAP_TX_H_Msk                  (0x01UL << DBG_INT_MAP_TX_H_Pos)                        /*!< DBG INT_MAP: TX_H Mask                  */
#define DBG_INT_MAP_TX_EMPTY2_Pos             4                                                       /*!< DBG INT_MAP: TX_EMPTY2 Position         */
#define DBG_INT_MAP_TX_EMPTY2_Msk             (0x01UL << DBG_INT_MAP_TX_EMPTY2_Pos)                   /*!< DBG INT_MAP: TX_EMPTY2 Mask             */
#define DBG_INT_MAP_OVERRUN_Pos               5                                                       /*!< DBG INT_MAP: OVERRUN Position           */
#define DBG_INT_MAP_OVERRUN_Msk               (0x01UL << DBG_INT_MAP_OVERRUN_Pos)                     /*!< DBG INT_MAP: OVERRUN Mask               */
#define DBG_INT_MAP_FRAMING_Pos               6                                                       /*!< DBG INT_MAP: FRAMING Position           */
#define DBG_INT_MAP_FRAMING_Msk               (0x01UL << DBG_INT_MAP_FRAMING_Pos)                     /*!< DBG INT_MAP: FRAMING Mask               */
#define DBG_INT_MAP_BREAK_Pos                 7                                                       /*!< DBG INT_MAP: BREAK Position             */
#define DBG_INT_MAP_BREAK_Msk                 (0x01UL << DBG_INT_MAP_BREAK_Pos)                       /*!< DBG INT_MAP: BREAK Mask                 */
#define DBG_INT_MAP_PARITY_Pos                8                                                       /*!< DBG INT_MAP: PARITY Position            */
#define DBG_INT_MAP_PARITY_Msk                (0x01UL << DBG_INT_MAP_PARITY_Pos)                      /*!< DBG INT_MAP: PARITY Mask                */
#define DBG_INT_MAP_MODEN_INT_Pos             9                                                       /*!< DBG INT_MAP: MODEN_INT Position         */
#define DBG_INT_MAP_MODEN_INT_Msk             (0x01UL << DBG_INT_MAP_MODEN_INT_Pos)                   /*!< DBG INT_MAP: MODEN_INT Mask             */

/* ---------------------------------  DBG_POINTER  -------------------------------- */
#define DBG_POINTER_ROP_A_Pos                 0                                                       /*!< DBG POINTER: ROP_A Position             */
#define DBG_POINTER_ROP_A_Msk                 (0x0fUL << DBG_POINTER_ROP_A_Pos)                       /*!< DBG POINTER: ROP_A Mask                 */
#define DBG_POINTER_RIP_A_Pos                 4                                                       /*!< DBG POINTER: RIP_A Position             */
#define DBG_POINTER_RIP_A_Msk                 (0x0fUL << DBG_POINTER_RIP_A_Pos)                       /*!< DBG POINTER: RIP_A Mask                 */
#define DBG_POINTER_TOP_A_Pos                 8                                                       /*!< DBG POINTER: TOP_A Position             */
#define DBG_POINTER_TOP_A_Msk                 (0x0fUL << DBG_POINTER_TOP_A_Pos)                       /*!< DBG POINTER: TOP_A Mask                 */
#define DBG_POINTER_TIP_A_Pos                 12                                                      /*!< DBG POINTER: TIP_A Position             */
#define DBG_POINTER_TIP_A_Msk                 (0x0fUL << DBG_POINTER_TIP_A_Pos)                       /*!< DBG POINTER: TIP_A Mask                 */


/* ================================================================================ */
/* ================        struct 'UART_4W' Position & Mask        ================ */
/* ================================================================================ */


/* --------------------------------  UART_4W_DATA  -------------------------------- */
#define UART_4W_DATA_DATA_Pos                 0                                                       /*!< UART_4W DATA: DATA Position             */
#define UART_4W_DATA_DATA_Msk                 (0x000000ffUL << UART_4W_DATA_DATA_Pos)                 /*!< UART_4W DATA: DATA Mask                 */

/* ---------------------------------  UART_4W_IER  -------------------------------- */
#define UART_4W_IER_DATA_RDY_IE_Pos           0                                                       /*!< UART_4W IER: DATA_RDY_IE Position       */
#define UART_4W_IER_DATA_RDY_IE_Msk           (0x01UL << UART_4W_IER_DATA_RDY_IE_Pos)                 /*!< UART_4W IER: DATA_RDY_IE Mask           */
#define UART_4W_IER_THR_EMPTY_IE_Pos          1                                                       /*!< UART_4W IER: THR_EMPTY_IE Position      */
#define UART_4W_IER_THR_EMPTY_IE_Msk          (0x01UL << UART_4W_IER_THR_EMPTY_IE_Pos)                /*!< UART_4W IER: THR_EMPTY_IE Mask          */
#define UART_4W_IER_RX_LINESTS_IE_Pos         2                                                       /*!< UART_4W IER: RX_LINESTS_IE Position     */
#define UART_4W_IER_RX_LINESTS_IE_Msk         (0x01UL << UART_4W_IER_RX_LINESTS_IE_Pos)               /*!< UART_4W IER: RX_LINESTS_IE Mask         */
#define UART_4W_IER_MDM_STS_IE_Pos            3                                                       /*!< UART_4W IER: MDM_STS_IE Position        */
#define UART_4W_IER_MDM_STS_IE_Msk            (0x01UL << UART_4W_IER_MDM_STS_IE_Pos)                  /*!< UART_4W IER: MDM_STS_IE Mask            */
#define UART_4W_IER_TX_THRH_IE_Pos            4                                                       /*!< UART_4W IER: TX_THRH_IE Position        */
#define UART_4W_IER_TX_THRH_IE_Msk            (0x01UL << UART_4W_IER_TX_THRH_IE_Pos)                  /*!< UART_4W IER: TX_THRH_IE Mask            */
#define UART_4W_IER_TX_THRL_IE_Pos            5                                                       /*!< UART_4W IER: TX_THRL_IE Position        */
#define UART_4W_IER_TX_THRL_IE_Msk            (0x01UL << UART_4W_IER_TX_THRL_IE_Pos)                  /*!< UART_4W IER: TX_THRL_IE Mask            */

/* ---------------------------------  UART_4W_FCR  -------------------------------- */
#define UART_4W_FCR_FIFO_EN_Pos               0                                                       /*!< UART_4W FCR: FIFO_EN Position           */
#define UART_4W_FCR_FIFO_EN_Msk               (0x01UL << UART_4W_FCR_FIFO_EN_Pos)                     /*!< UART_4W FCR: FIFO_EN Mask               */
#define UART_4W_FCR_RXFIFO_RST_Pos            1                                                       /*!< UART_4W FCR: RXFIFO_RST Position        */
#define UART_4W_FCR_RXFIFO_RST_Msk            (0x01UL << UART_4W_FCR_RXFIFO_RST_Pos)                  /*!< UART_4W FCR: RXFIFO_RST Mask            */
#define UART_4W_FCR_TXFIFO_RST_Pos            2                                                       /*!< UART_4W FCR: TXFIFO_RST Position        */
#define UART_4W_FCR_TXFIFO_RST_Msk            (0x01UL << UART_4W_FCR_TXFIFO_RST_Pos)                  /*!< UART_4W FCR: TXFIFO_RST Mask            */
#define UART_4W_FCR_DMA_MODE_Pos              3                                                       /*!< UART_4W FCR: DMA_MODE Position          */
#define UART_4W_FCR_DMA_MODE_Msk              (0x01UL << UART_4W_FCR_DMA_MODE_Pos)                    /*!< UART_4W FCR: DMA_MODE Mask              */
#define UART_4W_FCR_AUTO_RTS_Pos              4                                                       /*!< UART_4W FCR: AUTO_RTS Position          */
#define UART_4W_FCR_AUTO_RTS_Msk              (0x01UL << UART_4W_FCR_AUTO_RTS_Pos)                    /*!< UART_4W FCR: AUTO_RTS Mask              */
#define UART_4W_FCR_AUTO_CTS_Pos              5                                                       /*!< UART_4W FCR: AUTO_CTS Position          */
#define UART_4W_FCR_AUTO_CTS_Msk              (0x01UL << UART_4W_FCR_AUTO_CTS_Pos)                    /*!< UART_4W FCR: AUTO_CTS Mask              */
#define UART_4W_FCR_RXFIFO_TRGLVL_Pos         6                                                       /*!< UART_4W FCR: RXFIFO_TRGLVL Position     */
#define UART_4W_FCR_RXFIFO_TRGLVL_Msk         (0x03UL << UART_4W_FCR_RXFIFO_TRGLVL_Pos)               /*!< UART_4W FCR: RXFIFO_TRGLVL Mask         */

/* ---------------------------------  UART_4W_LCR  -------------------------------- */
#define UART_4W_LCR_WORD_LEN_Pos              0                                                       /*!< UART_4W LCR: WORD_LEN Position          */
#define UART_4W_LCR_WORD_LEN_Msk              (0x03UL << UART_4W_LCR_WORD_LEN_Pos)                    /*!< UART_4W LCR: WORD_LEN Mask              */
#define UART_4W_LCR_STOP_BIT_Pos              2                                                       /*!< UART_4W LCR: STOP_BIT Position          */
#define UART_4W_LCR_STOP_BIT_Msk              (0x01UL << UART_4W_LCR_STOP_BIT_Pos)                    /*!< UART_4W LCR: STOP_BIT Mask              */
#define UART_4W_LCR_PARITY_EN_Pos             3                                                       /*!< UART_4W LCR: PARITY_EN Position         */
#define UART_4W_LCR_PARITY_EN_Msk             (0x01UL << UART_4W_LCR_PARITY_EN_Pos)                   /*!< UART_4W LCR: PARITY_EN Mask             */
#define UART_4W_LCR_EVEN_PARITY_Pos           4                                                       /*!< UART_4W LCR: EVEN_PARITY Position       */
#define UART_4W_LCR_EVEN_PARITY_Msk           (0x01UL << UART_4W_LCR_EVEN_PARITY_Pos)                 /*!< UART_4W LCR: EVEN_PARITY Mask           */
#define UART_4W_LCR_FORCE_PARITY_Pos          5                                                       /*!< UART_4W LCR: FORCE_PARITY Position      */
#define UART_4W_LCR_FORCE_PARITY_Msk          (0x01UL << UART_4W_LCR_FORCE_PARITY_Pos)                /*!< UART_4W LCR: FORCE_PARITY Mask          */
#define UART_4W_LCR_SET_BREAK_Pos             6                                                       /*!< UART_4W LCR: SET_BREAK Position         */
#define UART_4W_LCR_SET_BREAK_Msk             (0x01UL << UART_4W_LCR_SET_BREAK_Pos)                   /*!< UART_4W LCR: SET_BREAK Mask             */
#define UART_4W_LCR_DLAB_Pos                  7                                                       /*!< UART_4W LCR: DLAB Position              */
#define UART_4W_LCR_DLAB_Msk                  (0x01UL << UART_4W_LCR_DLAB_Pos)                        /*!< UART_4W LCR: DLAB Mask                  */

/* ---------------------------------  UART_4W_MCR  -------------------------------- */
#define UART_4W_MCR_DTR_Pos                   0                                                       /*!< UART_4W MCR: DTR Position               */
#define UART_4W_MCR_DTR_Msk                   (0x01UL << UART_4W_MCR_DTR_Pos)                         /*!< UART_4W MCR: DTR Mask                   */
#define UART_4W_MCR_RTS_Pos                   1                                                       /*!< UART_4W MCR: RTS Position               */
#define UART_4W_MCR_RTS_Msk                   (0x01UL << UART_4W_MCR_RTS_Pos)                         /*!< UART_4W MCR: RTS Mask                   */
#define UART_4W_MCR_OUT_1_Pos                 2                                                       /*!< UART_4W MCR: OUT_1 Position             */
#define UART_4W_MCR_OUT_1_Msk                 (0x01UL << UART_4W_MCR_OUT_1_Pos)                       /*!< UART_4W MCR: OUT_1 Mask                 */
#define UART_4W_MCR_OUT_2_Pos                 3                                                       /*!< UART_4W MCR: OUT_2 Position             */
#define UART_4W_MCR_OUT_2_Msk                 (0x01UL << UART_4W_MCR_OUT_2_Pos)                       /*!< UART_4W MCR: OUT_2 Mask                 */
#define UART_4W_MCR_LOOP_BACK_Pos             4                                                       /*!< UART_4W MCR: LOOP_BACK Position         */
#define UART_4W_MCR_LOOP_BACK_Msk             (0x01UL << UART_4W_MCR_LOOP_BACK_Pos)                   /*!< UART_4W MCR: LOOP_BACK Mask             */
#define UART_4W_MCR_DE_RTS_Pos                5                                                       /*!< UART_4W MCR: DE_RTS Position            */
#define UART_4W_MCR_DE_RTS_Msk                (0x01UL << UART_4W_MCR_DE_RTS_Pos)                      /*!< UART_4W MCR: DE_RTS Mask                */

/* ---------------------------------  UART_4W_LSR  -------------------------------- */
#define UART_4W_LSR_DATA_RDY_Pos              0                                                       /*!< UART_4W LSR: DATA_RDY Position          */
#define UART_4W_LSR_DATA_RDY_Msk              (0x01UL << UART_4W_LSR_DATA_RDY_Pos)                    /*!< UART_4W LSR: DATA_RDY Mask              */
#define UART_4W_LSR_OVERRUN_ERR_Pos           1                                                       /*!< UART_4W LSR: OVERRUN_ERR Position       */
#define UART_4W_LSR_OVERRUN_ERR_Msk           (0x01UL << UART_4W_LSR_OVERRUN_ERR_Pos)                 /*!< UART_4W LSR: OVERRUN_ERR Mask           */
#define UART_4W_LSR_PARITY_ERR_Pos            2                                                       /*!< UART_4W LSR: PARITY_ERR Position        */
#define UART_4W_LSR_PARITY_ERR_Msk            (0x01UL << UART_4W_LSR_PARITY_ERR_Pos)                  /*!< UART_4W LSR: PARITY_ERR Mask            */
#define UART_4W_LSR_FRAMING_ERR_Pos           3                                                       /*!< UART_4W LSR: FRAMING_ERR Position       */
#define UART_4W_LSR_FRAMING_ERR_Msk           (0x01UL << UART_4W_LSR_FRAMING_ERR_Pos)                 /*!< UART_4W LSR: FRAMING_ERR Mask           */
#define UART_4W_LSR_BREAK_INT_Pos             4                                                       /*!< UART_4W LSR: BREAK_INT Position         */
#define UART_4W_LSR_BREAK_INT_Msk             (0x01UL << UART_4W_LSR_BREAK_INT_Pos)                   /*!< UART_4W LSR: BREAK_INT Mask             */
#define UART_4W_LSR_THR_EMPTY_Pos             5                                                       /*!< UART_4W LSR: THR_EMPTY Position         */
#define UART_4W_LSR_THR_EMPTY_Msk             (0x01UL << UART_4W_LSR_THR_EMPTY_Pos)                   /*!< UART_4W LSR: THR_EMPTY Mask             */
#define UART_4W_LSR_TX_EMPTY_Pos              6                                                       /*!< UART_4W LSR: TX_EMPTY Position          */
#define UART_4W_LSR_TX_EMPTY_Msk              (0x01UL << UART_4W_LSR_TX_EMPTY_Pos)                    /*!< UART_4W LSR: TX_EMPTY Mask              */
#define UART_4W_LSR_FIFODATA_ERR_Pos          7                                                       /*!< UART_4W LSR: FIFODATA_ERR Position      */
#define UART_4W_LSR_FIFODATA_ERR_Msk          (0x01UL << UART_4W_LSR_FIFODATA_ERR_Pos)                /*!< UART_4W LSR: FIFODATA_ERR Mask          */

/* ---------------------------------  UART_4W_MSR  -------------------------------- */
#define UART_4W_MSR_DELTA_CTS_Pos             0                                                       /*!< UART_4W MSR: DELTA_CTS Position         */
#define UART_4W_MSR_DELTA_CTS_Msk             (0x01UL << UART_4W_MSR_DELTA_CTS_Pos)                   /*!< UART_4W MSR: DELTA_CTS Mask             */
#define UART_4W_MSR_DELTA_DSR_Pos             1                                                       /*!< UART_4W MSR: DELTA_DSR Position         */
#define UART_4W_MSR_DELTA_DSR_Msk             (0x01UL << UART_4W_MSR_DELTA_DSR_Pos)                   /*!< UART_4W MSR: DELTA_DSR Mask             */
#define UART_4W_MSR_TRAILEDGE_RI_Pos          2                                                       /*!< UART_4W MSR: TRAILEDGE_RI Position      */
#define UART_4W_MSR_TRAILEDGE_RI_Msk          (0x01UL << UART_4W_MSR_TRAILEDGE_RI_Pos)                /*!< UART_4W MSR: TRAILEDGE_RI Mask          */
#define UART_4W_MSR_DELTA_CD_Pos              3                                                       /*!< UART_4W MSR: DELTA_CD Position          */
#define UART_4W_MSR_DELTA_CD_Msk              (0x01UL << UART_4W_MSR_DELTA_CD_Pos)                    /*!< UART_4W MSR: DELTA_CD Mask              */
#define UART_4W_MSR_CTS_Pos                   4                                                       /*!< UART_4W MSR: CTS Position               */
#define UART_4W_MSR_CTS_Msk                   (0x01UL << UART_4W_MSR_CTS_Pos)                         /*!< UART_4W MSR: CTS Mask                   */
#define UART_4W_MSR_DSR_Pos                   5                                                       /*!< UART_4W MSR: DSR Position               */
#define UART_4W_MSR_DSR_Msk                   (0x01UL << UART_4W_MSR_DSR_Pos)                         /*!< UART_4W MSR: DSR Mask                   */
#define UART_4W_MSR_RI_Pos                    6                                                       /*!< UART_4W MSR: RI Position                */
#define UART_4W_MSR_RI_Msk                    (0x01UL << UART_4W_MSR_RI_Pos)                          /*!< UART_4W MSR: RI Mask                    */
#define UART_4W_MSR_CD_Pos                    7                                                       /*!< UART_4W MSR: CD Position                */
#define UART_4W_MSR_CD_Msk                    (0x01UL << UART_4W_MSR_CD_Pos)                          /*!< UART_4W MSR: CD Mask                    */

/* ---------------------------------  UART_4W_SPR  -------------------------------- */
#define UART_4W_SPR_BRDC_DIV_Pos              0                                                       /*!< UART_4W SPR: BRDC_DIV Position          */
#define UART_4W_SPR_BRDC_DIV_Msk              (0x0000ffffUL << UART_4W_SPR_BRDC_DIV_Pos)              /*!< UART_4W SPR: BRDC_DIV Mask              */

/* --------------------------------  UART_4W_RTHR  -------------------------------- */
#define UART_4W_RTHR_RTHR_L_Pos               0                                                       /*!< UART_4W RTHR: RTHR_L Position           */
#define UART_4W_RTHR_RTHR_L_Msk               (0x0fUL << UART_4W_RTHR_RTHR_L_Pos)                     /*!< UART_4W RTHR: RTHR_L Mask               */
#define UART_4W_RTHR_RTHR_H_Pos               4                                                       /*!< UART_4W RTHR: RTHR_H Position           */
#define UART_4W_RTHR_RTHR_H_Msk               (0x0fUL << UART_4W_RTHR_RTHR_H_Pos)                     /*!< UART_4W RTHR: RTHR_H Mask               */

/* ---------------------------------  UART_4W_ISR  -------------------------------- */
#define UART_4W_ISR_INT_IDCODE_Pos            0                                                       /*!< UART_4W ISR: INT_IDCODE Position        */
#define UART_4W_ISR_INT_IDCODE_Msk            (0x0fUL << UART_4W_ISR_INT_IDCODE_Pos)                  /*!< UART_4W ISR: INT_IDCODE Mask            */
#define UART_4W_ISR_RX_IDLE_Pos               4                                                       /*!< UART_4W ISR: RX_IDLE Position           */
#define UART_4W_ISR_RX_IDLE_Msk               (0x01UL << UART_4W_ISR_RX_IDLE_Pos)                     /*!< UART_4W ISR: RX_IDLE Mask               */
#define UART_4W_ISR_TX_IDLE_Pos               5                                                       /*!< UART_4W ISR: TX_IDLE Position           */
#define UART_4W_ISR_TX_IDLE_Msk               (0x01UL << UART_4W_ISR_TX_IDLE_Pos)                     /*!< UART_4W ISR: TX_IDLE Mask               */
#define UART_4W_ISR_FIFOS_ENABLED_Pos         6                                                       /*!< UART_4W ISR: FIFOS_ENABLED Position     */
#define UART_4W_ISR_FIFOS_ENABLED_Msk         (0x03UL << UART_4W_ISR_FIFOS_ENABLED_Pos)               /*!< UART_4W ISR: FIFOS_ENABLED Mask         */

/* --------------------------------  UART_4W_TTHR  -------------------------------- */
#define UART_4W_TTHR_TTHR_L_Pos               0                                                       /*!< UART_4W TTHR: TTHR_L Position           */
#define UART_4W_TTHR_TTHR_L_Msk               (0x0fUL << UART_4W_TTHR_TTHR_L_Pos)                     /*!< UART_4W TTHR: TTHR_L Mask               */
#define UART_4W_TTHR_TTHR_H_Pos               4                                                       /*!< UART_4W TTHR: TTHR_H Position           */
#define UART_4W_TTHR_TTHR_H_Msk               (0x0fUL << UART_4W_TTHR_TTHR_H_Pos)                     /*!< UART_4W TTHR: TTHR_H Mask               */

/* -------------------------------  UART_4W_INT_MAP  ------------------------------ */
#define UART_4W_INT_MAP_RX_RECIEVED_Pos       0                                                       /*!< UART_4W INT_MAP: RX_RECIEVED Position   */
#define UART_4W_INT_MAP_RX_RECIEVED_Msk       (0x01UL << UART_4W_INT_MAP_RX_RECIEVED_Pos)             /*!< UART_4W INT_MAP: RX_RECIEVED Mask       */
#define UART_4W_INT_MAP_RX_FIFO_TO_Pos        1                                                       /*!< UART_4W INT_MAP: RX_FIFO_TO Position    */
#define UART_4W_INT_MAP_RX_FIFO_TO_Msk        (0x01UL << UART_4W_INT_MAP_RX_FIFO_TO_Pos)              /*!< UART_4W INT_MAP: RX_FIFO_TO Mask        */
#define UART_4W_INT_MAP_TX_L_Pos              2                                                       /*!< UART_4W INT_MAP: TX_L Position          */
#define UART_4W_INT_MAP_TX_L_Msk              (0x01UL << UART_4W_INT_MAP_TX_L_Pos)                    /*!< UART_4W INT_MAP: TX_L Mask              */
#define UART_4W_INT_MAP_TX_H_Pos              3                                                       /*!< UART_4W INT_MAP: TX_H Position          */
#define UART_4W_INT_MAP_TX_H_Msk              (0x01UL << UART_4W_INT_MAP_TX_H_Pos)                    /*!< UART_4W INT_MAP: TX_H Mask              */
#define UART_4W_INT_MAP_TX_EMPTY2_Pos         4                                                       /*!< UART_4W INT_MAP: TX_EMPTY2 Position     */
#define UART_4W_INT_MAP_TX_EMPTY2_Msk         (0x01UL << UART_4W_INT_MAP_TX_EMPTY2_Pos)               /*!< UART_4W INT_MAP: TX_EMPTY2 Mask         */
#define UART_4W_INT_MAP_OVERRUN_Pos           5                                                       /*!< UART_4W INT_MAP: OVERRUN Position       */
#define UART_4W_INT_MAP_OVERRUN_Msk           (0x01UL << UART_4W_INT_MAP_OVERRUN_Pos)                 /*!< UART_4W INT_MAP: OVERRUN Mask           */
#define UART_4W_INT_MAP_FRAMING_Pos           6                                                       /*!< UART_4W INT_MAP: FRAMING Position       */
#define UART_4W_INT_MAP_FRAMING_Msk           (0x01UL << UART_4W_INT_MAP_FRAMING_Pos)                 /*!< UART_4W INT_MAP: FRAMING Mask           */
#define UART_4W_INT_MAP_BREAK_Pos             7                                                       /*!< UART_4W INT_MAP: BREAK Position         */
#define UART_4W_INT_MAP_BREAK_Msk             (0x01UL << UART_4W_INT_MAP_BREAK_Pos)                   /*!< UART_4W INT_MAP: BREAK Mask             */
#define UART_4W_INT_MAP_PARITY_Pos            8                                                       /*!< UART_4W INT_MAP: PARITY Position        */
#define UART_4W_INT_MAP_PARITY_Msk            (0x01UL << UART_4W_INT_MAP_PARITY_Pos)                  /*!< UART_4W INT_MAP: PARITY Mask            */
#define UART_4W_INT_MAP_MODEN_INT_Pos         9                                                       /*!< UART_4W INT_MAP: MODEN_INT Position     */
#define UART_4W_INT_MAP_MODEN_INT_Msk         (0x01UL << UART_4W_INT_MAP_MODEN_INT_Pos)               /*!< UART_4W INT_MAP: MODEN_INT Mask         */

/* -------------------------------  UART_4W_POINTER  ------------------------------ */
#define UART_4W_POINTER_ROP_A_Pos             0                                                       /*!< UART_4W POINTER: ROP_A Position         */
#define UART_4W_POINTER_ROP_A_Msk             (0x0fUL << UART_4W_POINTER_ROP_A_Pos)                   /*!< UART_4W POINTER: ROP_A Mask             */
#define UART_4W_POINTER_RIP_A_Pos             4                                                       /*!< UART_4W POINTER: RIP_A Position         */
#define UART_4W_POINTER_RIP_A_Msk             (0x0fUL << UART_4W_POINTER_RIP_A_Pos)                   /*!< UART_4W POINTER: RIP_A Mask             */
#define UART_4W_POINTER_TOP_A_Pos             8                                                       /*!< UART_4W POINTER: TOP_A Position         */
#define UART_4W_POINTER_TOP_A_Msk             (0x0fUL << UART_4W_POINTER_TOP_A_Pos)                   /*!< UART_4W POINTER: TOP_A Mask             */
#define UART_4W_POINTER_TIP_A_Pos             12                                                      /*!< UART_4W POINTER: TIP_A Position         */
#define UART_4W_POINTER_TIP_A_Msk             (0x0fUL << UART_4W_POINTER_TIP_A_Pos)                   /*!< UART_4W POINTER: TIP_A Mask             */


/* ================================================================================ */
/* ================        struct 'UART_2W' Position & Mask        ================ */
/* ================================================================================ */


/* --------------------------------  UART_2W_DATA  -------------------------------- */
#define UART_2W_DATA_DATA_Pos                 0                                                       /*!< UART_2W DATA: DATA Position             */
#define UART_2W_DATA_DATA_Msk                 (0x000000ffUL << UART_2W_DATA_DATA_Pos)                 /*!< UART_2W DATA: DATA Mask                 */

/* ---------------------------------  UART_2W_IER  -------------------------------- */
#define UART_2W_IER_DATA_RDY_IE_Pos           0                                                       /*!< UART_2W IER: DATA_RDY_IE Position       */
#define UART_2W_IER_DATA_RDY_IE_Msk           (0x01UL << UART_2W_IER_DATA_RDY_IE_Pos)                 /*!< UART_2W IER: DATA_RDY_IE Mask           */
#define UART_2W_IER_THR_EMPTY_IE_Pos          1                                                       /*!< UART_2W IER: THR_EMPTY_IE Position      */
#define UART_2W_IER_THR_EMPTY_IE_Msk          (0x01UL << UART_2W_IER_THR_EMPTY_IE_Pos)                /*!< UART_2W IER: THR_EMPTY_IE Mask          */
#define UART_2W_IER_RX_LINESTS_IE_Pos         2                                                       /*!< UART_2W IER: RX_LINESTS_IE Position     */
#define UART_2W_IER_RX_LINESTS_IE_Msk         (0x01UL << UART_2W_IER_RX_LINESTS_IE_Pos)               /*!< UART_2W IER: RX_LINESTS_IE Mask         */
#define UART_2W_IER_MDM_STS_IE_Pos            3                                                       /*!< UART_2W IER: MDM_STS_IE Position        */
#define UART_2W_IER_MDM_STS_IE_Msk            (0x01UL << UART_2W_IER_MDM_STS_IE_Pos)                  /*!< UART_2W IER: MDM_STS_IE Mask            */
#define UART_2W_IER_TX_THRH_IE_Pos            4                                                       /*!< UART_2W IER: TX_THRH_IE Position        */
#define UART_2W_IER_TX_THRH_IE_Msk            (0x01UL << UART_2W_IER_TX_THRH_IE_Pos)                  /*!< UART_2W IER: TX_THRH_IE Mask            */
#define UART_2W_IER_TX_THRL_IE_Pos            5                                                       /*!< UART_2W IER: TX_THRL_IE Position        */
#define UART_2W_IER_TX_THRL_IE_Msk            (0x01UL << UART_2W_IER_TX_THRL_IE_Pos)                  /*!< UART_2W IER: TX_THRL_IE Mask            */

/* ---------------------------------  UART_2W_FCR  -------------------------------- */
#define UART_2W_FCR_FIFO_EN_Pos               0                                                       /*!< UART_2W FCR: FIFO_EN Position           */
#define UART_2W_FCR_FIFO_EN_Msk               (0x01UL << UART_2W_FCR_FIFO_EN_Pos)                     /*!< UART_2W FCR: FIFO_EN Mask               */
#define UART_2W_FCR_RXFIFO_RST_Pos            1                                                       /*!< UART_2W FCR: RXFIFO_RST Position        */
#define UART_2W_FCR_RXFIFO_RST_Msk            (0x01UL << UART_2W_FCR_RXFIFO_RST_Pos)                  /*!< UART_2W FCR: RXFIFO_RST Mask            */
#define UART_2W_FCR_TXFIFO_RST_Pos            2                                                       /*!< UART_2W FCR: TXFIFO_RST Position        */
#define UART_2W_FCR_TXFIFO_RST_Msk            (0x01UL << UART_2W_FCR_TXFIFO_RST_Pos)                  /*!< UART_2W FCR: TXFIFO_RST Mask            */
#define UART_2W_FCR_DMA_MODE_Pos              3                                                       /*!< UART_2W FCR: DMA_MODE Position          */
#define UART_2W_FCR_DMA_MODE_Msk              (0x01UL << UART_2W_FCR_DMA_MODE_Pos)                    /*!< UART_2W FCR: DMA_MODE Mask              */
#define UART_2W_FCR_AUTO_RTS_Pos              4                                                       /*!< UART_2W FCR: AUTO_RTS Position          */
#define UART_2W_FCR_AUTO_RTS_Msk              (0x01UL << UART_2W_FCR_AUTO_RTS_Pos)                    /*!< UART_2W FCR: AUTO_RTS Mask              */
#define UART_2W_FCR_AUTO_CTS_Pos              5                                                       /*!< UART_2W FCR: AUTO_CTS Position          */
#define UART_2W_FCR_AUTO_CTS_Msk              (0x01UL << UART_2W_FCR_AUTO_CTS_Pos)                    /*!< UART_2W FCR: AUTO_CTS Mask              */
#define UART_2W_FCR_RXFIFO_TRGLVL_Pos         6                                                       /*!< UART_2W FCR: RXFIFO_TRGLVL Position     */
#define UART_2W_FCR_RXFIFO_TRGLVL_Msk         (0x03UL << UART_2W_FCR_RXFIFO_TRGLVL_Pos)               /*!< UART_2W FCR: RXFIFO_TRGLVL Mask         */

/* ---------------------------------  UART_2W_LCR  -------------------------------- */
#define UART_2W_LCR_WORD_LEN_Pos              0                                                       /*!< UART_2W LCR: WORD_LEN Position          */
#define UART_2W_LCR_WORD_LEN_Msk              (0x03UL << UART_2W_LCR_WORD_LEN_Pos)                    /*!< UART_2W LCR: WORD_LEN Mask              */
#define UART_2W_LCR_STOP_BIT_Pos              2                                                       /*!< UART_2W LCR: STOP_BIT Position          */
#define UART_2W_LCR_STOP_BIT_Msk              (0x01UL << UART_2W_LCR_STOP_BIT_Pos)                    /*!< UART_2W LCR: STOP_BIT Mask              */
#define UART_2W_LCR_PARITY_EN_Pos             3                                                       /*!< UART_2W LCR: PARITY_EN Position         */
#define UART_2W_LCR_PARITY_EN_Msk             (0x01UL << UART_2W_LCR_PARITY_EN_Pos)                   /*!< UART_2W LCR: PARITY_EN Mask             */
#define UART_2W_LCR_EVEN_PARITY_Pos           4                                                       /*!< UART_2W LCR: EVEN_PARITY Position       */
#define UART_2W_LCR_EVEN_PARITY_Msk           (0x01UL << UART_2W_LCR_EVEN_PARITY_Pos)                 /*!< UART_2W LCR: EVEN_PARITY Mask           */
#define UART_2W_LCR_FORCE_PARITY_Pos          5                                                       /*!< UART_2W LCR: FORCE_PARITY Position      */
#define UART_2W_LCR_FORCE_PARITY_Msk          (0x01UL << UART_2W_LCR_FORCE_PARITY_Pos)                /*!< UART_2W LCR: FORCE_PARITY Mask          */
#define UART_2W_LCR_SET_BREAK_Pos             6                                                       /*!< UART_2W LCR: SET_BREAK Position         */
#define UART_2W_LCR_SET_BREAK_Msk             (0x01UL << UART_2W_LCR_SET_BREAK_Pos)                   /*!< UART_2W LCR: SET_BREAK Mask             */
#define UART_2W_LCR_DLAB_Pos                  7                                                       /*!< UART_2W LCR: DLAB Position              */
#define UART_2W_LCR_DLAB_Msk                  (0x01UL << UART_2W_LCR_DLAB_Pos)                        /*!< UART_2W LCR: DLAB Mask                  */

/* ---------------------------------  UART_2W_MCR  -------------------------------- */
#define UART_2W_MCR_DTR_Pos                   0                                                       /*!< UART_2W MCR: DTR Position               */
#define UART_2W_MCR_DTR_Msk                   (0x01UL << UART_2W_MCR_DTR_Pos)                         /*!< UART_2W MCR: DTR Mask                   */
#define UART_2W_MCR_RTS_Pos                   1                                                       /*!< UART_2W MCR: RTS Position               */
#define UART_2W_MCR_RTS_Msk                   (0x01UL << UART_2W_MCR_RTS_Pos)                         /*!< UART_2W MCR: RTS Mask                   */
#define UART_2W_MCR_OUT_1_Pos                 2                                                       /*!< UART_2W MCR: OUT_1 Position             */
#define UART_2W_MCR_OUT_1_Msk                 (0x01UL << UART_2W_MCR_OUT_1_Pos)                       /*!< UART_2W MCR: OUT_1 Mask                 */
#define UART_2W_MCR_OUT_2_Pos                 3                                                       /*!< UART_2W MCR: OUT_2 Position             */
#define UART_2W_MCR_OUT_2_Msk                 (0x01UL << UART_2W_MCR_OUT_2_Pos)                       /*!< UART_2W MCR: OUT_2 Mask                 */
#define UART_2W_MCR_LOOP_BACK_Pos             4                                                       /*!< UART_2W MCR: LOOP_BACK Position         */
#define UART_2W_MCR_LOOP_BACK_Msk             (0x01UL << UART_2W_MCR_LOOP_BACK_Pos)                   /*!< UART_2W MCR: LOOP_BACK Mask             */
#define UART_2W_MCR_DE_RTS_Pos                5                                                       /*!< UART_2W MCR: DE_RTS Position            */
#define UART_2W_MCR_DE_RTS_Msk                (0x01UL << UART_2W_MCR_DE_RTS_Pos)                      /*!< UART_2W MCR: DE_RTS Mask                */

/* ---------------------------------  UART_2W_LSR  -------------------------------- */
#define UART_2W_LSR_DATA_RDY_Pos              0                                                       /*!< UART_2W LSR: DATA_RDY Position          */
#define UART_2W_LSR_DATA_RDY_Msk              (0x01UL << UART_2W_LSR_DATA_RDY_Pos)                    /*!< UART_2W LSR: DATA_RDY Mask              */
#define UART_2W_LSR_OVERRUN_ERR_Pos           1                                                       /*!< UART_2W LSR: OVERRUN_ERR Position       */
#define UART_2W_LSR_OVERRUN_ERR_Msk           (0x01UL << UART_2W_LSR_OVERRUN_ERR_Pos)                 /*!< UART_2W LSR: OVERRUN_ERR Mask           */
#define UART_2W_LSR_PARITY_ERR_Pos            2                                                       /*!< UART_2W LSR: PARITY_ERR Position        */
#define UART_2W_LSR_PARITY_ERR_Msk            (0x01UL << UART_2W_LSR_PARITY_ERR_Pos)                  /*!< UART_2W LSR: PARITY_ERR Mask            */
#define UART_2W_LSR_FRAMING_ERR_Pos           3                                                       /*!< UART_2W LSR: FRAMING_ERR Position       */
#define UART_2W_LSR_FRAMING_ERR_Msk           (0x01UL << UART_2W_LSR_FRAMING_ERR_Pos)                 /*!< UART_2W LSR: FRAMING_ERR Mask           */
#define UART_2W_LSR_BREAK_INT_Pos             4                                                       /*!< UART_2W LSR: BREAK_INT Position         */
#define UART_2W_LSR_BREAK_INT_Msk             (0x01UL << UART_2W_LSR_BREAK_INT_Pos)                   /*!< UART_2W LSR: BREAK_INT Mask             */
#define UART_2W_LSR_THR_EMPTY_Pos             5                                                       /*!< UART_2W LSR: THR_EMPTY Position         */
#define UART_2W_LSR_THR_EMPTY_Msk             (0x01UL << UART_2W_LSR_THR_EMPTY_Pos)                   /*!< UART_2W LSR: THR_EMPTY Mask             */
#define UART_2W_LSR_TX_EMPTY_Pos              6                                                       /*!< UART_2W LSR: TX_EMPTY Position          */
#define UART_2W_LSR_TX_EMPTY_Msk              (0x01UL << UART_2W_LSR_TX_EMPTY_Pos)                    /*!< UART_2W LSR: TX_EMPTY Mask              */
#define UART_2W_LSR_FIFODATA_ERR_Pos          7                                                       /*!< UART_2W LSR: FIFODATA_ERR Position      */
#define UART_2W_LSR_FIFODATA_ERR_Msk          (0x01UL << UART_2W_LSR_FIFODATA_ERR_Pos)                /*!< UART_2W LSR: FIFODATA_ERR Mask          */

/* ---------------------------------  UART_2W_MSR  -------------------------------- */
#define UART_2W_MSR_DELTA_CTS_Pos             0                                                       /*!< UART_2W MSR: DELTA_CTS Position         */
#define UART_2W_MSR_DELTA_CTS_Msk             (0x01UL << UART_2W_MSR_DELTA_CTS_Pos)                   /*!< UART_2W MSR: DELTA_CTS Mask             */
#define UART_2W_MSR_DELTA_DSR_Pos             1                                                       /*!< UART_2W MSR: DELTA_DSR Position         */
#define UART_2W_MSR_DELTA_DSR_Msk             (0x01UL << UART_2W_MSR_DELTA_DSR_Pos)                   /*!< UART_2W MSR: DELTA_DSR Mask             */
#define UART_2W_MSR_TRAILEDGE_RI_Pos          2                                                       /*!< UART_2W MSR: TRAILEDGE_RI Position      */
#define UART_2W_MSR_TRAILEDGE_RI_Msk          (0x01UL << UART_2W_MSR_TRAILEDGE_RI_Pos)                /*!< UART_2W MSR: TRAILEDGE_RI Mask          */
#define UART_2W_MSR_DELTA_CD_Pos              3                                                       /*!< UART_2W MSR: DELTA_CD Position          */
#define UART_2W_MSR_DELTA_CD_Msk              (0x01UL << UART_2W_MSR_DELTA_CD_Pos)                    /*!< UART_2W MSR: DELTA_CD Mask              */
#define UART_2W_MSR_CTS_Pos                   4                                                       /*!< UART_2W MSR: CTS Position               */
#define UART_2W_MSR_CTS_Msk                   (0x01UL << UART_2W_MSR_CTS_Pos)                         /*!< UART_2W MSR: CTS Mask                   */
#define UART_2W_MSR_DSR_Pos                   5                                                       /*!< UART_2W MSR: DSR Position               */
#define UART_2W_MSR_DSR_Msk                   (0x01UL << UART_2W_MSR_DSR_Pos)                         /*!< UART_2W MSR: DSR Mask                   */
#define UART_2W_MSR_RI_Pos                    6                                                       /*!< UART_2W MSR: RI Position                */
#define UART_2W_MSR_RI_Msk                    (0x01UL << UART_2W_MSR_RI_Pos)                          /*!< UART_2W MSR: RI Mask                    */
#define UART_2W_MSR_CD_Pos                    7                                                       /*!< UART_2W MSR: CD Position                */
#define UART_2W_MSR_CD_Msk                    (0x01UL << UART_2W_MSR_CD_Pos)                          /*!< UART_2W MSR: CD Mask                    */

/* ---------------------------------  UART_2W_SPR  -------------------------------- */
#define UART_2W_SPR_BRDC_DIV_Pos              0                                                       /*!< UART_2W SPR: BRDC_DIV Position          */
#define UART_2W_SPR_BRDC_DIV_Msk              (0x0000ffffUL << UART_2W_SPR_BRDC_DIV_Pos)              /*!< UART_2W SPR: BRDC_DIV Mask              */

/* --------------------------------  UART_2W_RTHR  -------------------------------- */
#define UART_2W_RTHR_RTHR_L_Pos               0                                                       /*!< UART_2W RTHR: RTHR_L Position           */
#define UART_2W_RTHR_RTHR_L_Msk               (0x0fUL << UART_2W_RTHR_RTHR_L_Pos)                     /*!< UART_2W RTHR: RTHR_L Mask               */
#define UART_2W_RTHR_RTHR_H_Pos               4                                                       /*!< UART_2W RTHR: RTHR_H Position           */
#define UART_2W_RTHR_RTHR_H_Msk               (0x0fUL << UART_2W_RTHR_RTHR_H_Pos)                     /*!< UART_2W RTHR: RTHR_H Mask               */

/* ---------------------------------  UART_2W_ISR  -------------------------------- */
#define UART_2W_ISR_INT_IDCODE_Pos            0                                                       /*!< UART_2W ISR: INT_IDCODE Position        */
#define UART_2W_ISR_INT_IDCODE_Msk            (0x0fUL << UART_2W_ISR_INT_IDCODE_Pos)                  /*!< UART_2W ISR: INT_IDCODE Mask            */
#define UART_2W_ISR_RX_IDLE_Pos               4                                                       /*!< UART_2W ISR: RX_IDLE Position           */
#define UART_2W_ISR_RX_IDLE_Msk               (0x01UL << UART_2W_ISR_RX_IDLE_Pos)                     /*!< UART_2W ISR: RX_IDLE Mask               */
#define UART_2W_ISR_TX_IDLE_Pos               5                                                       /*!< UART_2W ISR: TX_IDLE Position           */
#define UART_2W_ISR_TX_IDLE_Msk               (0x01UL << UART_2W_ISR_TX_IDLE_Pos)                     /*!< UART_2W ISR: TX_IDLE Mask               */
#define UART_2W_ISR_FIFOS_ENABLED_Pos         6                                                       /*!< UART_2W ISR: FIFOS_ENABLED Position     */
#define UART_2W_ISR_FIFOS_ENABLED_Msk         (0x03UL << UART_2W_ISR_FIFOS_ENABLED_Pos)               /*!< UART_2W ISR: FIFOS_ENABLED Mask         */

/* --------------------------------  UART_2W_TTHR  -------------------------------- */
#define UART_2W_TTHR_TTHR_L_Pos               0                                                       /*!< UART_2W TTHR: TTHR_L Position           */
#define UART_2W_TTHR_TTHR_L_Msk               (0x0fUL << UART_2W_TTHR_TTHR_L_Pos)                     /*!< UART_2W TTHR: TTHR_L Mask               */
#define UART_2W_TTHR_TTHR_H_Pos               4                                                       /*!< UART_2W TTHR: TTHR_H Position           */
#define UART_2W_TTHR_TTHR_H_Msk               (0x0fUL << UART_2W_TTHR_TTHR_H_Pos)                     /*!< UART_2W TTHR: TTHR_H Mask               */

/* -------------------------------  UART_2W_INT_MAP  ------------------------------ */
#define UART_2W_INT_MAP_RX_RECIEVED_Pos       0                                                       /*!< UART_2W INT_MAP: RX_RECIEVED Position   */
#define UART_2W_INT_MAP_RX_RECIEVED_Msk       (0x01UL << UART_2W_INT_MAP_RX_RECIEVED_Pos)             /*!< UART_2W INT_MAP: RX_RECIEVED Mask       */
#define UART_2W_INT_MAP_RX_FIFO_TO_Pos        1                                                       /*!< UART_2W INT_MAP: RX_FIFO_TO Position    */
#define UART_2W_INT_MAP_RX_FIFO_TO_Msk        (0x01UL << UART_2W_INT_MAP_RX_FIFO_TO_Pos)              /*!< UART_2W INT_MAP: RX_FIFO_TO Mask        */
#define UART_2W_INT_MAP_TX_L_Pos              2                                                       /*!< UART_2W INT_MAP: TX_L Position          */
#define UART_2W_INT_MAP_TX_L_Msk              (0x01UL << UART_2W_INT_MAP_TX_L_Pos)                    /*!< UART_2W INT_MAP: TX_L Mask              */
#define UART_2W_INT_MAP_TX_H_Pos              3                                                       /*!< UART_2W INT_MAP: TX_H Position          */
#define UART_2W_INT_MAP_TX_H_Msk              (0x01UL << UART_2W_INT_MAP_TX_H_Pos)                    /*!< UART_2W INT_MAP: TX_H Mask              */
#define UART_2W_INT_MAP_TX_EMPTY2_Pos         4                                                       /*!< UART_2W INT_MAP: TX_EMPTY2 Position     */
#define UART_2W_INT_MAP_TX_EMPTY2_Msk         (0x01UL << UART_2W_INT_MAP_TX_EMPTY2_Pos)               /*!< UART_2W INT_MAP: TX_EMPTY2 Mask         */
#define UART_2W_INT_MAP_OVERRUN_Pos           5                                                       /*!< UART_2W INT_MAP: OVERRUN Position       */
#define UART_2W_INT_MAP_OVERRUN_Msk           (0x01UL << UART_2W_INT_MAP_OVERRUN_Pos)                 /*!< UART_2W INT_MAP: OVERRUN Mask           */
#define UART_2W_INT_MAP_FRAMING_Pos           6                                                       /*!< UART_2W INT_MAP: FRAMING Position       */
#define UART_2W_INT_MAP_FRAMING_Msk           (0x01UL << UART_2W_INT_MAP_FRAMING_Pos)                 /*!< UART_2W INT_MAP: FRAMING Mask           */
#define UART_2W_INT_MAP_BREAK_Pos             7                                                       /*!< UART_2W INT_MAP: BREAK Position         */
#define UART_2W_INT_MAP_BREAK_Msk             (0x01UL << UART_2W_INT_MAP_BREAK_Pos)                   /*!< UART_2W INT_MAP: BREAK Mask             */
#define UART_2W_INT_MAP_PARITY_Pos            8                                                       /*!< UART_2W INT_MAP: PARITY Position        */
#define UART_2W_INT_MAP_PARITY_Msk            (0x01UL << UART_2W_INT_MAP_PARITY_Pos)                  /*!< UART_2W INT_MAP: PARITY Mask            */
#define UART_2W_INT_MAP_MODEN_INT_Pos         9                                                       /*!< UART_2W INT_MAP: MODEN_INT Position     */
#define UART_2W_INT_MAP_MODEN_INT_Msk         (0x01UL << UART_2W_INT_MAP_MODEN_INT_Pos)               /*!< UART_2W INT_MAP: MODEN_INT Mask         */

/* -------------------------------  UART_2W_POINTER  ------------------------------ */
#define UART_2W_POINTER_ROP_A_Pos             0                                                       /*!< UART_2W POINTER: ROP_A Position         */
#define UART_2W_POINTER_ROP_A_Msk             (0x0fUL << UART_2W_POINTER_ROP_A_Pos)                   /*!< UART_2W POINTER: ROP_A Mask             */
#define UART_2W_POINTER_RIP_A_Pos             4                                                       /*!< UART_2W POINTER: RIP_A Position         */
#define UART_2W_POINTER_RIP_A_Msk             (0x0fUL << UART_2W_POINTER_RIP_A_Pos)                   /*!< UART_2W POINTER: RIP_A Mask             */
#define UART_2W_POINTER_TOP_A_Pos             8                                                       /*!< UART_2W POINTER: TOP_A Position         */
#define UART_2W_POINTER_TOP_A_Msk             (0x0fUL << UART_2W_POINTER_TOP_A_Pos)                   /*!< UART_2W POINTER: TOP_A Mask             */
#define UART_2W_POINTER_TIP_A_Pos             12                                                      /*!< UART_2W POINTER: TIP_A Position         */
#define UART_2W_POINTER_TIP_A_Msk             (0x0fUL << UART_2W_POINTER_TIP_A_Pos)                   /*!< UART_2W POINTER: TIP_A Mask             */


/* ================================================================================ */
/* ================      struct 'SPI_SLV_REG' Position & Mask      ================ */
/* ================================================================================ */


/* ----------------------------  SPI_SLV_REG_SPI_DATA  ---------------------------- */
#define SPI_SLV_REG_SPI_DATA_SPI_SLV_DATA_Pos 0                                                       /*!< SPI_SLV_REG SPI_DATA: SPI_SLV_DATA Position */
#define SPI_SLV_REG_SPI_DATA_SPI_SLV_DATA_Msk (0x000000ffUL << SPI_SLV_REG_SPI_DATA_SPI_SLV_DATA_Pos) /*!< SPI_SLV_REG SPI_DATA: SPI_SLV_DATA Mask */

/* -------------------------  SPI_SLV_REG_SPI_TX_FIFO_CNT  ------------------------ */
#define SPI_SLV_REG_SPI_TX_FIFO_CNT_WR_FF_CNT_Pos 0                                                   /*!< SPI_SLV_REG SPI_TX_FIFO_CNT: WR_FF_CNT Position */
#define SPI_SLV_REG_SPI_TX_FIFO_CNT_WR_FF_CNT_Msk (0x1fUL << SPI_SLV_REG_SPI_TX_FIFO_CNT_WR_FF_CNT_Pos)/*!< SPI_SLV_REG SPI_TX_FIFO_CNT: WR_FF_CNT Mask */

/* -------------------------  SPI_SLV_REG_SPI_RX_FIFO_CNT  ------------------------ */
#define SPI_SLV_REG_SPI_RX_FIFO_CNT_RD_FF_CNT_Pos 0                                                   /*!< SPI_SLV_REG SPI_RX_FIFO_CNT: RD_FF_CNT Position */
#define SPI_SLV_REG_SPI_RX_FIFO_CNT_RD_FF_CNT_Msk (0x1fUL << SPI_SLV_REG_SPI_RX_FIFO_CNT_RD_FF_CNT_Pos)/*!< SPI_SLV_REG SPI_RX_FIFO_CNT: RD_FF_CNT Mask */

/* ---------------------------  SPI_SLV_REG_SPI_TX_CLR  --------------------------- */
#define SPI_SLV_REG_SPI_TX_CLR_SPI_WR_FIFO_CLR_Pos 0                                                  /*!< SPI_SLV_REG SPI_TX_CLR: SPI_WR_FIFO_CLR Position */
#define SPI_SLV_REG_SPI_TX_CLR_SPI_WR_FIFO_CLR_Msk (0x01UL << SPI_SLV_REG_SPI_TX_CLR_SPI_WR_FIFO_CLR_Pos)/*!< SPI_SLV_REG SPI_TX_CLR: SPI_WR_FIFO_CLR Mask */

/* ---------------------------  SPI_SLV_REG_SPI_RX_CLR  --------------------------- */
#define SPI_SLV_REG_SPI_RX_CLR_SPI_RD_FIFO_CLR_Pos 0                                                  /*!< SPI_SLV_REG SPI_RX_CLR: SPI_RD_FIFO_CLR Position */
#define SPI_SLV_REG_SPI_RX_CLR_SPI_RD_FIFO_CLR_Msk (0x01UL << SPI_SLV_REG_SPI_RX_CLR_SPI_RD_FIFO_CLR_Pos)/*!< SPI_SLV_REG SPI_RX_CLR: SPI_RD_FIFO_CLR Mask */

/* -----------------------------  SPI_SLV_REG_SPI_INT  ---------------------------- */
#define SPI_SLV_REG_SPI_INT_RX_FIFO_NOT_EMPTY_INT_Pos 0                                               /*!< SPI_SLV_REG SPI_INT: RX_FIFO_NOT_EMPTY_INT Position */
#define SPI_SLV_REG_SPI_INT_RX_FIFO_NOT_EMPTY_INT_Msk (0x01UL << SPI_SLV_REG_SPI_INT_RX_FIFO_NOT_EMPTY_INT_Pos)/*!< SPI_SLV_REG SPI_INT: RX_FIFO_NOT_EMPTY_INT Mask */
#define SPI_SLV_REG_SPI_INT_TX_FIFO_NOT_EMPTY_INT_Pos 1                                               /*!< SPI_SLV_REG SPI_INT: TX_FIFO_NOT_EMPTY_INT Position */
#define SPI_SLV_REG_SPI_INT_TX_FIFO_NOT_EMPTY_INT_Msk (0x01UL << SPI_SLV_REG_SPI_INT_TX_FIFO_NOT_EMPTY_INT_Pos)/*!< SPI_SLV_REG SPI_INT: TX_FIFO_NOT_EMPTY_INT Mask */
#define SPI_SLV_REG_SPI_INT_TX_FIFO_NOT_FULL_INT_Pos 2                                                /*!< SPI_SLV_REG SPI_INT: TX_FIFO_NOT_FULL_INT Position */
#define SPI_SLV_REG_SPI_INT_TX_FIFO_NOT_FULL_INT_Msk (0x01UL << SPI_SLV_REG_SPI_INT_TX_FIFO_NOT_FULL_INT_Pos)/*!< SPI_SLV_REG SPI_INT: TX_FIFO_NOT_FULL_INT Mask */

/* ---------------------------  SPI_SLV_REG_SPI_ENDIAN  --------------------------- */
#define SPI_SLV_REG_SPI_ENDIAN_SPI_SLV_ENDIAN_Pos 0                                                   /*!< SPI_SLV_REG SPI_ENDIAN: SPI_SLV_ENDIAN Position */
#define SPI_SLV_REG_SPI_ENDIAN_SPI_SLV_ENDIAN_Msk (0x01UL << SPI_SLV_REG_SPI_ENDIAN_SPI_SLV_ENDIAN_Pos)/*!< SPI_SLV_REG SPI_ENDIAN: SPI_SLV_ENDIAN Mask */

/* ---------------------------  SPI_SLV_REG_SPI_ENABLE  --------------------------- */
#define SPI_SLV_REG_SPI_ENABLE_CMD_MODE_Pos   0                                                       /*!< SPI_SLV_REG SPI_ENABLE: CMD_MODE Position */
#define SPI_SLV_REG_SPI_ENABLE_CMD_MODE_Msk   (0x01UL << SPI_SLV_REG_SPI_ENABLE_CMD_MODE_Pos)         /*!< SPI_SLV_REG SPI_ENABLE: CMD_MODE Mask   */
#define SPI_SLV_REG_SPI_ENABLE_SPI_SLV_ENABLE_Pos 1                                                   /*!< SPI_SLV_REG SPI_ENABLE: SPI_SLV_ENABLE Position */
#define SPI_SLV_REG_SPI_ENABLE_SPI_SLV_ENABLE_Msk (0x01UL << SPI_SLV_REG_SPI_ENABLE_SPI_SLV_ENABLE_Pos)/*!< SPI_SLV_REG SPI_ENABLE: SPI_SLV_ENABLE Mask */

/* -----------------------------  SPI_SLV_REG_SPI_NOP  ---------------------------- */
#define SPI_SLV_REG_SPI_NOP_SPI_SLV_NOP_Pos   0                                                       /*!< SPI_SLV_REG SPI_NOP: SPI_SLV_NOP Position */
#define SPI_SLV_REG_SPI_NOP_SPI_SLV_NOP_Msk   (0x000000ffUL << SPI_SLV_REG_SPI_NOP_SPI_SLV_NOP_Pos)   /*!< SPI_SLV_REG SPI_NOP: SPI_SLV_NOP Mask   */

/* -----------------------------  SPI_SLV_REG_SPI_ERR  ---------------------------- */
#define SPI_SLV_REG_SPI_ERR_SPI_SLV_RX_ERR_Pos 0                                                      /*!< SPI_SLV_REG SPI_ERR: SPI_SLV_RX_ERR Position */
#define SPI_SLV_REG_SPI_ERR_SPI_SLV_RX_ERR_Msk (0x01UL << SPI_SLV_REG_SPI_ERR_SPI_SLV_RX_ERR_Pos)     /*!< SPI_SLV_REG SPI_ERR: SPI_SLV_RX_ERR Mask */
#define SPI_SLV_REG_SPI_ERR_SPI_EVT_L_ERR_Pos 1                                                       /*!< SPI_SLV_REG SPI_ERR: SPI_EVT_L_ERR Position */
#define SPI_SLV_REG_SPI_ERR_SPI_EVT_L_ERR_Msk (0x01UL << SPI_SLV_REG_SPI_ERR_SPI_EVT_L_ERR_Pos)       /*!< SPI_SLV_REG SPI_ERR: SPI_EVT_L_ERR Mask */
#define SPI_SLV_REG_SPI_ERR_SPI_CMD_L_ERR_Pos 2                                                       /*!< SPI_SLV_REG SPI_ERR: SPI_CMD_L_ERR Position */
#define SPI_SLV_REG_SPI_ERR_SPI_CMD_L_ERR_Msk (0x01UL << SPI_SLV_REG_SPI_ERR_SPI_CMD_L_ERR_Pos)       /*!< SPI_SLV_REG SPI_ERR: SPI_CMD_L_ERR Mask */

/* --------------------------  SPI_SLV_REG_SPI_EVT_TRIG  -------------------------- */
#define SPI_SLV_REG_SPI_EVT_TRIG_EVT_TRIG_Pos 0                                                       /*!< SPI_SLV_REG SPI_EVT_TRIG: EVT_TRIG Position */
#define SPI_SLV_REG_SPI_EVT_TRIG_EVT_TRIG_Msk (0x01UL << SPI_SLV_REG_SPI_EVT_TRIG_EVT_TRIG_Pos)       /*!< SPI_SLV_REG SPI_EVT_TRIG: EVT_TRIG Mask */
#define SPI_SLV_REG_SPI_EVT_TRIG_EVT_STATE_Pos 4                                                      /*!< SPI_SLV_REG SPI_EVT_TRIG: EVT_STATE Position */
#define SPI_SLV_REG_SPI_EVT_TRIG_EVT_STATE_Msk (0x01UL << SPI_SLV_REG_SPI_EVT_TRIG_EVT_STATE_Pos)     /*!< SPI_SLV_REG SPI_EVT_TRIG: EVT_STATE Mask */

/* ----------------------------  SPI_SLV_REG_SPI_INFO  ---------------------------- */
#define SPI_SLV_REG_SPI_INFO_SLV_INFO_Pos     0                                                       /*!< SPI_SLV_REG SPI_INFO: SLV_INFO Position */
#define SPI_SLV_REG_SPI_INFO_SLV_INFO_Msk     (0xffffffffUL << SPI_SLV_REG_SPI_INFO_SLV_INFO_Pos)     /*!< SPI_SLV_REG SPI_INFO: SLV_INFO Mask     */

/* ---------------------------  SPI_SLV_REG_HOST_4_BYTE  -------------------------- */
#define SPI_SLV_REG_HOST_4_BYTE_HOST_4_BYTE_Pos 0                                                     /*!< SPI_SLV_REG HOST_4_BYTE: HOST_4_BYTE Position */
#define SPI_SLV_REG_HOST_4_BYTE_HOST_4_BYTE_Msk (0xffffffffUL << SPI_SLV_REG_HOST_4_BYTE_HOST_4_BYTE_Pos)/*!< SPI_SLV_REG HOST_4_BYTE: HOST_4_BYTE Mask */

/* -----------------------------  SPI_SLV_REG_W_ADDR  ----------------------------- */
#define SPI_SLV_REG_W_ADDR_W_ADDR_Pos         0                                                       /*!< SPI_SLV_REG W_ADDR: W_ADDR Position     */
#define SPI_SLV_REG_W_ADDR_W_ADDR_Msk         (0xffffffffUL << SPI_SLV_REG_W_ADDR_W_ADDR_Pos)         /*!< SPI_SLV_REG W_ADDR: W_ADDR Mask         */

/* -----------------------------  SPI_SLV_REG_R_ADDR  ----------------------------- */
#define SPI_SLV_REG_R_ADDR_R_ADDR_Pos         0                                                       /*!< SPI_SLV_REG R_ADDR: R_ADDR Position     */
#define SPI_SLV_REG_R_ADDR_R_ADDR_Msk         (0xffffffffUL << SPI_SLV_REG_R_ADDR_R_ADDR_Pos)         /*!< SPI_SLV_REG R_ADDR: R_ADDR Mask         */

/* ----------------------  SPI_SLV_REG_COMMAND_SET_INT_CLEAR  --------------------- */
#define SPI_SLV_REG_COMMAND_SET_INT_CLEAR_CMD_DONE_INT_Pos 0                                          /*!< SPI_SLV_REG COMMAND_SET_INT_CLEAR: CMD_DONE_INT Position */
#define SPI_SLV_REG_COMMAND_SET_INT_CLEAR_CMD_DONE_INT_Msk (0x01UL << SPI_SLV_REG_COMMAND_SET_INT_CLEAR_CMD_DONE_INT_Pos)/*!< SPI_SLV_REG COMMAND_SET_INT_CLEAR: CMD_DONE_INT Mask */
#define SPI_SLV_REG_COMMAND_SET_INT_CLEAR_CMD_SET_Pos 1                                               /*!< SPI_SLV_REG COMMAND_SET_INT_CLEAR: CMD_SET Position */
#define SPI_SLV_REG_COMMAND_SET_INT_CLEAR_CMD_SET_Msk (0x01UL << SPI_SLV_REG_COMMAND_SET_INT_CLEAR_CMD_SET_Pos)/*!< SPI_SLV_REG COMMAND_SET_INT_CLEAR: CMD_SET Mask */

/* -------------------------  SPI_SLV_REG_CMD_MAX_LENGTH  ------------------------- */
#define SPI_SLV_REG_CMD_MAX_LENGTH_MAX_CMD_LENGTH_Pos 0                                               /*!< SPI_SLV_REG CMD_MAX_LENGTH: MAX_CMD_LENGTH Position */
#define SPI_SLV_REG_CMD_MAX_LENGTH_MAX_CMD_LENGTH_Msk (0x000001ffUL << SPI_SLV_REG_CMD_MAX_LENGTH_MAX_CMD_LENGTH_Pos)/*!< SPI_SLV_REG CMD_MAX_LENGTH: MAX_CMD_LENGTH Mask */

/* -------------------------  SPI_SLV_REG_SPI_EVT_LENGTH  ------------------------- */
#define SPI_SLV_REG_SPI_EVT_LENGTH_EVT_LENGTH_Pos 0                                                   /*!< SPI_SLV_REG SPI_EVT_LENGTH: EVT_LENGTH Position */
#define SPI_SLV_REG_SPI_EVT_LENGTH_EVT_LENGTH_Msk (0x000000ffUL << SPI_SLV_REG_SPI_EVT_LENGTH_EVT_LENGTH_Pos)/*!< SPI_SLV_REG SPI_EVT_LENGTH: EVT_LENGTH Mask */


/* ================================================================================ */
/* ================      struct 'SPI_MST_REG' Position & Mask      ================ */
/* ================================================================================ */


/* ----------------------------  SPI_MST_REG_SPI_DELAY  --------------------------- */
#define SPI_MST_REG_SPI_DELAY_SPI_M_FRONT_DLY_Pos 0                                                   /*!< SPI_MST_REG SPI_DELAY: SPI_M_FRONT_DLY Position */
#define SPI_MST_REG_SPI_DELAY_SPI_M_FRONT_DLY_Msk (0x0000ffffUL << SPI_MST_REG_SPI_DELAY_SPI_M_FRONT_DLY_Pos)/*!< SPI_MST_REG SPI_DELAY: SPI_M_FRONT_DLY Mask */
#define SPI_MST_REG_SPI_DELAY_SPI_M_BACK_DLY_Pos 16                                                   /*!< SPI_MST_REG SPI_DELAY: SPI_M_BACK_DLY Position */
#define SPI_MST_REG_SPI_DELAY_SPI_M_BACK_DLY_Msk (0x0000ffffUL << SPI_MST_REG_SPI_DELAY_SPI_M_BACK_DLY_Pos)/*!< SPI_MST_REG SPI_DELAY: SPI_M_BACK_DLY Mask */

/* ---------------------------  SPI_MST_REG_SPI_CLK_DIV  -------------------------- */
#define SPI_MST_REG_SPI_CLK_DIV_SPI_CLK_DIV_Pos 0                                                     /*!< SPI_MST_REG SPI_CLK_DIV: SPI_CLK_DIV Position */
#define SPI_MST_REG_SPI_CLK_DIV_SPI_CLK_DIV_Msk (0x0000ffffUL << SPI_MST_REG_SPI_CLK_DIV_SPI_CLK_DIV_Pos)/*!< SPI_MST_REG SPI_CLK_DIV: SPI_CLK_DIV Mask */

/* ----------------------------  SPI_MST_REG_SPI_BUSY  ---------------------------- */
#define SPI_MST_REG_SPI_BUSY_SPI_M_BUSY_Pos   0                                                       /*!< SPI_MST_REG SPI_BUSY: SPI_M_BUSY Position */
#define SPI_MST_REG_SPI_BUSY_SPI_M_BUSY_Msk   (0x01UL << SPI_MST_REG_SPI_BUSY_SPI_M_BUSY_Pos)         /*!< SPI_MST_REG SPI_BUSY: SPI_M_BUSY Mask   */

/* -----------------------------  SPI_MST_REG_SPI_CLR  ---------------------------- */
#define SPI_MST_REG_SPI_CLR_SPI_CLR_Pos       0                                                       /*!< SPI_MST_REG SPI_CLR: SPI_CLR Position   */
#define SPI_MST_REG_SPI_CLR_SPI_CLR_Msk       (0x01UL << SPI_MST_REG_SPI_CLR_SPI_CLR_Pos)             /*!< SPI_MST_REG SPI_CLR: SPI_CLR Mask       */

/* ----------------------------  SPI_MST_REG_SPI_MODE  ---------------------------- */
#define SPI_MST_REG_SPI_MODE_CPOL_Pos         0                                                       /*!< SPI_MST_REG SPI_MODE: CPOL Position     */
#define SPI_MST_REG_SPI_MODE_CPOL_Msk         (0x01UL << SPI_MST_REG_SPI_MODE_CPOL_Pos)               /*!< SPI_MST_REG SPI_MODE: CPOL Mask         */
#define SPI_MST_REG_SPI_MODE_CPHA_Pos         1                                                       /*!< SPI_MST_REG SPI_MODE: CPHA Position     */
#define SPI_MST_REG_SPI_MODE_CPHA_Msk         (0x01UL << SPI_MST_REG_SPI_MODE_CPHA_Pos)               /*!< SPI_MST_REG SPI_MODE: CPHA Mask         */

/* ----------------------------  SPI_MST_REG_SPI_M_CFG  --------------------------- */
#define SPI_MST_REG_SPI_M_CFG_CSPOL_Pos       0                                                       /*!< SPI_MST_REG SPI_M_CFG: CSPOL Position   */
#define SPI_MST_REG_SPI_M_CFG_CSPOL_Msk       (0x01UL << SPI_MST_REG_SPI_M_CFG_CSPOL_Pos)             /*!< SPI_MST_REG SPI_M_CFG: CSPOL Mask       */
#define SPI_MST_REG_SPI_M_CFG_INV_DATA_Pos    1                                                       /*!< SPI_MST_REG SPI_M_CFG: INV_DATA Position */
#define SPI_MST_REG_SPI_M_CFG_INV_DATA_Msk    (0x01UL << SPI_MST_REG_SPI_M_CFG_INV_DATA_Pos)          /*!< SPI_MST_REG SPI_M_CFG: INV_DATA Mask    */
#define SPI_MST_REG_SPI_M_CFG_FAST_CLK_Pos    2                                                       /*!< SPI_MST_REG SPI_M_CFG: FAST_CLK Position */
#define SPI_MST_REG_SPI_M_CFG_FAST_CLK_Msk    (0x01UL << SPI_MST_REG_SPI_M_CFG_FAST_CLK_Pos)          /*!< SPI_MST_REG SPI_M_CFG: FAST_CLK Mask    */
#define SPI_MST_REG_SPI_M_CFG_AUTO_CSN_Pos    3                                                       /*!< SPI_MST_REG SPI_M_CFG: AUTO_CSN Position */
#define SPI_MST_REG_SPI_M_CFG_AUTO_CSN_Msk    (0x01UL << SPI_MST_REG_SPI_M_CFG_AUTO_CSN_Pos)          /*!< SPI_MST_REG SPI_M_CFG: AUTO_CSN Mask    */
#define SPI_MST_REG_SPI_M_CFG_THREE_WIRE_Pos  4                                                       /*!< SPI_MST_REG SPI_M_CFG: THREE_WIRE Position */
#define SPI_MST_REG_SPI_M_CFG_THREE_WIRE_Msk  (0x3fUL << SPI_MST_REG_SPI_M_CFG_THREE_WIRE_Pos)        /*!< SPI_MST_REG SPI_M_CFG: THREE_WIRE Mask  */
#define SPI_MST_REG_SPI_M_CFG_ENDIAN_Pos      10                                                      /*!< SPI_MST_REG SPI_M_CFG: ENDIAN Position  */
#define SPI_MST_REG_SPI_M_CFG_ENDIAN_Msk      (0x01UL << SPI_MST_REG_SPI_M_CFG_ENDIAN_Pos)            /*!< SPI_MST_REG SPI_M_CFG: ENDIAN Mask      */
#define SPI_MST_REG_SPI_M_CFG_EARLY_SAMPLE_Pos 11                                                     /*!< SPI_MST_REG SPI_M_CFG: EARLY_SAMPLE Position */
#define SPI_MST_REG_SPI_M_CFG_EARLY_SAMPLE_Msk (0x01UL << SPI_MST_REG_SPI_M_CFG_EARLY_SAMPLE_Pos)     /*!< SPI_MST_REG SPI_M_CFG: EARLY_SAMPLE Mask */

/* -----------------------------  SPI_MST_REG_SPI_CFG  ---------------------------- */
#define SPI_MST_REG_SPI_CFG_SPI_CSN_Pos       0                                                       /*!< SPI_MST_REG SPI_CFG: SPI_CSN Position   */
#define SPI_MST_REG_SPI_CFG_SPI_CSN_Msk       (0x01UL << SPI_MST_REG_SPI_CFG_SPI_CSN_Pos)             /*!< SPI_MST_REG SPI_CFG: SPI_CSN Mask       */

/* --------------------------  SPI_MST_REG_SPI_MOSI_BUF  -------------------------- */
#define SPI_MST_REG_SPI_MOSI_BUF_SPI_MOSI_DATA_Pos 0                                                  /*!< SPI_MST_REG SPI_MOSI_BUF: SPI_MOSI_DATA Position */
#define SPI_MST_REG_SPI_MOSI_BUF_SPI_MOSI_DATA_Msk (0x000000ffUL << SPI_MST_REG_SPI_MOSI_BUF_SPI_MOSI_DATA_Pos)/*!< SPI_MST_REG SPI_MOSI_BUF: SPI_MOSI_DATA Mask */

/* --------------------------  SPI_MST_REG_SPI_MISO_BUF  -------------------------- */
#define SPI_MST_REG_SPI_MISO_BUF_SPI_MISO_DATA_Pos 0                                                  /*!< SPI_MST_REG SPI_MISO_BUF: SPI_MISO_DATA Position */
#define SPI_MST_REG_SPI_MISO_BUF_SPI_MISO_DATA_Msk (0x000000ffUL << SPI_MST_REG_SPI_MISO_BUF_SPI_MISO_DATA_Pos)/*!< SPI_MST_REG SPI_MISO_BUF: SPI_MISO_DATA Mask */


/* ================================================================================ */
/* ================    struct 'CSR_PAD_MUX_REG' Position & Mask    ================ */
/* ================================================================================ */


/* --------------------------  CSR_PAD_MUX_REG_PAD_INT1  -------------------------- */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_SEL_Pos 0                                                       /*!< CSR_PAD_MUX_REG PAD_INT1: INT1_SEL Position */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_SEL_Msk (0x0fUL << CSR_PAD_MUX_REG_PAD_INT1_INT1_SEL_Pos)       /*!< CSR_PAD_MUX_REG PAD_INT1: INT1_SEL Mask */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_GPIO_OE_Pos 16                                                  /*!< CSR_PAD_MUX_REG PAD_INT1: INT1_GPIO_OE Position */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_GPIO_OE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_INT1_INT1_GPIO_OE_Pos)/*!< CSR_PAD_MUX_REG PAD_INT1: INT1_GPIO_OE Mask */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_GPIO_IE_Pos 17                                                  /*!< CSR_PAD_MUX_REG PAD_INT1: INT1_GPIO_IE Position */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_GPIO_IE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_INT1_INT1_GPIO_IE_Pos)/*!< CSR_PAD_MUX_REG PAD_INT1: INT1_GPIO_IE Mask */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_GPIO_PDE_Pos 18                                                 /*!< CSR_PAD_MUX_REG PAD_INT1: INT1_GPIO_PDE Position */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_GPIO_PDE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_INT1_INT1_GPIO_PDE_Pos)/*!< CSR_PAD_MUX_REG PAD_INT1: INT1_GPIO_PDE Mask */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_GPIO_PUE_Pos 19                                                 /*!< CSR_PAD_MUX_REG PAD_INT1: INT1_GPIO_PUE Position */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_GPIO_PUE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_INT1_INT1_GPIO_PUE_Pos)/*!< CSR_PAD_MUX_REG PAD_INT1: INT1_GPIO_PUE Mask */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_GPIO_DS_Pos 20                                                  /*!< CSR_PAD_MUX_REG PAD_INT1: INT1_GPIO_DS Position */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_GPIO_DS_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_INT1_INT1_GPIO_DS_Pos)/*!< CSR_PAD_MUX_REG PAD_INT1: INT1_GPIO_DS Mask */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_OD_MANUAL_EN_Pos 24                                             /*!< CSR_PAD_MUX_REG PAD_INT1: INT1_OD_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_OD_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_INT1_INT1_OD_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_INT1: INT1_OD_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_OE_MANUAL_EN_Pos 25                                             /*!< CSR_PAD_MUX_REG PAD_INT1: INT1_OE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_OE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_INT1_INT1_OE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_INT1: INT1_OE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_IE_MANUAL_EN_Pos 26                                             /*!< CSR_PAD_MUX_REG PAD_INT1: INT1_IE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_IE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_INT1_INT1_IE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_INT1: INT1_IE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_PDE_MANUAL_EN_Pos 27                                            /*!< CSR_PAD_MUX_REG PAD_INT1: INT1_PDE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_PDE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_INT1_INT1_PDE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_INT1: INT1_PDE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_PUE_MANUAL_EN_Pos 28                                            /*!< CSR_PAD_MUX_REG PAD_INT1: INT1_PUE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_PUE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_INT1_INT1_PUE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_INT1: INT1_PUE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_DS_MANUAL_EN_Pos 29                                             /*!< CSR_PAD_MUX_REG PAD_INT1: INT1_DS_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_INT1_INT1_DS_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_INT1_INT1_DS_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_INT1: INT1_DS_MANUAL_EN Mask */

/* --------------------------  CSR_PAD_MUX_REG_PAD_INT0  -------------------------- */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_SEL_Pos 0                                                       /*!< CSR_PAD_MUX_REG PAD_INT0: INT0_SEL Position */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_SEL_Msk (0x0fUL << CSR_PAD_MUX_REG_PAD_INT0_INT0_SEL_Pos)       /*!< CSR_PAD_MUX_REG PAD_INT0: INT0_SEL Mask */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_GPIO_OE_Pos 16                                                  /*!< CSR_PAD_MUX_REG PAD_INT0: INT0_GPIO_OE Position */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_GPIO_OE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_INT0_INT0_GPIO_OE_Pos)/*!< CSR_PAD_MUX_REG PAD_INT0: INT0_GPIO_OE Mask */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_GPIO_IE_Pos 17                                                  /*!< CSR_PAD_MUX_REG PAD_INT0: INT0_GPIO_IE Position */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_GPIO_IE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_INT0_INT0_GPIO_IE_Pos)/*!< CSR_PAD_MUX_REG PAD_INT0: INT0_GPIO_IE Mask */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_GPIO_PDE_Pos 18                                                 /*!< CSR_PAD_MUX_REG PAD_INT0: INT0_GPIO_PDE Position */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_GPIO_PDE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_INT0_INT0_GPIO_PDE_Pos)/*!< CSR_PAD_MUX_REG PAD_INT0: INT0_GPIO_PDE Mask */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_GPIO_PUE_Pos 19                                                 /*!< CSR_PAD_MUX_REG PAD_INT0: INT0_GPIO_PUE Position */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_GPIO_PUE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_INT0_INT0_GPIO_PUE_Pos)/*!< CSR_PAD_MUX_REG PAD_INT0: INT0_GPIO_PUE Mask */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_GPIO_DS_Pos 20                                                  /*!< CSR_PAD_MUX_REG PAD_INT0: INT0_GPIO_DS Position */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_GPIO_DS_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_INT0_INT0_GPIO_DS_Pos)/*!< CSR_PAD_MUX_REG PAD_INT0: INT0_GPIO_DS Mask */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_OD_MANUAL_EN_Pos 24                                             /*!< CSR_PAD_MUX_REG PAD_INT0: INT0_OD_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_OD_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_INT0_INT0_OD_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_INT0: INT0_OD_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_OE_MANUAL_EN_Pos 25                                             /*!< CSR_PAD_MUX_REG PAD_INT0: INT0_OE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_OE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_INT0_INT0_OE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_INT0: INT0_OE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_IE_MANUAL_EN_Pos 26                                             /*!< CSR_PAD_MUX_REG PAD_INT0: INT0_IE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_IE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_INT0_INT0_IE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_INT0: INT0_IE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_PDE_MANUAL_EN_Pos 27                                            /*!< CSR_PAD_MUX_REG PAD_INT0: INT0_PDE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_PDE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_INT0_INT0_PDE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_INT0: INT0_PDE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_PUE_MANUAL_EN_Pos 28                                            /*!< CSR_PAD_MUX_REG PAD_INT0: INT0_PUE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_PUE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_INT0_INT0_PUE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_INT0: INT0_PUE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_DS_MANUAL_EN_Pos 29                                             /*!< CSR_PAD_MUX_REG PAD_INT0: INT0_DS_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_INT0_INT0_DS_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_INT0_INT0_DS_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_INT0: INT0_DS_MANUAL_EN Mask */

/* --------------------------  CSR_PAD_MUX_REG_PAD_CMIF0  ------------------------- */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_SEL_Pos 0                                                     /*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_SEL Position */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_SEL_Msk (0x0fUL << CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_SEL_Pos)   /*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_SEL Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_GPIO_OE_Pos 16                                                /*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_GPIO_OE Position */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_GPIO_OE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_GPIO_OE_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_GPIO_OE Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_GPIO_IE_Pos 17                                                /*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_GPIO_IE Position */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_GPIO_IE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_GPIO_IE_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_GPIO_IE Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_GPIO_PDE_Pos 18                                               /*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_GPIO_PDE Position */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_GPIO_PDE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_GPIO_PDE_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_GPIO_PDE Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_GPIO_PUE_Pos 19                                               /*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_GPIO_PUE Position */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_GPIO_PUE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_GPIO_PUE_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_GPIO_PUE Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_GPIO_DS_Pos 20                                                /*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_GPIO_DS Position */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_GPIO_DS_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_GPIO_DS_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_GPIO_DS Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_OD_MANUAL_EN_Pos 24                                           /*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_OD_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_OD_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_OD_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_OD_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_OE_MANUAL_EN_Pos 25                                           /*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_OE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_OE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_OE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_OE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_IE_MANUAL_EN_Pos 26                                           /*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_IE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_IE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_IE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_IE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_PDE_MANUAL_EN_Pos 27                                          /*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_PDE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_PDE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_PDE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_PDE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_PUE_MANUAL_EN_Pos 28                                          /*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_PUE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_PUE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_PUE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_PUE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_DS_MANUAL_EN_Pos 29                                           /*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_DS_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_DS_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF0_CMIF0_DS_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF0: CMIF0_DS_MANUAL_EN Mask */

/* --------------------------  CSR_PAD_MUX_REG_PAD_CMIF1  ------------------------- */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_SEL_Pos 0                                                     /*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_SEL Position */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_SEL_Msk (0x0fUL << CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_SEL_Pos)   /*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_SEL Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_GPIO_OE_Pos 16                                                /*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_GPIO_OE Position */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_GPIO_OE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_GPIO_OE_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_GPIO_OE Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_GPIO_IE_Pos 17                                                /*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_GPIO_IE Position */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_GPIO_IE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_GPIO_IE_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_GPIO_IE Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_GPIO_PDE_Pos 18                                               /*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_GPIO_PDE Position */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_GPIO_PDE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_GPIO_PDE_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_GPIO_PDE Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_GPIO_PUE_Pos 19                                               /*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_GPIO_PUE Position */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_GPIO_PUE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_GPIO_PUE_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_GPIO_PUE Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_GPIO_DS_Pos 20                                                /*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_GPIO_DS Position */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_GPIO_DS_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_GPIO_DS_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_GPIO_DS Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_OD_MANUAL_EN_Pos 24                                           /*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_OD_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_OD_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_OD_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_OD_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_OE_MANUAL_EN_Pos 25                                           /*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_OE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_OE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_OE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_OE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_IE_MANUAL_EN_Pos 26                                           /*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_IE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_IE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_IE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_IE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_PDE_MANUAL_EN_Pos 27                                          /*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_PDE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_PDE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_PDE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_PDE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_PUE_MANUAL_EN_Pos 28                                          /*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_PUE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_PUE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_PUE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_PUE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_DS_MANUAL_EN_Pos 29                                           /*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_DS_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_DS_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF1_CMIF1_DS_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF1: CMIF1_DS_MANUAL_EN Mask */

/* --------------------------  CSR_PAD_MUX_REG_PAD_CMIF2  ------------------------- */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_SEL_Pos 0                                                     /*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_SEL Position */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_SEL_Msk (0x0fUL << CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_SEL_Pos)   /*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_SEL Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_GPIO_OE_Pos 16                                                /*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_GPIO_OE Position */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_GPIO_OE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_GPIO_OE_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_GPIO_OE Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_GPIO_IE_Pos 17                                                /*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_GPIO_IE Position */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_GPIO_IE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_GPIO_IE_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_GPIO_IE Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_GPIO_PDE_Pos 18                                               /*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_GPIO_PDE Position */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_GPIO_PDE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_GPIO_PDE_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_GPIO_PDE Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_GPIO_PUE_Pos 19                                               /*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_GPIO_PUE Position */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_GPIO_PUE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_GPIO_PUE_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_GPIO_PUE Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_GPIO_DS_Pos 20                                                /*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_GPIO_DS Position */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_GPIO_DS_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_GPIO_DS_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_GPIO_DS Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_OD_MANUAL_EN_Pos 24                                           /*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_OD_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_OD_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_OD_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_OD_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_OE_MANUAL_EN_Pos 25                                           /*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_OE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_OE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_OE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_OE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_IE_MANUAL_EN_Pos 26                                           /*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_IE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_IE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_IE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_IE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_PDE_MANUAL_EN_Pos 27                                          /*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_PDE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_PDE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_PDE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_PDE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_PUE_MANUAL_EN_Pos 28                                          /*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_PUE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_PUE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_PUE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_PUE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_DS_MANUAL_EN_Pos 29                                           /*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_DS_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_DS_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF2_CMIF2_DS_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF2: CMIF2_DS_MANUAL_EN Mask */

/* --------------------------  CSR_PAD_MUX_REG_PAD_CMIF3  ------------------------- */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_SEL_Pos 0                                                     /*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_SEL Position */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_SEL_Msk (0x0fUL << CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_SEL_Pos)   /*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_SEL Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_GPIO_OE_Pos 16                                                /*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_GPIO_OE Position */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_GPIO_OE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_GPIO_OE_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_GPIO_OE Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_GPIO_IE_Pos 17                                                /*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_GPIO_IE Position */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_GPIO_IE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_GPIO_IE_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_GPIO_IE Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_GPIO_PDE_Pos 18                                               /*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_GPIO_PDE Position */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_GPIO_PDE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_GPIO_PDE_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_GPIO_PDE Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_GPIO_PUE_Pos 19                                               /*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_GPIO_PUE Position */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_GPIO_PUE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_GPIO_PUE_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_GPIO_PUE Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_GPIO_DS_Pos 20                                                /*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_GPIO_DS Position */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_GPIO_DS_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_GPIO_DS_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_GPIO_DS Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_OD_MANUAL_EN_Pos 24                                           /*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_OD_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_OD_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_OD_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_OD_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_OE_MANUAL_EN_Pos 25                                           /*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_OE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_OE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_OE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_OE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_IE_MANUAL_EN_Pos 26                                           /*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_IE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_IE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_IE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_IE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_PDE_MANUAL_EN_Pos 27                                          /*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_PDE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_PDE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_PDE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_PDE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_PUE_MANUAL_EN_Pos 28                                          /*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_PUE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_PUE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_PUE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_PUE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_DS_MANUAL_EN_Pos 29                                           /*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_DS_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_DS_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_CMIF3_CMIF3_DS_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_CMIF3: CMIF3_DS_MANUAL_EN Mask */

/* -------------------------  CSR_PAD_MUX_REG_PAD_SPIF_DI  ------------------------ */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_SEL_Pos 0                                                 /*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_SEL Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_SEL_Msk (0x0fUL << CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_SEL_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_SEL Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_GPIO_OE_Pos 16                                            /*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_GPIO_OE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_GPIO_OE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_GPIO_OE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_GPIO_OE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_GPIO_IE_Pos 17                                            /*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_GPIO_IE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_GPIO_IE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_GPIO_IE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_GPIO_IE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_GPIO_PDE_Pos 18                                           /*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_GPIO_PDE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_GPIO_PDE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_GPIO_PDE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_GPIO_PDE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_GPIO_PUE_Pos 19                                           /*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_GPIO_PUE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_GPIO_PUE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_GPIO_PUE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_GPIO_PUE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_GPIO_DS_Pos 20                                            /*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_GPIO_DS Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_GPIO_DS_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_GPIO_DS_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_GPIO_DS Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_OD_MANUAL_EN_Pos 24                                       /*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_OD_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_OD_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_OD_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_OD_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_OE_MANUAL_EN_Pos 25                                       /*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_OE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_OE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_OE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_OE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_IE_MANUAL_EN_Pos 26                                       /*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_IE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_IE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_IE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_IE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_PDE_MANUAL_EN_Pos 27                                      /*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_PDE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_PDE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_PDE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_PDE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_PUE_MANUAL_EN_Pos 28                                      /*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_PUE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_PUE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_PUE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_PUE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_DS_MANUAL_EN_Pos 29                                       /*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_DS_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_DS_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_DI_SPIF_DI_DS_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DI: SPIF_DI_DS_MANUAL_EN Mask */

/* ------------------------  CSR_PAD_MUX_REG_PAD_SPIF_CLK  ------------------------ */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_SEL_Pos 0                                               /*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_SEL Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_SEL_Msk (0x0fUL << CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_SEL_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_SEL Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_GPIO_OE_Pos 16                                          /*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_GPIO_OE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_GPIO_OE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_GPIO_OE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_GPIO_OE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_GPIO_IE_Pos 17                                          /*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_GPIO_IE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_GPIO_IE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_GPIO_IE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_GPIO_IE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_GPIO_PDE_Pos 18                                         /*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_GPIO_PDE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_GPIO_PDE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_GPIO_PDE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_GPIO_PDE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_GPIO_PUE_Pos 19                                         /*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_GPIO_PUE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_GPIO_PUE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_GPIO_PUE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_GPIO_PUE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_GPIO_DS_Pos 20                                          /*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_GPIO_DS Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_GPIO_DS_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_GPIO_DS_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_GPIO_DS Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_OD_MANUAL_EN_Pos 24                                     /*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_OD_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_OD_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_OD_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_OD_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_OE_MANUAL_EN_Pos 25                                     /*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_OE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_OE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_OE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_OE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_IE_MANUAL_EN_Pos 26                                     /*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_IE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_IE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_IE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_IE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_PDE_MANUAL_EN_Pos 27                                    /*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_PDE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_PDE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_PDE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_PDE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_PUE_MANUAL_EN_Pos 28                                    /*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_PUE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_PUE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_PUE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_PUE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_DS_MANUAL_EN_Pos 29                                     /*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_DS_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_DS_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_CLK_SPIF_CLK_DS_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CLK: SPIF_CLK_DS_MANUAL_EN Mask */

/* ------------------------  CSR_PAD_MUX_REG_PAD_SPIF_HOLD  ----------------------- */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_SEL_Pos 0                                             /*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_SEL Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_SEL_Msk (0x0fUL << CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_SEL_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_SEL Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_GPIO_OE_Pos 16                                        /*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_GPIO_OE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_GPIO_OE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_GPIO_OE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_GPIO_OE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_GPIO_IE_Pos 17                                        /*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_GPIO_IE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_GPIO_IE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_GPIO_IE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_GPIO_IE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_GPIO_PDE_Pos 18                                       /*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_GPIO_PDE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_GPIO_PDE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_GPIO_PDE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_GPIO_PDE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_GPIO_PUE_Pos 19                                       /*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_GPIO_PUE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_GPIO_PUE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_GPIO_PUE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_GPIO_PUE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_GPIO_DS_Pos 20                                        /*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_GPIO_DS Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_GPIO_DS_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_GPIO_DS_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_GPIO_DS Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_OD_MANUAL_EN_Pos 24                                   /*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_OD_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_OD_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_OD_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_OD_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_OE_MANUAL_EN_Pos 25                                   /*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_OE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_OE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_OE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_OE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_IE_MANUAL_EN_Pos 26                                   /*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_IE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_IE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_IE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_IE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_PDE_MANUAL_EN_Pos 27                                  /*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_PDE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_PDE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_PDE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_PDE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_PUE_MANUAL_EN_Pos 28                                  /*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_PUE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_PUE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_PUE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_PUE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_DS_MANUAL_EN_Pos 29                                   /*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_DS_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_DS_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_HOLD_SPIF_HOLD_DS_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_HOLD: SPIF_HOLD_DS_MANUAL_EN Mask */

/* --------------------------  CSR_PAD_MUX_REG_PAD_I2C0  -------------------------- */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_SEL_Pos 0                                                       /*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_SEL Position */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_SEL_Msk (0x0fUL << CSR_PAD_MUX_REG_PAD_I2C0_I2C0_SEL_Pos)       /*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_SEL Mask */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_GPIO_OE_Pos 16                                                  /*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_GPIO_OE Position */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_GPIO_OE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C0_I2C0_GPIO_OE_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_GPIO_OE Mask */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_GPIO_IE_Pos 17                                                  /*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_GPIO_IE Position */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_GPIO_IE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C0_I2C0_GPIO_IE_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_GPIO_IE Mask */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_GPIO_PDE_Pos 18                                                 /*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_GPIO_PDE Position */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_GPIO_PDE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C0_I2C0_GPIO_PDE_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_GPIO_PDE Mask */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_GPIO_PUE_Pos 19                                                 /*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_GPIO_PUE Position */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_GPIO_PUE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C0_I2C0_GPIO_PUE_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_GPIO_PUE Mask */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_GPIO_DS_Pos 20                                                  /*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_GPIO_DS Position */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_GPIO_DS_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C0_I2C0_GPIO_DS_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_GPIO_DS Mask */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_OD_MANUAL_EN_Pos 24                                             /*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_OD_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_OD_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C0_I2C0_OD_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_OD_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_OE_MANUAL_EN_Pos 25                                             /*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_OE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_OE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C0_I2C0_OE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_OE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_IE_MANUAL_EN_Pos 26                                             /*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_IE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_IE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C0_I2C0_IE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_IE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_PDE_MANUAL_EN_Pos 27                                            /*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_PDE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_PDE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C0_I2C0_PDE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_PDE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_PUE_MANUAL_EN_Pos 28                                            /*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_PUE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_PUE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C0_I2C0_PUE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_PUE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_DS_MANUAL_EN_Pos 29                                             /*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_DS_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C0_I2C0_DS_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C0_I2C0_DS_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C0: I2C0_DS_MANUAL_EN Mask */

/* --------------------------  CSR_PAD_MUX_REG_PAD_I2C1  -------------------------- */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_SEL_Pos 0                                                       /*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_SEL Position */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_SEL_Msk (0x0fUL << CSR_PAD_MUX_REG_PAD_I2C1_I2C1_SEL_Pos)       /*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_SEL Mask */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_GPIO_OE_Pos 16                                                  /*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_GPIO_OE Position */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_GPIO_OE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C1_I2C1_GPIO_OE_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_GPIO_OE Mask */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_GPIO_IE_Pos 17                                                  /*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_GPIO_IE Position */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_GPIO_IE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C1_I2C1_GPIO_IE_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_GPIO_IE Mask */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_GPIO_PDE_Pos 18                                                 /*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_GPIO_PDE Position */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_GPIO_PDE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C1_I2C1_GPIO_PDE_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_GPIO_PDE Mask */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_GPIO_PUE_Pos 19                                                 /*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_GPIO_PUE Position */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_GPIO_PUE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C1_I2C1_GPIO_PUE_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_GPIO_PUE Mask */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_GPIO_DS_Pos 20                                                  /*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_GPIO_DS Position */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_GPIO_DS_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C1_I2C1_GPIO_DS_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_GPIO_DS Mask */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_OD_MANUAL_EN_Pos 24                                             /*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_OD_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_OD_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C1_I2C1_OD_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_OD_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_OE_MANUAL_EN_Pos 25                                             /*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_OE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_OE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C1_I2C1_OE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_OE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_IE_MANUAL_EN_Pos 26                                             /*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_IE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_IE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C1_I2C1_IE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_IE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_PDE_MANUAL_EN_Pos 27                                            /*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_PDE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_PDE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C1_I2C1_PDE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_PDE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_PUE_MANUAL_EN_Pos 28                                            /*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_PUE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_PUE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C1_I2C1_PUE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_PUE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_DS_MANUAL_EN_Pos 29                                             /*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_DS_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C1_I2C1_DS_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C1_I2C1_DS_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C1: I2C1_DS_MANUAL_EN Mask */

/* -------------------------  CSR_PAD_MUX_REG_PAD_I2C_SDA  ------------------------ */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_SEL_Pos 0                                                 /*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_SEL Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_SEL_Msk (0x0fUL << CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_SEL_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_SEL Mask */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_GPIO_OE_Pos 16                                            /*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_GPIO_OE Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_GPIO_OE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_GPIO_OE_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_GPIO_OE Mask */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_GPIO_IE_Pos 17                                            /*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_GPIO_IE Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_GPIO_IE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_GPIO_IE_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_GPIO_IE Mask */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_GPIO_PDE_Pos 18                                           /*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_GPIO_PDE Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_GPIO_PDE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_GPIO_PDE_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_GPIO_PDE Mask */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_GPIO_PUE_Pos 19                                           /*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_GPIO_PUE Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_GPIO_PUE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_GPIO_PUE_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_GPIO_PUE Mask */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_GPIO_DS_Pos 20                                            /*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_GPIO_DS Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_GPIO_DS_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_GPIO_DS_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_GPIO_DS Mask */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_OD_MANUAL_EN_Pos 24                                       /*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_OD_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_OD_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_OD_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_OD_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_OE_MANUAL_EN_Pos 25                                       /*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_OE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_OE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_OE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_OE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_IE_MANUAL_EN_Pos 26                                       /*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_IE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_IE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_IE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_IE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_PDE_MANUAL_EN_Pos 27                                      /*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_PDE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_PDE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_PDE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_PDE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_PUE_MANUAL_EN_Pos 28                                      /*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_PUE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_PUE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_PUE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_PUE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_DS_MANUAL_EN_Pos 29                                       /*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_DS_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_DS_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C_SDA_I2C_SDA_DS_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SDA: I2C_SDA_DS_MANUAL_EN Mask */

/* -------------------------  CSR_PAD_MUX_REG_PAD_I2C_SCL  ------------------------ */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_SEL_Pos 0                                                 /*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_SEL Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_SEL_Msk (0x0fUL << CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_SEL_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_SEL Mask */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_GPIO_OE_Pos 16                                            /*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_GPIO_OE Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_GPIO_OE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_GPIO_OE_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_GPIO_OE Mask */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_GPIO_IE_Pos 17                                            /*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_GPIO_IE Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_GPIO_IE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_GPIO_IE_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_GPIO_IE Mask */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_GPIO_PDE_Pos 18                                           /*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_GPIO_PDE Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_GPIO_PDE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_GPIO_PDE_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_GPIO_PDE Mask */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_GPIO_PUE_Pos 19                                           /*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_GPIO_PUE Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_GPIO_PUE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_GPIO_PUE_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_GPIO_PUE Mask */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_GPIO_DS_Pos 20                                            /*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_GPIO_DS Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_GPIO_DS_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_GPIO_DS_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_GPIO_DS Mask */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_OD_MANUAL_EN_Pos 24                                       /*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_OD_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_OD_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_OD_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_OD_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_OE_MANUAL_EN_Pos 25                                       /*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_OE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_OE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_OE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_OE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_IE_MANUAL_EN_Pos 26                                       /*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_IE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_IE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_IE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_IE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_PDE_MANUAL_EN_Pos 27                                      /*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_PDE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_PDE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_PDE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_PDE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_PUE_MANUAL_EN_Pos 28                                      /*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_PUE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_PUE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_PUE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_PUE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_DS_MANUAL_EN_Pos 29                                       /*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_DS_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_DS_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_I2C_SCL_I2C_SCL_DS_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_I2C_SCL: I2C_SCL_DS_MANUAL_EN Mask */

/* --------------------------  CSR_PAD_MUX_REG_PAD_UART0  ------------------------- */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_SEL_Pos 0                                                     /*!< CSR_PAD_MUX_REG PAD_UART0: UART0_SEL Position */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_SEL_Msk (0x0fUL << CSR_PAD_MUX_REG_PAD_UART0_UART0_SEL_Pos)   /*!< CSR_PAD_MUX_REG PAD_UART0: UART0_SEL Mask */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_GPIO_OE_Pos 16                                                /*!< CSR_PAD_MUX_REG PAD_UART0: UART0_GPIO_OE Position */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_GPIO_OE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_UART0_UART0_GPIO_OE_Pos)/*!< CSR_PAD_MUX_REG PAD_UART0: UART0_GPIO_OE Mask */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_GPIO_IE_Pos 17                                                /*!< CSR_PAD_MUX_REG PAD_UART0: UART0_GPIO_IE Position */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_GPIO_IE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_UART0_UART0_GPIO_IE_Pos)/*!< CSR_PAD_MUX_REG PAD_UART0: UART0_GPIO_IE Mask */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_GPIO_PDE_Pos 18                                               /*!< CSR_PAD_MUX_REG PAD_UART0: UART0_GPIO_PDE Position */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_GPIO_PDE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_UART0_UART0_GPIO_PDE_Pos)/*!< CSR_PAD_MUX_REG PAD_UART0: UART0_GPIO_PDE Mask */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_GPIO_PUE_Pos 19                                               /*!< CSR_PAD_MUX_REG PAD_UART0: UART0_GPIO_PUE Position */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_GPIO_PUE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_UART0_UART0_GPIO_PUE_Pos)/*!< CSR_PAD_MUX_REG PAD_UART0: UART0_GPIO_PUE Mask */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_GPIO_DS_Pos 20                                                /*!< CSR_PAD_MUX_REG PAD_UART0: UART0_GPIO_DS Position */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_GPIO_DS_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_UART0_UART0_GPIO_DS_Pos)/*!< CSR_PAD_MUX_REG PAD_UART0: UART0_GPIO_DS Mask */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_OD_MANUAL_EN_Pos 24                                           /*!< CSR_PAD_MUX_REG PAD_UART0: UART0_OD_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_OD_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_UART0_UART0_OD_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_UART0: UART0_OD_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_OE_MANUAL_EN_Pos 25                                           /*!< CSR_PAD_MUX_REG PAD_UART0: UART0_OE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_OE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_UART0_UART0_OE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_UART0: UART0_OE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_IE_MANUAL_EN_Pos 26                                           /*!< CSR_PAD_MUX_REG PAD_UART0: UART0_IE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_IE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_UART0_UART0_IE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_UART0: UART0_IE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_PDE_MANUAL_EN_Pos 27                                          /*!< CSR_PAD_MUX_REG PAD_UART0: UART0_PDE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_PDE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_UART0_UART0_PDE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_UART0: UART0_PDE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_PUE_MANUAL_EN_Pos 28                                          /*!< CSR_PAD_MUX_REG PAD_UART0: UART0_PUE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_PUE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_UART0_UART0_PUE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_UART0: UART0_PUE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_DS_MANUAL_EN_Pos 29                                           /*!< CSR_PAD_MUX_REG PAD_UART0: UART0_DS_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_UART0_UART0_DS_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_UART0_UART0_DS_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_UART0: UART0_DS_MANUAL_EN Mask */

/* --------------------------  CSR_PAD_MUX_REG_PAD_UART1  ------------------------- */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_SEL_Pos 0                                                     /*!< CSR_PAD_MUX_REG PAD_UART1: UART1_SEL Position */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_SEL_Msk (0x0fUL << CSR_PAD_MUX_REG_PAD_UART1_UART1_SEL_Pos)   /*!< CSR_PAD_MUX_REG PAD_UART1: UART1_SEL Mask */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_GPIO_OE_Pos 16                                                /*!< CSR_PAD_MUX_REG PAD_UART1: UART1_GPIO_OE Position */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_GPIO_OE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_UART1_UART1_GPIO_OE_Pos)/*!< CSR_PAD_MUX_REG PAD_UART1: UART1_GPIO_OE Mask */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_GPIO_IE_Pos 17                                                /*!< CSR_PAD_MUX_REG PAD_UART1: UART1_GPIO_IE Position */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_GPIO_IE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_UART1_UART1_GPIO_IE_Pos)/*!< CSR_PAD_MUX_REG PAD_UART1: UART1_GPIO_IE Mask */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_GPIO_PDE_Pos 18                                               /*!< CSR_PAD_MUX_REG PAD_UART1: UART1_GPIO_PDE Position */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_GPIO_PDE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_UART1_UART1_GPIO_PDE_Pos)/*!< CSR_PAD_MUX_REG PAD_UART1: UART1_GPIO_PDE Mask */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_GPIO_PUE_Pos 19                                               /*!< CSR_PAD_MUX_REG PAD_UART1: UART1_GPIO_PUE Position */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_GPIO_PUE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_UART1_UART1_GPIO_PUE_Pos)/*!< CSR_PAD_MUX_REG PAD_UART1: UART1_GPIO_PUE Mask */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_GPIO_DS_Pos 20                                                /*!< CSR_PAD_MUX_REG PAD_UART1: UART1_GPIO_DS Position */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_GPIO_DS_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_UART1_UART1_GPIO_DS_Pos)/*!< CSR_PAD_MUX_REG PAD_UART1: UART1_GPIO_DS Mask */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_OD_MANUAL_EN_Pos 24                                           /*!< CSR_PAD_MUX_REG PAD_UART1: UART1_OD_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_OD_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_UART1_UART1_OD_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_UART1: UART1_OD_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_OE_MANUAL_EN_Pos 25                                           /*!< CSR_PAD_MUX_REG PAD_UART1: UART1_OE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_OE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_UART1_UART1_OE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_UART1: UART1_OE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_IE_MANUAL_EN_Pos 26                                           /*!< CSR_PAD_MUX_REG PAD_UART1: UART1_IE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_IE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_UART1_UART1_IE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_UART1: UART1_IE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_PDE_MANUAL_EN_Pos 27                                          /*!< CSR_PAD_MUX_REG PAD_UART1: UART1_PDE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_PDE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_UART1_UART1_PDE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_UART1: UART1_PDE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_PUE_MANUAL_EN_Pos 28                                          /*!< CSR_PAD_MUX_REG PAD_UART1: UART1_PUE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_PUE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_UART1_UART1_PUE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_UART1: UART1_PUE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_DS_MANUAL_EN_Pos 29                                           /*!< CSR_PAD_MUX_REG PAD_UART1: UART1_DS_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_UART1_UART1_DS_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_UART1_UART1_DS_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_UART1: UART1_DS_MANUAL_EN Mask */

/* -------------------------  CSR_PAD_MUX_REG_PAD_SPIF_CS  ------------------------ */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_SEL_Pos 0                                                 /*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_SEL Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_SEL_Msk (0x0fUL << CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_SEL_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_SEL Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_GPIO_OE_Pos 16                                            /*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_GPIO_OE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_GPIO_OE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_GPIO_OE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_GPIO_OE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_GPIO_IE_Pos 17                                            /*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_GPIO_IE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_GPIO_IE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_GPIO_IE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_GPIO_IE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_GPIO_PDE_Pos 18                                           /*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_GPIO_PDE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_GPIO_PDE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_GPIO_PDE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_GPIO_PDE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_GPIO_PUE_Pos 19                                           /*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_GPIO_PUE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_GPIO_PUE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_GPIO_PUE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_GPIO_PUE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_GPIO_DS_Pos 20                                            /*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_GPIO_DS Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_GPIO_DS_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_GPIO_DS_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_GPIO_DS Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_OD_MANUAL_EN_Pos 24                                       /*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_OD_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_OD_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_OD_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_OD_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_OE_MANUAL_EN_Pos 25                                       /*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_OE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_OE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_OE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_OE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_IE_MANUAL_EN_Pos 26                                       /*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_IE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_IE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_IE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_IE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_PDE_MANUAL_EN_Pos 27                                      /*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_PDE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_PDE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_PDE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_PDE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_PUE_MANUAL_EN_Pos 28                                      /*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_PUE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_PUE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_PUE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_PUE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_DS_MANUAL_EN_Pos 29                                       /*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_DS_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_DS_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_CS_SPIF_CS_DS_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_CS: SPIF_CS_DS_MANUAL_EN Mask */

/* -------------------------  CSR_PAD_MUX_REG_PAD_SPIF_DO  ------------------------ */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_SEL_Pos 0                                                 /*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_SEL Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_SEL_Msk (0x0fUL << CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_SEL_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_SEL Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_GPIO_OE_Pos 16                                            /*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_GPIO_OE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_GPIO_OE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_GPIO_OE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_GPIO_OE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_GPIO_IE_Pos 17                                            /*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_GPIO_IE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_GPIO_IE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_GPIO_IE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_GPIO_IE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_GPIO_PDE_Pos 18                                           /*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_GPIO_PDE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_GPIO_PDE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_GPIO_PDE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_GPIO_PDE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_GPIO_PUE_Pos 19                                           /*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_GPIO_PUE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_GPIO_PUE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_GPIO_PUE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_GPIO_PUE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_GPIO_DS_Pos 20                                            /*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_GPIO_DS Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_GPIO_DS_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_GPIO_DS_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_GPIO_DS Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_OD_MANUAL_EN_Pos 24                                       /*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_OD_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_OD_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_OD_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_OD_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_OE_MANUAL_EN_Pos 25                                       /*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_OE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_OE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_OE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_OE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_IE_MANUAL_EN_Pos 26                                       /*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_IE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_IE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_IE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_IE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_PDE_MANUAL_EN_Pos 27                                      /*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_PDE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_PDE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_PDE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_PDE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_PUE_MANUAL_EN_Pos 28                                      /*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_PUE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_PUE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_PUE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_PUE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_DS_MANUAL_EN_Pos 29                                       /*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_DS_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_DS_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_DO_SPIF_DO_DS_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_DO: SPIF_DO_DS_MANUAL_EN Mask */

/* -------------------------  CSR_PAD_MUX_REG_PAD_SPIF_WP  ------------------------ */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_SEL_Pos 0                                                 /*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_SEL Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_SEL_Msk (0x0fUL << CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_SEL_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_SEL Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_GPIO_OE_Pos 16                                            /*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_GPIO_OE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_GPIO_OE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_GPIO_OE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_GPIO_OE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_GPIO_IE_Pos 17                                            /*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_GPIO_IE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_GPIO_IE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_GPIO_IE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_GPIO_IE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_GPIO_PDE_Pos 18                                           /*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_GPIO_PDE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_GPIO_PDE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_GPIO_PDE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_GPIO_PDE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_GPIO_PUE_Pos 19                                           /*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_GPIO_PUE Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_GPIO_PUE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_GPIO_PUE_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_GPIO_PUE Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_GPIO_DS_Pos 20                                            /*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_GPIO_DS Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_GPIO_DS_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_GPIO_DS_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_GPIO_DS Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_OD_MANUAL_EN_Pos 24                                       /*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_OD_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_OD_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_OD_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_OD_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_OE_MANUAL_EN_Pos 25                                       /*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_OE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_OE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_OE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_OE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_IE_MANUAL_EN_Pos 26                                       /*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_IE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_IE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_IE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_IE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_PDE_MANUAL_EN_Pos 27                                      /*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_PDE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_PDE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_PDE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_PDE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_PUE_MANUAL_EN_Pos 28                                      /*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_PUE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_PUE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_PUE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_PUE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_DS_MANUAL_EN_Pos 29                                       /*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_DS_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_DS_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SPIF_WP_SPIF_WP_DS_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SPIF_WP: SPIF_WP_DS_MANUAL_EN Mask */

/* --------------------------  CSR_PAD_MUX_REG_PAD_DBG1  -------------------------- */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_SEL_Pos 0                                                       /*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_SEL Position */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_SEL_Msk (0x0fUL << CSR_PAD_MUX_REG_PAD_DBG1_DBG1_SEL_Pos)       /*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_SEL Mask */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_GPIO_OE_Pos 16                                                  /*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_GPIO_OE Position */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_GPIO_OE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_DBG1_DBG1_GPIO_OE_Pos)/*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_GPIO_OE Mask */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_GPIO_IE_Pos 17                                                  /*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_GPIO_IE Position */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_GPIO_IE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_DBG1_DBG1_GPIO_IE_Pos)/*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_GPIO_IE Mask */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_GPIO_PDE_Pos 18                                                 /*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_GPIO_PDE Position */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_GPIO_PDE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_DBG1_DBG1_GPIO_PDE_Pos)/*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_GPIO_PDE Mask */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_GPIO_PUE_Pos 19                                                 /*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_GPIO_PUE Position */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_GPIO_PUE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_DBG1_DBG1_GPIO_PUE_Pos)/*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_GPIO_PUE Mask */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_GPIO_DS_Pos 20                                                  /*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_GPIO_DS Position */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_GPIO_DS_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_DBG1_DBG1_GPIO_DS_Pos)/*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_GPIO_DS Mask */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_OD_MANUAL_EN_Pos 24                                             /*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_OD_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_OD_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_DBG1_DBG1_OD_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_OD_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_OE_MANUAL_EN_Pos 25                                             /*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_OE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_OE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_DBG1_DBG1_OE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_OE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_IE_MANUAL_EN_Pos 26                                             /*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_IE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_IE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_DBG1_DBG1_IE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_IE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_PDE_MANUAL_EN_Pos 27                                            /*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_PDE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_PDE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_DBG1_DBG1_PDE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_PDE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_PUE_MANUAL_EN_Pos 28                                            /*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_PUE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_PUE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_DBG1_DBG1_PUE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_PUE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_DS_MANUAL_EN_Pos 29                                             /*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_DS_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_DBG1_DBG1_DS_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_DBG1_DBG1_DS_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_DBG1: DBG1_DS_MANUAL_EN Mask */

/* --------------------------  CSR_PAD_MUX_REG_PAD_DBG0  -------------------------- */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_SEL_Pos 0                                                       /*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_SEL Position */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_SEL_Msk (0x0fUL << CSR_PAD_MUX_REG_PAD_DBG0_DBG0_SEL_Pos)       /*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_SEL Mask */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_GPIO_OE_Pos 16                                                  /*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_GPIO_OE Position */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_GPIO_OE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_DBG0_DBG0_GPIO_OE_Pos)/*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_GPIO_OE Mask */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_GPIO_IE_Pos 17                                                  /*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_GPIO_IE Position */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_GPIO_IE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_DBG0_DBG0_GPIO_IE_Pos)/*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_GPIO_IE Mask */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_GPIO_PDE_Pos 18                                                 /*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_GPIO_PDE Position */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_GPIO_PDE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_DBG0_DBG0_GPIO_PDE_Pos)/*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_GPIO_PDE Mask */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_GPIO_PUE_Pos 19                                                 /*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_GPIO_PUE Position */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_GPIO_PUE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_DBG0_DBG0_GPIO_PUE_Pos)/*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_GPIO_PUE Mask */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_GPIO_DS_Pos 20                                                  /*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_GPIO_DS Position */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_GPIO_DS_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_DBG0_DBG0_GPIO_DS_Pos)/*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_GPIO_DS Mask */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_OD_MANUAL_EN_Pos 24                                             /*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_OD_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_OD_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_DBG0_DBG0_OD_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_OD_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_OE_MANUAL_EN_Pos 25                                             /*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_OE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_OE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_DBG0_DBG0_OE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_OE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_IE_MANUAL_EN_Pos 26                                             /*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_IE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_IE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_DBG0_DBG0_IE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_IE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_PDE_MANUAL_EN_Pos 27                                            /*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_PDE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_PDE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_DBG0_DBG0_PDE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_PDE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_PUE_MANUAL_EN_Pos 28                                            /*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_PUE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_PUE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_DBG0_DBG0_PUE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_PUE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_DS_MANUAL_EN_Pos 29                                             /*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_DS_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_DBG0_DBG0_DS_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_DBG0_DBG0_DS_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_DBG0: DBG0_DS_MANUAL_EN Mask */

/* ------------------------  CSR_PAD_MUX_REG_PAD_ICE_RSTN  ------------------------ */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_SEL_Pos 0                                               /*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_SEL Position */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_SEL_Msk (0x0fUL << CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_SEL_Pos)/*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_SEL Mask */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_GPIO_OE_Pos 16                                          /*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_GPIO_OE Position */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_GPIO_OE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_GPIO_OE_Pos)/*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_GPIO_OE Mask */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_GPIO_IE_Pos 17                                          /*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_GPIO_IE Position */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_GPIO_IE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_GPIO_IE_Pos)/*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_GPIO_IE Mask */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_GPIO_PDE_Pos 18                                         /*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_GPIO_PDE Position */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_GPIO_PDE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_GPIO_PDE_Pos)/*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_GPIO_PDE Mask */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_GPIO_PUE_Pos 19                                         /*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_GPIO_PUE Position */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_GPIO_PUE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_GPIO_PUE_Pos)/*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_GPIO_PUE Mask */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_GPIO_DS_Pos 20                                          /*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_GPIO_DS Position */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_GPIO_DS_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_GPIO_DS_Pos)/*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_GPIO_DS Mask */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_OD_MANUAL_EN_Pos 24                                     /*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_OD_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_OD_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_OD_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_OD_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_OE_MANUAL_EN_Pos 25                                     /*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_OE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_OE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_OE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_OE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_IE_MANUAL_EN_Pos 26                                     /*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_IE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_IE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_IE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_IE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_PDE_MANUAL_EN_Pos 27                                    /*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_PDE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_PDE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_PDE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_PDE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_PUE_MANUAL_EN_Pos 28                                    /*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_PUE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_PUE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_PUE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_PUE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_DS_MANUAL_EN_Pos 29                                     /*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_DS_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_DS_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_ICE_RSTN_ICE_RSTN_DS_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_ICE_RSTN: ICE_RSTN_DS_MANUAL_EN Mask */

/* --------------------------  CSR_PAD_MUX_REG_PAD_SWCLK  ------------------------- */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_SEL_Pos 0                                                     /*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_SEL Position */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_SEL_Msk (0x0fUL << CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_SEL_Pos)   /*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_SEL Mask */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_GPIO_OE_Pos 16                                                /*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_GPIO_OE Position */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_GPIO_OE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_GPIO_OE_Pos)/*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_GPIO_OE Mask */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_GPIO_IE_Pos 17                                                /*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_GPIO_IE Position */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_GPIO_IE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_GPIO_IE_Pos)/*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_GPIO_IE Mask */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_GPIO_PDE_Pos 18                                               /*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_GPIO_PDE Position */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_GPIO_PDE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_GPIO_PDE_Pos)/*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_GPIO_PDE Mask */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_GPIO_PUE_Pos 19                                               /*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_GPIO_PUE Position */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_GPIO_PUE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_GPIO_PUE_Pos)/*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_GPIO_PUE Mask */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_GPIO_DS_Pos 20                                                /*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_GPIO_DS Position */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_GPIO_DS_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_GPIO_DS_Pos)/*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_GPIO_DS Mask */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_OD_MANUAL_EN_Pos 24                                           /*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_OD_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_OD_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_OD_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_OD_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_OE_MANUAL_EN_Pos 25                                           /*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_OE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_OE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_OE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_OE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_IE_MANUAL_EN_Pos 26                                           /*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_IE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_IE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_IE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_IE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_PDE_MANUAL_EN_Pos 27                                          /*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_PDE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_PDE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_PDE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_PDE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_PUE_MANUAL_EN_Pos 28                                          /*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_PUE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_PUE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_PUE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_PUE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_DS_MANUAL_EN_Pos 29                                           /*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_DS_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_DS_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SWCLK_SWCLK_DS_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SWCLK: SWCLK_DS_MANUAL_EN Mask */

/* ---------------------------  CSR_PAD_MUX_REG_PAD_SWD  -------------------------- */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_SEL_Pos   0                                                       /*!< CSR_PAD_MUX_REG PAD_SWD: SWD_SEL Position */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_SEL_Msk   (0x0fUL << CSR_PAD_MUX_REG_PAD_SWD_SWD_SEL_Pos)         /*!< CSR_PAD_MUX_REG PAD_SWD: SWD_SEL Mask   */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_GPIO_OE_Pos 16                                                    /*!< CSR_PAD_MUX_REG PAD_SWD: SWD_GPIO_OE Position */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_GPIO_OE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SWD_SWD_GPIO_OE_Pos)   /*!< CSR_PAD_MUX_REG PAD_SWD: SWD_GPIO_OE Mask */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_GPIO_IE_Pos 17                                                    /*!< CSR_PAD_MUX_REG PAD_SWD: SWD_GPIO_IE Position */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_GPIO_IE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SWD_SWD_GPIO_IE_Pos)   /*!< CSR_PAD_MUX_REG PAD_SWD: SWD_GPIO_IE Mask */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_GPIO_PDE_Pos 18                                                   /*!< CSR_PAD_MUX_REG PAD_SWD: SWD_GPIO_PDE Position */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_GPIO_PDE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SWD_SWD_GPIO_PDE_Pos) /*!< CSR_PAD_MUX_REG PAD_SWD: SWD_GPIO_PDE Mask */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_GPIO_PUE_Pos 19                                                   /*!< CSR_PAD_MUX_REG PAD_SWD: SWD_GPIO_PUE Position */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_GPIO_PUE_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SWD_SWD_GPIO_PUE_Pos) /*!< CSR_PAD_MUX_REG PAD_SWD: SWD_GPIO_PUE Mask */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_GPIO_DS_Pos 20                                                    /*!< CSR_PAD_MUX_REG PAD_SWD: SWD_GPIO_DS Position */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_GPIO_DS_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SWD_SWD_GPIO_DS_Pos)   /*!< CSR_PAD_MUX_REG PAD_SWD: SWD_GPIO_DS Mask */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_OD_MANUAL_EN_Pos 24                                               /*!< CSR_PAD_MUX_REG PAD_SWD: SWD_OD_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_OD_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SWD_SWD_OD_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SWD: SWD_OD_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_OE_MANUAL_EN_Pos 25                                               /*!< CSR_PAD_MUX_REG PAD_SWD: SWD_OE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_OE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SWD_SWD_OE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SWD: SWD_OE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_IE_MANUAL_EN_Pos 26                                               /*!< CSR_PAD_MUX_REG PAD_SWD: SWD_IE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_IE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SWD_SWD_IE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SWD: SWD_IE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_PDE_MANUAL_EN_Pos 27                                              /*!< CSR_PAD_MUX_REG PAD_SWD: SWD_PDE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_PDE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SWD_SWD_PDE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SWD: SWD_PDE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_PUE_MANUAL_EN_Pos 28                                              /*!< CSR_PAD_MUX_REG PAD_SWD: SWD_PUE_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_PUE_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SWD_SWD_PUE_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SWD: SWD_PUE_MANUAL_EN Mask */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_DS_MANUAL_EN_Pos 29                                               /*!< CSR_PAD_MUX_REG PAD_SWD: SWD_DS_MANUAL_EN Position */
#define CSR_PAD_MUX_REG_PAD_SWD_SWD_DS_MANUAL_EN_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_SWD_SWD_DS_MANUAL_EN_Pos)/*!< CSR_PAD_MUX_REG PAD_SWD: SWD_DS_MANUAL_EN Mask */

/* ----------------------  CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP  ---------------------- */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_INT1_GPIO_OD_Pos 0                                           /*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: INT1_GPIO_OD Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_INT1_GPIO_OD_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_INT1_GPIO_OD_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: INT1_GPIO_OD Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_INT0_GPIO_OD_Pos 1                                           /*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: INT0_GPIO_OD Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_INT0_GPIO_OD_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_INT0_GPIO_OD_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: INT0_GPIO_OD Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_CMIF0_GPIO_OD_Pos 2                                          /*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: CMIF0_GPIO_OD Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_CMIF0_GPIO_OD_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_CMIF0_GPIO_OD_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: CMIF0_GPIO_OD Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_CMIF1_GPIO_OD_Pos 3                                          /*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: CMIF1_GPIO_OD Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_CMIF1_GPIO_OD_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_CMIF1_GPIO_OD_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: CMIF1_GPIO_OD Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_CMIF2_GPIO_OD_Pos 4                                          /*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: CMIF2_GPIO_OD Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_CMIF2_GPIO_OD_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_CMIF2_GPIO_OD_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: CMIF2_GPIO_OD Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_CMIF3_GPIO_OD_Pos 5                                          /*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: CMIF3_GPIO_OD Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_CMIF3_GPIO_OD_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_CMIF3_GPIO_OD_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: CMIF3_GPIO_OD Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SPIF_DI_GPIO_OD_Pos 6                                        /*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: SPIF_DI_GPIO_OD Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SPIF_DI_GPIO_OD_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SPIF_DI_GPIO_OD_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: SPIF_DI_GPIO_OD Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SPIF_CLK_GPIO_OD_Pos 7                                       /*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: SPIF_CLK_GPIO_OD Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SPIF_CLK_GPIO_OD_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SPIF_CLK_GPIO_OD_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: SPIF_CLK_GPIO_OD Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SPIF_HOLD_GPIO_OD_Pos 8                                      /*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: SPIF_HOLD_GPIO_OD Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SPIF_HOLD_GPIO_OD_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SPIF_HOLD_GPIO_OD_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: SPIF_HOLD_GPIO_OD Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_I2C0_GPIO_OD_Pos 9                                           /*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: I2C0_GPIO_OD Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_I2C0_GPIO_OD_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_I2C0_GPIO_OD_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: I2C0_GPIO_OD Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_I2C1_GPIO_OD_Pos 10                                          /*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: I2C1_GPIO_OD Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_I2C1_GPIO_OD_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_I2C1_GPIO_OD_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: I2C1_GPIO_OD Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_I2C_SDA_GPIO_OD_Pos 11                                       /*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: I2C_SDA_GPIO_OD Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_I2C_SDA_GPIO_OD_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_I2C_SDA_GPIO_OD_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: I2C_SDA_GPIO_OD Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_I2C_SCL_GPIO_OD_Pos 12                                       /*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: I2C_SCL_GPIO_OD Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_I2C_SCL_GPIO_OD_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_I2C_SCL_GPIO_OD_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: I2C_SCL_GPIO_OD Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_UART0_GPIO_OD_Pos 13                                         /*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: UART0_GPIO_OD Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_UART0_GPIO_OD_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_UART0_GPIO_OD_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: UART0_GPIO_OD Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_UART1_GPIO_OD_Pos 14                                         /*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: UART1_GPIO_OD Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_UART1_GPIO_OD_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_UART1_GPIO_OD_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: UART1_GPIO_OD Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SPIF_CS_GPIO_OD_Pos 15                                       /*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: SPIF_CS_GPIO_OD Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SPIF_CS_GPIO_OD_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SPIF_CS_GPIO_OD_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: SPIF_CS_GPIO_OD Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SPIF_DO_GPIO_OD_Pos 16                                       /*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: SPIF_DO_GPIO_OD Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SPIF_DO_GPIO_OD_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SPIF_DO_GPIO_OD_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: SPIF_DO_GPIO_OD Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SPIF_WP_GPIO_OD_Pos 17                                       /*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: SPIF_WP_GPIO_OD Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SPIF_WP_GPIO_OD_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SPIF_WP_GPIO_OD_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: SPIF_WP_GPIO_OD Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_DBG1_GPIO_OD_Pos 18                                          /*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: DBG1_GPIO_OD Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_DBG1_GPIO_OD_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_DBG1_GPIO_OD_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: DBG1_GPIO_OD Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_DBG0_GPIO_OD_Pos 19                                          /*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: DBG0_GPIO_OD Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_DBG0_GPIO_OD_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_DBG0_GPIO_OD_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: DBG0_GPIO_OD Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_ICE_RSTN_GPIO_OD_Pos 20                                      /*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: ICE_RSTN_GPIO_OD Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_ICE_RSTN_GPIO_OD_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_ICE_RSTN_GPIO_OD_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: ICE_RSTN_GPIO_OD Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SWCLK_GPIO_OD_Pos 21                                         /*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: SWCLK_GPIO_OD Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SWCLK_GPIO_OD_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SWCLK_GPIO_OD_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: SWCLK_GPIO_OD Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SWD_GPIO_OD_Pos 22                                           /*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: SWD_GPIO_OD Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SWD_GPIO_OD_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_GROUP_SWD_GPIO_OD_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_GROUP: SWD_GPIO_OD Mask */

/* --------------------  CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP  -------------------- */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_INT1_GPIO_OD_SET_Pos 0                                   /*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: INT1_GPIO_OD_SET Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_INT1_GPIO_OD_SET_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_INT1_GPIO_OD_SET_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: INT1_GPIO_OD_SET Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_INT0_GPIO_OD_SET_Pos 1                                   /*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: INT0_GPIO_OD_SET Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_INT0_GPIO_OD_SET_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_INT0_GPIO_OD_SET_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: INT0_GPIO_OD_SET Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_CMIF0_GPIO_OD_SET_Pos 2                                  /*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: CMIF0_GPIO_OD_SET Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_CMIF0_GPIO_OD_SET_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_CMIF0_GPIO_OD_SET_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: CMIF0_GPIO_OD_SET Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_CMIF1_GPIO_OD_SET_Pos 3                                  /*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: CMIF1_GPIO_OD_SET Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_CMIF1_GPIO_OD_SET_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_CMIF1_GPIO_OD_SET_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: CMIF1_GPIO_OD_SET Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_CMIF2_GPIO_OD_SET_Pos 4                                  /*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: CMIF2_GPIO_OD_SET Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_CMIF2_GPIO_OD_SET_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_CMIF2_GPIO_OD_SET_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: CMIF2_GPIO_OD_SET Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_CMIF3_GPIO_OD_SET_Pos 5                                  /*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: CMIF3_GPIO_OD_SET Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_CMIF3_GPIO_OD_SET_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_CMIF3_GPIO_OD_SET_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: CMIF3_GPIO_OD_SET Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SPIF_DI_GPIO_OD_SET_Pos 6                                /*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: SPIF_DI_GPIO_OD_SET Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SPIF_DI_GPIO_OD_SET_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SPIF_DI_GPIO_OD_SET_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: SPIF_DI_GPIO_OD_SET Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SPIF_CLK_GPIO_OD_SET_Pos 7                               /*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: SPIF_CLK_GPIO_OD_SET Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SPIF_CLK_GPIO_OD_SET_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SPIF_CLK_GPIO_OD_SET_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: SPIF_CLK_GPIO_OD_SET Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SPIF_HOLD_GPIO_OD_SET_Pos 8                              /*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: SPIF_HOLD_GPIO_OD_SET
                                                         Position                                                                                  */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SPIF_HOLD_GPIO_OD_SET_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SPIF_HOLD_GPIO_OD_SET_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: SPIF_HOLD_GPIO_OD_SET
                                                         Mask                                                                                      */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_I2C0_GPIO_OD_SET_Pos 9                                   /*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: I2C0_GPIO_OD_SET Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_I2C0_GPIO_OD_SET_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_I2C0_GPIO_OD_SET_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: I2C0_GPIO_OD_SET Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_I2C1_GPIO_OD_SET_Pos 10                                  /*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: I2C1_GPIO_OD_SET Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_I2C1_GPIO_OD_SET_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_I2C1_GPIO_OD_SET_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: I2C1_GPIO_OD_SET Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_I2C_SDA_GPIO_OD_SET_Pos 11                               /*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: I2C_SDA_GPIO_OD_SET Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_I2C_SDA_GPIO_OD_SET_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_I2C_SDA_GPIO_OD_SET_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: I2C_SDA_GPIO_OD_SET Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_I2C_SCL_GPIO_OD_SET_Pos 12                               /*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: I2C_SCL_GPIO_OD_SET Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_I2C_SCL_GPIO_OD_SET_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_I2C_SCL_GPIO_OD_SET_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: I2C_SCL_GPIO_OD_SET Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_UART0_GPIO_OD_SET_Pos 13                                 /*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: UART0_GPIO_OD_SET Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_UART0_GPIO_OD_SET_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_UART0_GPIO_OD_SET_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: UART0_GPIO_OD_SET Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_UART1_GPIO_OD_SET_Pos 14                                 /*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: UART1_GPIO_OD_SET Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_UART1_GPIO_OD_SET_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_UART1_GPIO_OD_SET_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: UART1_GPIO_OD_SET Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SPIF_CS_GPIO_OD_SET_Pos 15                               /*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: SPIF_CS_GPIO_OD_SET Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SPIF_CS_GPIO_OD_SET_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SPIF_CS_GPIO_OD_SET_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: SPIF_CS_GPIO_OD_SET Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SPIF_DO_GPIO_OD_SET_Pos 16                               /*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: SPIF_DO_GPIO_OD_SET Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SPIF_DO_GPIO_OD_SET_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SPIF_DO_GPIO_OD_SET_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: SPIF_DO_GPIO_OD_SET Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SPIF_WP_GPIO_OD_SET_Pos 17                               /*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: SPIF_WP_GPIO_OD_SET Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SPIF_WP_GPIO_OD_SET_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SPIF_WP_GPIO_OD_SET_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: SPIF_WP_GPIO_OD_SET Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_DBG1_GPIO_OD_SET_Pos 18                                  /*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: DBG1_GPIO_OD_SET Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_DBG1_GPIO_OD_SET_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_DBG1_GPIO_OD_SET_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: DBG1_GPIO_OD_SET Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_DBG0_GPIO_OD_SET_Pos 19                                  /*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: DBG0_GPIO_OD_SET Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_DBG0_GPIO_OD_SET_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_DBG0_GPIO_OD_SET_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: DBG0_GPIO_OD_SET Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_ICE_RSTN_GPIO_OD_SET_Pos 20                              /*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: ICE_RSTN_GPIO_OD_SET Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_ICE_RSTN_GPIO_OD_SET_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_ICE_RSTN_GPIO_OD_SET_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: ICE_RSTN_GPIO_OD_SET Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SWCLK_GPIO_OD_SET_Pos 21                                 /*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: SWCLK_GPIO_OD_SET Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SWCLK_GPIO_OD_SET_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SWCLK_GPIO_OD_SET_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: SWCLK_GPIO_OD_SET Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SWD_GPIO_OD_SET_Pos 22                                   /*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: SWD_GPIO_OD_SET Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SWD_GPIO_OD_SET_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_SET_GROUP_SWD_GPIO_OD_SET_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_SET_GROUP: SWD_GPIO_OD_SET Mask */

/* -------------------  CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP  ------------------- */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_INT1_GPIO_OD_CLR_Pos 0                                 /*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: INT1_GPIO_OD_CLR Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_INT1_GPIO_OD_CLR_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_INT1_GPIO_OD_CLR_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: INT1_GPIO_OD_CLR Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_INT0_GPIO_OD_CLR_Pos 1                                 /*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: INT0_GPIO_OD_CLR Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_INT0_GPIO_OD_CLR_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_INT0_GPIO_OD_CLR_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: INT0_GPIO_OD_CLR Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_CMIF0_GPIO_OD_CLR_Pos 2                                /*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: CMIF0_GPIO_OD_CLR Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_CMIF0_GPIO_OD_CLR_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_CMIF0_GPIO_OD_CLR_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: CMIF0_GPIO_OD_CLR Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_CMIF1_GPIO_OD_CLR_Pos 3                                /*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: CMIF1_GPIO_OD_CLR Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_CMIF1_GPIO_OD_CLR_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_CMIF1_GPIO_OD_CLR_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: CMIF1_GPIO_OD_CLR Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_CMIF2_GPIO_OD_CLR_Pos 4                                /*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: CMIF2_GPIO_OD_CLR Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_CMIF2_GPIO_OD_CLR_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_CMIF2_GPIO_OD_CLR_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: CMIF2_GPIO_OD_CLR Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_CMIF3_GPIO_OD_CLR_Pos 5                                /*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: CMIF3_GPIO_OD_CLR Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_CMIF3_GPIO_OD_CLR_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_CMIF3_GPIO_OD_CLR_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: CMIF3_GPIO_OD_CLR Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SPIF_DI_GPIO_OD_CLR_Pos 6                              /*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: SPIF_DI_GPIO_OD_CLR
                                                         Position                                                                                  */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SPIF_DI_GPIO_OD_CLR_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SPIF_DI_GPIO_OD_CLR_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: SPIF_DI_GPIO_OD_CLR
                                                         Mask                                                                                      */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SPIF_CLK_GPIO_OD_CLR_Pos 7                             /*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: SPIF_CLK_GPIO_OD_CLR
                                                         Position                                                                                  */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SPIF_CLK_GPIO_OD_CLR_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SPIF_CLK_GPIO_OD_CLR_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: SPIF_CLK_GPIO_OD_CLR
                                                         Mask                                                                                      */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SPIF_HOLD_GPIO_OD_CLR_Pos 8                            /*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: SPIF_HOLD_GPIO_OD_CLR
                                                         Position                                                                                  */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SPIF_HOLD_GPIO_OD_CLR_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SPIF_HOLD_GPIO_OD_CLR_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: SPIF_HOLD_GPIO_OD_CLR
                                                         Mask                                                                                      */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_I2C0_GPIO_OD_CLR_Pos 9                                 /*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: I2C0_GPIO_OD_CLR Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_I2C0_GPIO_OD_CLR_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_I2C0_GPIO_OD_CLR_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: I2C0_GPIO_OD_CLR Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_I2C1_GPIO_OD_CLR_Pos 10                                /*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: I2C1_GPIO_OD_CLR Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_I2C1_GPIO_OD_CLR_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_I2C1_GPIO_OD_CLR_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: I2C1_GPIO_OD_CLR Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_I2C_SDA_GPIO_OD_CLR_Pos 11                             /*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: I2C_SDA_GPIO_OD_CLR
                                                         Position                                                                                  */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_I2C_SDA_GPIO_OD_CLR_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_I2C_SDA_GPIO_OD_CLR_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: I2C_SDA_GPIO_OD_CLR
                                                         Mask                                                                                      */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_I2C_SCL_GPIO_OD_CLR_Pos 12                             /*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: I2C_SCL_GPIO_OD_CLR
                                                         Position                                                                                  */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_I2C_SCL_GPIO_OD_CLR_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_I2C_SCL_GPIO_OD_CLR_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: I2C_SCL_GPIO_OD_CLR
                                                         Mask                                                                                      */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_UART0_GPIO_OD_CLR_Pos 13                               /*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: UART0_GPIO_OD_CLR Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_UART0_GPIO_OD_CLR_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_UART0_GPIO_OD_CLR_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: UART0_GPIO_OD_CLR Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_UART1_GPIO_OD_CLR_Pos 14                               /*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: UART1_GPIO_OD_CLR Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_UART1_GPIO_OD_CLR_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_UART1_GPIO_OD_CLR_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: UART1_GPIO_OD_CLR Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SPIF_CS_GPIO_OD_CLR_Pos 15                             /*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: SPIF_CS_GPIO_OD_CLR
                                                         Position                                                                                  */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SPIF_CS_GPIO_OD_CLR_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SPIF_CS_GPIO_OD_CLR_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: SPIF_CS_GPIO_OD_CLR
                                                         Mask                                                                                      */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SPIF_DO_GPIO_OD_CLR_Pos 16                             /*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: SPIF_DO_GPIO_OD_CLR
                                                         Position                                                                                  */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SPIF_DO_GPIO_OD_CLR_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SPIF_DO_GPIO_OD_CLR_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: SPIF_DO_GPIO_OD_CLR
                                                         Mask                                                                                      */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SPIF_WP_GPIO_OD_CLR_Pos 17                             /*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: SPIF_WP_GPIO_OD_CLR
                                                         Position                                                                                  */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SPIF_WP_GPIO_OD_CLR_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SPIF_WP_GPIO_OD_CLR_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: SPIF_WP_GPIO_OD_CLR
                                                         Mask                                                                                      */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_DBG1_GPIO_OD_CLR_Pos 18                                /*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: DBG1_GPIO_OD_CLR Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_DBG1_GPIO_OD_CLR_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_DBG1_GPIO_OD_CLR_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: DBG1_GPIO_OD_CLR Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_DBG0_GPIO_OD_CLR_Pos 19                                /*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: DBG0_GPIO_OD_CLR Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_DBG0_GPIO_OD_CLR_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_DBG0_GPIO_OD_CLR_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: DBG0_GPIO_OD_CLR Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_ICE_RSTN_GPIO_OD_CLR_Pos 20                            /*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: ICE_RSTN_GPIO_OD_CLR
                                                         Position                                                                                  */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_ICE_RSTN_GPIO_OD_CLR_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_ICE_RSTN_GPIO_OD_CLR_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: ICE_RSTN_GPIO_OD_CLR
                                                         Mask                                                                                      */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SWCLK_GPIO_OD_CLR_Pos 21                               /*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: SWCLK_GPIO_OD_CLR Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SWCLK_GPIO_OD_CLR_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SWCLK_GPIO_OD_CLR_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: SWCLK_GPIO_OD_CLR Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SWD_GPIO_OD_CLR_Pos 22                                 /*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: SWD_GPIO_OD_CLR Position */
#define CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SWD_GPIO_OD_CLR_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_OD_CLEAR_GROUP_SWD_GPIO_OD_CLR_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_OD_CLEAR_GROUP: SWD_GPIO_OD_CLR Mask */

/* ----------------------  CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP  ---------------------- */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_INT1_ID_Pos 0                                                /*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: INT1_ID Position */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_INT1_ID_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_INT1_ID_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: INT1_ID Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_INT0_ID_Pos 1                                                /*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: INT0_ID Position */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_INT0_ID_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_INT0_ID_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: INT0_ID Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_CMIF0_ID_Pos 2                                               /*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: CMIF0_ID Position */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_CMIF0_ID_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_CMIF0_ID_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: CMIF0_ID Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_CMIF1_ID_Pos 3                                               /*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: CMIF1_ID Position */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_CMIF1_ID_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_CMIF1_ID_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: CMIF1_ID Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_CMIF2_ID_Pos 4                                               /*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: CMIF2_ID Position */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_CMIF2_ID_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_CMIF2_ID_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: CMIF2_ID Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_CMIF3_ID_Pos 5                                               /*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: CMIF3_ID Position */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_CMIF3_ID_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_CMIF3_ID_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: CMIF3_ID Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SPIF_DI_ID_Pos 6                                             /*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: SPIF_DI_ID Position */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SPIF_DI_ID_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SPIF_DI_ID_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: SPIF_DI_ID Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SPIF_CLK_ID_Pos 7                                            /*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: SPIF_CLK_ID Position */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SPIF_CLK_ID_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SPIF_CLK_ID_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: SPIF_CLK_ID Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SPIF_HOLD_ID_Pos 8                                           /*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: SPIF_HOLD_ID Position */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SPIF_HOLD_ID_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SPIF_HOLD_ID_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: SPIF_HOLD_ID Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_I2C0_ID_Pos 9                                                /*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: I2C0_ID Position */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_I2C0_ID_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_I2C0_ID_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: I2C0_ID Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_I2C1_ID_Pos 10                                               /*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: I2C1_ID Position */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_I2C1_ID_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_I2C1_ID_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: I2C1_ID Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_I2C_SDA_ID_Pos 11                                            /*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: I2C_SDA_ID Position */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_I2C_SDA_ID_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_I2C_SDA_ID_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: I2C_SDA_ID Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_I2C_SCL_ID_Pos 12                                            /*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: I2C_SCL_ID Position */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_I2C_SCL_ID_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_I2C_SCL_ID_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: I2C_SCL_ID Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_UART0_ID_Pos 13                                              /*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: UART0_ID Position */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_UART0_ID_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_UART0_ID_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: UART0_ID Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_UART1_ID_Pos 14                                              /*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: UART1_ID Position */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_UART1_ID_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_UART1_ID_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: UART1_ID Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SPIF_CS_ID_Pos 15                                            /*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: SPIF_CS_ID Position */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SPIF_CS_ID_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SPIF_CS_ID_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: SPIF_CS_ID Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SPIF_DO_ID_Pos 16                                            /*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: SPIF_DO_ID Position */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SPIF_DO_ID_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SPIF_DO_ID_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: SPIF_DO_ID Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SPIF_WP_ID_Pos 17                                            /*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: SPIF_WP_ID Position */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SPIF_WP_ID_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SPIF_WP_ID_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: SPIF_WP_ID Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_DBG1_ID_Pos 18                                               /*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: DBG1_ID Position */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_DBG1_ID_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_DBG1_ID_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: DBG1_ID Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_DBG0_ID_Pos 19                                               /*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: DBG0_ID Position */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_DBG0_ID_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_DBG0_ID_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: DBG0_ID Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_ICE_RSTN_ID_Pos 20                                           /*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: ICE_RSTN_ID Position */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_ICE_RSTN_ID_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_ICE_RSTN_ID_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: ICE_RSTN_ID Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SWCLK_ID_Pos 21                                              /*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: SWCLK_ID Position */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SWCLK_ID_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SWCLK_ID_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: SWCLK_ID Mask */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SWD_ID_Pos 22                                                /*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: SWD_ID Position */
#define CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SWD_ID_Msk (0x01UL << CSR_PAD_MUX_REG_PAD_MUX_ID_GROUP_SWD_ID_Pos)/*!< CSR_PAD_MUX_REG PAD_MUX_ID_GROUP: SWD_ID Mask */


/* ================================================================================ */
/* ================        struct 'GPIO_REG' Position & Mask       ================ */
/* ================================================================================ */


/* -------------------------------  GPIO_REG_PAD_IO  ------------------------------ */
#define GPIO_REG_PAD_IO_SEL_Pos               0                                                       /*!< GPIO_REG PAD_IO: SEL Position           */
#define GPIO_REG_PAD_IO_SEL_Msk               (0x0fUL << GPIO_REG_PAD_IO_SEL_Pos)                     /*!< GPIO_REG PAD_IO: SEL Mask               */
#define GPIO_REG_PAD_IO_OE_Pos                16                                                      /*!< GPIO_REG PAD_IO: OE Position            */
#define GPIO_REG_PAD_IO_OE_Msk                (0x01UL << GPIO_REG_PAD_IO_OE_Pos)                      /*!< GPIO_REG PAD_IO: OE Mask                */
#define GPIO_REG_PAD_IO_IE_Pos                17                                                      /*!< GPIO_REG PAD_IO: IE Position            */
#define GPIO_REG_PAD_IO_IE_Msk                (0x01UL << GPIO_REG_PAD_IO_IE_Pos)                      /*!< GPIO_REG PAD_IO: IE Mask                */
#define GPIO_REG_PAD_IO_PDE_Pos               18                                                      /*!< GPIO_REG PAD_IO: PDE Position           */
#define GPIO_REG_PAD_IO_PDE_Msk               (0x01UL << GPIO_REG_PAD_IO_PDE_Pos)                     /*!< GPIO_REG PAD_IO: PDE Mask               */
#define GPIO_REG_PAD_IO_PUE_Pos               19                                                      /*!< GPIO_REG PAD_IO: PUE Position           */
#define GPIO_REG_PAD_IO_PUE_Msk               (0x01UL << GPIO_REG_PAD_IO_PUE_Pos)                     /*!< GPIO_REG PAD_IO: PUE Mask               */
#define GPIO_REG_PAD_IO_DS_Pos                20                                                      /*!< GPIO_REG PAD_IO: DS Position            */
#define GPIO_REG_PAD_IO_DS_Msk                (0x01UL << GPIO_REG_PAD_IO_DS_Pos)                      /*!< GPIO_REG PAD_IO: DS Mask                */
#define GPIO_REG_PAD_IO_OD_MANUAL_EN_Pos      24                                                      /*!< GPIO_REG PAD_IO: OD_MANUAL_EN Position  */
#define GPIO_REG_PAD_IO_OD_MANUAL_EN_Msk      (0x01UL << GPIO_REG_PAD_IO_OD_MANUAL_EN_Pos)            /*!< GPIO_REG PAD_IO: OD_MANUAL_EN Mask      */
#define GPIO_REG_PAD_IO_OE_MANUAL_EN_Pos      25                                                      /*!< GPIO_REG PAD_IO: OE_MANUAL_EN Position  */
#define GPIO_REG_PAD_IO_OE_MANUAL_EN_Msk      (0x01UL << GPIO_REG_PAD_IO_OE_MANUAL_EN_Pos)            /*!< GPIO_REG PAD_IO: OE_MANUAL_EN Mask      */
#define GPIO_REG_PAD_IO_IE_MANUAL_EN_Pos      26                                                      /*!< GPIO_REG PAD_IO: IE_MANUAL_EN Position  */
#define GPIO_REG_PAD_IO_IE_MANUAL_EN_Msk      (0x01UL << GPIO_REG_PAD_IO_IE_MANUAL_EN_Pos)            /*!< GPIO_REG PAD_IO: IE_MANUAL_EN Mask      */
#define GPIO_REG_PAD_IO_PDE_MANUAL_EN_Pos     27                                                      /*!< GPIO_REG PAD_IO: PDE_MANUAL_EN Position */
#define GPIO_REG_PAD_IO_PDE_MANUAL_EN_Msk     (0x01UL << GPIO_REG_PAD_IO_PDE_MANUAL_EN_Pos)           /*!< GPIO_REG PAD_IO: PDE_MANUAL_EN Mask     */
#define GPIO_REG_PAD_IO_PUE_MANUAL_EN_Pos     28                                                      /*!< GPIO_REG PAD_IO: PUE_MANUAL_EN Position */
#define GPIO_REG_PAD_IO_PUE_MANUAL_EN_Msk     (0x01UL << GPIO_REG_PAD_IO_PUE_MANUAL_EN_Pos)           /*!< GPIO_REG PAD_IO: PUE_MANUAL_EN Mask     */
#define GPIO_REG_PAD_IO_DS_MANUAL_EN_Pos      29                                                      /*!< GPIO_REG PAD_IO: DS_MANUAL_EN Position  */
#define GPIO_REG_PAD_IO_DS_MANUAL_EN_Msk      (0x01UL << GPIO_REG_PAD_IO_DS_MANUAL_EN_Pos)            /*!< GPIO_REG PAD_IO: DS_MANUAL_EN Mask      */


/* ================================================================================ */
/* ================     struct 'STRAP_MUX_REG' Position & Mask     ================ */
/* ================================================================================ */


/* ----------------------------  STRAP_MUX_REG_STRAP0  ---------------------------- */
#define STRAP_MUX_REG_STRAP0_OUT____DBG1____1_IN_Pos 28                                               /*!< STRAP_MUX_REG STRAP0: OUT____DBG1____1_IN Position */
#define STRAP_MUX_REG_STRAP0_OUT____DBG1____1_IN_Msk (0x01UL << STRAP_MUX_REG_STRAP0_OUT____DBG1____1_IN_Pos)/*!< STRAP_MUX_REG STRAP0: OUT____DBG1____1_IN Mask */
#define STRAP_MUX_REG_STRAP0_OUT____DBG1____1_Pos 29                                                  /*!< STRAP_MUX_REG STRAP0: OUT____DBG1____1 Position */
#define STRAP_MUX_REG_STRAP0_OUT____DBG1____1_Msk (0x01UL << STRAP_MUX_REG_STRAP0_OUT____DBG1____1_Pos)/*!< STRAP_MUX_REG STRAP0: OUT____DBG1____1 Mask */
#define STRAP_MUX_REG_STRAP0_OUT____DBG1____0_IN_Pos 30                                               /*!< STRAP_MUX_REG STRAP0: OUT____DBG1____0_IN Position */
#define STRAP_MUX_REG_STRAP0_OUT____DBG1____0_IN_Msk (0x01UL << STRAP_MUX_REG_STRAP0_OUT____DBG1____0_IN_Pos)/*!< STRAP_MUX_REG STRAP0: OUT____DBG1____0_IN Mask */
#define STRAP_MUX_REG_STRAP0_OUT____DBG1____0_Pos 31                                                  /*!< STRAP_MUX_REG STRAP0: OUT____DBG1____0 Position */
#define STRAP_MUX_REG_STRAP0_OUT____DBG1____0_Msk (0x01UL << STRAP_MUX_REG_STRAP0_OUT____DBG1____0_Pos)/*!< STRAP_MUX_REG STRAP0: OUT____DBG1____0 Mask */

/* ----------------------------  STRAP_MUX_REG_MUX_SEL  --------------------------- */
#define STRAP_MUX_REG_MUX_SEL_STRP_SEL_Pos    0                                                       /*!< STRAP_MUX_REG MUX_SEL: STRP_SEL Position */
#define STRAP_MUX_REG_MUX_SEL_STRP_SEL_Msk    (0x01UL << STRAP_MUX_REG_MUX_SEL_STRP_SEL_Pos)          /*!< STRAP_MUX_REG MUX_SEL: STRP_SEL Mask    */

/* --------------------------  STRAP_MUX_REG_STRAP_READ  -------------------------- */
#define STRAP_MUX_REG_STRAP_READ_STRAP2_Pos   29                                                      /*!< STRAP_MUX_REG STRAP_READ: STRAP2 Position */
#define STRAP_MUX_REG_STRAP_READ_STRAP2_Msk   (0x01UL << STRAP_MUX_REG_STRAP_READ_STRAP2_Pos)         /*!< STRAP_MUX_REG STRAP_READ: STRAP2 Mask   */
#define STRAP_MUX_REG_STRAP_READ_STRAP1_Pos   30                                                      /*!< STRAP_MUX_REG STRAP_READ: STRAP1 Position */
#define STRAP_MUX_REG_STRAP_READ_STRAP1_Msk   (0x01UL << STRAP_MUX_REG_STRAP_READ_STRAP1_Pos)         /*!< STRAP_MUX_REG STRAP_READ: STRAP1 Mask   */
#define STRAP_MUX_REG_STRAP_READ_STRAP0_Pos   31                                                      /*!< STRAP_MUX_REG STRAP_READ: STRAP0 Position */
#define STRAP_MUX_REG_STRAP_READ_STRAP0_Msk   (0x01UL << STRAP_MUX_REG_STRAP_READ_STRAP0_Pos)         /*!< STRAP_MUX_REG STRAP_READ: STRAP0 Mask   */


/* ================================================================================ */
/* ================      struct 'MCU_WDT_REG' Position & Mask      ================ */
/* ================================================================================ */


/* -------------------------  MCU_WDT_REG_MCU_WDOG_ENABLE  ------------------------ */
#define MCU_WDT_REG_MCU_WDOG_ENABLE_MCU_WDOG_ENA_Pos 0                                                /*!< MCU_WDT_REG MCU_WDOG_ENABLE: MCU_WDOG_ENA Position */
#define MCU_WDT_REG_MCU_WDOG_ENABLE_MCU_WDOG_ENA_Msk (0x01UL << MCU_WDT_REG_MCU_WDOG_ENABLE_MCU_WDOG_ENA_Pos)/*!< MCU_WDT_REG MCU_WDOG_ENABLE: MCU_WDOG_ENA Mask */

/* -------------------------  MCU_WDT_REG_MCU_WDOG_STATUS  ------------------------ */
#define MCU_WDT_REG_MCU_WDOG_STATUS_MCU_WDT_STATUS_Pos 0                                              /*!< MCU_WDT_REG MCU_WDOG_STATUS: MCU_WDT_STATUS Position */
#define MCU_WDT_REG_MCU_WDOG_STATUS_MCU_WDT_STATUS_Msk (0x01UL << MCU_WDT_REG_MCU_WDOG_STATUS_MCU_WDT_STATUS_Pos)/*!< MCU_WDT_REG MCU_WDOG_STATUS: MCU_WDT_STATUS Mask */

/* --------------------------  MCU_WDT_REG_MCU_WDOG_CNT  -------------------------- */
#define MCU_WDT_REG_MCU_WDOG_CNT_MCU_WDT_TIME_CNT_Pos 0                                               /*!< MCU_WDT_REG MCU_WDOG_CNT: MCU_WDT_TIME_CNT Position */
#define MCU_WDT_REG_MCU_WDOG_CNT_MCU_WDT_TIME_CNT_Msk (0xffffffffUL << MCU_WDT_REG_MCU_WDOG_CNT_MCU_WDT_TIME_CNT_Pos)/*!< MCU_WDT_REG MCU_WDOG_CNT: MCU_WDT_TIME_CNT Mask */


/* ================================================================================ */
/* ================      struct 'SYS_WDT_REG' Position & Mask      ================ */
/* ================================================================================ */


/* -------------------------  SYS_WDT_REG_SYS_WDOG_ENABLE  ------------------------ */
#define SYS_WDT_REG_SYS_WDOG_ENABLE_SYS_WDOG_ENA_Pos 0                                                /*!< SYS_WDT_REG SYS_WDOG_ENABLE: SYS_WDOG_ENA Position */
#define SYS_WDT_REG_SYS_WDOG_ENABLE_SYS_WDOG_ENA_Msk (0x01UL << SYS_WDT_REG_SYS_WDOG_ENABLE_SYS_WDOG_ENA_Pos)/*!< SYS_WDT_REG SYS_WDOG_ENABLE: SYS_WDOG_ENA Mask */

/* -------------------------  SYS_WDT_REG_SYS_WDOG_STATUS  ------------------------ */
#define SYS_WDT_REG_SYS_WDOG_STATUS_SYS_WDT_STATUS_Pos 0                                              /*!< SYS_WDT_REG SYS_WDOG_STATUS: SYS_WDT_STATUS Position */
#define SYS_WDT_REG_SYS_WDOG_STATUS_SYS_WDT_STATUS_Msk (0x01UL << SYS_WDT_REG_SYS_WDOG_STATUS_SYS_WDT_STATUS_Pos)/*!< SYS_WDT_REG SYS_WDOG_STATUS: SYS_WDT_STATUS Mask */

/* --------------------------  SYS_WDT_REG_SYS_WDOG_CNT  -------------------------- */
#define SYS_WDT_REG_SYS_WDOG_CNT_SYS_WDT_TIME_CNT_Pos 0                                               /*!< SYS_WDT_REG SYS_WDOG_CNT: SYS_WDT_TIME_CNT Position */
#define SYS_WDT_REG_SYS_WDOG_CNT_SYS_WDT_TIME_CNT_Msk (0xffffffffUL << SYS_WDT_REG_SYS_WDOG_CNT_SYS_WDT_TIME_CNT_Pos)/*!< SYS_WDT_REG SYS_WDOG_CNT: SYS_WDT_TIME_CNT Mask */


/* ================================================================================ */
/* ================        struct 'AES_REG' Position & Mask        ================ */
/* ================================================================================ */


/* -----------------------------  AES_REG_AES_ENG_EN  ----------------------------- */
#define AES_REG_AES_ENG_EN_AES_ENG_EN_Pos     0                                                       /*!< AES_REG AES_ENG_EN: AES_ENG_EN Position */
#define AES_REG_AES_ENG_EN_AES_ENG_EN_Msk     (0x01UL << AES_REG_AES_ENG_EN_AES_ENG_EN_Pos)           /*!< AES_REG AES_ENG_EN: AES_ENG_EN Mask     */
#define AES_REG_AES_ENG_EN_AES_MODE_Pos       4                                                       /*!< AES_REG AES_ENG_EN: AES_MODE Position   */
#define AES_REG_AES_ENG_EN_AES_MODE_Msk       (0x03UL << AES_REG_AES_ENG_EN_AES_MODE_Pos)             /*!< AES_REG AES_ENG_EN: AES_MODE Mask       */

/* ------------------------------  AES_REG_AES_TRIG  ------------------------------ */
#define AES_REG_AES_TRIG_AES_START_Pos        0                                                       /*!< AES_REG AES_TRIG: AES_START Position    */
#define AES_REG_AES_TRIG_AES_START_Msk        (0x01UL << AES_REG_AES_TRIG_AES_START_Pos)              /*!< AES_REG AES_TRIG: AES_START Mask        */

/* -----------------------------  AES_REG_AES_STATUS  ----------------------------- */
#define AES_REG_AES_STATUS_AES_ACTIVE_Pos     0                                                       /*!< AES_REG AES_STATUS: AES_ACTIVE Position */
#define AES_REG_AES_STATUS_AES_ACTIVE_Msk     (0x01UL << AES_REG_AES_STATUS_AES_ACTIVE_Pos)           /*!< AES_REG AES_STATUS: AES_ACTIVE Mask     */
#define AES_REG_AES_STATUS_AES_FINISH_Pos     4                                                       /*!< AES_REG AES_STATUS: AES_FINISH Position */
#define AES_REG_AES_STATUS_AES_FINISH_Msk     (0x01UL << AES_REG_AES_STATUS_AES_FINISH_Pos)           /*!< AES_REG AES_STATUS: AES_FINISH Mask     */

/* -----------------------------  AES_REG_MIC_STATUS  ----------------------------- */
#define AES_REG_MIC_STATUS_MIC_STATUS_Pos     0                                                       /*!< AES_REG MIC_STATUS: MIC_STATUS Position */
#define AES_REG_MIC_STATUS_MIC_STATUS_Msk     (0x01UL << AES_REG_MIC_STATUS_MIC_STATUS_Pos)           /*!< AES_REG MIC_STATUS: MIC_STATUS Mask     */

/* -------------------------------  AES_REG_MIC_CCM  ------------------------------ */
#define AES_REG_MIC_CCM_MIC_CCM_OUT_Pos       0                                                       /*!< AES_REG MIC_CCM: MIC_CCM_OUT Position   */
#define AES_REG_MIC_CCM_MIC_CCM_OUT_Msk       (0xffffffffUL << AES_REG_MIC_CCM_MIC_CCM_OUT_Pos)       /*!< AES_REG MIC_CCM: MIC_CCM_OUT Mask       */

/* ------------------------------  AES_REG_AES_SET0  ------------------------------ */
#define AES_REG_AES_SET0_AES_MASTER_MODE_Pos  0                                                       /*!< AES_REG AES_SET0: AES_MASTER_MODE Position */
#define AES_REG_AES_SET0_AES_MASTER_MODE_Msk  (0x01UL << AES_REG_AES_SET0_AES_MASTER_MODE_Pos)        /*!< AES_REG AES_SET0: AES_MASTER_MODE Mask  */

/* ----------------------------  AES_REG_AES_NONCE0_0  ---------------------------- */
#define AES_REG_AES_NONCE0_0_AES_PKT_CNT_31_0_Pos 0                                                   /*!< AES_REG AES_NONCE0_0: AES_PKT_CNT_31_0 Position */
#define AES_REG_AES_NONCE0_0_AES_PKT_CNT_31_0_Msk (0xffffffffUL << AES_REG_AES_NONCE0_0_AES_PKT_CNT_31_0_Pos)/*!< AES_REG AES_NONCE0_0: AES_PKT_CNT_31_0 Mask */

/* ----------------------------  AES_REG_AES_NONCE0_1  ---------------------------- */
#define AES_REG_AES_NONCE0_1_AES_PKT_CNT_39_32_Pos 0                                                  /*!< AES_REG AES_NONCE0_1: AES_PKT_CNT_39_32 Position */
#define AES_REG_AES_NONCE0_1_AES_PKT_CNT_39_32_Msk (0x000000ffUL << AES_REG_AES_NONCE0_1_AES_PKT_CNT_39_32_Pos)/*!< AES_REG AES_NONCE0_1: AES_PKT_CNT_39_32 Mask */

/* ------------------------------  AES_REG_AES_KEY_0  ----------------------------- */
#define AES_REG_AES_KEY_0_AES_KEY_31_0_Pos    0                                                       /*!< AES_REG AES_KEY_0: AES_KEY_31_0 Position */
#define AES_REG_AES_KEY_0_AES_KEY_31_0_Msk    (0xffffffffUL << AES_REG_AES_KEY_0_AES_KEY_31_0_Pos)    /*!< AES_REG AES_KEY_0: AES_KEY_31_0 Mask    */

/* ------------------------------  AES_REG_AES_KEY_1  ----------------------------- */
#define AES_REG_AES_KEY_1_AES_KEY_63_32_Pos   0                                                       /*!< AES_REG AES_KEY_1: AES_KEY_63_32 Position */
#define AES_REG_AES_KEY_1_AES_KEY_63_32_Msk   (0xffffffffUL << AES_REG_AES_KEY_1_AES_KEY_63_32_Pos)   /*!< AES_REG AES_KEY_1: AES_KEY_63_32 Mask   */

/* ------------------------------  AES_REG_AES_KEY_2  ----------------------------- */
#define AES_REG_AES_KEY_2_AES_KEY_95_64_Pos   0                                                       /*!< AES_REG AES_KEY_2: AES_KEY_95_64 Position */
#define AES_REG_AES_KEY_2_AES_KEY_95_64_Msk   (0xffffffffUL << AES_REG_AES_KEY_2_AES_KEY_95_64_Pos)   /*!< AES_REG AES_KEY_2: AES_KEY_95_64 Mask   */

/* ------------------------------  AES_REG_AES_KEY_3  ----------------------------- */
#define AES_REG_AES_KEY_3_AES_KEY_127_96_Pos  0                                                       /*!< AES_REG AES_KEY_3: AES_KEY_127_96 Position */
#define AES_REG_AES_KEY_3_AES_KEY_127_96_Msk  (0xffffffffUL << AES_REG_AES_KEY_3_AES_KEY_127_96_Pos)  /*!< AES_REG AES_KEY_3: AES_KEY_127_96 Mask  */

/* ------------------------------  AES_REG_AES_IV_0  ------------------------------ */
#define AES_REG_AES_IV_0_AES_IV_31_0_Pos      0                                                       /*!< AES_REG AES_IV_0: AES_IV_31_0 Position  */
#define AES_REG_AES_IV_0_AES_IV_31_0_Msk      (0xffffffffUL << AES_REG_AES_IV_0_AES_IV_31_0_Pos)      /*!< AES_REG AES_IV_0: AES_IV_31_0 Mask      */

/* ------------------------------  AES_REG_AES_IV_1  ------------------------------ */
#define AES_REG_AES_IV_1_AES_IV_63_32_Pos     0                                                       /*!< AES_REG AES_IV_1: AES_IV_63_32 Position */
#define AES_REG_AES_IV_1_AES_IV_63_32_Msk     (0xffffffffUL << AES_REG_AES_IV_1_AES_IV_63_32_Pos)     /*!< AES_REG AES_IV_1: AES_IV_63_32 Mask     */

/* ------------------------------  AES_REG_AES_IV_2  ------------------------------ */
#define AES_REG_AES_IV_2_AES_IV_95_64_Pos     0                                                       /*!< AES_REG AES_IV_2: AES_IV_95_64 Position */
#define AES_REG_AES_IV_2_AES_IV_95_64_Msk     (0xffffffffUL << AES_REG_AES_IV_2_AES_IV_95_64_Pos)     /*!< AES_REG AES_IV_2: AES_IV_95_64 Mask     */

/* ------------------------------  AES_REG_AES_IV_3  ------------------------------ */
#define AES_REG_AES_IV_3_AES_IV_127_96_Pos    0                                                       /*!< AES_REG AES_IV_3: AES_IV_127_96 Position */
#define AES_REG_AES_IV_3_AES_IV_127_96_Msk    (0xffffffffUL << AES_REG_AES_IV_3_AES_IV_127_96_Pos)    /*!< AES_REG AES_IV_3: AES_IV_127_96 Mask    */

/* -------------------------------  AES_REG_AES_INT  ------------------------------ */
#define AES_REG_AES_INT_AES_INTR_Pos          0                                                       /*!< AES_REG AES_INT: AES_INTR Position      */
#define AES_REG_AES_INT_AES_INTR_Msk          (0x01UL << AES_REG_AES_INT_AES_INTR_Pos)                /*!< AES_REG AES_INT: AES_INTR Mask          */

/* ------------------------------  AES_REG_AES_DATA0  ----------------------------- */
#define AES_REG_AES_DATA0_AES_PKT_LLID_Pos    0                                                       /*!< AES_REG AES_DATA0: AES_PKT_LLID Position */
#define AES_REG_AES_DATA0_AES_PKT_LLID_Msk    (0x03UL << AES_REG_AES_DATA0_AES_PKT_LLID_Pos)          /*!< AES_REG AES_DATA0: AES_PKT_LLID Mask    */
#define AES_REG_AES_DATA0_AES_PKT_LENGTH_Pos  8                                                       /*!< AES_REG AES_DATA0: AES_PKT_LENGTH Position */
#define AES_REG_AES_DATA0_AES_PKT_LENGTH_Msk  (0x1fUL << AES_REG_AES_DATA0_AES_PKT_LENGTH_Pos)        /*!< AES_REG AES_DATA0: AES_PKT_LENGTH Mask  */
#define AES_REG_AES_DATA0_AES_DATA_BYTE1_Pos  16                                                      /*!< AES_REG AES_DATA0: AES_DATA_BYTE1 Position */
#define AES_REG_AES_DATA0_AES_DATA_BYTE1_Msk  (0x000000ffUL << AES_REG_AES_DATA0_AES_DATA_BYTE1_Pos)  /*!< AES_REG AES_DATA0: AES_DATA_BYTE1 Mask  */
#define AES_REG_AES_DATA0_AES_DATA_BYTE2_Pos  24                                                      /*!< AES_REG AES_DATA0: AES_DATA_BYTE2 Position */
#define AES_REG_AES_DATA0_AES_DATA_BYTE2_Msk  (0x000000ffUL << AES_REG_AES_DATA0_AES_DATA_BYTE2_Pos)  /*!< AES_REG AES_DATA0: AES_DATA_BYTE2 Mask  */

/* -----------------------------  AES_REG_AES_DATA1_0  ---------------------------- */
#define AES_REG_AES_DATA1_0_AES_DATA_BYTE3_Pos 0                                                      /*!< AES_REG AES_DATA1_0: AES_DATA_BYTE3 Position */
#define AES_REG_AES_DATA1_0_AES_DATA_BYTE3_Msk (0x000000ffUL << AES_REG_AES_DATA1_0_AES_DATA_BYTE3_Pos)/*!< AES_REG AES_DATA1_0: AES_DATA_BYTE3 Mask */
#define AES_REG_AES_DATA1_0_AES_DATA_BYTE4_Pos 8                                                      /*!< AES_REG AES_DATA1_0: AES_DATA_BYTE4 Position */
#define AES_REG_AES_DATA1_0_AES_DATA_BYTE4_Msk (0x000000ffUL << AES_REG_AES_DATA1_0_AES_DATA_BYTE4_Pos)/*!< AES_REG AES_DATA1_0: AES_DATA_BYTE4 Mask */
#define AES_REG_AES_DATA1_0_AES_DATA_BYTE5_Pos 16                                                     /*!< AES_REG AES_DATA1_0: AES_DATA_BYTE5 Position */
#define AES_REG_AES_DATA1_0_AES_DATA_BYTE5_Msk (0x000000ffUL << AES_REG_AES_DATA1_0_AES_DATA_BYTE5_Pos)/*!< AES_REG AES_DATA1_0: AES_DATA_BYTE5 Mask */
#define AES_REG_AES_DATA1_0_AES_DATA_BYTE6_Pos 24                                                     /*!< AES_REG AES_DATA1_0: AES_DATA_BYTE6 Position */
#define AES_REG_AES_DATA1_0_AES_DATA_BYTE6_Msk (0x000000ffUL << AES_REG_AES_DATA1_0_AES_DATA_BYTE6_Pos)/*!< AES_REG AES_DATA1_0: AES_DATA_BYTE6 Mask */

/* -----------------------------  AES_REG_AES_DATA1_1  ---------------------------- */
#define AES_REG_AES_DATA1_1_AES_DATA_BYTE7_Pos 0                                                      /*!< AES_REG AES_DATA1_1: AES_DATA_BYTE7 Position */
#define AES_REG_AES_DATA1_1_AES_DATA_BYTE7_Msk (0x000000ffUL << AES_REG_AES_DATA1_1_AES_DATA_BYTE7_Pos)/*!< AES_REG AES_DATA1_1: AES_DATA_BYTE7 Mask */
#define AES_REG_AES_DATA1_1_AES_DATA_BYTE8_Pos 8                                                      /*!< AES_REG AES_DATA1_1: AES_DATA_BYTE8 Position */
#define AES_REG_AES_DATA1_1_AES_DATA_BYTE8_Msk (0x000000ffUL << AES_REG_AES_DATA1_1_AES_DATA_BYTE8_Pos)/*!< AES_REG AES_DATA1_1: AES_DATA_BYTE8 Mask */
#define AES_REG_AES_DATA1_1_AES_DATA_BYTE9_Pos 16                                                     /*!< AES_REG AES_DATA1_1: AES_DATA_BYTE9 Position */
#define AES_REG_AES_DATA1_1_AES_DATA_BYTE9_Msk (0x000000ffUL << AES_REG_AES_DATA1_1_AES_DATA_BYTE9_Pos)/*!< AES_REG AES_DATA1_1: AES_DATA_BYTE9 Mask */
#define AES_REG_AES_DATA1_1_AES_DATA_BYTE10_Pos 24                                                    /*!< AES_REG AES_DATA1_1: AES_DATA_BYTE10 Position */
#define AES_REG_AES_DATA1_1_AES_DATA_BYTE10_Msk (0x000000ffUL << AES_REG_AES_DATA1_1_AES_DATA_BYTE10_Pos)/*!< AES_REG AES_DATA1_1: AES_DATA_BYTE10 Mask */

/* -----------------------------  AES_REG_AES_DATA1_2  ---------------------------- */
#define AES_REG_AES_DATA1_2_AES_DATA_BYTE11_Pos 0                                                     /*!< AES_REG AES_DATA1_2: AES_DATA_BYTE11 Position */
#define AES_REG_AES_DATA1_2_AES_DATA_BYTE11_Msk (0x000000ffUL << AES_REG_AES_DATA1_2_AES_DATA_BYTE11_Pos)/*!< AES_REG AES_DATA1_2: AES_DATA_BYTE11 Mask */
#define AES_REG_AES_DATA1_2_AES_DATA_BYTE12_Pos 8                                                     /*!< AES_REG AES_DATA1_2: AES_DATA_BYTE12 Position */
#define AES_REG_AES_DATA1_2_AES_DATA_BYTE12_Msk (0x000000ffUL << AES_REG_AES_DATA1_2_AES_DATA_BYTE12_Pos)/*!< AES_REG AES_DATA1_2: AES_DATA_BYTE12 Mask */
#define AES_REG_AES_DATA1_2_AES_DATA_BYTE13_Pos 16                                                    /*!< AES_REG AES_DATA1_2: AES_DATA_BYTE13 Position */
#define AES_REG_AES_DATA1_2_AES_DATA_BYTE13_Msk (0x000000ffUL << AES_REG_AES_DATA1_2_AES_DATA_BYTE13_Pos)/*!< AES_REG AES_DATA1_2: AES_DATA_BYTE13 Mask */
#define AES_REG_AES_DATA1_2_AES_DATA_BYTE14_Pos 24                                                    /*!< AES_REG AES_DATA1_2: AES_DATA_BYTE14 Position */
#define AES_REG_AES_DATA1_2_AES_DATA_BYTE14_Msk (0x000000ffUL << AES_REG_AES_DATA1_2_AES_DATA_BYTE14_Pos)/*!< AES_REG AES_DATA1_2: AES_DATA_BYTE14 Mask */

/* -----------------------------  AES_REG_AES_DATA1_3  ---------------------------- */
#define AES_REG_AES_DATA1_3_AES_DATA_BYTE15_Pos 0                                                     /*!< AES_REG AES_DATA1_3: AES_DATA_BYTE15 Position */
#define AES_REG_AES_DATA1_3_AES_DATA_BYTE15_Msk (0x000000ffUL << AES_REG_AES_DATA1_3_AES_DATA_BYTE15_Pos)/*!< AES_REG AES_DATA1_3: AES_DATA_BYTE15 Mask */
#define AES_REG_AES_DATA1_3_AES_DATA_BYTE16_Pos 8                                                     /*!< AES_REG AES_DATA1_3: AES_DATA_BYTE16 Position */
#define AES_REG_AES_DATA1_3_AES_DATA_BYTE16_Msk (0x000000ffUL << AES_REG_AES_DATA1_3_AES_DATA_BYTE16_Pos)/*!< AES_REG AES_DATA1_3: AES_DATA_BYTE16 Mask */
#define AES_REG_AES_DATA1_3_AES_DATA_BYTE17_Pos 16                                                    /*!< AES_REG AES_DATA1_3: AES_DATA_BYTE17 Position */
#define AES_REG_AES_DATA1_3_AES_DATA_BYTE17_Msk (0x000000ffUL << AES_REG_AES_DATA1_3_AES_DATA_BYTE17_Pos)/*!< AES_REG AES_DATA1_3: AES_DATA_BYTE17 Mask */
#define AES_REG_AES_DATA1_3_AES_DATA_BYTE18_Pos 24                                                    /*!< AES_REG AES_DATA1_3: AES_DATA_BYTE18 Position */
#define AES_REG_AES_DATA1_3_AES_DATA_BYTE18_Msk (0x000000ffUL << AES_REG_AES_DATA1_3_AES_DATA_BYTE18_Pos)/*!< AES_REG AES_DATA1_3: AES_DATA_BYTE18 Mask */

/* -----------------------------  AES_REG_AES_DATA1_4  ---------------------------- */
#define AES_REG_AES_DATA1_4_AES_DATA_BYTE19_Pos 0                                                     /*!< AES_REG AES_DATA1_4: AES_DATA_BYTE19 Position */
#define AES_REG_AES_DATA1_4_AES_DATA_BYTE19_Msk (0x000000ffUL << AES_REG_AES_DATA1_4_AES_DATA_BYTE19_Pos)/*!< AES_REG AES_DATA1_4: AES_DATA_BYTE19 Mask */
#define AES_REG_AES_DATA1_4_AES_DATA_BYTE20_Pos 8                                                     /*!< AES_REG AES_DATA1_4: AES_DATA_BYTE20 Position */
#define AES_REG_AES_DATA1_4_AES_DATA_BYTE20_Msk (0x000000ffUL << AES_REG_AES_DATA1_4_AES_DATA_BYTE20_Pos)/*!< AES_REG AES_DATA1_4: AES_DATA_BYTE20 Mask */
#define AES_REG_AES_DATA1_4_AES_DATA_BYTE21_Pos 16                                                    /*!< AES_REG AES_DATA1_4: AES_DATA_BYTE21 Position */
#define AES_REG_AES_DATA1_4_AES_DATA_BYTE21_Msk (0x000000ffUL << AES_REG_AES_DATA1_4_AES_DATA_BYTE21_Pos)/*!< AES_REG AES_DATA1_4: AES_DATA_BYTE21 Mask */
#define AES_REG_AES_DATA1_4_AES_DATA_BYTE22_Pos 24                                                    /*!< AES_REG AES_DATA1_4: AES_DATA_BYTE22 Position */
#define AES_REG_AES_DATA1_4_AES_DATA_BYTE22_Msk (0x000000ffUL << AES_REG_AES_DATA1_4_AES_DATA_BYTE22_Pos)/*!< AES_REG AES_DATA1_4: AES_DATA_BYTE22 Mask */

/* -----------------------------  AES_REG_AES_DATA1_5  ---------------------------- */
#define AES_REG_AES_DATA1_5_AES_DATA_BYTE23_Pos 0                                                     /*!< AES_REG AES_DATA1_5: AES_DATA_BYTE23 Position */
#define AES_REG_AES_DATA1_5_AES_DATA_BYTE23_Msk (0x000000ffUL << AES_REG_AES_DATA1_5_AES_DATA_BYTE23_Pos)/*!< AES_REG AES_DATA1_5: AES_DATA_BYTE23 Mask */
#define AES_REG_AES_DATA1_5_AES_DATA_BYTE24_Pos 8                                                     /*!< AES_REG AES_DATA1_5: AES_DATA_BYTE24 Position */
#define AES_REG_AES_DATA1_5_AES_DATA_BYTE24_Msk (0x000000ffUL << AES_REG_AES_DATA1_5_AES_DATA_BYTE24_Pos)/*!< AES_REG AES_DATA1_5: AES_DATA_BYTE24 Mask */
#define AES_REG_AES_DATA1_5_AES_DATA_BYTE25_Pos 16                                                    /*!< AES_REG AES_DATA1_5: AES_DATA_BYTE25 Position */
#define AES_REG_AES_DATA1_5_AES_DATA_BYTE25_Msk (0x000000ffUL << AES_REG_AES_DATA1_5_AES_DATA_BYTE25_Pos)/*!< AES_REG AES_DATA1_5: AES_DATA_BYTE25 Mask */
#define AES_REG_AES_DATA1_5_AES_DATA_BYTE26_Pos 24                                                    /*!< AES_REG AES_DATA1_5: AES_DATA_BYTE26 Position */
#define AES_REG_AES_DATA1_5_AES_DATA_BYTE26_Msk (0x000000ffUL << AES_REG_AES_DATA1_5_AES_DATA_BYTE26_Pos)/*!< AES_REG AES_DATA1_5: AES_DATA_BYTE26 Mask */

/* -----------------------------  AES_REG_AES_DATA1_6  ---------------------------- */
#define AES_REG_AES_DATA1_6_AES_DATA_BYTE27_Pos 0                                                     /*!< AES_REG AES_DATA1_6: AES_DATA_BYTE27 Position */
#define AES_REG_AES_DATA1_6_AES_DATA_BYTE27_Msk (0x000000ffUL << AES_REG_AES_DATA1_6_AES_DATA_BYTE27_Pos)/*!< AES_REG AES_DATA1_6: AES_DATA_BYTE27 Mask */

/* -------------------------------  AES_REG_AES_MIC  ------------------------------ */
#define AES_REG_AES_MIC_AES_MIC_Pos           0                                                       /*!< AES_REG AES_MIC: AES_MIC Position       */
#define AES_REG_AES_MIC_AES_MIC_Msk           (0xffffffffUL << AES_REG_AES_MIC_AES_MIC_Pos)           /*!< AES_REG AES_MIC: AES_MIC Mask           */


/* ================================================================================ */
/* ================        struct 'EFS_REG' Position & Mask        ================ */
/* ================================================================================ */


/* ---------------------------  EFS_REG_EFUSE_CLK_FREQ  --------------------------- */
#define EFS_REG_EFUSE_CLK_FREQ_EFS_CLKFREQ_Pos 0                                                      /*!< EFS_REG EFUSE_CLK_FREQ: EFS_CLKFREQ Position */
#define EFS_REG_EFUSE_CLK_FREQ_EFS_CLKFREQ_Msk (0x00000fffUL << EFS_REG_EFUSE_CLK_FREQ_EFS_CLKFREQ_Pos)/*!< EFS_REG EFUSE_CLK_FREQ: EFS_CLKFREQ Mask */
#define EFS_REG_EFUSE_CLK_FREQ_EFS_VDDQ_EN_LOW_ACTIVE_Pos 16                                          /*!< EFS_REG EFUSE_CLK_FREQ: EFS_VDDQ_EN_LOW_ACTIVE Position */
#define EFS_REG_EFUSE_CLK_FREQ_EFS_VDDQ_EN_LOW_ACTIVE_Msk (0x01UL << EFS_REG_EFUSE_CLK_FREQ_EFS_VDDQ_EN_LOW_ACTIVE_Pos)/*!< EFS_REG EFUSE_CLK_FREQ: EFS_VDDQ_EN_LOW_ACTIVE Mask */
#define EFS_REG_EFUSE_CLK_FREQ_EFS_CLKFREQ_RD_Pos 20                                                  /*!< EFS_REG EFUSE_CLK_FREQ: EFS_CLKFREQ_RD Position */
#define EFS_REG_EFUSE_CLK_FREQ_EFS_CLKFREQ_RD_Msk (0x000000ffUL << EFS_REG_EFUSE_CLK_FREQ_EFS_CLKFREQ_RD_Pos)/*!< EFS_REG EFUSE_CLK_FREQ: EFS_CLKFREQ_RD Mask */
#define EFS_REG_EFUSE_CLK_FREQ_EFS_PRE_RD_Pos 28                                                      /*!< EFS_REG EFUSE_CLK_FREQ: EFS_PRE_RD Position */
#define EFS_REG_EFUSE_CLK_FREQ_EFS_PRE_RD_Msk (0x0fUL << EFS_REG_EFUSE_CLK_FREQ_EFS_PRE_RD_Pos)       /*!< EFS_REG EFUSE_CLK_FREQ: EFS_PRE_RD Mask */

/* ---------------------------  EFS_REG_EFUSE_LDO_TIME  --------------------------- */
#define EFS_REG_EFUSE_LDO_TIME_EFS_LDO_ON_Pos 0                                                       /*!< EFS_REG EFUSE_LDO_TIME: EFS_LDO_ON Position */
#define EFS_REG_EFUSE_LDO_TIME_EFS_LDO_ON_Msk (0x0000ffffUL << EFS_REG_EFUSE_LDO_TIME_EFS_LDO_ON_Pos) /*!< EFS_REG EFUSE_LDO_TIME: EFS_LDO_ON Mask */
#define EFS_REG_EFUSE_LDO_TIME_EFS_LDO_OFF_Pos 16                                                     /*!< EFS_REG EFUSE_LDO_TIME: EFS_LDO_OFF Position */
#define EFS_REG_EFUSE_LDO_TIME_EFS_LDO_OFF_Msk (0x0000ffffUL << EFS_REG_EFUSE_LDO_TIME_EFS_LDO_OFF_Pos)/*!< EFS_REG EFUSE_LDO_TIME: EFS_LDO_OFF Mask */

/* ----------------------------  EFS_REG_EFUSE_STATUS  ---------------------------- */
#define EFS_REG_EFUSE_STATUS_EFS_RD_FLAG_Pos  0                                                       /*!< EFS_REG EFUSE_STATUS: EFS_RD_FLAG Position */
#define EFS_REG_EFUSE_STATUS_EFS_RD_FLAG_Msk  (0x01UL << EFS_REG_EFUSE_STATUS_EFS_RD_FLAG_Pos)        /*!< EFS_REG EFUSE_STATUS: EFS_RD_FLAG Mask  */

/* ----------------------------  EFS_REG_EFUSE_STATUS2  --------------------------- */
#define EFS_REG_EFUSE_STATUS2_EFS_PROGRESS_DONE_Pos 0                                                 /*!< EFS_REG EFUSE_STATUS2: EFS_PROGRESS_DONE Position */
#define EFS_REG_EFUSE_STATUS2_EFS_PROGRESS_DONE_Msk (0x01UL << EFS_REG_EFUSE_STATUS2_EFS_PROGRESS_DONE_Pos)/*!< EFS_REG EFUSE_STATUS2: EFS_PROGRESS_DONE Mask */

/* ----------------------------  EFS_REG_EFUSE_WR_KICK  --------------------------- */
#define EFS_REG_EFUSE_WR_KICK_EFS_WR_KICK_Pos 0                                                       /*!< EFS_REG EFUSE_WR_KICK: EFS_WR_KICK Position */
#define EFS_REG_EFUSE_WR_KICK_EFS_WR_KICK_Msk (0x01UL << EFS_REG_EFUSE_WR_KICK_EFS_WR_KICK_Pos)       /*!< EFS_REG EFUSE_WR_KICK: EFS_WR_KICK Mask */

/* ----------------------------  EFS_REG_EFUSE_RD_KICK  --------------------------- */
#define EFS_REG_EFUSE_RD_KICK_EFS_RD_KICK_Pos 0                                                       /*!< EFS_REG EFUSE_RD_KICK: EFS_RD_KICK Position */
#define EFS_REG_EFUSE_RD_KICK_EFS_RD_KICK_Msk (0x01UL << EFS_REG_EFUSE_RD_KICK_EFS_RD_KICK_Pos)       /*!< EFS_REG EFUSE_RD_KICK: EFS_RD_KICK Mask */

/* ---------------------------  EFS_REG_EFUSE_WDATA_0_0  -------------------------- */
#define EFS_REG_EFUSE_WDATA_0_0_EFS_BYTE_0_Pos 0                                                      /*!< EFS_REG EFUSE_WDATA_0_0: EFS_BYTE_0 Position */
#define EFS_REG_EFUSE_WDATA_0_0_EFS_BYTE_0_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_0_EFS_BYTE_0_Pos)/*!< EFS_REG EFUSE_WDATA_0_0: EFS_BYTE_0 Mask */
#define EFS_REG_EFUSE_WDATA_0_0_EFS_BYTE_1_Pos 8                                                      /*!< EFS_REG EFUSE_WDATA_0_0: EFS_BYTE_1 Position */
#define EFS_REG_EFUSE_WDATA_0_0_EFS_BYTE_1_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_0_EFS_BYTE_1_Pos)/*!< EFS_REG EFUSE_WDATA_0_0: EFS_BYTE_1 Mask */
#define EFS_REG_EFUSE_WDATA_0_0_EFS_BYTE_2_Pos 16                                                     /*!< EFS_REG EFUSE_WDATA_0_0: EFS_BYTE_2 Position */
#define EFS_REG_EFUSE_WDATA_0_0_EFS_BYTE_2_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_0_EFS_BYTE_2_Pos)/*!< EFS_REG EFUSE_WDATA_0_0: EFS_BYTE_2 Mask */
#define EFS_REG_EFUSE_WDATA_0_0_EFS_BYTE_3_Pos 24                                                     /*!< EFS_REG EFUSE_WDATA_0_0: EFS_BYTE_3 Position */
#define EFS_REG_EFUSE_WDATA_0_0_EFS_BYTE_3_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_0_EFS_BYTE_3_Pos)/*!< EFS_REG EFUSE_WDATA_0_0: EFS_BYTE_3 Mask */

/* ---------------------------  EFS_REG_EFUSE_WDATA_0_1  -------------------------- */
#define EFS_REG_EFUSE_WDATA_0_1_EFS_BYTE_4_Pos 0                                                      /*!< EFS_REG EFUSE_WDATA_0_1: EFS_BYTE_4 Position */
#define EFS_REG_EFUSE_WDATA_0_1_EFS_BYTE_4_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_1_EFS_BYTE_4_Pos)/*!< EFS_REG EFUSE_WDATA_0_1: EFS_BYTE_4 Mask */
#define EFS_REG_EFUSE_WDATA_0_1_EFS_BYTE_5_Pos 8                                                      /*!< EFS_REG EFUSE_WDATA_0_1: EFS_BYTE_5 Position */
#define EFS_REG_EFUSE_WDATA_0_1_EFS_BYTE_5_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_1_EFS_BYTE_5_Pos)/*!< EFS_REG EFUSE_WDATA_0_1: EFS_BYTE_5 Mask */
#define EFS_REG_EFUSE_WDATA_0_1_EFS_BYTE_6_Pos 16                                                     /*!< EFS_REG EFUSE_WDATA_0_1: EFS_BYTE_6 Position */
#define EFS_REG_EFUSE_WDATA_0_1_EFS_BYTE_6_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_1_EFS_BYTE_6_Pos)/*!< EFS_REG EFUSE_WDATA_0_1: EFS_BYTE_6 Mask */
#define EFS_REG_EFUSE_WDATA_0_1_EFS_BYTE_7_Pos 24                                                     /*!< EFS_REG EFUSE_WDATA_0_1: EFS_BYTE_7 Position */
#define EFS_REG_EFUSE_WDATA_0_1_EFS_BYTE_7_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_1_EFS_BYTE_7_Pos)/*!< EFS_REG EFUSE_WDATA_0_1: EFS_BYTE_7 Mask */

/* ---------------------------  EFS_REG_EFUSE_WDATA_0_2  -------------------------- */
#define EFS_REG_EFUSE_WDATA_0_2_EFS_BYTE_8_Pos 0                                                      /*!< EFS_REG EFUSE_WDATA_0_2: EFS_BYTE_8 Position */
#define EFS_REG_EFUSE_WDATA_0_2_EFS_BYTE_8_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_2_EFS_BYTE_8_Pos)/*!< EFS_REG EFUSE_WDATA_0_2: EFS_BYTE_8 Mask */
#define EFS_REG_EFUSE_WDATA_0_2_EFS_BYTE_9_Pos 8                                                      /*!< EFS_REG EFUSE_WDATA_0_2: EFS_BYTE_9 Position */
#define EFS_REG_EFUSE_WDATA_0_2_EFS_BYTE_9_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_2_EFS_BYTE_9_Pos)/*!< EFS_REG EFUSE_WDATA_0_2: EFS_BYTE_9 Mask */
#define EFS_REG_EFUSE_WDATA_0_2_EFS_BYTE_10_Pos 16                                                    /*!< EFS_REG EFUSE_WDATA_0_2: EFS_BYTE_10 Position */
#define EFS_REG_EFUSE_WDATA_0_2_EFS_BYTE_10_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_2_EFS_BYTE_10_Pos)/*!< EFS_REG EFUSE_WDATA_0_2: EFS_BYTE_10 Mask */
#define EFS_REG_EFUSE_WDATA_0_2_EFS_BYTE_11_Pos 24                                                    /*!< EFS_REG EFUSE_WDATA_0_2: EFS_BYTE_11 Position */
#define EFS_REG_EFUSE_WDATA_0_2_EFS_BYTE_11_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_2_EFS_BYTE_11_Pos)/*!< EFS_REG EFUSE_WDATA_0_2: EFS_BYTE_11 Mask */

/* ---------------------------  EFS_REG_EFUSE_WDATA_0_3  -------------------------- */
#define EFS_REG_EFUSE_WDATA_0_3_EFS_BYTE_12_Pos 0                                                     /*!< EFS_REG EFUSE_WDATA_0_3: EFS_BYTE_12 Position */
#define EFS_REG_EFUSE_WDATA_0_3_EFS_BYTE_12_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_3_EFS_BYTE_12_Pos)/*!< EFS_REG EFUSE_WDATA_0_3: EFS_BYTE_12 Mask */
#define EFS_REG_EFUSE_WDATA_0_3_EFS_BYTE_13_Pos 8                                                     /*!< EFS_REG EFUSE_WDATA_0_3: EFS_BYTE_13 Position */
#define EFS_REG_EFUSE_WDATA_0_3_EFS_BYTE_13_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_3_EFS_BYTE_13_Pos)/*!< EFS_REG EFUSE_WDATA_0_3: EFS_BYTE_13 Mask */
#define EFS_REG_EFUSE_WDATA_0_3_EFS_BYTE_14_Pos 16                                                    /*!< EFS_REG EFUSE_WDATA_0_3: EFS_BYTE_14 Position */
#define EFS_REG_EFUSE_WDATA_0_3_EFS_BYTE_14_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_3_EFS_BYTE_14_Pos)/*!< EFS_REG EFUSE_WDATA_0_3: EFS_BYTE_14 Mask */
#define EFS_REG_EFUSE_WDATA_0_3_EFS_BYTE_15_Pos 24                                                    /*!< EFS_REG EFUSE_WDATA_0_3: EFS_BYTE_15 Position */
#define EFS_REG_EFUSE_WDATA_0_3_EFS_BYTE_15_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_3_EFS_BYTE_15_Pos)/*!< EFS_REG EFUSE_WDATA_0_3: EFS_BYTE_15 Mask */

/* ---------------------------  EFS_REG_EFUSE_WDATA_0_4  -------------------------- */
#define EFS_REG_EFUSE_WDATA_0_4_EFS_BYTE_16_Pos 0                                                     /*!< EFS_REG EFUSE_WDATA_0_4: EFS_BYTE_16 Position */
#define EFS_REG_EFUSE_WDATA_0_4_EFS_BYTE_16_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_4_EFS_BYTE_16_Pos)/*!< EFS_REG EFUSE_WDATA_0_4: EFS_BYTE_16 Mask */
#define EFS_REG_EFUSE_WDATA_0_4_EFS_BYTE_17_Pos 8                                                     /*!< EFS_REG EFUSE_WDATA_0_4: EFS_BYTE_17 Position */
#define EFS_REG_EFUSE_WDATA_0_4_EFS_BYTE_17_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_4_EFS_BYTE_17_Pos)/*!< EFS_REG EFUSE_WDATA_0_4: EFS_BYTE_17 Mask */
#define EFS_REG_EFUSE_WDATA_0_4_EFS_BYTE_18_Pos 16                                                    /*!< EFS_REG EFUSE_WDATA_0_4: EFS_BYTE_18 Position */
#define EFS_REG_EFUSE_WDATA_0_4_EFS_BYTE_18_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_4_EFS_BYTE_18_Pos)/*!< EFS_REG EFUSE_WDATA_0_4: EFS_BYTE_18 Mask */
#define EFS_REG_EFUSE_WDATA_0_4_EFS_BYTE_19_Pos 24                                                    /*!< EFS_REG EFUSE_WDATA_0_4: EFS_BYTE_19 Position */
#define EFS_REG_EFUSE_WDATA_0_4_EFS_BYTE_19_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_4_EFS_BYTE_19_Pos)/*!< EFS_REG EFUSE_WDATA_0_4: EFS_BYTE_19 Mask */

/* ---------------------------  EFS_REG_EFUSE_WDATA_0_5  -------------------------- */
#define EFS_REG_EFUSE_WDATA_0_5_EFS_BYTE_20_Pos 0                                                     /*!< EFS_REG EFUSE_WDATA_0_5: EFS_BYTE_20 Position */
#define EFS_REG_EFUSE_WDATA_0_5_EFS_BYTE_20_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_5_EFS_BYTE_20_Pos)/*!< EFS_REG EFUSE_WDATA_0_5: EFS_BYTE_20 Mask */
#define EFS_REG_EFUSE_WDATA_0_5_EFS_BYTE_21_Pos 8                                                     /*!< EFS_REG EFUSE_WDATA_0_5: EFS_BYTE_21 Position */
#define EFS_REG_EFUSE_WDATA_0_5_EFS_BYTE_21_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_5_EFS_BYTE_21_Pos)/*!< EFS_REG EFUSE_WDATA_0_5: EFS_BYTE_21 Mask */
#define EFS_REG_EFUSE_WDATA_0_5_EFS_BYTE_22_Pos 16                                                    /*!< EFS_REG EFUSE_WDATA_0_5: EFS_BYTE_22 Position */
#define EFS_REG_EFUSE_WDATA_0_5_EFS_BYTE_22_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_5_EFS_BYTE_22_Pos)/*!< EFS_REG EFUSE_WDATA_0_5: EFS_BYTE_22 Mask */
#define EFS_REG_EFUSE_WDATA_0_5_EFS_BYTE_23_Pos 24                                                    /*!< EFS_REG EFUSE_WDATA_0_5: EFS_BYTE_23 Position */
#define EFS_REG_EFUSE_WDATA_0_5_EFS_BYTE_23_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_5_EFS_BYTE_23_Pos)/*!< EFS_REG EFUSE_WDATA_0_5: EFS_BYTE_23 Mask */

/* ---------------------------  EFS_REG_EFUSE_WDATA_0_6  -------------------------- */
#define EFS_REG_EFUSE_WDATA_0_6_EFS_BYTE_24_Pos 0                                                     /*!< EFS_REG EFUSE_WDATA_0_6: EFS_BYTE_24 Position */
#define EFS_REG_EFUSE_WDATA_0_6_EFS_BYTE_24_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_6_EFS_BYTE_24_Pos)/*!< EFS_REG EFUSE_WDATA_0_6: EFS_BYTE_24 Mask */
#define EFS_REG_EFUSE_WDATA_0_6_EFS_BYTE_25_Pos 8                                                     /*!< EFS_REG EFUSE_WDATA_0_6: EFS_BYTE_25 Position */
#define EFS_REG_EFUSE_WDATA_0_6_EFS_BYTE_25_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_6_EFS_BYTE_25_Pos)/*!< EFS_REG EFUSE_WDATA_0_6: EFS_BYTE_25 Mask */
#define EFS_REG_EFUSE_WDATA_0_6_EFS_BYTE_26_Pos 16                                                    /*!< EFS_REG EFUSE_WDATA_0_6: EFS_BYTE_26 Position */
#define EFS_REG_EFUSE_WDATA_0_6_EFS_BYTE_26_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_6_EFS_BYTE_26_Pos)/*!< EFS_REG EFUSE_WDATA_0_6: EFS_BYTE_26 Mask */
#define EFS_REG_EFUSE_WDATA_0_6_EFS_BYTE_27_Pos 24                                                    /*!< EFS_REG EFUSE_WDATA_0_6: EFS_BYTE_27 Position */
#define EFS_REG_EFUSE_WDATA_0_6_EFS_BYTE_27_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_6_EFS_BYTE_27_Pos)/*!< EFS_REG EFUSE_WDATA_0_6: EFS_BYTE_27 Mask */

/* ---------------------------  EFS_REG_EFUSE_WDATA_0_7  -------------------------- */
#define EFS_REG_EFUSE_WDATA_0_7_EFS_BYTE_28_Pos 0                                                     /*!< EFS_REG EFUSE_WDATA_0_7: EFS_BYTE_28 Position */
#define EFS_REG_EFUSE_WDATA_0_7_EFS_BYTE_28_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_7_EFS_BYTE_28_Pos)/*!< EFS_REG EFUSE_WDATA_0_7: EFS_BYTE_28 Mask */
#define EFS_REG_EFUSE_WDATA_0_7_EFS_BYTE_29_Pos 8                                                     /*!< EFS_REG EFUSE_WDATA_0_7: EFS_BYTE_29 Position */
#define EFS_REG_EFUSE_WDATA_0_7_EFS_BYTE_29_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_7_EFS_BYTE_29_Pos)/*!< EFS_REG EFUSE_WDATA_0_7: EFS_BYTE_29 Mask */
#define EFS_REG_EFUSE_WDATA_0_7_EFS_BYTE_30_Pos 16                                                    /*!< EFS_REG EFUSE_WDATA_0_7: EFS_BYTE_30 Position */
#define EFS_REG_EFUSE_WDATA_0_7_EFS_BYTE_30_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_7_EFS_BYTE_30_Pos)/*!< EFS_REG EFUSE_WDATA_0_7: EFS_BYTE_30 Mask */
#define EFS_REG_EFUSE_WDATA_0_7_EFS_BYTE_31_Pos 24                                                    /*!< EFS_REG EFUSE_WDATA_0_7: EFS_BYTE_31 Position */
#define EFS_REG_EFUSE_WDATA_0_7_EFS_BYTE_31_Msk (0x000000ffUL << EFS_REG_EFUSE_WDATA_0_7_EFS_BYTE_31_Pos)/*!< EFS_REG EFUSE_WDATA_0_7: EFS_BYTE_31 Mask */


/* ================================================================================ */
/* ================     struct 'CSR_LL_REG_A2' Position & Mask     ================ */
/* ================================================================================ */


/* -------------------------  CSR_LL_REG_A2_LL_ENGINE_EN  ------------------------- */
#define CSR_LL_REG_A2_LL_ENGINE_EN_ANCHOR_EN_Pos 0                                                    /*!< CSR_LL_REG_A2 LL_ENGINE_EN: ANCHOR_EN Position */
#define CSR_LL_REG_A2_LL_ENGINE_EN_ANCHOR_EN_Msk (0x01UL << CSR_LL_REG_A2_LL_ENGINE_EN_ANCHOR_EN_Pos) /*!< CSR_LL_REG_A2 LL_ENGINE_EN: ANCHOR_EN Mask */
#define CSR_LL_REG_A2_LL_ENGINE_EN_AIR_PROTOCOL_EN_Pos 1                                              /*!< CSR_LL_REG_A2 LL_ENGINE_EN: AIR_PROTOCOL_EN Position */
#define CSR_LL_REG_A2_LL_ENGINE_EN_AIR_PROTOCOL_EN_Msk (0x01UL << CSR_LL_REG_A2_LL_ENGINE_EN_AIR_PROTOCOL_EN_Pos)/*!< CSR_LL_REG_A2 LL_ENGINE_EN: AIR_PROTOCOL_EN Mask */
#define CSR_LL_REG_A2_LL_ENGINE_EN_AIR_EVENT_MANAGER_EN_Pos 2                                         /*!< CSR_LL_REG_A2 LL_ENGINE_EN: AIR_EVENT_MANAGER_EN Position */
#define CSR_LL_REG_A2_LL_ENGINE_EN_AIR_EVENT_MANAGER_EN_Msk (0x01UL << CSR_LL_REG_A2_LL_ENGINE_EN_AIR_EVENT_MANAGER_EN_Pos)/*!< CSR_LL_REG_A2 LL_ENGINE_EN: AIR_EVENT_MANAGER_EN Mask */
#define CSR_LL_REG_A2_LL_ENGINE_EN_ACK_MANAGER_EN_Pos 3                                               /*!< CSR_LL_REG_A2 LL_ENGINE_EN: ACK_MANAGER_EN Position */
#define CSR_LL_REG_A2_LL_ENGINE_EN_ACK_MANAGER_EN_Msk (0x01UL << CSR_LL_REG_A2_LL_ENGINE_EN_ACK_MANAGER_EN_Pos)/*!< CSR_LL_REG_A2 LL_ENGINE_EN: ACK_MANAGER_EN Mask */
#define CSR_LL_REG_A2_LL_ENGINE_EN_PDU_ASSEMBLE_EN_Pos 4                                              /*!< CSR_LL_REG_A2 LL_ENGINE_EN: PDU_ASSEMBLE_EN Position */
#define CSR_LL_REG_A2_LL_ENGINE_EN_PDU_ASSEMBLE_EN_Msk (0x01UL << CSR_LL_REG_A2_LL_ENGINE_EN_PDU_ASSEMBLE_EN_Pos)/*!< CSR_LL_REG_A2 LL_ENGINE_EN: PDU_ASSEMBLE_EN Mask */
#define CSR_LL_REG_A2_LL_ENGINE_EN_PDU_DISASSEMBLE_EN_Pos 5                                           /*!< CSR_LL_REG_A2 LL_ENGINE_EN: PDU_DISASSEMBLE_EN Position */
#define CSR_LL_REG_A2_LL_ENGINE_EN_PDU_DISASSEMBLE_EN_Msk (0x01UL << CSR_LL_REG_A2_LL_ENGINE_EN_PDU_DISASSEMBLE_EN_Pos)/*!< CSR_LL_REG_A2 LL_ENGINE_EN: PDU_DISASSEMBLE_EN Mask */
#define CSR_LL_REG_A2_LL_ENGINE_EN_TX_RING_RD_MANAGER_EN_Pos 6                                        /*!< CSR_LL_REG_A2 LL_ENGINE_EN: TX_RING_RD_MANAGER_EN Position */
#define CSR_LL_REG_A2_LL_ENGINE_EN_TX_RING_RD_MANAGER_EN_Msk (0x01UL << CSR_LL_REG_A2_LL_ENGINE_EN_TX_RING_RD_MANAGER_EN_Pos)/*!< CSR_LL_REG_A2 LL_ENGINE_EN: TX_RING_RD_MANAGER_EN Mask */
#define CSR_LL_REG_A2_LL_ENGINE_EN_RX_RING_WR_MANAGER_EN_Pos 7                                        /*!< CSR_LL_REG_A2 LL_ENGINE_EN: RX_RING_WR_MANAGER_EN Position */
#define CSR_LL_REG_A2_LL_ENGINE_EN_RX_RING_WR_MANAGER_EN_Msk (0x01UL << CSR_LL_REG_A2_LL_ENGINE_EN_RX_RING_WR_MANAGER_EN_Pos)/*!< CSR_LL_REG_A2 LL_ENGINE_EN: RX_RING_WR_MANAGER_EN Mask */
#define CSR_LL_REG_A2_LL_ENGINE_EN_LL_DEVFILTER_ENABLE_Pos 8                                          /*!< CSR_LL_REG_A2 LL_ENGINE_EN: LL_DEVFILTER_ENABLE Position */
#define CSR_LL_REG_A2_LL_ENGINE_EN_LL_DEVFILTER_ENABLE_Msk (0x01UL << CSR_LL_REG_A2_LL_ENGINE_EN_LL_DEVFILTER_ENABLE_Pos)/*!< CSR_LL_REG_A2 LL_ENGINE_EN: LL_DEVFILTER_ENABLE Mask */

/* -------------------------  CSR_LL_REG_A2_LL_STATE_ROLE  ------------------------ */
#define CSR_LL_REG_A2_LL_STATE_ROLE_LL_ROLE_Pos 0                                                     /*!< CSR_LL_REG_A2 LL_STATE_ROLE: LL_ROLE Position */
#define CSR_LL_REG_A2_LL_STATE_ROLE_LL_ROLE_Msk (0x0fUL << CSR_LL_REG_A2_LL_STATE_ROLE_LL_ROLE_Pos)   /*!< CSR_LL_REG_A2 LL_STATE_ROLE: LL_ROLE Mask */
#define CSR_LL_REG_A2_LL_STATE_ROLE_LL_STATE_Pos 4                                                    /*!< CSR_LL_REG_A2 LL_STATE_ROLE: LL_STATE Position */
#define CSR_LL_REG_A2_LL_STATE_ROLE_LL_STATE_Msk (0x0fUL << CSR_LL_REG_A2_LL_STATE_ROLE_LL_STATE_Pos) /*!< CSR_LL_REG_A2 LL_STATE_ROLE: LL_STATE Mask */

/* ----------------------------  CSR_LL_REG_A2_LL_SET0  --------------------------- */
#define CSR_LL_REG_A2_LL_SET0_LL_CH_TYPE_Pos  0                                                       /*!< CSR_LL_REG_A2 LL_SET0: LL_CH_TYPE Position */
#define CSR_LL_REG_A2_LL_SET0_LL_CH_TYPE_Msk  (0x01UL << CSR_LL_REG_A2_LL_SET0_LL_CH_TYPE_Pos)        /*!< CSR_LL_REG_A2 LL_SET0: LL_CH_TYPE Mask  */
#define CSR_LL_REG_A2_LL_SET0_LL_CONN_ID_Pos  4                                                       /*!< CSR_LL_REG_A2 LL_SET0: LL_CONN_ID Position */
#define CSR_LL_REG_A2_LL_SET0_LL_CONN_ID_Msk  (0x0fUL << CSR_LL_REG_A2_LL_SET0_LL_CONN_ID_Pos)        /*!< CSR_LL_REG_A2 LL_SET0: LL_CONN_ID Mask  */
#define CSR_LL_REG_A2_LL_SET0_LL_CH_Pos       8                                                       /*!< CSR_LL_REG_A2 LL_SET0: LL_CH Position   */
#define CSR_LL_REG_A2_LL_SET0_LL_CH_Msk       (0x3fUL << CSR_LL_REG_A2_LL_SET0_LL_CH_Pos)             /*!< CSR_LL_REG_A2 LL_SET0: LL_CH Mask       */

/* ------------------------  CSR_LL_REG_A2_LL_LONG_PDU_EN  ------------------------ */
#define CSR_LL_REG_A2_LL_LONG_PDU_EN_LONG_PDU_EN_Pos 0                                                /*!< CSR_LL_REG_A2 LL_LONG_PDU_EN: LONG_PDU_EN Position */
#define CSR_LL_REG_A2_LL_LONG_PDU_EN_LONG_PDU_EN_Msk (0x01UL << CSR_LL_REG_A2_LL_LONG_PDU_EN_LONG_PDU_EN_Pos)/*!< CSR_LL_REG_A2 LL_LONG_PDU_EN: LONG_PDU_EN Mask */

/* ----------------------  CSR_LL_REG_A2_LL_TX_ADDR_VALUE_0  ---------------------- */
#define CSR_LL_REG_A2_LL_TX_ADDR_VALUE_0_TX_ADDR_VALUE_31_0_Pos 0                                     /*!< CSR_LL_REG_A2 LL_TX_ADDR_VALUE_0: TX_ADDR_VALUE_31_0 Position */
#define CSR_LL_REG_A2_LL_TX_ADDR_VALUE_0_TX_ADDR_VALUE_31_0_Msk (0xffffffffUL << CSR_LL_REG_A2_LL_TX_ADDR_VALUE_0_TX_ADDR_VALUE_31_0_Pos)/*!< CSR_LL_REG_A2 LL_TX_ADDR_VALUE_0: TX_ADDR_VALUE_31_0 Mask */

/* ----------------------  CSR_LL_REG_A2_LL_TX_ADDR_VALUE_1  ---------------------- */
#define CSR_LL_REG_A2_LL_TX_ADDR_VALUE_1_TX_ADDR_VALUE_47_32_Pos 0                                    /*!< CSR_LL_REG_A2 LL_TX_ADDR_VALUE_1: TX_ADDR_VALUE_47_32 Position */
#define CSR_LL_REG_A2_LL_TX_ADDR_VALUE_1_TX_ADDR_VALUE_47_32_Msk (0x0000ffffUL << CSR_LL_REG_A2_LL_TX_ADDR_VALUE_1_TX_ADDR_VALUE_47_32_Pos)/*!< CSR_LL_REG_A2 LL_TX_ADDR_VALUE_1: TX_ADDR_VALUE_47_32 Mask */
#define CSR_LL_REG_A2_LL_TX_ADDR_VALUE_1_TX_ADDR_TYPE_Pos 16                                          /*!< CSR_LL_REG_A2 LL_TX_ADDR_VALUE_1: TX_ADDR_TYPE Position */
#define CSR_LL_REG_A2_LL_TX_ADDR_VALUE_1_TX_ADDR_TYPE_Msk (0x01UL << CSR_LL_REG_A2_LL_TX_ADDR_VALUE_1_TX_ADDR_TYPE_Pos)/*!< CSR_LL_REG_A2 LL_TX_ADDR_VALUE_1: TX_ADDR_TYPE Mask */

/* -------------------------  CSR_LL_REG_A2_LL_PHY_INFO0  ------------------------- */
#define CSR_LL_REG_A2_LL_PHY_INFO0_PHY_ACC_ADDR_Pos 0                                                 /*!< CSR_LL_REG_A2 LL_PHY_INFO0: PHY_ACC_ADDR Position */
#define CSR_LL_REG_A2_LL_PHY_INFO0_PHY_ACC_ADDR_Msk (0xffffffffUL << CSR_LL_REG_A2_LL_PHY_INFO0_PHY_ACC_ADDR_Pos)/*!< CSR_LL_REG_A2 LL_PHY_INFO0: PHY_ACC_ADDR Mask */

/* -------------------------  CSR_LL_REG_A2_LL_PHY_INFO1  ------------------------- */
#define CSR_LL_REG_A2_LL_PHY_INFO1_PHY_CRC_INIT_Pos 0                                                 /*!< CSR_LL_REG_A2 LL_PHY_INFO1: PHY_CRC_INIT Position */
#define CSR_LL_REG_A2_LL_PHY_INFO1_PHY_CRC_INIT_Msk (0x00ffffffUL << CSR_LL_REG_A2_LL_PHY_INFO1_PHY_CRC_INIT_Pos)/*!< CSR_LL_REG_A2 LL_PHY_INFO1: PHY_CRC_INIT Mask */
#define CSR_LL_REG_A2_LL_PHY_INFO1_PHY_DWLFSR_SEED_Pos 24                                             /*!< CSR_LL_REG_A2 LL_PHY_INFO1: PHY_DWLFSR_SEED Position */
#define CSR_LL_REG_A2_LL_PHY_INFO1_PHY_DWLFSR_SEED_Msk (0x7fUL << CSR_LL_REG_A2_LL_PHY_INFO1_PHY_DWLFSR_SEED_Pos)/*!< CSR_LL_REG_A2 LL_PHY_INFO1: PHY_DWLFSR_SEED Mask */

/* -------------------------  CSR_LL_REG_A2_LL_PHY_INFO2  ------------------------- */
#define CSR_LL_REG_A2_LL_PHY_INFO2_MANUAL_RF_CH_SW_EN_Pos 0                                           /*!< CSR_LL_REG_A2 LL_PHY_INFO2: MANUAL_RF_CH_SW_EN Position */
#define CSR_LL_REG_A2_LL_PHY_INFO2_MANUAL_RF_CH_SW_EN_Msk (0x01UL << CSR_LL_REG_A2_LL_PHY_INFO2_MANUAL_RF_CH_SW_EN_Pos)/*!< CSR_LL_REG_A2 LL_PHY_INFO2: MANUAL_RF_CH_SW_EN Mask */
#define CSR_LL_REG_A2_LL_PHY_INFO2_MANUAL_RF_CH_SW_Pos 4                                              /*!< CSR_LL_REG_A2 LL_PHY_INFO2: MANUAL_RF_CH_SW Position */
#define CSR_LL_REG_A2_LL_PHY_INFO2_MANUAL_RF_CH_SW_Msk (0x01UL << CSR_LL_REG_A2_LL_PHY_INFO2_MANUAL_RF_CH_SW_Pos)/*!< CSR_LL_REG_A2 LL_PHY_INFO2: MANUAL_RF_CH_SW Mask */

/* ------------------------  CSR_LL_REG_A2_LL_TX_PHY_INFO  ------------------------ */
#define CSR_LL_REG_A2_LL_TX_PHY_INFO_PHY_TX_PWR_Pos 0                                                 /*!< CSR_LL_REG_A2 LL_TX_PHY_INFO: PHY_TX_PWR Position */
#define CSR_LL_REG_A2_LL_TX_PHY_INFO_PHY_TX_PWR_Msk (0x000000ffUL << CSR_LL_REG_A2_LL_TX_PHY_INFO_PHY_TX_PWR_Pos)/*!< CSR_LL_REG_A2 LL_TX_PHY_INFO: PHY_TX_PWR Mask */

/* ------------------------  CSR_LL_REG_A2_LL_RX_RSSI_INFO  ----------------------- */
#define CSR_LL_REG_A2_LL_RX_RSSI_INFO_RX_RSSI_1ST_Pos 0                                               /*!< CSR_LL_REG_A2 LL_RX_RSSI_INFO: RX_RSSI_1ST Position */
#define CSR_LL_REG_A2_LL_RX_RSSI_INFO_RX_RSSI_1ST_Msk (0x000000ffUL << CSR_LL_REG_A2_LL_RX_RSSI_INFO_RX_RSSI_1ST_Pos)/*!< CSR_LL_REG_A2 LL_RX_RSSI_INFO: RX_RSSI_1ST Mask */

/* ---------------------------  CSR_LL_REG_A2_RF_PHY_EN  -------------------------- */
#define CSR_LL_REG_A2_RF_PHY_EN_PHY_RX_ENA_Pos 0                                                      /*!< CSR_LL_REG_A2 RF_PHY_EN: PHY_RX_ENA Position */
#define CSR_LL_REG_A2_RF_PHY_EN_PHY_RX_ENA_Msk (0x01UL << CSR_LL_REG_A2_RF_PHY_EN_PHY_RX_ENA_Pos)     /*!< CSR_LL_REG_A2 RF_PHY_EN: PHY_RX_ENA Mask */
#define CSR_LL_REG_A2_RF_PHY_EN_RF_RX_ENA_Pos 4                                                       /*!< CSR_LL_REG_A2 RF_PHY_EN: RF_RX_ENA Position */
#define CSR_LL_REG_A2_RF_PHY_EN_RF_RX_ENA_Msk (0x01UL << CSR_LL_REG_A2_RF_PHY_EN_RF_RX_ENA_Pos)       /*!< CSR_LL_REG_A2 RF_PHY_EN: RF_RX_ENA Mask */

/* --------------------------  CSR_LL_REG_A2_TXQ_PHY_EN  -------------------------- */
#define CSR_LL_REG_A2_TXQ_PHY_EN_PHY_TX_ENA_Pos 0                                                     /*!< CSR_LL_REG_A2 TXQ_PHY_EN: PHY_TX_ENA Position */
#define CSR_LL_REG_A2_TXQ_PHY_EN_PHY_TX_ENA_Msk (0x01UL << CSR_LL_REG_A2_TXQ_PHY_EN_PHY_TX_ENA_Pos)   /*!< CSR_LL_REG_A2 TXQ_PHY_EN: PHY_TX_ENA Mask */
#define CSR_LL_REG_A2_TXQ_PHY_EN_RF_TX_ENA_Pos 4                                                      /*!< CSR_LL_REG_A2 TXQ_PHY_EN: RF_TX_ENA Position */
#define CSR_LL_REG_A2_TXQ_PHY_EN_RF_TX_ENA_Msk (0x01UL << CSR_LL_REG_A2_TXQ_PHY_EN_RF_TX_ENA_Pos)     /*!< CSR_LL_REG_A2 TXQ_PHY_EN: RF_TX_ENA Mask */

/* ----------------------  CSR_LL_REG_A2_RF_PHY_AUTO_DISA_EN  --------------------- */
#define CSR_LL_REG_A2_RF_PHY_AUTO_DISA_EN_RF_PHY_AUTO_DISA_Pos 0                                      /*!< CSR_LL_REG_A2 RF_PHY_AUTO_DISA_EN: RF_PHY_AUTO_DISA Position */
#define CSR_LL_REG_A2_RF_PHY_AUTO_DISA_EN_RF_PHY_AUTO_DISA_Msk (0x01UL << CSR_LL_REG_A2_RF_PHY_AUTO_DISA_EN_RF_PHY_AUTO_DISA_Pos)/*!< CSR_LL_REG_A2 RF_PHY_AUTO_DISA_EN: RF_PHY_AUTO_DISA Mask */

/* -----------------------  CSR_LL_REG_A2_OTHER_MANUAL_SET  ----------------------- */
#define CSR_LL_REG_A2_OTHER_MANUAL_SET_MANUAL_TX_RING_ACKED_NOTIFY_Pos 0                              /*!< CSR_LL_REG_A2 OTHER_MANUAL_SET: MANUAL_TX_RING_ACKED_NOTIFY
                                                         Position                                                                                  */
#define CSR_LL_REG_A2_OTHER_MANUAL_SET_MANUAL_TX_RING_ACKED_NOTIFY_Msk (0x01UL << CSR_LL_REG_A2_OTHER_MANUAL_SET_MANUAL_TX_RING_ACKED_NOTIFY_Pos)/*!< CSR_LL_REG_A2 OTHER_MANUAL_SET: MANUAL_TX_RING_ACKED_NOTIFY
                                                         Mask                                                                                      */

/* ---------------------  CSR_LL_REG_A2_LL_PRESCALER_USTIMER  --------------------- */
#define CSR_LL_REG_A2_LL_PRESCALER_USTIMER_PRESCALER_LLTIMER_Pos 0                                    /*!< CSR_LL_REG_A2 LL_PRESCALER_USTIMER: PRESCALER_LLTIMER Position */
#define CSR_LL_REG_A2_LL_PRESCALER_USTIMER_PRESCALER_LLTIMER_Msk (0x000001ffUL << CSR_LL_REG_A2_LL_PRESCALER_USTIMER_PRESCALER_LLTIMER_Pos)/*!< CSR_LL_REG_A2 LL_PRESCALER_USTIMER: PRESCALER_LLTIMER Mask */

/* --------------------------  CSR_LL_REG_A2_LL_DBG_INFO  ------------------------- */
#define CSR_LL_REG_A2_LL_DBG_INFO_TX_PDU_LEN_Pos 0                                                    /*!< CSR_LL_REG_A2 LL_DBG_INFO: TX_PDU_LEN Position */
#define CSR_LL_REG_A2_LL_DBG_INFO_TX_PDU_LEN_Msk (0x000000ffUL << CSR_LL_REG_A2_LL_DBG_INFO_TX_PDU_LEN_Pos)/*!< CSR_LL_REG_A2 LL_DBG_INFO: TX_PDU_LEN Mask */
#define CSR_LL_REG_A2_LL_DBG_INFO_RX_PAYLOAD_LEN_Pos 8                                                /*!< CSR_LL_REG_A2 LL_DBG_INFO: RX_PAYLOAD_LEN Position */
#define CSR_LL_REG_A2_LL_DBG_INFO_RX_PAYLOAD_LEN_Msk (0x000000ffUL << CSR_LL_REG_A2_LL_DBG_INFO_RX_PAYLOAD_LEN_Pos)/*!< CSR_LL_REG_A2 LL_DBG_INFO: RX_PAYLOAD_LEN Mask */


/* ================================================================================ */
/* ================       struct 'LL_TRX_REG' Position & Mask      ================ */
/* ================================================================================ */


/* ------------------------  LL_TRX_REG_LL_RX_PDU_RAW_MODE  ----------------------- */
#define LL_TRX_REG_LL_RX_PDU_RAW_MODE_LL_RX_RAW_MODE_Pos 0                                            /*!< LL_TRX_REG LL_RX_PDU_RAW_MODE: LL_RX_RAW_MODE Position */
#define LL_TRX_REG_LL_RX_PDU_RAW_MODE_LL_RX_RAW_MODE_Msk (0x01UL << LL_TRX_REG_LL_RX_PDU_RAW_MODE_LL_RX_RAW_MODE_Pos)/*!< LL_TRX_REG LL_RX_PDU_RAW_MODE: LL_RX_RAW_MODE Mask */
#define LL_TRX_REG_LL_RX_PDU_RAW_MODE_LL_RX_RAW_MODE_PDU_LENG_Pos 8                                   /*!< LL_TRX_REG LL_RX_PDU_RAW_MODE: LL_RX_RAW_MODE_PDU_LENG Position */
#define LL_TRX_REG_LL_RX_PDU_RAW_MODE_LL_RX_RAW_MODE_PDU_LENG_Msk (0x000000ffUL << LL_TRX_REG_LL_RX_PDU_RAW_MODE_LL_RX_RAW_MODE_PDU_LENG_Pos)/*!< LL_TRX_REG LL_RX_PDU_RAW_MODE: LL_RX_RAW_MODE_PDU_LENG Mask */

/* -----------------------  LL_TRX_REG_LL_DISASSEMBLE_SET0  ----------------------- */
#define LL_TRX_REG_LL_DISASSEMBLE_SET0_LL_RX_CRC_BIT_CORRECT_EN_Pos 0                                 /*!< LL_TRX_REG LL_DISASSEMBLE_SET0: LL_RX_CRC_BIT_CORRECT_EN Position */
#define LL_TRX_REG_LL_DISASSEMBLE_SET0_LL_RX_CRC_BIT_CORRECT_EN_Msk (0x01UL << LL_TRX_REG_LL_DISASSEMBLE_SET0_LL_RX_CRC_BIT_CORRECT_EN_Pos)/*!< LL_TRX_REG LL_DISASSEMBLE_SET0: LL_RX_CRC_BIT_CORRECT_EN Mask */

/* ----------------------  LL_TRX_REG_LL_DISASSEMBLE_POLICY0  --------------------- */
#define LL_TRX_REG_LL_DISASSEMBLE_POLICY0_LL_PDU_DISA_FILTER_POLICY_ADV_Pos 0                         /*!< LL_TRX_REG LL_DISASSEMBLE_POLICY0: LL_PDU_DISA_FILTER_POLICY_ADV
                                                         Position                                                                                  */
#define LL_TRX_REG_LL_DISASSEMBLE_POLICY0_LL_PDU_DISA_FILTER_POLICY_ADV_Msk (0x00003fffUL << LL_TRX_REG_LL_DISASSEMBLE_POLICY0_LL_PDU_DISA_FILTER_POLICY_ADV_Pos)/*!< LL_TRX_REG LL_DISASSEMBLE_POLICY0: LL_PDU_DISA_FILTER_POLICY_ADV
                                                         Mask                                                                                      */
#define LL_TRX_REG_LL_DISASSEMBLE_POLICY0_LL_PDU_DISA_FILTER_POLICY_SCAN_Pos 16                       /*!< LL_TRX_REG LL_DISASSEMBLE_POLICY0: LL_PDU_DISA_FILTER_POLICY_SCAN
                                                         Position                                                                                  */
#define LL_TRX_REG_LL_DISASSEMBLE_POLICY0_LL_PDU_DISA_FILTER_POLICY_SCAN_Msk (0x00003fffUL << LL_TRX_REG_LL_DISASSEMBLE_POLICY0_LL_PDU_DISA_FILTER_POLICY_SCAN_Pos)/*!< LL_TRX_REG LL_DISASSEMBLE_POLICY0: LL_PDU_DISA_FILTER_POLICY_SCAN
                                                         Mask                                                                                      */

/* ----------------------  LL_TRX_REG_LL_DISASSEMBLE_POLICY1  --------------------- */
#define LL_TRX_REG_LL_DISASSEMBLE_POLICY1_LL_PDU_DISA_FILTER_POLICY_INIT_Pos 0                        /*!< LL_TRX_REG LL_DISASSEMBLE_POLICY1: LL_PDU_DISA_FILTER_POLICY_INIT
                                                         Position                                                                                  */
#define LL_TRX_REG_LL_DISASSEMBLE_POLICY1_LL_PDU_DISA_FILTER_POLICY_INIT_Msk (0x00003fffUL << LL_TRX_REG_LL_DISASSEMBLE_POLICY1_LL_PDU_DISA_FILTER_POLICY_INIT_Pos)/*!< LL_TRX_REG LL_DISASSEMBLE_POLICY1: LL_PDU_DISA_FILTER_POLICY_INIT
                                                         Mask                                                                                      */

/* -----------------------  LL_TRX_REG_LL_RX_INTERPRET_SET0  ---------------------- */
#define LL_TRX_REG_LL_RX_INTERPRET_SET0_CFG_INTERPRET_HDR_Pos 0                                       /*!< LL_TRX_REG LL_RX_INTERPRET_SET0: CFG_INTERPRET_HDR Position */
#define LL_TRX_REG_LL_RX_INTERPRET_SET0_CFG_INTERPRET_HDR_Msk (0x01UL << LL_TRX_REG_LL_RX_INTERPRET_SET0_CFG_INTERPRET_HDR_Pos)/*!< LL_TRX_REG LL_RX_INTERPRET_SET0: CFG_INTERPRET_HDR Mask */
#define LL_TRX_REG_LL_RX_INTERPRET_SET0_CFG_INTERPRET_PAYLOAD_Pos 1                                   /*!< LL_TRX_REG LL_RX_INTERPRET_SET0: CFG_INTERPRET_PAYLOAD Position */
#define LL_TRX_REG_LL_RX_INTERPRET_SET0_CFG_INTERPRET_PAYLOAD_Msk (0x01UL << LL_TRX_REG_LL_RX_INTERPRET_SET0_CFG_INTERPRET_PAYLOAD_Pos)/*!< LL_TRX_REG LL_RX_INTERPRET_SET0: CFG_INTERPRET_PAYLOAD Mask */
#define LL_TRX_REG_LL_RX_INTERPRET_SET0_CFG_INTERPRET_LOG_Pos 2                                       /*!< LL_TRX_REG LL_RX_INTERPRET_SET0: CFG_INTERPRET_LOG Position */
#define LL_TRX_REG_LL_RX_INTERPRET_SET0_CFG_INTERPRET_LOG_Msk (0x01UL << LL_TRX_REG_LL_RX_INTERPRET_SET0_CFG_INTERPRET_LOG_Pos)/*!< LL_TRX_REG LL_RX_INTERPRET_SET0: CFG_INTERPRET_LOG Mask */
#define LL_TRX_REG_LL_RX_INTERPRET_SET0_CFG_INTERPRET_NOTIFY_Pos 3                                    /*!< LL_TRX_REG LL_RX_INTERPRET_SET0: CFG_INTERPRET_NOTIFY Position */
#define LL_TRX_REG_LL_RX_INTERPRET_SET0_CFG_INTERPRET_NOTIFY_Msk (0x01UL << LL_TRX_REG_LL_RX_INTERPRET_SET0_CFG_INTERPRET_NOTIFY_Pos)/*!< LL_TRX_REG LL_RX_INTERPRET_SET0: CFG_INTERPRET_NOTIFY Mask */

/* ------------------------  LL_TRX_REG_LL_RX_PDU_COMPOSE  ------------------------ */
#define LL_TRX_REG_LL_RX_PDU_COMPOSE_LL_PDU_TYPE_COMPOSE_EN_Pos 0                                     /*!< LL_TRX_REG LL_RX_PDU_COMPOSE: LL_PDU_TYPE_COMPOSE_EN Position */
#define LL_TRX_REG_LL_RX_PDU_COMPOSE_LL_PDU_TYPE_COMPOSE_EN_Msk (0x01UL << LL_TRX_REG_LL_RX_PDU_COMPOSE_LL_PDU_TYPE_COMPOSE_EN_Pos)/*!< LL_TRX_REG LL_RX_PDU_COMPOSE: LL_PDU_TYPE_COMPOSE_EN Mask */
#define LL_TRX_REG_LL_RX_PDU_COMPOSE_LL_PDU_TYPE_CONSTANT_EN_Pos 4                                    /*!< LL_TRX_REG LL_RX_PDU_COMPOSE: LL_PDU_TYPE_CONSTANT_EN Position */
#define LL_TRX_REG_LL_RX_PDU_COMPOSE_LL_PDU_TYPE_CONSTANT_EN_Msk (0x01UL << LL_TRX_REG_LL_RX_PDU_COMPOSE_LL_PDU_TYPE_CONSTANT_EN_Pos)/*!< LL_TRX_REG LL_RX_PDU_COMPOSE: LL_PDU_TYPE_CONSTANT_EN Mask */
#define LL_TRX_REG_LL_RX_PDU_COMPOSE_LL_PDU_TYPE_CONSTANT_VALUE_Pos 16                                /*!< LL_TRX_REG LL_RX_PDU_COMPOSE: LL_PDU_TYPE_CONSTANT_VALUE Position */
#define LL_TRX_REG_LL_RX_PDU_COMPOSE_LL_PDU_TYPE_CONSTANT_VALUE_Msk (0x00000fffUL << LL_TRX_REG_LL_RX_PDU_COMPOSE_LL_PDU_TYPE_CONSTANT_VALUE_Pos)/*!< LL_TRX_REG LL_RX_PDU_COMPOSE: LL_PDU_TYPE_CONSTANT_VALUE Mask */

/* ---------------------------  LL_TRX_REG_LL_LOG_SET0  --------------------------- */
#define LL_TRX_REG_LL_LOG_SET0_LL_RX_PDU_LOG_EN_Pos 0                                                 /*!< LL_TRX_REG LL_LOG_SET0: LL_RX_PDU_LOG_EN Position */
#define LL_TRX_REG_LL_LOG_SET0_LL_RX_PDU_LOG_EN_Msk (0x7fUL << LL_TRX_REG_LL_LOG_SET0_LL_RX_PDU_LOG_EN_Pos)/*!< LL_TRX_REG LL_LOG_SET0: LL_RX_PDU_LOG_EN Mask */

/* --------------------------  LL_TRX_REG_LL_HASH_SET_0  -------------------------- */
#define LL_TRX_REG_LL_HASH_SET_0_LL_RX_HASH_VALID_Pos 0                                               /*!< LL_TRX_REG LL_HASH_SET_0: LL_RX_HASH_VALID Position */
#define LL_TRX_REG_LL_HASH_SET_0_LL_RX_HASH_VALID_Msk (0x000000ffUL << LL_TRX_REG_LL_HASH_SET_0_LL_RX_HASH_VALID_Pos)/*!< LL_TRX_REG LL_HASH_SET_0: LL_RX_HASH_VALID Mask */

/* -------------------------  LL_TRX_REG_LL_HASH_KEY_MASK  ------------------------ */
#define LL_TRX_REG_LL_HASH_KEY_MASK_LL_RX_HASH_KEY_MASK_DAT_CH_Pos 0                                  /*!< LL_TRX_REG LL_HASH_KEY_MASK: LL_RX_HASH_KEY_MASK_DAT_CH Position */
#define LL_TRX_REG_LL_HASH_KEY_MASK_LL_RX_HASH_KEY_MASK_DAT_CH_Msk (0x000000ffUL << LL_TRX_REG_LL_HASH_KEY_MASK_LL_RX_HASH_KEY_MASK_DAT_CH_Pos)/*!< LL_TRX_REG LL_HASH_KEY_MASK: LL_RX_HASH_KEY_MASK_DAT_CH Mask */
#define LL_TRX_REG_LL_HASH_KEY_MASK_LL_RX_HASH_KEY_MASK_ADV_CH_Pos 16                                 /*!< LL_TRX_REG LL_HASH_KEY_MASK: LL_RX_HASH_KEY_MASK_ADV_CH Position */
#define LL_TRX_REG_LL_HASH_KEY_MASK_LL_RX_HASH_KEY_MASK_ADV_CH_Msk (0x000000ffUL << LL_TRX_REG_LL_HASH_KEY_MASK_LL_RX_HASH_KEY_MASK_ADV_CH_Pos)/*!< LL_TRX_REG LL_HASH_KEY_MASK: LL_RX_HASH_KEY_MASK_ADV_CH Mask */

/* ---------------------------  LL_TRX_REG_LL_HASH_KEY0  -------------------------- */
#define LL_TRX_REG_LL_HASH_KEY0_LL_RX_HASH_ENTRY0_KEY_Pos 0                                           /*!< LL_TRX_REG LL_HASH_KEY0: LL_RX_HASH_ENTRY0_KEY Position */
#define LL_TRX_REG_LL_HASH_KEY0_LL_RX_HASH_ENTRY0_KEY_Msk (0x0000ffffUL << LL_TRX_REG_LL_HASH_KEY0_LL_RX_HASH_ENTRY0_KEY_Pos)/*!< LL_TRX_REG LL_HASH_KEY0: LL_RX_HASH_ENTRY0_KEY Mask */
#define LL_TRX_REG_LL_HASH_KEY0_LL_RX_HASH_ENTRY0_ACTION_Pos 16                                       /*!< LL_TRX_REG LL_HASH_KEY0: LL_RX_HASH_ENTRY0_ACTION Position */
#define LL_TRX_REG_LL_HASH_KEY0_LL_RX_HASH_ENTRY0_ACTION_Msk (0x000000ffUL << LL_TRX_REG_LL_HASH_KEY0_LL_RX_HASH_ENTRY0_ACTION_Pos)/*!< LL_TRX_REG LL_HASH_KEY0: LL_RX_HASH_ENTRY0_ACTION Mask */

/* ---------------------------  LL_TRX_REG_LL_HASH_KEY1  -------------------------- */
#define LL_TRX_REG_LL_HASH_KEY1_LL_RX_HASH_ENTRY1_KEY_Pos 0                                           /*!< LL_TRX_REG LL_HASH_KEY1: LL_RX_HASH_ENTRY1_KEY Position */
#define LL_TRX_REG_LL_HASH_KEY1_LL_RX_HASH_ENTRY1_KEY_Msk (0x0000ffffUL << LL_TRX_REG_LL_HASH_KEY1_LL_RX_HASH_ENTRY1_KEY_Pos)/*!< LL_TRX_REG LL_HASH_KEY1: LL_RX_HASH_ENTRY1_KEY Mask */
#define LL_TRX_REG_LL_HASH_KEY1_LL_RX_HASH_ENTRY1_ACTION_Pos 16                                       /*!< LL_TRX_REG LL_HASH_KEY1: LL_RX_HASH_ENTRY1_ACTION Position */
#define LL_TRX_REG_LL_HASH_KEY1_LL_RX_HASH_ENTRY1_ACTION_Msk (0x000000ffUL << LL_TRX_REG_LL_HASH_KEY1_LL_RX_HASH_ENTRY1_ACTION_Pos)/*!< LL_TRX_REG LL_HASH_KEY1: LL_RX_HASH_ENTRY1_ACTION Mask */

/* ---------------------------  LL_TRX_REG_LL_HASH_KEY2  -------------------------- */
#define LL_TRX_REG_LL_HASH_KEY2_LL_RX_HASH_ENTRY2_KEY_Pos 0                                           /*!< LL_TRX_REG LL_HASH_KEY2: LL_RX_HASH_ENTRY2_KEY Position */
#define LL_TRX_REG_LL_HASH_KEY2_LL_RX_HASH_ENTRY2_KEY_Msk (0x0000ffffUL << LL_TRX_REG_LL_HASH_KEY2_LL_RX_HASH_ENTRY2_KEY_Pos)/*!< LL_TRX_REG LL_HASH_KEY2: LL_RX_HASH_ENTRY2_KEY Mask */
#define LL_TRX_REG_LL_HASH_KEY2_LL_RX_HASH_ENTRY2_ACTION_Pos 16                                       /*!< LL_TRX_REG LL_HASH_KEY2: LL_RX_HASH_ENTRY2_ACTION Position */
#define LL_TRX_REG_LL_HASH_KEY2_LL_RX_HASH_ENTRY2_ACTION_Msk (0x000000ffUL << LL_TRX_REG_LL_HASH_KEY2_LL_RX_HASH_ENTRY2_ACTION_Pos)/*!< LL_TRX_REG LL_HASH_KEY2: LL_RX_HASH_ENTRY2_ACTION Mask */

/* ---------------------------  LL_TRX_REG_LL_HASH_KEY3  -------------------------- */
#define LL_TRX_REG_LL_HASH_KEY3_LL_RX_HASH_ENTRY3_KEY_Pos 0                                           /*!< LL_TRX_REG LL_HASH_KEY3: LL_RX_HASH_ENTRY3_KEY Position */
#define LL_TRX_REG_LL_HASH_KEY3_LL_RX_HASH_ENTRY3_KEY_Msk (0x0000ffffUL << LL_TRX_REG_LL_HASH_KEY3_LL_RX_HASH_ENTRY3_KEY_Pos)/*!< LL_TRX_REG LL_HASH_KEY3: LL_RX_HASH_ENTRY3_KEY Mask */
#define LL_TRX_REG_LL_HASH_KEY3_LL_RX_HASH_ENTRY3_ACTION_Pos 16                                       /*!< LL_TRX_REG LL_HASH_KEY3: LL_RX_HASH_ENTRY3_ACTION Position */
#define LL_TRX_REG_LL_HASH_KEY3_LL_RX_HASH_ENTRY3_ACTION_Msk (0x000000ffUL << LL_TRX_REG_LL_HASH_KEY3_LL_RX_HASH_ENTRY3_ACTION_Pos)/*!< LL_TRX_REG LL_HASH_KEY3: LL_RX_HASH_ENTRY3_ACTION Mask */

/* ---------------------------  LL_TRX_REG_LL_HASH_KEY4  -------------------------- */
#define LL_TRX_REG_LL_HASH_KEY4_LL_RX_HASH_ENTRY4_KEY_Pos 0                                           /*!< LL_TRX_REG LL_HASH_KEY4: LL_RX_HASH_ENTRY4_KEY Position */
#define LL_TRX_REG_LL_HASH_KEY4_LL_RX_HASH_ENTRY4_KEY_Msk (0x0000ffffUL << LL_TRX_REG_LL_HASH_KEY4_LL_RX_HASH_ENTRY4_KEY_Pos)/*!< LL_TRX_REG LL_HASH_KEY4: LL_RX_HASH_ENTRY4_KEY Mask */
#define LL_TRX_REG_LL_HASH_KEY4_LL_RX_HASH_ENTRY4_ACTION_Pos 16                                       /*!< LL_TRX_REG LL_HASH_KEY4: LL_RX_HASH_ENTRY4_ACTION Position */
#define LL_TRX_REG_LL_HASH_KEY4_LL_RX_HASH_ENTRY4_ACTION_Msk (0x000000ffUL << LL_TRX_REG_LL_HASH_KEY4_LL_RX_HASH_ENTRY4_ACTION_Pos)/*!< LL_TRX_REG LL_HASH_KEY4: LL_RX_HASH_ENTRY4_ACTION Mask */

/* ---------------------------  LL_TRX_REG_LL_HASH_KEY5  -------------------------- */
#define LL_TRX_REG_LL_HASH_KEY5_LL_RX_HASH_ENTRY5_KEY_Pos 0                                           /*!< LL_TRX_REG LL_HASH_KEY5: LL_RX_HASH_ENTRY5_KEY Position */
#define LL_TRX_REG_LL_HASH_KEY5_LL_RX_HASH_ENTRY5_KEY_Msk (0x0000ffffUL << LL_TRX_REG_LL_HASH_KEY5_LL_RX_HASH_ENTRY5_KEY_Pos)/*!< LL_TRX_REG LL_HASH_KEY5: LL_RX_HASH_ENTRY5_KEY Mask */
#define LL_TRX_REG_LL_HASH_KEY5_LL_RX_HASH_ENTRY5_ACTION_Pos 16                                       /*!< LL_TRX_REG LL_HASH_KEY5: LL_RX_HASH_ENTRY5_ACTION Position */
#define LL_TRX_REG_LL_HASH_KEY5_LL_RX_HASH_ENTRY5_ACTION_Msk (0x000000ffUL << LL_TRX_REG_LL_HASH_KEY5_LL_RX_HASH_ENTRY5_ACTION_Pos)/*!< LL_TRX_REG LL_HASH_KEY5: LL_RX_HASH_ENTRY5_ACTION Mask */

/* ---------------------------  LL_TRX_REG_LL_HASH_KEY6  -------------------------- */
#define LL_TRX_REG_LL_HASH_KEY6_LL_RX_HASH_ENTRY6_KEY_Pos 0                                           /*!< LL_TRX_REG LL_HASH_KEY6: LL_RX_HASH_ENTRY6_KEY Position */
#define LL_TRX_REG_LL_HASH_KEY6_LL_RX_HASH_ENTRY6_KEY_Msk (0x0000ffffUL << LL_TRX_REG_LL_HASH_KEY6_LL_RX_HASH_ENTRY6_KEY_Pos)/*!< LL_TRX_REG LL_HASH_KEY6: LL_RX_HASH_ENTRY6_KEY Mask */
#define LL_TRX_REG_LL_HASH_KEY6_LL_RX_HASH_ENTRY6_ACTION_Pos 16                                       /*!< LL_TRX_REG LL_HASH_KEY6: LL_RX_HASH_ENTRY6_ACTION Position */
#define LL_TRX_REG_LL_HASH_KEY6_LL_RX_HASH_ENTRY6_ACTION_Msk (0x000000ffUL << LL_TRX_REG_LL_HASH_KEY6_LL_RX_HASH_ENTRY6_ACTION_Pos)/*!< LL_TRX_REG LL_HASH_KEY6: LL_RX_HASH_ENTRY6_ACTION Mask */

/* ---------------------------  LL_TRX_REG_LL_HASH_KEY7  -------------------------- */
#define LL_TRX_REG_LL_HASH_KEY7_LL_RX_HASH_ENTRY7_KEY_Pos 0                                           /*!< LL_TRX_REG LL_HASH_KEY7: LL_RX_HASH_ENTRY7_KEY Position */
#define LL_TRX_REG_LL_HASH_KEY7_LL_RX_HASH_ENTRY7_KEY_Msk (0x0000ffffUL << LL_TRX_REG_LL_HASH_KEY7_LL_RX_HASH_ENTRY7_KEY_Pos)/*!< LL_TRX_REG LL_HASH_KEY7: LL_RX_HASH_ENTRY7_KEY Mask */
#define LL_TRX_REG_LL_HASH_KEY7_LL_RX_HASH_ENTRY7_ACTION_Pos 16                                       /*!< LL_TRX_REG LL_HASH_KEY7: LL_RX_HASH_ENTRY7_ACTION Position */
#define LL_TRX_REG_LL_HASH_KEY7_LL_RX_HASH_ENTRY7_ACTION_Msk (0x000000ffUL << LL_TRX_REG_LL_HASH_KEY7_LL_RX_HASH_ENTRY7_ACTION_Pos)/*!< LL_TRX_REG LL_HASH_KEY7: LL_RX_HASH_ENTRY7_ACTION Mask */

/* -----------------------  LL_TRX_REG_ACCUM_TX_NO_ACK_CNT  ----------------------- */
#define LL_TRX_REG_ACCUM_TX_NO_ACK_CNT_ACCUM_TX_NO_ACK_CNT_EN_Pos 0                                   /*!< LL_TRX_REG ACCUM_TX_NO_ACK_CNT: ACCUM_TX_NO_ACK_CNT_EN Position */
#define LL_TRX_REG_ACCUM_TX_NO_ACK_CNT_ACCUM_TX_NO_ACK_CNT_EN_Msk (0x01UL << LL_TRX_REG_ACCUM_TX_NO_ACK_CNT_ACCUM_TX_NO_ACK_CNT_EN_Pos)/*!< LL_TRX_REG ACCUM_TX_NO_ACK_CNT: ACCUM_TX_NO_ACK_CNT_EN Mask */
#define LL_TRX_REG_ACCUM_TX_NO_ACK_CNT_TX_NO_ACK_CNT_AUTO_CLR_EN_Pos 4                                /*!< LL_TRX_REG ACCUM_TX_NO_ACK_CNT: TX_NO_ACK_CNT_AUTO_CLR_EN Position */
#define LL_TRX_REG_ACCUM_TX_NO_ACK_CNT_TX_NO_ACK_CNT_AUTO_CLR_EN_Msk (0x01UL << LL_TRX_REG_ACCUM_TX_NO_ACK_CNT_TX_NO_ACK_CNT_AUTO_CLR_EN_Pos)/*!< LL_TRX_REG ACCUM_TX_NO_ACK_CNT: TX_NO_ACK_CNT_AUTO_CLR_EN Mask */
#define LL_TRX_REG_ACCUM_TX_NO_ACK_CNT_ACCUM_TX_NO_ACK_CNT_INIT_VALUE_Pos 8                           /*!< LL_TRX_REG ACCUM_TX_NO_ACK_CNT: ACCUM_TX_NO_ACK_CNT_INIT_VALUE
                                                         Position                                                                                  */
#define LL_TRX_REG_ACCUM_TX_NO_ACK_CNT_ACCUM_TX_NO_ACK_CNT_INIT_VALUE_Msk (0x000000ffUL << LL_TRX_REG_ACCUM_TX_NO_ACK_CNT_ACCUM_TX_NO_ACK_CNT_INIT_VALUE_Pos)/*!< LL_TRX_REG ACCUM_TX_NO_ACK_CNT: ACCUM_TX_NO_ACK_CNT_INIT_VALUE
                                                         Mask                                                                                      */

/* ------------------------  LL_TRX_REG_AEM_TX_NO_ACK_CON  ------------------------ */
#define LL_TRX_REG_AEM_TX_NO_ACK_CON_AEM_TX_NO_ACK_CNT_MINUEND_Pos 0                                  /*!< LL_TRX_REG AEM_TX_NO_ACK_CON: AEM_TX_NO_ACK_CNT_MINUEND Position */
#define LL_TRX_REG_AEM_TX_NO_ACK_CON_AEM_TX_NO_ACK_CNT_MINUEND_Msk (0x000000ffUL << LL_TRX_REG_AEM_TX_NO_ACK_CON_AEM_TX_NO_ACK_CNT_MINUEND_Pos)/*!< LL_TRX_REG AEM_TX_NO_ACK_CON: AEM_TX_NO_ACK_CNT_MINUEND Mask */
#define LL_TRX_REG_AEM_TX_NO_ACK_CON_AEM_TX_NO_ACK_CNT_SUB_BIT_MASK_Pos 8                             /*!< LL_TRX_REG AEM_TX_NO_ACK_CON: AEM_TX_NO_ACK_CNT_SUB_BIT_MASK
                                                         Position                                                                                  */
#define LL_TRX_REG_AEM_TX_NO_ACK_CON_AEM_TX_NO_ACK_CNT_SUB_BIT_MASK_Msk (0x000000ffUL << LL_TRX_REG_AEM_TX_NO_ACK_CON_AEM_TX_NO_ACK_CNT_SUB_BIT_MASK_Pos)/*!< LL_TRX_REG AEM_TX_NO_ACK_CON: AEM_TX_NO_ACK_CNT_SUB_BIT_MASK
                                                         Mask                                                                                      */
#define LL_TRX_REG_AEM_TX_NO_ACK_CON_AEM_TX_NO_ACK_CNT_LESS_Pos 16                                    /*!< LL_TRX_REG AEM_TX_NO_ACK_CON: AEM_TX_NO_ACK_CNT_LESS Position */
#define LL_TRX_REG_AEM_TX_NO_ACK_CON_AEM_TX_NO_ACK_CNT_LESS_Msk (0x01UL << LL_TRX_REG_AEM_TX_NO_ACK_CON_AEM_TX_NO_ACK_CNT_LESS_Pos)/*!< LL_TRX_REG AEM_TX_NO_ACK_CON: AEM_TX_NO_ACK_CNT_LESS Mask */
#define LL_TRX_REG_AEM_TX_NO_ACK_CON_AEM_TX_NO_ACK_CNT_EQUAL_Pos 17                                   /*!< LL_TRX_REG AEM_TX_NO_ACK_CON: AEM_TX_NO_ACK_CNT_EQUAL Position */
#define LL_TRX_REG_AEM_TX_NO_ACK_CON_AEM_TX_NO_ACK_CNT_EQUAL_Msk (0x01UL << LL_TRX_REG_AEM_TX_NO_ACK_CON_AEM_TX_NO_ACK_CNT_EQUAL_Pos)/*!< LL_TRX_REG AEM_TX_NO_ACK_CON: AEM_TX_NO_ACK_CNT_EQUAL Mask */
#define LL_TRX_REG_AEM_TX_NO_ACK_CON_AEM_TX_NO_ACK_CNT_LARGE_Pos 18                                   /*!< LL_TRX_REG AEM_TX_NO_ACK_CON: AEM_TX_NO_ACK_CNT_LARGE Position */
#define LL_TRX_REG_AEM_TX_NO_ACK_CON_AEM_TX_NO_ACK_CNT_LARGE_Msk (0x01UL << LL_TRX_REG_AEM_TX_NO_ACK_CON_AEM_TX_NO_ACK_CNT_LARGE_Pos)/*!< LL_TRX_REG AEM_TX_NO_ACK_CON: AEM_TX_NO_ACK_CNT_LARGE Mask */

/* ----------------------  LL_TRX_REG_ACCUM_RX_CRC_ERROR_CNT  --------------------- */
#define LL_TRX_REG_ACCUM_RX_CRC_ERROR_CNT_ACCUM_RX_CRC_ERROR_CNT_EN_Pos 0                             /*!< LL_TRX_REG ACCUM_RX_CRC_ERROR_CNT: ACCUM_RX_CRC_ERROR_CNT_EN
                                                         Position                                                                                  */
#define LL_TRX_REG_ACCUM_RX_CRC_ERROR_CNT_ACCUM_RX_CRC_ERROR_CNT_EN_Msk (0x01UL << LL_TRX_REG_ACCUM_RX_CRC_ERROR_CNT_ACCUM_RX_CRC_ERROR_CNT_EN_Pos)/*!< LL_TRX_REG ACCUM_RX_CRC_ERROR_CNT: ACCUM_RX_CRC_ERROR_CNT_EN
                                                         Mask                                                                                      */
#define LL_TRX_REG_ACCUM_RX_CRC_ERROR_CNT_RX_CRC_ERROR_CNT_AUTO_CLR_EN_Pos 4                          /*!< LL_TRX_REG ACCUM_RX_CRC_ERROR_CNT: RX_CRC_ERROR_CNT_AUTO_CLR_EN
                                                         Position                                                                                  */
#define LL_TRX_REG_ACCUM_RX_CRC_ERROR_CNT_RX_CRC_ERROR_CNT_AUTO_CLR_EN_Msk (0x01UL << LL_TRX_REG_ACCUM_RX_CRC_ERROR_CNT_RX_CRC_ERROR_CNT_AUTO_CLR_EN_Pos)/*!< LL_TRX_REG ACCUM_RX_CRC_ERROR_CNT: RX_CRC_ERROR_CNT_AUTO_CLR_EN
                                                         Mask                                                                                      */
#define LL_TRX_REG_ACCUM_RX_CRC_ERROR_CNT_ACCUM_RX_CRC_ERROR_CNT_INIT_VALUE_Pos 8                     /*!< LL_TRX_REG ACCUM_RX_CRC_ERROR_CNT: ACCUM_RX_CRC_ERROR_CNT_INIT_VALUE
                                                         Position                                                                                  */
#define LL_TRX_REG_ACCUM_RX_CRC_ERROR_CNT_ACCUM_RX_CRC_ERROR_CNT_INIT_VALUE_Msk (0x000000ffUL << LL_TRX_REG_ACCUM_RX_CRC_ERROR_CNT_ACCUM_RX_CRC_ERROR_CNT_INIT_VALUE_Pos)/*!< LL_TRX_REG ACCUM_RX_CRC_ERROR_CNT: ACCUM_RX_CRC_ERROR_CNT_INIT_VALUE
                                                         Mask                                                                                      */

/* ------------------------  LL_TRX_REG_AEM_RX_CRC_ERR_CON  ----------------------- */
#define LL_TRX_REG_AEM_RX_CRC_ERR_CON_AEM_RX_CRC_ERROR_CNT_MINUEND_Pos 0                              /*!< LL_TRX_REG AEM_RX_CRC_ERR_CON: AEM_RX_CRC_ERROR_CNT_MINUEND
                                                         Position                                                                                  */
#define LL_TRX_REG_AEM_RX_CRC_ERR_CON_AEM_RX_CRC_ERROR_CNT_MINUEND_Msk (0x000000ffUL << LL_TRX_REG_AEM_RX_CRC_ERR_CON_AEM_RX_CRC_ERROR_CNT_MINUEND_Pos)/*!< LL_TRX_REG AEM_RX_CRC_ERR_CON: AEM_RX_CRC_ERROR_CNT_MINUEND
                                                         Mask                                                                                      */
#define LL_TRX_REG_AEM_RX_CRC_ERR_CON_AEM_RX_CRC_ERROR_CNT_SUB_BIT_MASK_Pos 8                         /*!< LL_TRX_REG AEM_RX_CRC_ERR_CON: AEM_RX_CRC_ERROR_CNT_SUB_BIT_MASK
                                                         Position                                                                                  */
#define LL_TRX_REG_AEM_RX_CRC_ERR_CON_AEM_RX_CRC_ERROR_CNT_SUB_BIT_MASK_Msk (0x000000ffUL << LL_TRX_REG_AEM_RX_CRC_ERR_CON_AEM_RX_CRC_ERROR_CNT_SUB_BIT_MASK_Pos)/*!< LL_TRX_REG AEM_RX_CRC_ERR_CON: AEM_RX_CRC_ERROR_CNT_SUB_BIT_MASK
                                                         Mask                                                                                      */
#define LL_TRX_REG_AEM_RX_CRC_ERR_CON_AEM_RX_CRC_ERROR_CNT_LESS_Pos 16                                /*!< LL_TRX_REG AEM_RX_CRC_ERR_CON: AEM_RX_CRC_ERROR_CNT_LESS Position */
#define LL_TRX_REG_AEM_RX_CRC_ERR_CON_AEM_RX_CRC_ERROR_CNT_LESS_Msk (0x01UL << LL_TRX_REG_AEM_RX_CRC_ERR_CON_AEM_RX_CRC_ERROR_CNT_LESS_Pos)/*!< LL_TRX_REG AEM_RX_CRC_ERR_CON: AEM_RX_CRC_ERROR_CNT_LESS Mask */
#define LL_TRX_REG_AEM_RX_CRC_ERR_CON_AEM_RX_CRC_ERROR_CNT_EQUAL_Pos 17                               /*!< LL_TRX_REG AEM_RX_CRC_ERR_CON: AEM_RX_CRC_ERROR_CNT_EQUAL Position */
#define LL_TRX_REG_AEM_RX_CRC_ERR_CON_AEM_RX_CRC_ERROR_CNT_EQUAL_Msk (0x01UL << LL_TRX_REG_AEM_RX_CRC_ERR_CON_AEM_RX_CRC_ERROR_CNT_EQUAL_Pos)/*!< LL_TRX_REG AEM_RX_CRC_ERR_CON: AEM_RX_CRC_ERROR_CNT_EQUAL Mask */
#define LL_TRX_REG_AEM_RX_CRC_ERR_CON_AEM_RX_CRC_ERROR_CNT_LARGE_Pos 18                               /*!< LL_TRX_REG AEM_RX_CRC_ERR_CON: AEM_RX_CRC_ERROR_CNT_LARGE Position */
#define LL_TRX_REG_AEM_RX_CRC_ERR_CON_AEM_RX_CRC_ERROR_CNT_LARGE_Msk (0x01UL << LL_TRX_REG_AEM_RX_CRC_ERR_CON_AEM_RX_CRC_ERROR_CNT_LARGE_Pos)/*!< LL_TRX_REG AEM_RX_CRC_ERR_CON: AEM_RX_CRC_ERROR_CNT_LARGE Mask */

/* ----------------------  LL_TRX_REG_RX_PDU_VALID_POLICY_0  ---------------------- */
#define LL_TRX_REG_RX_PDU_VALID_POLICY_0_RX_PDU_VALID_POLICY_SIG0_SEL_Pos 0                           /*!< LL_TRX_REG RX_PDU_VALID_POLICY_0: RX_PDU_VALID_POLICY_SIG0_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_RX_PDU_VALID_POLICY_0_RX_PDU_VALID_POLICY_SIG0_SEL_Msk (0x3fUL << LL_TRX_REG_RX_PDU_VALID_POLICY_0_RX_PDU_VALID_POLICY_SIG0_SEL_Pos)/*!< LL_TRX_REG RX_PDU_VALID_POLICY_0: RX_PDU_VALID_POLICY_SIG0_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_RX_PDU_VALID_POLICY_0_RX_PDU_VALID_POLICY_SIG1_SEL_Pos 8                           /*!< LL_TRX_REG RX_PDU_VALID_POLICY_0: RX_PDU_VALID_POLICY_SIG1_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_RX_PDU_VALID_POLICY_0_RX_PDU_VALID_POLICY_SIG1_SEL_Msk (0x3fUL << LL_TRX_REG_RX_PDU_VALID_POLICY_0_RX_PDU_VALID_POLICY_SIG1_SEL_Pos)/*!< LL_TRX_REG RX_PDU_VALID_POLICY_0: RX_PDU_VALID_POLICY_SIG1_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_RX_PDU_VALID_POLICY_0_RX_PDU_VALID_POLICY_SIG2_SEL_Pos 16                          /*!< LL_TRX_REG RX_PDU_VALID_POLICY_0: RX_PDU_VALID_POLICY_SIG2_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_RX_PDU_VALID_POLICY_0_RX_PDU_VALID_POLICY_SIG2_SEL_Msk (0x3fUL << LL_TRX_REG_RX_PDU_VALID_POLICY_0_RX_PDU_VALID_POLICY_SIG2_SEL_Pos)/*!< LL_TRX_REG RX_PDU_VALID_POLICY_0: RX_PDU_VALID_POLICY_SIG2_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_RX_PDU_VALID_POLICY_0_RX_PDU_VALID_POLICY_SIG3_SEL_Pos 24                          /*!< LL_TRX_REG RX_PDU_VALID_POLICY_0: RX_PDU_VALID_POLICY_SIG3_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_RX_PDU_VALID_POLICY_0_RX_PDU_VALID_POLICY_SIG3_SEL_Msk (0x3fUL << LL_TRX_REG_RX_PDU_VALID_POLICY_0_RX_PDU_VALID_POLICY_SIG3_SEL_Pos)/*!< LL_TRX_REG RX_PDU_VALID_POLICY_0: RX_PDU_VALID_POLICY_SIG3_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_RX_PDU_VALID_POLICY_0_RX_PDU_VALID_POLICY_MANUAL_VALUE_Pos 30                      /*!< LL_TRX_REG RX_PDU_VALID_POLICY_0: RX_PDU_VALID_POLICY_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_TRX_REG_RX_PDU_VALID_POLICY_0_RX_PDU_VALID_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_RX_PDU_VALID_POLICY_0_RX_PDU_VALID_POLICY_MANUAL_VALUE_Pos)/*!< LL_TRX_REG RX_PDU_VALID_POLICY_0: RX_PDU_VALID_POLICY_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_TRX_REG_RX_PDU_VALID_POLICY_0_RX_PDU_VALID_POLICY_MANUAL_EN_Pos 31                         /*!< LL_TRX_REG RX_PDU_VALID_POLICY_0: RX_PDU_VALID_POLICY_MANUAL_EN
                                                         Position                                                                                  */
#define LL_TRX_REG_RX_PDU_VALID_POLICY_0_RX_PDU_VALID_POLICY_MANUAL_EN_Msk (0x01UL << LL_TRX_REG_RX_PDU_VALID_POLICY_0_RX_PDU_VALID_POLICY_MANUAL_EN_Pos)/*!< LL_TRX_REG RX_PDU_VALID_POLICY_0: RX_PDU_VALID_POLICY_MANUAL_EN
                                                         Mask                                                                                      */

/* ----------------------  LL_TRX_REG_RX_PDU_VALID_POLICY_1  ---------------------- */
#define LL_TRX_REG_RX_PDU_VALID_POLICY_1_RX_PDU_VALID_POLICY_W1C_Pos 0                                /*!< LL_TRX_REG RX_PDU_VALID_POLICY_1: RX_PDU_VALID_POLICY_W1C Position */
#define LL_TRX_REG_RX_PDU_VALID_POLICY_1_RX_PDU_VALID_POLICY_W1C_Msk (0x01UL << LL_TRX_REG_RX_PDU_VALID_POLICY_1_RX_PDU_VALID_POLICY_W1C_Pos)/*!< LL_TRX_REG RX_PDU_VALID_POLICY_1: RX_PDU_VALID_POLICY_W1C Mask */
#define LL_TRX_REG_RX_PDU_VALID_POLICY_1_RX_PDU_VALID_POLICY_W1S_Pos 1                                /*!< LL_TRX_REG RX_PDU_VALID_POLICY_1: RX_PDU_VALID_POLICY_W1S Position */
#define LL_TRX_REG_RX_PDU_VALID_POLICY_1_RX_PDU_VALID_POLICY_W1S_Msk (0x01UL << LL_TRX_REG_RX_PDU_VALID_POLICY_1_RX_PDU_VALID_POLICY_W1S_Pos)/*!< LL_TRX_REG RX_PDU_VALID_POLICY_1: RX_PDU_VALID_POLICY_W1S Mask */

/* ----------------------  LL_TRX_REG_RX_PDU_VALID_POLICY_2  ---------------------- */
#define LL_TRX_REG_RX_PDU_VALID_POLICY_2_RX_PDU_VALID_POLICY_Pos 0                                    /*!< LL_TRX_REG RX_PDU_VALID_POLICY_2: RX_PDU_VALID_POLICY Position */
#define LL_TRX_REG_RX_PDU_VALID_POLICY_2_RX_PDU_VALID_POLICY_Msk (0xffffffffUL << LL_TRX_REG_RX_PDU_VALID_POLICY_2_RX_PDU_VALID_POLICY_Pos)/*!< LL_TRX_REG RX_PDU_VALID_POLICY_2: RX_PDU_VALID_POLICY Mask */

/* ------------------------  LL_TRX_REG_XPDU_IRQ_POLICY_0  ------------------------ */
#define LL_TRX_REG_XPDU_IRQ_POLICY_0_XPDU_IRQ_POLICY_SIG0_SEL_Pos 0                                   /*!< LL_TRX_REG XPDU_IRQ_POLICY_0: XPDU_IRQ_POLICY_SIG0_SEL Position */
#define LL_TRX_REG_XPDU_IRQ_POLICY_0_XPDU_IRQ_POLICY_SIG0_SEL_Msk (0x3fUL << LL_TRX_REG_XPDU_IRQ_POLICY_0_XPDU_IRQ_POLICY_SIG0_SEL_Pos)/*!< LL_TRX_REG XPDU_IRQ_POLICY_0: XPDU_IRQ_POLICY_SIG0_SEL Mask */
#define LL_TRX_REG_XPDU_IRQ_POLICY_0_XPDU_IRQ_POLICY_SIG1_SEL_Pos 8                                   /*!< LL_TRX_REG XPDU_IRQ_POLICY_0: XPDU_IRQ_POLICY_SIG1_SEL Position */
#define LL_TRX_REG_XPDU_IRQ_POLICY_0_XPDU_IRQ_POLICY_SIG1_SEL_Msk (0x3fUL << LL_TRX_REG_XPDU_IRQ_POLICY_0_XPDU_IRQ_POLICY_SIG1_SEL_Pos)/*!< LL_TRX_REG XPDU_IRQ_POLICY_0: XPDU_IRQ_POLICY_SIG1_SEL Mask */
#define LL_TRX_REG_XPDU_IRQ_POLICY_0_XPDU_IRQ_POLICY_SIG2_SEL_Pos 16                                  /*!< LL_TRX_REG XPDU_IRQ_POLICY_0: XPDU_IRQ_POLICY_SIG2_SEL Position */
#define LL_TRX_REG_XPDU_IRQ_POLICY_0_XPDU_IRQ_POLICY_SIG2_SEL_Msk (0x3fUL << LL_TRX_REG_XPDU_IRQ_POLICY_0_XPDU_IRQ_POLICY_SIG2_SEL_Pos)/*!< LL_TRX_REG XPDU_IRQ_POLICY_0: XPDU_IRQ_POLICY_SIG2_SEL Mask */
#define LL_TRX_REG_XPDU_IRQ_POLICY_0_XPDU_IRQ_POLICY_SIG3_SEL_Pos 24                                  /*!< LL_TRX_REG XPDU_IRQ_POLICY_0: XPDU_IRQ_POLICY_SIG3_SEL Position */
#define LL_TRX_REG_XPDU_IRQ_POLICY_0_XPDU_IRQ_POLICY_SIG3_SEL_Msk (0x3fUL << LL_TRX_REG_XPDU_IRQ_POLICY_0_XPDU_IRQ_POLICY_SIG3_SEL_Pos)/*!< LL_TRX_REG XPDU_IRQ_POLICY_0: XPDU_IRQ_POLICY_SIG3_SEL Mask */
#define LL_TRX_REG_XPDU_IRQ_POLICY_0_XPDU_IRQ_POLICY_MANUAL_VALUE_Pos 30                              /*!< LL_TRX_REG XPDU_IRQ_POLICY_0: XPDU_IRQ_POLICY_MANUAL_VALUE Position */
#define LL_TRX_REG_XPDU_IRQ_POLICY_0_XPDU_IRQ_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_XPDU_IRQ_POLICY_0_XPDU_IRQ_POLICY_MANUAL_VALUE_Pos)/*!< LL_TRX_REG XPDU_IRQ_POLICY_0: XPDU_IRQ_POLICY_MANUAL_VALUE Mask */
#define LL_TRX_REG_XPDU_IRQ_POLICY_0_XPDU_IRQ_POLICY_MANUAL_EN_Pos 31                                 /*!< LL_TRX_REG XPDU_IRQ_POLICY_0: XPDU_IRQ_POLICY_MANUAL_EN Position */
#define LL_TRX_REG_XPDU_IRQ_POLICY_0_XPDU_IRQ_POLICY_MANUAL_EN_Msk (0x01UL << LL_TRX_REG_XPDU_IRQ_POLICY_0_XPDU_IRQ_POLICY_MANUAL_EN_Pos)/*!< LL_TRX_REG XPDU_IRQ_POLICY_0: XPDU_IRQ_POLICY_MANUAL_EN Mask */

/* ------------------------  LL_TRX_REG_XPDU_IRQ_POLICY_1  ------------------------ */
#define LL_TRX_REG_XPDU_IRQ_POLICY_1_XPDU_IRQ_POLICY_W1C_Pos 0                                        /*!< LL_TRX_REG XPDU_IRQ_POLICY_1: XPDU_IRQ_POLICY_W1C Position */
#define LL_TRX_REG_XPDU_IRQ_POLICY_1_XPDU_IRQ_POLICY_W1C_Msk (0x01UL << LL_TRX_REG_XPDU_IRQ_POLICY_1_XPDU_IRQ_POLICY_W1C_Pos)/*!< LL_TRX_REG XPDU_IRQ_POLICY_1: XPDU_IRQ_POLICY_W1C Mask */
#define LL_TRX_REG_XPDU_IRQ_POLICY_1_XPDU_IRQ_POLICY_W1S_Pos 1                                        /*!< LL_TRX_REG XPDU_IRQ_POLICY_1: XPDU_IRQ_POLICY_W1S Position */
#define LL_TRX_REG_XPDU_IRQ_POLICY_1_XPDU_IRQ_POLICY_W1S_Msk (0x01UL << LL_TRX_REG_XPDU_IRQ_POLICY_1_XPDU_IRQ_POLICY_W1S_Pos)/*!< LL_TRX_REG XPDU_IRQ_POLICY_1: XPDU_IRQ_POLICY_W1S Mask */

/* ------------------------  LL_TRX_REG_XPDU_IRQ_POLICY_2  ------------------------ */
#define LL_TRX_REG_XPDU_IRQ_POLICY_2_XPDU_IRQ_POLICY_Pos 0                                            /*!< LL_TRX_REG XPDU_IRQ_POLICY_2: XPDU_IRQ_POLICY Position */
#define LL_TRX_REG_XPDU_IRQ_POLICY_2_XPDU_IRQ_POLICY_Msk (0xffffffffUL << LL_TRX_REG_XPDU_IRQ_POLICY_2_XPDU_IRQ_POLICY_Pos)/*!< LL_TRX_REG XPDU_IRQ_POLICY_2: XPDU_IRQ_POLICY Mask */

/* --------------------------  LL_TRX_REG_DUMY_POLICY_0  -------------------------- */
#define LL_TRX_REG_DUMY_POLICY_0_DUMY_POLICY_SIG0_SEL_Pos 0                                           /*!< LL_TRX_REG DUMY_POLICY_0: DUMY_POLICY_SIG0_SEL Position */
#define LL_TRX_REG_DUMY_POLICY_0_DUMY_POLICY_SIG0_SEL_Msk (0x3fUL << LL_TRX_REG_DUMY_POLICY_0_DUMY_POLICY_SIG0_SEL_Pos)/*!< LL_TRX_REG DUMY_POLICY_0: DUMY_POLICY_SIG0_SEL Mask */
#define LL_TRX_REG_DUMY_POLICY_0_DUMY_POLICY_SIG1_SEL_Pos 8                                           /*!< LL_TRX_REG DUMY_POLICY_0: DUMY_POLICY_SIG1_SEL Position */
#define LL_TRX_REG_DUMY_POLICY_0_DUMY_POLICY_SIG1_SEL_Msk (0x3fUL << LL_TRX_REG_DUMY_POLICY_0_DUMY_POLICY_SIG1_SEL_Pos)/*!< LL_TRX_REG DUMY_POLICY_0: DUMY_POLICY_SIG1_SEL Mask */
#define LL_TRX_REG_DUMY_POLICY_0_DUMY_POLICY_SIG2_SEL_Pos 16                                          /*!< LL_TRX_REG DUMY_POLICY_0: DUMY_POLICY_SIG2_SEL Position */
#define LL_TRX_REG_DUMY_POLICY_0_DUMY_POLICY_SIG2_SEL_Msk (0x3fUL << LL_TRX_REG_DUMY_POLICY_0_DUMY_POLICY_SIG2_SEL_Pos)/*!< LL_TRX_REG DUMY_POLICY_0: DUMY_POLICY_SIG2_SEL Mask */
#define LL_TRX_REG_DUMY_POLICY_0_DUMY_POLICY_SIG3_SEL_Pos 24                                          /*!< LL_TRX_REG DUMY_POLICY_0: DUMY_POLICY_SIG3_SEL Position */
#define LL_TRX_REG_DUMY_POLICY_0_DUMY_POLICY_SIG3_SEL_Msk (0x3fUL << LL_TRX_REG_DUMY_POLICY_0_DUMY_POLICY_SIG3_SEL_Pos)/*!< LL_TRX_REG DUMY_POLICY_0: DUMY_POLICY_SIG3_SEL Mask */
#define LL_TRX_REG_DUMY_POLICY_0_DUMY_POLICY_MANUAL_VALUE_Pos 30                                      /*!< LL_TRX_REG DUMY_POLICY_0: DUMY_POLICY_MANUAL_VALUE Position */
#define LL_TRX_REG_DUMY_POLICY_0_DUMY_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_DUMY_POLICY_0_DUMY_POLICY_MANUAL_VALUE_Pos)/*!< LL_TRX_REG DUMY_POLICY_0: DUMY_POLICY_MANUAL_VALUE Mask */
#define LL_TRX_REG_DUMY_POLICY_0_DUMY_POLICY_MANUAL_EN_Pos 31                                         /*!< LL_TRX_REG DUMY_POLICY_0: DUMY_POLICY_MANUAL_EN Position */
#define LL_TRX_REG_DUMY_POLICY_0_DUMY_POLICY_MANUAL_EN_Msk (0x01UL << LL_TRX_REG_DUMY_POLICY_0_DUMY_POLICY_MANUAL_EN_Pos)/*!< LL_TRX_REG DUMY_POLICY_0: DUMY_POLICY_MANUAL_EN Mask */

/* ------------------------  LL_TRX_REG_DUMY_IRQ_POLICY_1  ------------------------ */
#define LL_TRX_REG_DUMY_IRQ_POLICY_1_DUMY_POLICY_W1C_Pos 0                                            /*!< LL_TRX_REG DUMY_IRQ_POLICY_1: DUMY_POLICY_W1C Position */
#define LL_TRX_REG_DUMY_IRQ_POLICY_1_DUMY_POLICY_W1C_Msk (0x01UL << LL_TRX_REG_DUMY_IRQ_POLICY_1_DUMY_POLICY_W1C_Pos)/*!< LL_TRX_REG DUMY_IRQ_POLICY_1: DUMY_POLICY_W1C Mask */
#define LL_TRX_REG_DUMY_IRQ_POLICY_1_DUMY_POLICY_W1S_Pos 1                                            /*!< LL_TRX_REG DUMY_IRQ_POLICY_1: DUMY_POLICY_W1S Position */
#define LL_TRX_REG_DUMY_IRQ_POLICY_1_DUMY_POLICY_W1S_Msk (0x01UL << LL_TRX_REG_DUMY_IRQ_POLICY_1_DUMY_POLICY_W1S_Pos)/*!< LL_TRX_REG DUMY_IRQ_POLICY_1: DUMY_POLICY_W1S Mask */

/* ------------------------  LL_TRX_REG_DUMY_IRQ_POLICY_2  ------------------------ */
#define LL_TRX_REG_DUMY_IRQ_POLICY_2_DUMY_POLICY_Pos 0                                                /*!< LL_TRX_REG DUMY_IRQ_POLICY_2: DUMY_POLICY Position */
#define LL_TRX_REG_DUMY_IRQ_POLICY_2_DUMY_POLICY_Msk (0xffffffffUL << LL_TRX_REG_DUMY_IRQ_POLICY_2_DUMY_POLICY_Pos)/*!< LL_TRX_REG DUMY_IRQ_POLICY_2: DUMY_POLICY Mask */

/* --------------------------  LL_TRX_REG_NEW_DATA_INFO  -------------------------- */
#define LL_TRX_REG_NEW_DATA_INFO_NEW_DATA_MANUAL_INVALID_Pos 0                                        /*!< LL_TRX_REG NEW_DATA_INFO: NEW_DATA_MANUAL_INVALID Position */
#define LL_TRX_REG_NEW_DATA_INFO_NEW_DATA_MANUAL_INVALID_Msk (0x01UL << LL_TRX_REG_NEW_DATA_INFO_NEW_DATA_MANUAL_INVALID_Pos)/*!< LL_TRX_REG NEW_DATA_INFO: NEW_DATA_MANUAL_INVALID Mask */
#define LL_TRX_REG_NEW_DATA_INFO_NEW_DATA_MANUAL_SET_Pos 1                                            /*!< LL_TRX_REG NEW_DATA_INFO: NEW_DATA_MANUAL_SET Position */
#define LL_TRX_REG_NEW_DATA_INFO_NEW_DATA_MANUAL_SET_Msk (0x01UL << LL_TRX_REG_NEW_DATA_INFO_NEW_DATA_MANUAL_SET_Pos)/*!< LL_TRX_REG NEW_DATA_INFO: NEW_DATA_MANUAL_SET Mask */
#define LL_TRX_REG_NEW_DATA_INFO_NEW_DATA_MANUAL_OVERWRITE_Pos 2                                      /*!< LL_TRX_REG NEW_DATA_INFO: NEW_DATA_MANUAL_OVERWRITE Position */
#define LL_TRX_REG_NEW_DATA_INFO_NEW_DATA_MANUAL_OVERWRITE_Msk (0x01UL << LL_TRX_REG_NEW_DATA_INFO_NEW_DATA_MANUAL_OVERWRITE_Pos)/*!< LL_TRX_REG NEW_DATA_INFO: NEW_DATA_MANUAL_OVERWRITE Mask */
#define LL_TRX_REG_NEW_DATA_INFO_NEW_DATA_MANUAL_VALID_Pos 4                                          /*!< LL_TRX_REG NEW_DATA_INFO: NEW_DATA_MANUAL_VALID Position */
#define LL_TRX_REG_NEW_DATA_INFO_NEW_DATA_MANUAL_VALID_Msk (0x01UL << LL_TRX_REG_NEW_DATA_INFO_NEW_DATA_MANUAL_VALID_Pos)/*!< LL_TRX_REG NEW_DATA_INFO: NEW_DATA_MANUAL_VALID Mask */
#define LL_TRX_REG_NEW_DATA_INFO_NEW_DATA_MANUAL_VALUE_Pos 8                                          /*!< LL_TRX_REG NEW_DATA_INFO: NEW_DATA_MANUAL_VALUE Position */
#define LL_TRX_REG_NEW_DATA_INFO_NEW_DATA_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_NEW_DATA_INFO_NEW_DATA_MANUAL_VALUE_Pos)/*!< LL_TRX_REG NEW_DATA_INFO: NEW_DATA_MANUAL_VALUE Mask */
#define LL_TRX_REG_NEW_DATA_INFO_NEW_DATA_INFO_VALID_Pos 16                                           /*!< LL_TRX_REG NEW_DATA_INFO: NEW_DATA_INFO_VALID Position */
#define LL_TRX_REG_NEW_DATA_INFO_NEW_DATA_INFO_VALID_Msk (0x01UL << LL_TRX_REG_NEW_DATA_INFO_NEW_DATA_INFO_VALID_Pos)/*!< LL_TRX_REG NEW_DATA_INFO: NEW_DATA_INFO_VALID Mask */
#define LL_TRX_REG_NEW_DATA_INFO_NEW_DATA_INFO_VALUE_Pos 24                                           /*!< LL_TRX_REG NEW_DATA_INFO: NEW_DATA_INFO_VALUE Position */
#define LL_TRX_REG_NEW_DATA_INFO_NEW_DATA_INFO_VALUE_Msk (0x01UL << LL_TRX_REG_NEW_DATA_INFO_NEW_DATA_INFO_VALUE_Pos)/*!< LL_TRX_REG NEW_DATA_INFO: NEW_DATA_INFO_VALUE Mask */

/* --------------------  LL_TRX_REG_TX_ADDR_FILT_DECISION_INFO  ------------------- */
#define LL_TRX_REG_TX_ADDR_FILT_DECISION_INFO_TX_ADDR_FILTER_DECISION_MANUAL_INVALID_Pos 0            /*!< LL_TRX_REG TX_ADDR_FILT_DECISION_INFO: TX_ADDR_FILTER_DECISION_MANUAL_INVA
                                                         LID Position                                                                              */
#define LL_TRX_REG_TX_ADDR_FILT_DECISION_INFO_TX_ADDR_FILTER_DECISION_MANUAL_INVALID_Msk (0x01UL << LL_TRX_REG_TX_ADDR_FILT_DECISION_INFO_TX_ADDR_FILTER_DECISION_MANUAL_INVALID_Pos)/*!< LL_TRX_REG TX_ADDR_FILT_DECISION_INFO: TX_ADDR_FILTER_DECISION_MANUAL_INVA
                                                         LID Mask                                                                                  */
#define LL_TRX_REG_TX_ADDR_FILT_DECISION_INFO_TX_ADDR_FILTER_DECISION_MANUAL_SET_Pos 1                /*!< LL_TRX_REG TX_ADDR_FILT_DECISION_INFO: TX_ADDR_FILTER_DECISION_MANUAL_SET
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_ADDR_FILT_DECISION_INFO_TX_ADDR_FILTER_DECISION_MANUAL_SET_Msk (0x01UL << LL_TRX_REG_TX_ADDR_FILT_DECISION_INFO_TX_ADDR_FILTER_DECISION_MANUAL_SET_Pos)/*!< LL_TRX_REG TX_ADDR_FILT_DECISION_INFO: TX_ADDR_FILTER_DECISION_MANUAL_SET
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_ADDR_FILT_DECISION_INFO_TX_ADDR_FILTER_DECISION_MANUAL_OVERWRITE_Pos 2          /*!< LL_TRX_REG TX_ADDR_FILT_DECISION_INFO: TX_ADDR_FILTER_DECISION_MANUAL_OVER
                                                         WRITE Position                                                                            */
#define LL_TRX_REG_TX_ADDR_FILT_DECISION_INFO_TX_ADDR_FILTER_DECISION_MANUAL_OVERWRITE_Msk (0x01UL << LL_TRX_REG_TX_ADDR_FILT_DECISION_INFO_TX_ADDR_FILTER_DECISION_MANUAL_OVERWRITE_Pos)/*!< LL_TRX_REG TX_ADDR_FILT_DECISION_INFO: TX_ADDR_FILTER_DECISION_MANUAL_OVER
                                                         WRITE Mask                                                                                */
#define LL_TRX_REG_TX_ADDR_FILT_DECISION_INFO_TX_ADDR_FILTER_DECISION_MANUAL_VALID_Pos 4              /*!< LL_TRX_REG TX_ADDR_FILT_DECISION_INFO: TX_ADDR_FILTER_DECISION_MANUAL_VALI
                                                         D Position                                                                                */
#define LL_TRX_REG_TX_ADDR_FILT_DECISION_INFO_TX_ADDR_FILTER_DECISION_MANUAL_VALID_Msk (0x01UL << LL_TRX_REG_TX_ADDR_FILT_DECISION_INFO_TX_ADDR_FILTER_DECISION_MANUAL_VALID_Pos)/*!< LL_TRX_REG TX_ADDR_FILT_DECISION_INFO: TX_ADDR_FILTER_DECISION_MANUAL_VALI
                                                         D Mask                                                                                    */
#define LL_TRX_REG_TX_ADDR_FILT_DECISION_INFO_TX_ADDR_FILTER_DECISION_MANUAL_VALUE_Pos 8              /*!< LL_TRX_REG TX_ADDR_FILT_DECISION_INFO: TX_ADDR_FILTER_DECISION_MANUAL_VALU
                                                         E Position                                                                                */
#define LL_TRX_REG_TX_ADDR_FILT_DECISION_INFO_TX_ADDR_FILTER_DECISION_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_TX_ADDR_FILT_DECISION_INFO_TX_ADDR_FILTER_DECISION_MANUAL_VALUE_Pos)/*!< LL_TRX_REG TX_ADDR_FILT_DECISION_INFO: TX_ADDR_FILTER_DECISION_MANUAL_VALU
                                                         E Mask                                                                                    */
#define LL_TRX_REG_TX_ADDR_FILT_DECISION_INFO_TX_ADDR_FILTER_DECISION_INFO_VALID_Pos 16               /*!< LL_TRX_REG TX_ADDR_FILT_DECISION_INFO: TX_ADDR_FILTER_DECISION_INFO_VALID
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_ADDR_FILT_DECISION_INFO_TX_ADDR_FILTER_DECISION_INFO_VALID_Msk (0x01UL << LL_TRX_REG_TX_ADDR_FILT_DECISION_INFO_TX_ADDR_FILTER_DECISION_INFO_VALID_Pos)/*!< LL_TRX_REG TX_ADDR_FILT_DECISION_INFO: TX_ADDR_FILTER_DECISION_INFO_VALID
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_ADDR_FILT_DECISION_INFO_TX_ADDR_FILTER_DECISION_INFO_VALUE_Pos 24               /*!< LL_TRX_REG TX_ADDR_FILT_DECISION_INFO: TX_ADDR_FILTER_DECISION_INFO_VALUE
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_ADDR_FILT_DECISION_INFO_TX_ADDR_FILTER_DECISION_INFO_VALUE_Msk (0x01UL << LL_TRX_REG_TX_ADDR_FILT_DECISION_INFO_TX_ADDR_FILTER_DECISION_INFO_VALUE_Pos)/*!< LL_TRX_REG TX_ADDR_FILT_DECISION_INFO: TX_ADDR_FILTER_DECISION_INFO_VALUE
                                                         Mask                                                                                      */

/* --------------------  LL_TRX_REG_RX_ADDR_FILT_DECISION_INFO  ------------------- */
#define LL_TRX_REG_RX_ADDR_FILT_DECISION_INFO_RX_ADDR_FILTER_DECISION_MANUAL_INVALID_Pos 0            /*!< LL_TRX_REG RX_ADDR_FILT_DECISION_INFO: RX_ADDR_FILTER_DECISION_MANUAL_INVA
                                                         LID Position                                                                              */
#define LL_TRX_REG_RX_ADDR_FILT_DECISION_INFO_RX_ADDR_FILTER_DECISION_MANUAL_INVALID_Msk (0x01UL << LL_TRX_REG_RX_ADDR_FILT_DECISION_INFO_RX_ADDR_FILTER_DECISION_MANUAL_INVALID_Pos)/*!< LL_TRX_REG RX_ADDR_FILT_DECISION_INFO: RX_ADDR_FILTER_DECISION_MANUAL_INVA
                                                         LID Mask                                                                                  */
#define LL_TRX_REG_RX_ADDR_FILT_DECISION_INFO_RX_ADDR_FILTER_DECISION_MANUAL_SET_Pos 1                /*!< LL_TRX_REG RX_ADDR_FILT_DECISION_INFO: RX_ADDR_FILTER_DECISION_MANUAL_SET
                                                         Position                                                                                  */
#define LL_TRX_REG_RX_ADDR_FILT_DECISION_INFO_RX_ADDR_FILTER_DECISION_MANUAL_SET_Msk (0x01UL << LL_TRX_REG_RX_ADDR_FILT_DECISION_INFO_RX_ADDR_FILTER_DECISION_MANUAL_SET_Pos)/*!< LL_TRX_REG RX_ADDR_FILT_DECISION_INFO: RX_ADDR_FILTER_DECISION_MANUAL_SET
                                                         Mask                                                                                      */
#define LL_TRX_REG_RX_ADDR_FILT_DECISION_INFO_RX_ADDR_FILTER_DECISION_MANUAL_OVERWRITE_Pos 2          /*!< LL_TRX_REG RX_ADDR_FILT_DECISION_INFO: RX_ADDR_FILTER_DECISION_MANUAL_OVER
                                                         WRITE Position                                                                            */
#define LL_TRX_REG_RX_ADDR_FILT_DECISION_INFO_RX_ADDR_FILTER_DECISION_MANUAL_OVERWRITE_Msk (0x01UL << LL_TRX_REG_RX_ADDR_FILT_DECISION_INFO_RX_ADDR_FILTER_DECISION_MANUAL_OVERWRITE_Pos)/*!< LL_TRX_REG RX_ADDR_FILT_DECISION_INFO: RX_ADDR_FILTER_DECISION_MANUAL_OVER
                                                         WRITE Mask                                                                                */
#define LL_TRX_REG_RX_ADDR_FILT_DECISION_INFO_RX_ADDR_FILTER_DECISION_MANUAL_VALID_Pos 4              /*!< LL_TRX_REG RX_ADDR_FILT_DECISION_INFO: RX_ADDR_FILTER_DECISION_MANUAL_VALI
                                                         D Position                                                                                */
#define LL_TRX_REG_RX_ADDR_FILT_DECISION_INFO_RX_ADDR_FILTER_DECISION_MANUAL_VALID_Msk (0x01UL << LL_TRX_REG_RX_ADDR_FILT_DECISION_INFO_RX_ADDR_FILTER_DECISION_MANUAL_VALID_Pos)/*!< LL_TRX_REG RX_ADDR_FILT_DECISION_INFO: RX_ADDR_FILTER_DECISION_MANUAL_VALI
                                                         D Mask                                                                                    */
#define LL_TRX_REG_RX_ADDR_FILT_DECISION_INFO_RX_ADDR_FILTER_DECISION_MANUAL_VALUE_Pos 8              /*!< LL_TRX_REG RX_ADDR_FILT_DECISION_INFO: RX_ADDR_FILTER_DECISION_MANUAL_VALU
                                                         E Position                                                                                */
#define LL_TRX_REG_RX_ADDR_FILT_DECISION_INFO_RX_ADDR_FILTER_DECISION_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_RX_ADDR_FILT_DECISION_INFO_RX_ADDR_FILTER_DECISION_MANUAL_VALUE_Pos)/*!< LL_TRX_REG RX_ADDR_FILT_DECISION_INFO: RX_ADDR_FILTER_DECISION_MANUAL_VALU
                                                         E Mask                                                                                    */
#define LL_TRX_REG_RX_ADDR_FILT_DECISION_INFO_RX_ADDR_FILTER_DECISION_INFO_VALID_Pos 16               /*!< LL_TRX_REG RX_ADDR_FILT_DECISION_INFO: RX_ADDR_FILTER_DECISION_INFO_VALID
                                                         Position                                                                                  */
#define LL_TRX_REG_RX_ADDR_FILT_DECISION_INFO_RX_ADDR_FILTER_DECISION_INFO_VALID_Msk (0x01UL << LL_TRX_REG_RX_ADDR_FILT_DECISION_INFO_RX_ADDR_FILTER_DECISION_INFO_VALID_Pos)/*!< LL_TRX_REG RX_ADDR_FILT_DECISION_INFO: RX_ADDR_FILTER_DECISION_INFO_VALID
                                                         Mask                                                                                      */
#define LL_TRX_REG_RX_ADDR_FILT_DECISION_INFO_RX_ADDR_FILTER_DECISION_INFO_VALUE_Pos 24               /*!< LL_TRX_REG RX_ADDR_FILT_DECISION_INFO: RX_ADDR_FILTER_DECISION_INFO_VALUE
                                                         Position                                                                                  */
#define LL_TRX_REG_RX_ADDR_FILT_DECISION_INFO_RX_ADDR_FILTER_DECISION_INFO_VALUE_Msk (0x01UL << LL_TRX_REG_RX_ADDR_FILT_DECISION_INFO_RX_ADDR_FILTER_DECISION_INFO_VALUE_Pos)/*!< LL_TRX_REG RX_ADDR_FILT_DECISION_INFO: RX_ADDR_FILTER_DECISION_INFO_VALUE
                                                         Mask                                                                                      */

/* -------------------------  LL_TRX_REG_AS_ACK_ADV_INFO  ------------------------- */
#define LL_TRX_REG_AS_ACK_ADV_INFO_AS_ACK_ADV_MANUAL_INVALID_Pos 0                                    /*!< LL_TRX_REG AS_ACK_ADV_INFO: AS_ACK_ADV_MANUAL_INVALID Position */
#define LL_TRX_REG_AS_ACK_ADV_INFO_AS_ACK_ADV_MANUAL_INVALID_Msk (0x01UL << LL_TRX_REG_AS_ACK_ADV_INFO_AS_ACK_ADV_MANUAL_INVALID_Pos)/*!< LL_TRX_REG AS_ACK_ADV_INFO: AS_ACK_ADV_MANUAL_INVALID Mask */
#define LL_TRX_REG_AS_ACK_ADV_INFO_AS_ACK_ADV_MANUAL_SET_Pos 1                                        /*!< LL_TRX_REG AS_ACK_ADV_INFO: AS_ACK_ADV_MANUAL_SET Position */
#define LL_TRX_REG_AS_ACK_ADV_INFO_AS_ACK_ADV_MANUAL_SET_Msk (0x01UL << LL_TRX_REG_AS_ACK_ADV_INFO_AS_ACK_ADV_MANUAL_SET_Pos)/*!< LL_TRX_REG AS_ACK_ADV_INFO: AS_ACK_ADV_MANUAL_SET Mask */
#define LL_TRX_REG_AS_ACK_ADV_INFO_AS_ACK_ADV_MANUAL_OVERWRITE_Pos 2                                  /*!< LL_TRX_REG AS_ACK_ADV_INFO: AS_ACK_ADV_MANUAL_OVERWRITE Position */
#define LL_TRX_REG_AS_ACK_ADV_INFO_AS_ACK_ADV_MANUAL_OVERWRITE_Msk (0x01UL << LL_TRX_REG_AS_ACK_ADV_INFO_AS_ACK_ADV_MANUAL_OVERWRITE_Pos)/*!< LL_TRX_REG AS_ACK_ADV_INFO: AS_ACK_ADV_MANUAL_OVERWRITE Mask */
#define LL_TRX_REG_AS_ACK_ADV_INFO_AS_ACK_ADV_MANUAL_VALID_Pos 4                                      /*!< LL_TRX_REG AS_ACK_ADV_INFO: AS_ACK_ADV_MANUAL_VALID Position */
#define LL_TRX_REG_AS_ACK_ADV_INFO_AS_ACK_ADV_MANUAL_VALID_Msk (0x01UL << LL_TRX_REG_AS_ACK_ADV_INFO_AS_ACK_ADV_MANUAL_VALID_Pos)/*!< LL_TRX_REG AS_ACK_ADV_INFO: AS_ACK_ADV_MANUAL_VALID Mask */
#define LL_TRX_REG_AS_ACK_ADV_INFO_AS_ACK_ADV_MANUAL_VALUE_Pos 8                                      /*!< LL_TRX_REG AS_ACK_ADV_INFO: AS_ACK_ADV_MANUAL_VALUE Position */
#define LL_TRX_REG_AS_ACK_ADV_INFO_AS_ACK_ADV_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_AS_ACK_ADV_INFO_AS_ACK_ADV_MANUAL_VALUE_Pos)/*!< LL_TRX_REG AS_ACK_ADV_INFO: AS_ACK_ADV_MANUAL_VALUE Mask */
#define LL_TRX_REG_AS_ACK_ADV_INFO_AS_ACK_ADV_INFO_VALID_Pos 16                                       /*!< LL_TRX_REG AS_ACK_ADV_INFO: AS_ACK_ADV_INFO_VALID Position */
#define LL_TRX_REG_AS_ACK_ADV_INFO_AS_ACK_ADV_INFO_VALID_Msk (0x01UL << LL_TRX_REG_AS_ACK_ADV_INFO_AS_ACK_ADV_INFO_VALID_Pos)/*!< LL_TRX_REG AS_ACK_ADV_INFO: AS_ACK_ADV_INFO_VALID Mask */
#define LL_TRX_REG_AS_ACK_ADV_INFO_AS_ACK_ADV_INFO_VALUE_Pos 24                                       /*!< LL_TRX_REG AS_ACK_ADV_INFO: AS_ACK_ADV_INFO_VALUE Position */
#define LL_TRX_REG_AS_ACK_ADV_INFO_AS_ACK_ADV_INFO_VALUE_Msk (0x01UL << LL_TRX_REG_AS_ACK_ADV_INFO_AS_ACK_ADV_INFO_VALUE_Pos)/*!< LL_TRX_REG AS_ACK_ADV_INFO: AS_ACK_ADV_INFO_VALUE Mask */

/* -------------------------  LL_TRX_REG_AS_ACK_DATA_INFO  ------------------------ */
#define LL_TRX_REG_AS_ACK_DATA_INFO_AS_ACK_DATA_MANUAL_INVALID_Pos 0                                  /*!< LL_TRX_REG AS_ACK_DATA_INFO: AS_ACK_DATA_MANUAL_INVALID Position */
#define LL_TRX_REG_AS_ACK_DATA_INFO_AS_ACK_DATA_MANUAL_INVALID_Msk (0x01UL << LL_TRX_REG_AS_ACK_DATA_INFO_AS_ACK_DATA_MANUAL_INVALID_Pos)/*!< LL_TRX_REG AS_ACK_DATA_INFO: AS_ACK_DATA_MANUAL_INVALID Mask */
#define LL_TRX_REG_AS_ACK_DATA_INFO_AS_ACK_DATA_MANUAL_SET_Pos 1                                      /*!< LL_TRX_REG AS_ACK_DATA_INFO: AS_ACK_DATA_MANUAL_SET Position */
#define LL_TRX_REG_AS_ACK_DATA_INFO_AS_ACK_DATA_MANUAL_SET_Msk (0x01UL << LL_TRX_REG_AS_ACK_DATA_INFO_AS_ACK_DATA_MANUAL_SET_Pos)/*!< LL_TRX_REG AS_ACK_DATA_INFO: AS_ACK_DATA_MANUAL_SET Mask */
#define LL_TRX_REG_AS_ACK_DATA_INFO_AS_ACK_DATA_MANUAL_OVERWRITE_Pos 2                                /*!< LL_TRX_REG AS_ACK_DATA_INFO: AS_ACK_DATA_MANUAL_OVERWRITE Position */
#define LL_TRX_REG_AS_ACK_DATA_INFO_AS_ACK_DATA_MANUAL_OVERWRITE_Msk (0x01UL << LL_TRX_REG_AS_ACK_DATA_INFO_AS_ACK_DATA_MANUAL_OVERWRITE_Pos)/*!< LL_TRX_REG AS_ACK_DATA_INFO: AS_ACK_DATA_MANUAL_OVERWRITE Mask */
#define LL_TRX_REG_AS_ACK_DATA_INFO_AS_ACK_DATA_MANUAL_VALID_Pos 4                                    /*!< LL_TRX_REG AS_ACK_DATA_INFO: AS_ACK_DATA_MANUAL_VALID Position */
#define LL_TRX_REG_AS_ACK_DATA_INFO_AS_ACK_DATA_MANUAL_VALID_Msk (0x01UL << LL_TRX_REG_AS_ACK_DATA_INFO_AS_ACK_DATA_MANUAL_VALID_Pos)/*!< LL_TRX_REG AS_ACK_DATA_INFO: AS_ACK_DATA_MANUAL_VALID Mask */
#define LL_TRX_REG_AS_ACK_DATA_INFO_AS_ACK_DATA_MANUAL_VALUE_Pos 8                                    /*!< LL_TRX_REG AS_ACK_DATA_INFO: AS_ACK_DATA_MANUAL_VALUE Position */
#define LL_TRX_REG_AS_ACK_DATA_INFO_AS_ACK_DATA_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_AS_ACK_DATA_INFO_AS_ACK_DATA_MANUAL_VALUE_Pos)/*!< LL_TRX_REG AS_ACK_DATA_INFO: AS_ACK_DATA_MANUAL_VALUE Mask */
#define LL_TRX_REG_AS_ACK_DATA_INFO_AS_ACK_DATA_INFO_VALID_Pos 16                                     /*!< LL_TRX_REG AS_ACK_DATA_INFO: AS_ACK_DATA_INFO_VALID Position */
#define LL_TRX_REG_AS_ACK_DATA_INFO_AS_ACK_DATA_INFO_VALID_Msk (0x01UL << LL_TRX_REG_AS_ACK_DATA_INFO_AS_ACK_DATA_INFO_VALID_Pos)/*!< LL_TRX_REG AS_ACK_DATA_INFO: AS_ACK_DATA_INFO_VALID Mask */
#define LL_TRX_REG_AS_ACK_DATA_INFO_AS_ACK_DATA_INFO_VALUE_Pos 24                                     /*!< LL_TRX_REG AS_ACK_DATA_INFO: AS_ACK_DATA_INFO_VALUE Position */
#define LL_TRX_REG_AS_ACK_DATA_INFO_AS_ACK_DATA_INFO_VALUE_Msk (0x01UL << LL_TRX_REG_AS_ACK_DATA_INFO_AS_ACK_DATA_INFO_VALUE_Pos)/*!< LL_TRX_REG AS_ACK_DATA_INFO: AS_ACK_DATA_INFO_VALUE Mask */

/* --------------------------  LL_TRX_REG_NON_NULL_INFO  -------------------------- */
#define LL_TRX_REG_NON_NULL_INFO_NON_NULL_MANUAL_INVALID_Pos 0                                        /*!< LL_TRX_REG NON_NULL_INFO: NON_NULL_MANUAL_INVALID Position */
#define LL_TRX_REG_NON_NULL_INFO_NON_NULL_MANUAL_INVALID_Msk (0x01UL << LL_TRX_REG_NON_NULL_INFO_NON_NULL_MANUAL_INVALID_Pos)/*!< LL_TRX_REG NON_NULL_INFO: NON_NULL_MANUAL_INVALID Mask */
#define LL_TRX_REG_NON_NULL_INFO_NON_NULL_MANUAL_SET_Pos 1                                            /*!< LL_TRX_REG NON_NULL_INFO: NON_NULL_MANUAL_SET Position */
#define LL_TRX_REG_NON_NULL_INFO_NON_NULL_MANUAL_SET_Msk (0x01UL << LL_TRX_REG_NON_NULL_INFO_NON_NULL_MANUAL_SET_Pos)/*!< LL_TRX_REG NON_NULL_INFO: NON_NULL_MANUAL_SET Mask */
#define LL_TRX_REG_NON_NULL_INFO_NON_NULL_MANUAL_OVERWRITE_Pos 2                                      /*!< LL_TRX_REG NON_NULL_INFO: NON_NULL_MANUAL_OVERWRITE Position */
#define LL_TRX_REG_NON_NULL_INFO_NON_NULL_MANUAL_OVERWRITE_Msk (0x01UL << LL_TRX_REG_NON_NULL_INFO_NON_NULL_MANUAL_OVERWRITE_Pos)/*!< LL_TRX_REG NON_NULL_INFO: NON_NULL_MANUAL_OVERWRITE Mask */
#define LL_TRX_REG_NON_NULL_INFO_NON_NULL_MANUAL_VALID_Pos 4                                          /*!< LL_TRX_REG NON_NULL_INFO: NON_NULL_MANUAL_VALID Position */
#define LL_TRX_REG_NON_NULL_INFO_NON_NULL_MANUAL_VALID_Msk (0x01UL << LL_TRX_REG_NON_NULL_INFO_NON_NULL_MANUAL_VALID_Pos)/*!< LL_TRX_REG NON_NULL_INFO: NON_NULL_MANUAL_VALID Mask */
#define LL_TRX_REG_NON_NULL_INFO_NON_NULL_MANUAL_VALUE_Pos 8                                          /*!< LL_TRX_REG NON_NULL_INFO: NON_NULL_MANUAL_VALUE Position */
#define LL_TRX_REG_NON_NULL_INFO_NON_NULL_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_NON_NULL_INFO_NON_NULL_MANUAL_VALUE_Pos)/*!< LL_TRX_REG NON_NULL_INFO: NON_NULL_MANUAL_VALUE Mask */
#define LL_TRX_REG_NON_NULL_INFO_NON_NULL_INFO_VALID_Pos 16                                           /*!< LL_TRX_REG NON_NULL_INFO: NON_NULL_INFO_VALID Position */
#define LL_TRX_REG_NON_NULL_INFO_NON_NULL_INFO_VALID_Msk (0x01UL << LL_TRX_REG_NON_NULL_INFO_NON_NULL_INFO_VALID_Pos)/*!< LL_TRX_REG NON_NULL_INFO: NON_NULL_INFO_VALID Mask */
#define LL_TRX_REG_NON_NULL_INFO_NON_NULL_INFO_VALUE_Pos 24                                           /*!< LL_TRX_REG NON_NULL_INFO: NON_NULL_INFO_VALUE Position */
#define LL_TRX_REG_NON_NULL_INFO_NON_NULL_INFO_VALUE_Msk (0x01UL << LL_TRX_REG_NON_NULL_INFO_NON_NULL_INFO_VALUE_Pos)/*!< LL_TRX_REG NON_NULL_INFO: NON_NULL_INFO_VALUE Mask */

/* ---------------------  LL_TRX_REG_TX_ADDR_FILTER_HIT_INFO  --------------------- */
#define LL_TRX_REG_TX_ADDR_FILTER_HIT_INFO_TX_ADDR_FILTER_HIT_MANUAL_INVALID_Pos 0                    /*!< LL_TRX_REG TX_ADDR_FILTER_HIT_INFO: TX_ADDR_FILTER_HIT_MANUAL_INVALID
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_ADDR_FILTER_HIT_INFO_TX_ADDR_FILTER_HIT_MANUAL_INVALID_Msk (0x01UL << LL_TRX_REG_TX_ADDR_FILTER_HIT_INFO_TX_ADDR_FILTER_HIT_MANUAL_INVALID_Pos)/*!< LL_TRX_REG TX_ADDR_FILTER_HIT_INFO: TX_ADDR_FILTER_HIT_MANUAL_INVALID
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_ADDR_FILTER_HIT_INFO_TX_ADDR_FILTER_HIT_MANUAL_SET_Pos 1                        /*!< LL_TRX_REG TX_ADDR_FILTER_HIT_INFO: TX_ADDR_FILTER_HIT_MANUAL_SET
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_ADDR_FILTER_HIT_INFO_TX_ADDR_FILTER_HIT_MANUAL_SET_Msk (0x01UL << LL_TRX_REG_TX_ADDR_FILTER_HIT_INFO_TX_ADDR_FILTER_HIT_MANUAL_SET_Pos)/*!< LL_TRX_REG TX_ADDR_FILTER_HIT_INFO: TX_ADDR_FILTER_HIT_MANUAL_SET
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_ADDR_FILTER_HIT_INFO_TX_ADDR_FILTER_HIT_MANUAL_OVERWRITE_Pos 2                  /*!< LL_TRX_REG TX_ADDR_FILTER_HIT_INFO: TX_ADDR_FILTER_HIT_MANUAL_OVERWRITE
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_ADDR_FILTER_HIT_INFO_TX_ADDR_FILTER_HIT_MANUAL_OVERWRITE_Msk (0x01UL << LL_TRX_REG_TX_ADDR_FILTER_HIT_INFO_TX_ADDR_FILTER_HIT_MANUAL_OVERWRITE_Pos)/*!< LL_TRX_REG TX_ADDR_FILTER_HIT_INFO: TX_ADDR_FILTER_HIT_MANUAL_OVERWRITE
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_ADDR_FILTER_HIT_INFO_TX_ADDR_FILTER_HIT_MANUAL_VALID_Pos 4                      /*!< LL_TRX_REG TX_ADDR_FILTER_HIT_INFO: TX_ADDR_FILTER_HIT_MANUAL_VALID
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_ADDR_FILTER_HIT_INFO_TX_ADDR_FILTER_HIT_MANUAL_VALID_Msk (0x01UL << LL_TRX_REG_TX_ADDR_FILTER_HIT_INFO_TX_ADDR_FILTER_HIT_MANUAL_VALID_Pos)/*!< LL_TRX_REG TX_ADDR_FILTER_HIT_INFO: TX_ADDR_FILTER_HIT_MANUAL_VALID
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_ADDR_FILTER_HIT_INFO_TX_ADDR_FILTER_HIT_MANUAL_VALUE_Pos 8                      /*!< LL_TRX_REG TX_ADDR_FILTER_HIT_INFO: TX_ADDR_FILTER_HIT_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_ADDR_FILTER_HIT_INFO_TX_ADDR_FILTER_HIT_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_TX_ADDR_FILTER_HIT_INFO_TX_ADDR_FILTER_HIT_MANUAL_VALUE_Pos)/*!< LL_TRX_REG TX_ADDR_FILTER_HIT_INFO: TX_ADDR_FILTER_HIT_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_ADDR_FILTER_HIT_INFO_TX_ADDR_FILTER_HIT_INFO_VALID_Pos 16                       /*!< LL_TRX_REG TX_ADDR_FILTER_HIT_INFO: TX_ADDR_FILTER_HIT_INFO_VALID
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_ADDR_FILTER_HIT_INFO_TX_ADDR_FILTER_HIT_INFO_VALID_Msk (0x01UL << LL_TRX_REG_TX_ADDR_FILTER_HIT_INFO_TX_ADDR_FILTER_HIT_INFO_VALID_Pos)/*!< LL_TRX_REG TX_ADDR_FILTER_HIT_INFO: TX_ADDR_FILTER_HIT_INFO_VALID
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_ADDR_FILTER_HIT_INFO_TX_ADDR_FILTER_HIT_INFO_VALUE_Pos 24                       /*!< LL_TRX_REG TX_ADDR_FILTER_HIT_INFO: TX_ADDR_FILTER_HIT_INFO_VALUE
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_ADDR_FILTER_HIT_INFO_TX_ADDR_FILTER_HIT_INFO_VALUE_Msk (0x01UL << LL_TRX_REG_TX_ADDR_FILTER_HIT_INFO_TX_ADDR_FILTER_HIT_INFO_VALUE_Pos)/*!< LL_TRX_REG TX_ADDR_FILTER_HIT_INFO: TX_ADDR_FILTER_HIT_INFO_VALUE
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_RX_ADDR_FILTER_HIT_INFO  --------------------- */
#define LL_TRX_REG_RX_ADDR_FILTER_HIT_INFO_RX_ADDR_FILTER_HIT_MANUAL_INVALID_Pos 0                    /*!< LL_TRX_REG RX_ADDR_FILTER_HIT_INFO: RX_ADDR_FILTER_HIT_MANUAL_INVALID
                                                         Position                                                                                  */
#define LL_TRX_REG_RX_ADDR_FILTER_HIT_INFO_RX_ADDR_FILTER_HIT_MANUAL_INVALID_Msk (0x01UL << LL_TRX_REG_RX_ADDR_FILTER_HIT_INFO_RX_ADDR_FILTER_HIT_MANUAL_INVALID_Pos)/*!< LL_TRX_REG RX_ADDR_FILTER_HIT_INFO: RX_ADDR_FILTER_HIT_MANUAL_INVALID
                                                         Mask                                                                                      */
#define LL_TRX_REG_RX_ADDR_FILTER_HIT_INFO_RX_ADDR_FILTER_HIT_MANUAL_SET_Pos 1                        /*!< LL_TRX_REG RX_ADDR_FILTER_HIT_INFO: RX_ADDR_FILTER_HIT_MANUAL_SET
                                                         Position                                                                                  */
#define LL_TRX_REG_RX_ADDR_FILTER_HIT_INFO_RX_ADDR_FILTER_HIT_MANUAL_SET_Msk (0x01UL << LL_TRX_REG_RX_ADDR_FILTER_HIT_INFO_RX_ADDR_FILTER_HIT_MANUAL_SET_Pos)/*!< LL_TRX_REG RX_ADDR_FILTER_HIT_INFO: RX_ADDR_FILTER_HIT_MANUAL_SET
                                                         Mask                                                                                      */
#define LL_TRX_REG_RX_ADDR_FILTER_HIT_INFO_RX_ADDR_FILTER_HIT_MANUAL_OVERWRITE_Pos 2                  /*!< LL_TRX_REG RX_ADDR_FILTER_HIT_INFO: RX_ADDR_FILTER_HIT_MANUAL_OVERWRITE
                                                         Position                                                                                  */
#define LL_TRX_REG_RX_ADDR_FILTER_HIT_INFO_RX_ADDR_FILTER_HIT_MANUAL_OVERWRITE_Msk (0x01UL << LL_TRX_REG_RX_ADDR_FILTER_HIT_INFO_RX_ADDR_FILTER_HIT_MANUAL_OVERWRITE_Pos)/*!< LL_TRX_REG RX_ADDR_FILTER_HIT_INFO: RX_ADDR_FILTER_HIT_MANUAL_OVERWRITE
                                                         Mask                                                                                      */
#define LL_TRX_REG_RX_ADDR_FILTER_HIT_INFO_RX_ADDR_FILTER_HIT_MANUAL_VALID_Pos 4                      /*!< LL_TRX_REG RX_ADDR_FILTER_HIT_INFO: RX_ADDR_FILTER_HIT_MANUAL_VALID
                                                         Position                                                                                  */
#define LL_TRX_REG_RX_ADDR_FILTER_HIT_INFO_RX_ADDR_FILTER_HIT_MANUAL_VALID_Msk (0x01UL << LL_TRX_REG_RX_ADDR_FILTER_HIT_INFO_RX_ADDR_FILTER_HIT_MANUAL_VALID_Pos)/*!< LL_TRX_REG RX_ADDR_FILTER_HIT_INFO: RX_ADDR_FILTER_HIT_MANUAL_VALID
                                                         Mask                                                                                      */
#define LL_TRX_REG_RX_ADDR_FILTER_HIT_INFO_RX_ADDR_FILTER_HIT_MANUAL_VALUE_Pos 8                      /*!< LL_TRX_REG RX_ADDR_FILTER_HIT_INFO: RX_ADDR_FILTER_HIT_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_TRX_REG_RX_ADDR_FILTER_HIT_INFO_RX_ADDR_FILTER_HIT_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_RX_ADDR_FILTER_HIT_INFO_RX_ADDR_FILTER_HIT_MANUAL_VALUE_Pos)/*!< LL_TRX_REG RX_ADDR_FILTER_HIT_INFO: RX_ADDR_FILTER_HIT_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_TRX_REG_RX_ADDR_FILTER_HIT_INFO_RX_ADDR_FILTER_HIT_INFO_VALID_Pos 16                       /*!< LL_TRX_REG RX_ADDR_FILTER_HIT_INFO: RX_ADDR_FILTER_HIT_INFO_VALID
                                                         Position                                                                                  */
#define LL_TRX_REG_RX_ADDR_FILTER_HIT_INFO_RX_ADDR_FILTER_HIT_INFO_VALID_Msk (0x01UL << LL_TRX_REG_RX_ADDR_FILTER_HIT_INFO_RX_ADDR_FILTER_HIT_INFO_VALID_Pos)/*!< LL_TRX_REG RX_ADDR_FILTER_HIT_INFO: RX_ADDR_FILTER_HIT_INFO_VALID
                                                         Mask                                                                                      */
#define LL_TRX_REG_RX_ADDR_FILTER_HIT_INFO_RX_ADDR_FILTER_HIT_INFO_VALUE_Pos 24                       /*!< LL_TRX_REG RX_ADDR_FILTER_HIT_INFO: RX_ADDR_FILTER_HIT_INFO_VALUE
                                                         Position                                                                                  */
#define LL_TRX_REG_RX_ADDR_FILTER_HIT_INFO_RX_ADDR_FILTER_HIT_INFO_VALUE_Msk (0x01UL << LL_TRX_REG_RX_ADDR_FILTER_HIT_INFO_RX_ADDR_FILTER_HIT_INFO_VALUE_Pos)/*!< LL_TRX_REG RX_ADDR_FILTER_HIT_INFO: RX_ADDR_FILTER_HIT_INFO_VALUE
                                                         Mask                                                                                      */

/* --------------------  LL_TRX_REG_TX_ADDR_FILTER_RESULT_INFO  ------------------- */
#define LL_TRX_REG_TX_ADDR_FILTER_RESULT_INFO_TX_ADDR_FILTER_RESULT_MANUAL_INVALID_Pos 0              /*!< LL_TRX_REG TX_ADDR_FILTER_RESULT_INFO: TX_ADDR_FILTER_RESULT_MANUAL_INVALI
                                                         D Position                                                                                */
#define LL_TRX_REG_TX_ADDR_FILTER_RESULT_INFO_TX_ADDR_FILTER_RESULT_MANUAL_INVALID_Msk (0x01UL << LL_TRX_REG_TX_ADDR_FILTER_RESULT_INFO_TX_ADDR_FILTER_RESULT_MANUAL_INVALID_Pos)/*!< LL_TRX_REG TX_ADDR_FILTER_RESULT_INFO: TX_ADDR_FILTER_RESULT_MANUAL_INVALI
                                                         D Mask                                                                                    */
#define LL_TRX_REG_TX_ADDR_FILTER_RESULT_INFO_TX_ADDR_FILTER_RESULT_MANUAL_SET_Pos 1                  /*!< LL_TRX_REG TX_ADDR_FILTER_RESULT_INFO: TX_ADDR_FILTER_RESULT_MANUAL_SET
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_ADDR_FILTER_RESULT_INFO_TX_ADDR_FILTER_RESULT_MANUAL_SET_Msk (0x01UL << LL_TRX_REG_TX_ADDR_FILTER_RESULT_INFO_TX_ADDR_FILTER_RESULT_MANUAL_SET_Pos)/*!< LL_TRX_REG TX_ADDR_FILTER_RESULT_INFO: TX_ADDR_FILTER_RESULT_MANUAL_SET
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_ADDR_FILTER_RESULT_INFO_TX_ADDR_FILTER_RESULT_MANUAL_OVERWRITE_Pos 2            /*!< LL_TRX_REG TX_ADDR_FILTER_RESULT_INFO: TX_ADDR_FILTER_RESULT_MANUAL_OVERWR
                                                         ITE Position                                                                              */
#define LL_TRX_REG_TX_ADDR_FILTER_RESULT_INFO_TX_ADDR_FILTER_RESULT_MANUAL_OVERWRITE_Msk (0x01UL << LL_TRX_REG_TX_ADDR_FILTER_RESULT_INFO_TX_ADDR_FILTER_RESULT_MANUAL_OVERWRITE_Pos)/*!< LL_TRX_REG TX_ADDR_FILTER_RESULT_INFO: TX_ADDR_FILTER_RESULT_MANUAL_OVERWR
                                                         ITE Mask                                                                                  */
#define LL_TRX_REG_TX_ADDR_FILTER_RESULT_INFO_TX_ADDR_FILTER_RESULT_MANUAL_VALID_Pos 4                /*!< LL_TRX_REG TX_ADDR_FILTER_RESULT_INFO: TX_ADDR_FILTER_RESULT_MANUAL_VALID
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_ADDR_FILTER_RESULT_INFO_TX_ADDR_FILTER_RESULT_MANUAL_VALID_Msk (0x01UL << LL_TRX_REG_TX_ADDR_FILTER_RESULT_INFO_TX_ADDR_FILTER_RESULT_MANUAL_VALID_Pos)/*!< LL_TRX_REG TX_ADDR_FILTER_RESULT_INFO: TX_ADDR_FILTER_RESULT_MANUAL_VALID
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_ADDR_FILTER_RESULT_INFO_TX_ADDR_FILTER_RESULT_MANUAL_VALUE_Pos 8                /*!< LL_TRX_REG TX_ADDR_FILTER_RESULT_INFO: TX_ADDR_FILTER_RESULT_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_ADDR_FILTER_RESULT_INFO_TX_ADDR_FILTER_RESULT_MANUAL_VALUE_Msk (0x000000ffUL << LL_TRX_REG_TX_ADDR_FILTER_RESULT_INFO_TX_ADDR_FILTER_RESULT_MANUAL_VALUE_Pos)/*!< LL_TRX_REG TX_ADDR_FILTER_RESULT_INFO: TX_ADDR_FILTER_RESULT_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_ADDR_FILTER_RESULT_INFO_TX_ADDR_FILTER_RESULT_INFO_VALID_Pos 16                 /*!< LL_TRX_REG TX_ADDR_FILTER_RESULT_INFO: TX_ADDR_FILTER_RESULT_INFO_VALID
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_ADDR_FILTER_RESULT_INFO_TX_ADDR_FILTER_RESULT_INFO_VALID_Msk (0x01UL << LL_TRX_REG_TX_ADDR_FILTER_RESULT_INFO_TX_ADDR_FILTER_RESULT_INFO_VALID_Pos)/*!< LL_TRX_REG TX_ADDR_FILTER_RESULT_INFO: TX_ADDR_FILTER_RESULT_INFO_VALID
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_ADDR_FILTER_RESULT_INFO_TX_ADDR_FILTER_RESULT_INFO_VALUE_Pos 24                 /*!< LL_TRX_REG TX_ADDR_FILTER_RESULT_INFO: TX_ADDR_FILTER_RESULT_INFO_VALUE
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_ADDR_FILTER_RESULT_INFO_TX_ADDR_FILTER_RESULT_INFO_VALUE_Msk (0x000000ffUL << LL_TRX_REG_TX_ADDR_FILTER_RESULT_INFO_TX_ADDR_FILTER_RESULT_INFO_VALUE_Pos)/*!< LL_TRX_REG TX_ADDR_FILTER_RESULT_INFO: TX_ADDR_FILTER_RESULT_INFO_VALUE
                                                         Mask                                                                                      */

/* ----------------------  LL_TRX_REG_ADDR_TYPE_PEER_INFO_1  ---------------------- */
#define LL_TRX_REG_ADDR_TYPE_PEER_INFO_1_ADDR_TYPE_PEER_MANUAL_INVALID_Pos 0                          /*!< LL_TRX_REG ADDR_TYPE_PEER_INFO_1: ADDR_TYPE_PEER_MANUAL_INVALID
                                                         Position                                                                                  */
#define LL_TRX_REG_ADDR_TYPE_PEER_INFO_1_ADDR_TYPE_PEER_MANUAL_INVALID_Msk (0x01UL << LL_TRX_REG_ADDR_TYPE_PEER_INFO_1_ADDR_TYPE_PEER_MANUAL_INVALID_Pos)/*!< LL_TRX_REG ADDR_TYPE_PEER_INFO_1: ADDR_TYPE_PEER_MANUAL_INVALID
                                                         Mask                                                                                      */
#define LL_TRX_REG_ADDR_TYPE_PEER_INFO_1_ADDR_TYPE_PEER_MANUAL_SET_Pos 1                              /*!< LL_TRX_REG ADDR_TYPE_PEER_INFO_1: ADDR_TYPE_PEER_MANUAL_SET
                                                         Position                                                                                  */
#define LL_TRX_REG_ADDR_TYPE_PEER_INFO_1_ADDR_TYPE_PEER_MANUAL_SET_Msk (0x01UL << LL_TRX_REG_ADDR_TYPE_PEER_INFO_1_ADDR_TYPE_PEER_MANUAL_SET_Pos)/*!< LL_TRX_REG ADDR_TYPE_PEER_INFO_1: ADDR_TYPE_PEER_MANUAL_SET
                                                         Mask                                                                                      */
#define LL_TRX_REG_ADDR_TYPE_PEER_INFO_1_ADDR_TYPE_PEER_MANUAL_OVERWRITE_Pos 2                        /*!< LL_TRX_REG ADDR_TYPE_PEER_INFO_1: ADDR_TYPE_PEER_MANUAL_OVERWRITE
                                                         Position                                                                                  */
#define LL_TRX_REG_ADDR_TYPE_PEER_INFO_1_ADDR_TYPE_PEER_MANUAL_OVERWRITE_Msk (0x01UL << LL_TRX_REG_ADDR_TYPE_PEER_INFO_1_ADDR_TYPE_PEER_MANUAL_OVERWRITE_Pos)/*!< LL_TRX_REG ADDR_TYPE_PEER_INFO_1: ADDR_TYPE_PEER_MANUAL_OVERWRITE
                                                         Mask                                                                                      */
#define LL_TRX_REG_ADDR_TYPE_PEER_INFO_1_ADDR_TYPE_PEER_MANUAL_VALID_Pos 4                            /*!< LL_TRX_REG ADDR_TYPE_PEER_INFO_1: ADDR_TYPE_PEER_MANUAL_VALID
                                                         Position                                                                                  */
#define LL_TRX_REG_ADDR_TYPE_PEER_INFO_1_ADDR_TYPE_PEER_MANUAL_VALID_Msk (0x01UL << LL_TRX_REG_ADDR_TYPE_PEER_INFO_1_ADDR_TYPE_PEER_MANUAL_VALID_Pos)/*!< LL_TRX_REG ADDR_TYPE_PEER_INFO_1: ADDR_TYPE_PEER_MANUAL_VALID
                                                         Mask                                                                                      */
#define LL_TRX_REG_ADDR_TYPE_PEER_INFO_1_ADDR_TYPE_PEER_INFO_VALID_Pos 16                             /*!< LL_TRX_REG ADDR_TYPE_PEER_INFO_1: ADDR_TYPE_PEER_INFO_VALID
                                                         Position                                                                                  */
#define LL_TRX_REG_ADDR_TYPE_PEER_INFO_1_ADDR_TYPE_PEER_INFO_VALID_Msk (0x01UL << LL_TRX_REG_ADDR_TYPE_PEER_INFO_1_ADDR_TYPE_PEER_INFO_VALID_Pos)/*!< LL_TRX_REG ADDR_TYPE_PEER_INFO_1: ADDR_TYPE_PEER_INFO_VALID
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_ADDR_TYPE_PEER_INFO_2_0  --------------------- */
#define LL_TRX_REG_ADDR_TYPE_PEER_INFO_2_0_ADDR_TYPE_PEER_MANUAL_VALUE_31_0_Pos 0                     /*!< LL_TRX_REG ADDR_TYPE_PEER_INFO_2_0: ADDR_TYPE_PEER_MANUAL_VALUE_31_0
                                                         Position                                                                                  */
#define LL_TRX_REG_ADDR_TYPE_PEER_INFO_2_0_ADDR_TYPE_PEER_MANUAL_VALUE_31_0_Msk (0xffffffffUL << LL_TRX_REG_ADDR_TYPE_PEER_INFO_2_0_ADDR_TYPE_PEER_MANUAL_VALUE_31_0_Pos)/*!< LL_TRX_REG ADDR_TYPE_PEER_INFO_2_0: ADDR_TYPE_PEER_MANUAL_VALUE_31_0
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_ADDR_TYPE_PEER_INFO_2_1  --------------------- */
#define LL_TRX_REG_ADDR_TYPE_PEER_INFO_2_1_ADDR_TYPE_PEER_MANUAL_VALUE_48_32_Pos 0                    /*!< LL_TRX_REG ADDR_TYPE_PEER_INFO_2_1: ADDR_TYPE_PEER_MANUAL_VALUE_48_32
                                                         Position                                                                                  */
#define LL_TRX_REG_ADDR_TYPE_PEER_INFO_2_1_ADDR_TYPE_PEER_MANUAL_VALUE_48_32_Msk (0x0001ffffUL << LL_TRX_REG_ADDR_TYPE_PEER_INFO_2_1_ADDR_TYPE_PEER_MANUAL_VALUE_48_32_Pos)/*!< LL_TRX_REG ADDR_TYPE_PEER_INFO_2_1: ADDR_TYPE_PEER_MANUAL_VALUE_48_32
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_ADDR_TYPE_PEER_INFO_3_0  --------------------- */
#define LL_TRX_REG_ADDR_TYPE_PEER_INFO_3_0_ADDR_TYPE_PEER_INFO_VALUE_31_0_Pos 0                       /*!< LL_TRX_REG ADDR_TYPE_PEER_INFO_3_0: ADDR_TYPE_PEER_INFO_VALUE_31_0
                                                         Position                                                                                  */
#define LL_TRX_REG_ADDR_TYPE_PEER_INFO_3_0_ADDR_TYPE_PEER_INFO_VALUE_31_0_Msk (0xffffffffUL << LL_TRX_REG_ADDR_TYPE_PEER_INFO_3_0_ADDR_TYPE_PEER_INFO_VALUE_31_0_Pos)/*!< LL_TRX_REG ADDR_TYPE_PEER_INFO_3_0: ADDR_TYPE_PEER_INFO_VALUE_31_0
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_ADDR_TYPE_PEER_INFO_3_1  --------------------- */
#define LL_TRX_REG_ADDR_TYPE_PEER_INFO_3_1_ADDR_TYPE_PEER_INFO_VALUE_48_32_Pos 0                      /*!< LL_TRX_REG ADDR_TYPE_PEER_INFO_3_1: ADDR_TYPE_PEER_INFO_VALUE_48_32
                                                         Position                                                                                  */
#define LL_TRX_REG_ADDR_TYPE_PEER_INFO_3_1_ADDR_TYPE_PEER_INFO_VALUE_48_32_Msk (0x0001ffffUL << LL_TRX_REG_ADDR_TYPE_PEER_INFO_3_1_ADDR_TYPE_PEER_INFO_VALUE_48_32_Pos)/*!< LL_TRX_REG ADDR_TYPE_PEER_INFO_3_1: ADDR_TYPE_PEER_INFO_VALUE_48_32
                                                         Mask                                                                                      */

/* -------------------  LL_TRX_REG_DISASSEBLER_POLICY_SRC_SRC_0  ------------------ */
#define LL_TRX_REG_DISASSEBLER_POLICY_SRC_SRC_0_DISASSEMBLER_POLICY_SRC_BUS_31_0_Pos 0                /*!< LL_TRX_REG DISASSEBLER_POLICY_SRC_SRC_0: DISASSEMBLER_POLICY_SRC_BUS_31_0
                                                         Position                                                                                  */
#define LL_TRX_REG_DISASSEBLER_POLICY_SRC_SRC_0_DISASSEMBLER_POLICY_SRC_BUS_31_0_Msk (0xffffffffUL << LL_TRX_REG_DISASSEBLER_POLICY_SRC_SRC_0_DISASSEMBLER_POLICY_SRC_BUS_31_0_Pos)/*!< LL_TRX_REG DISASSEBLER_POLICY_SRC_SRC_0: DISASSEMBLER_POLICY_SRC_BUS_31_0
                                                         Mask                                                                                      */

/* -------------------  LL_TRX_REG_DISASSEBLER_POLICY_SRC_SRC_1  ------------------ */
#define LL_TRX_REG_DISASSEBLER_POLICY_SRC_SRC_1_DISASSEMBLER_POLICY_SRC_BUS_63_32_Pos 0               /*!< LL_TRX_REG DISASSEBLER_POLICY_SRC_SRC_1: DISASSEMBLER_POLICY_SRC_BUS_63_32
                                                         Position                                                                                  */
#define LL_TRX_REG_DISASSEBLER_POLICY_SRC_SRC_1_DISASSEMBLER_POLICY_SRC_BUS_63_32_Msk (0xffffffffUL << LL_TRX_REG_DISASSEBLER_POLICY_SRC_SRC_1_DISASSEMBLER_POLICY_SRC_BUS_63_32_Pos)/*!< LL_TRX_REG DISASSEBLER_POLICY_SRC_SRC_1: DISASSEMBLER_POLICY_SRC_BUS_63_32
                                                         Mask                                                                                      */

/* -------------------------  LL_TRX_REG_RX_CRC_STATUS_0  ------------------------- */
#define LL_TRX_REG_RX_CRC_STATUS_0_RX_CRC_INFO_Pos 0                                                  /*!< LL_TRX_REG RX_CRC_STATUS_0: RX_CRC_INFO Position */
#define LL_TRX_REG_RX_CRC_STATUS_0_RX_CRC_INFO_Msk (0x00ffffffUL << LL_TRX_REG_RX_CRC_STATUS_0_RX_CRC_INFO_Pos)/*!< LL_TRX_REG RX_CRC_STATUS_0: RX_CRC_INFO Mask */

/* -------------------------  LL_TRX_REG_RX_CRC_STATUS_1  ------------------------- */
#define LL_TRX_REG_RX_CRC_STATUS_1_RX_CRC_OK_Pos 0                                                    /*!< LL_TRX_REG RX_CRC_STATUS_1: RX_CRC_OK Position */
#define LL_TRX_REG_RX_CRC_STATUS_1_RX_CRC_OK_Msk (0x01UL << LL_TRX_REG_RX_CRC_STATUS_1_RX_CRC_OK_Pos) /*!< LL_TRX_REG RX_CRC_STATUS_1: RX_CRC_OK Mask */
#define LL_TRX_REG_RX_CRC_STATUS_1_RX_CRC_ERR_BF_Pos 4                                                /*!< LL_TRX_REG RX_CRC_STATUS_1: RX_CRC_ERR_BF Position */
#define LL_TRX_REG_RX_CRC_STATUS_1_RX_CRC_ERR_BF_Msk (0x01UL << LL_TRX_REG_RX_CRC_STATUS_1_RX_CRC_ERR_BF_Pos)/*!< LL_TRX_REG RX_CRC_STATUS_1: RX_CRC_ERR_BF Mask */
#define LL_TRX_REG_RX_CRC_STATUS_1_RX_CRC_ERR_BN_Pos 8                                                /*!< LL_TRX_REG RX_CRC_STATUS_1: RX_CRC_ERR_BN Position */
#define LL_TRX_REG_RX_CRC_STATUS_1_RX_CRC_ERR_BN_Msk (0x00000fffUL << LL_TRX_REG_RX_CRC_STATUS_1_RX_CRC_ERR_BN_Pos)/*!< LL_TRX_REG RX_CRC_STATUS_1: RX_CRC_ERR_BN Mask */

/* --------------------------  LL_TRX_REG_RX_PWR_STATUS  -------------------------- */
#define LL_TRX_REG_RX_PWR_STATUS_RX_PWR_Pos   0                                                       /*!< LL_TRX_REG RX_PWR_STATUS: RX_PWR Position */
#define LL_TRX_REG_RX_PWR_STATUS_RX_PWR_Msk   (0x000000ffUL << LL_TRX_REG_RX_PWR_STATUS_RX_PWR_Pos)   /*!< LL_TRX_REG RX_PWR_STATUS: RX_PWR Mask   */

/* ------------------------  LL_TRX_REG_RX_BUF_MANUAL_MODE  ----------------------- */
#define LL_TRX_REG_RX_BUF_MANUAL_MODE_RX_BUF_LOAD_MANUAL_EN_Pos 0                                     /*!< LL_TRX_REG RX_BUF_MANUAL_MODE: RX_BUF_LOAD_MANUAL_EN Position */
#define LL_TRX_REG_RX_BUF_MANUAL_MODE_RX_BUF_LOAD_MANUAL_EN_Msk (0x01UL << LL_TRX_REG_RX_BUF_MANUAL_MODE_RX_BUF_LOAD_MANUAL_EN_Pos)/*!< LL_TRX_REG RX_BUF_MANUAL_MODE: RX_BUF_LOAD_MANUAL_EN Mask */

/* -----------------------------  LL_TRX_REG_RX_INFO  ----------------------------- */
#define LL_TRX_REG_RX_INFO_RX_HASH_NO_HIT_Pos 0                                                       /*!< LL_TRX_REG RX_INFO: RX_HASH_NO_HIT Position */
#define LL_TRX_REG_RX_INFO_RX_HASH_NO_HIT_Msk (0x01UL << LL_TRX_REG_RX_INFO_RX_HASH_NO_HIT_Pos)       /*!< LL_TRX_REG RX_INFO: RX_HASH_NO_HIT Mask */
#define LL_TRX_REG_RX_INFO_RX_HASH_HIT_NUM_Pos 4                                                      /*!< LL_TRX_REG RX_INFO: RX_HASH_HIT_NUM Position */
#define LL_TRX_REG_RX_INFO_RX_HASH_HIT_NUM_Msk (0x0fUL << LL_TRX_REG_RX_INFO_RX_HASH_HIT_NUM_Pos)     /*!< LL_TRX_REG RX_INFO: RX_HASH_HIT_NUM Mask */

/* ----------------------------  LL_TRX_REG_ACCUM_INFO  --------------------------- */
#define LL_TRX_REG_ACCUM_INFO_TX_NO_ACK_CNT_Pos 0                                                     /*!< LL_TRX_REG ACCUM_INFO: TX_NO_ACK_CNT Position */
#define LL_TRX_REG_ACCUM_INFO_TX_NO_ACK_CNT_Msk (0x000000ffUL << LL_TRX_REG_ACCUM_INFO_TX_NO_ACK_CNT_Pos)/*!< LL_TRX_REG ACCUM_INFO: TX_NO_ACK_CNT Mask */
#define LL_TRX_REG_ACCUM_INFO_RX_CRC_ERROR_CNT_Pos 8                                                  /*!< LL_TRX_REG ACCUM_INFO: RX_CRC_ERROR_CNT Position */
#define LL_TRX_REG_ACCUM_INFO_RX_CRC_ERROR_CNT_Msk (0x000000ffUL << LL_TRX_REG_ACCUM_INFO_RX_CRC_ERROR_CNT_Pos)/*!< LL_TRX_REG ACCUM_INFO: RX_CRC_ERROR_CNT Mask */

/* ------------------------  LL_TRX_REG_RX_LONG_PDU_EXCEED  ----------------------- */
#define LL_TRX_REG_RX_LONG_PDU_EXCEED_RX_LONG_PDU_LEN_EXCEED_Pos 0                                    /*!< LL_TRX_REG RX_LONG_PDU_EXCEED: RX_LONG_PDU_LEN_EXCEED Position */
#define LL_TRX_REG_RX_LONG_PDU_EXCEED_RX_LONG_PDU_LEN_EXCEED_Msk (0x01UL << LL_TRX_REG_RX_LONG_PDU_EXCEED_RX_LONG_PDU_LEN_EXCEED_Pos)/*!< LL_TRX_REG RX_LONG_PDU_EXCEED: RX_LONG_PDU_LEN_EXCEED Mask */

/* ------------------------  LL_TRX_REG_CSR_RX_RING_CTRL_0  ----------------------- */
#define LL_TRX_REG_CSR_RX_RING_CTRL_0_RX_RING_DESC_BASE_ADDR_Pos 0                                    /*!< LL_TRX_REG CSR_RX_RING_CTRL_0: RX_RING_DESC_BASE_ADDR Position */
#define LL_TRX_REG_CSR_RX_RING_CTRL_0_RX_RING_DESC_BASE_ADDR_Msk (0xffffffffUL << LL_TRX_REG_CSR_RX_RING_CTRL_0_RX_RING_DESC_BASE_ADDR_Pos)/*!< LL_TRX_REG CSR_RX_RING_CTRL_0: RX_RING_DESC_BASE_ADDR Mask */

/* ------------------------  LL_TRX_REG_CSR_RX_RING_CTRL_1  ----------------------- */
#define LL_TRX_REG_CSR_RX_RING_CTRL_1_RX_RING_ENTRY_BASE_ADDR_Pos 0                                   /*!< LL_TRX_REG CSR_RX_RING_CTRL_1: RX_RING_ENTRY_BASE_ADDR Position */
#define LL_TRX_REG_CSR_RX_RING_CTRL_1_RX_RING_ENTRY_BASE_ADDR_Msk (0xffffffffUL << LL_TRX_REG_CSR_RX_RING_CTRL_1_RX_RING_ENTRY_BASE_ADDR_Pos)/*!< LL_TRX_REG CSR_RX_RING_CTRL_1: RX_RING_ENTRY_BASE_ADDR Mask */

/* ------------------------  LL_TRX_REG_CSR_RX_RING_CTRL_2  ----------------------- */
#define LL_TRX_REG_CSR_RX_RING_CTRL_2_RX_RING_RD_VPTR_Pos 0                                           /*!< LL_TRX_REG CSR_RX_RING_CTRL_2: RX_RING_RD_VPTR Position */
#define LL_TRX_REG_CSR_RX_RING_CTRL_2_RX_RING_RD_VPTR_Msk (0x000000ffUL << LL_TRX_REG_CSR_RX_RING_CTRL_2_RX_RING_RD_VPTR_Pos)/*!< LL_TRX_REG CSR_RX_RING_CTRL_2: RX_RING_RD_VPTR Mask */
#define LL_TRX_REG_CSR_RX_RING_CTRL_2_RX_RING_WR_VPTR_Pos 8                                           /*!< LL_TRX_REG CSR_RX_RING_CTRL_2: RX_RING_WR_VPTR Position */
#define LL_TRX_REG_CSR_RX_RING_CTRL_2_RX_RING_WR_VPTR_Msk (0x000000ffUL << LL_TRX_REG_CSR_RX_RING_CTRL_2_RX_RING_WR_VPTR_Pos)/*!< LL_TRX_REG CSR_RX_RING_CTRL_2: RX_RING_WR_VPTR Mask */

/* ------------------------  LL_TRX_REG_CSR_RX_RING_CTRL_3  ----------------------- */
#define LL_TRX_REG_CSR_RX_RING_CTRL_3_RX_RING_SIZE_Pos 0                                              /*!< LL_TRX_REG CSR_RX_RING_CTRL_3: RX_RING_SIZE Position */
#define LL_TRX_REG_CSR_RX_RING_CTRL_3_RX_RING_SIZE_Msk (0x000000ffUL << LL_TRX_REG_CSR_RX_RING_CTRL_3_RX_RING_SIZE_Pos)/*!< LL_TRX_REG CSR_RX_RING_CTRL_3: RX_RING_SIZE Mask */

/* --------------------  LL_TRX_REG_RX_RING_LONG_PDU_BUF_ADDR  -------------------- */
#define LL_TRX_REG_RX_RING_LONG_PDU_BUF_ADDR_RX_LONG_PDU_BUF_ADDR_Pos 0                               /*!< LL_TRX_REG RX_RING_LONG_PDU_BUF_ADDR: RX_LONG_PDU_BUF_ADDR Position */
#define LL_TRX_REG_RX_RING_LONG_PDU_BUF_ADDR_RX_LONG_PDU_BUF_ADDR_Msk (0xffffffffUL << LL_TRX_REG_RX_RING_LONG_PDU_BUF_ADDR_RX_LONG_PDU_BUF_ADDR_Pos)/*!< LL_TRX_REG RX_RING_LONG_PDU_BUF_ADDR: RX_LONG_PDU_BUF_ADDR Mask */

/* ---------------------  LL_TRX_REG_RX_RING_LONG_PDU_MAX_LEN  -------------------- */
#define LL_TRX_REG_RX_RING_LONG_PDU_MAX_LEN_RX_LONG_PDU_MAX_LEN_Pos 0                                 /*!< LL_TRX_REG RX_RING_LONG_PDU_MAX_LEN: RX_LONG_PDU_MAX_LEN Position */
#define LL_TRX_REG_RX_RING_LONG_PDU_MAX_LEN_RX_LONG_PDU_MAX_LEN_Msk (0x000000ffUL << LL_TRX_REG_RX_RING_LONG_PDU_MAX_LEN_RX_LONG_PDU_MAX_LEN_Pos)/*!< LL_TRX_REG RX_RING_LONG_PDU_MAX_LEN: RX_LONG_PDU_MAX_LEN Mask */

/* ------------------------  LL_TRX_REG_CSR_RX_RING_CTRL_4  ----------------------- */
#define LL_TRX_REG_CSR_RX_RING_CTRL_4_RX_RING_RX_DMA_SRC_Pos 0                                        /*!< LL_TRX_REG CSR_RX_RING_CTRL_4: RX_RING_RX_DMA_SRC Position */
#define LL_TRX_REG_CSR_RX_RING_CTRL_4_RX_RING_RX_DMA_SRC_Msk (0xffffffffUL << LL_TRX_REG_CSR_RX_RING_CTRL_4_RX_RING_RX_DMA_SRC_Pos)/*!< LL_TRX_REG CSR_RX_RING_CTRL_4: RX_RING_RX_DMA_SRC Mask */

/* -----------------------  LL_TRX_REG_CSR_RX_RING_TXQ_DMA  ----------------------- */
#define LL_TRX_REG_CSR_RX_RING_TXQ_DMA_RXQ_DMA_BADR_EN_Pos 0                                          /*!< LL_TRX_REG CSR_RX_RING_TXQ_DMA: RXQ_DMA_BADR_EN Position */
#define LL_TRX_REG_CSR_RX_RING_TXQ_DMA_RXQ_DMA_BADR_EN_Msk (0x01UL << LL_TRX_REG_CSR_RX_RING_TXQ_DMA_RXQ_DMA_BADR_EN_Pos)/*!< LL_TRX_REG CSR_RX_RING_TXQ_DMA: RXQ_DMA_BADR_EN Mask */
#define LL_TRX_REG_CSR_RX_RING_TXQ_DMA_RXQ_DMA_DST_INC_Pos 1                                          /*!< LL_TRX_REG CSR_RX_RING_TXQ_DMA: RXQ_DMA_DST_INC Position */
#define LL_TRX_REG_CSR_RX_RING_TXQ_DMA_RXQ_DMA_DST_INC_Msk (0x01UL << LL_TRX_REG_CSR_RX_RING_TXQ_DMA_RXQ_DMA_DST_INC_Pos)/*!< LL_TRX_REG CSR_RX_RING_TXQ_DMA: RXQ_DMA_DST_INC Mask */
#define LL_TRX_REG_CSR_RX_RING_TXQ_DMA_RXQ_DMA_SRC_INC_Pos 2                                          /*!< LL_TRX_REG CSR_RX_RING_TXQ_DMA: RXQ_DMA_SRC_INC Position */
#define LL_TRX_REG_CSR_RX_RING_TXQ_DMA_RXQ_DMA_SRC_INC_Msk (0x01UL << LL_TRX_REG_CSR_RX_RING_TXQ_DMA_RXQ_DMA_SRC_INC_Pos)/*!< LL_TRX_REG CSR_RX_RING_TXQ_DMA: RXQ_DMA_SRC_INC Mask */
#define LL_TRX_REG_CSR_RX_RING_TXQ_DMA_RXQ_DMA_DST_SIZE_Pos 3                                         /*!< LL_TRX_REG CSR_RX_RING_TXQ_DMA: RXQ_DMA_DST_SIZE Position */
#define LL_TRX_REG_CSR_RX_RING_TXQ_DMA_RXQ_DMA_DST_SIZE_Msk (0x07UL << LL_TRX_REG_CSR_RX_RING_TXQ_DMA_RXQ_DMA_DST_SIZE_Pos)/*!< LL_TRX_REG CSR_RX_RING_TXQ_DMA: RXQ_DMA_DST_SIZE Mask */
#define LL_TRX_REG_CSR_RX_RING_TXQ_DMA_RXQ_DMA_SRC_SIZE_Pos 6                                         /*!< LL_TRX_REG CSR_RX_RING_TXQ_DMA: RXQ_DMA_SRC_SIZE Position */
#define LL_TRX_REG_CSR_RX_RING_TXQ_DMA_RXQ_DMA_SRC_SIZE_Msk (0x07UL << LL_TRX_REG_CSR_RX_RING_TXQ_DMA_RXQ_DMA_SRC_SIZE_Pos)/*!< LL_TRX_REG CSR_RX_RING_TXQ_DMA: RXQ_DMA_SRC_SIZE Mask */

/* -------------------------  LL_TRX_REG_CSR_RX_RING_INT  ------------------------- */
#define LL_TRX_REG_CSR_RX_RING_INT_RX_RING_FULL_MASKINT_Pos 0                                         /*!< LL_TRX_REG CSR_RX_RING_INT: RX_RING_FULL_MASKINT Position */
#define LL_TRX_REG_CSR_RX_RING_INT_RX_RING_FULL_MASKINT_Msk (0x01UL << LL_TRX_REG_CSR_RX_RING_INT_RX_RING_FULL_MASKINT_Pos)/*!< LL_TRX_REG CSR_RX_RING_INT: RX_RING_FULL_MASKINT Mask */
#define LL_TRX_REG_CSR_RX_RING_INT_RX_RING_FULL_CLRINT_Pos 1                                          /*!< LL_TRX_REG CSR_RX_RING_INT: RX_RING_FULL_CLRINT Position */
#define LL_TRX_REG_CSR_RX_RING_INT_RX_RING_FULL_CLRINT_Msk (0x01UL << LL_TRX_REG_CSR_RX_RING_INT_RX_RING_FULL_CLRINT_Pos)/*!< LL_TRX_REG CSR_RX_RING_INT: RX_RING_FULL_CLRINT Mask */
#define LL_TRX_REG_CSR_RX_RING_INT_RX_RING_STORE_END_MASKINT_Pos 2                                    /*!< LL_TRX_REG CSR_RX_RING_INT: RX_RING_STORE_END_MASKINT Position */
#define LL_TRX_REG_CSR_RX_RING_INT_RX_RING_STORE_END_MASKINT_Msk (0x01UL << LL_TRX_REG_CSR_RX_RING_INT_RX_RING_STORE_END_MASKINT_Pos)/*!< LL_TRX_REG CSR_RX_RING_INT: RX_RING_STORE_END_MASKINT Mask */
#define LL_TRX_REG_CSR_RX_RING_INT_RX_RING_STORE_END_CLRINT_Pos 3                                     /*!< LL_TRX_REG CSR_RX_RING_INT: RX_RING_STORE_END_CLRINT Position */
#define LL_TRX_REG_CSR_RX_RING_INT_RX_RING_STORE_END_CLRINT_Msk (0x01UL << LL_TRX_REG_CSR_RX_RING_INT_RX_RING_STORE_END_CLRINT_Pos)/*!< LL_TRX_REG CSR_RX_RING_INT: RX_RING_STORE_END_CLRINT Mask */

/* ---------------------------  LL_TRX_REG_INT_RX_RING  --------------------------- */
#define LL_TRX_REG_INT_RX_RING_LL_RX_RING_STORE_END_INT_Pos 0                                         /*!< LL_TRX_REG INT_RX_RING: LL_RX_RING_STORE_END_INT Position */
#define LL_TRX_REG_INT_RX_RING_LL_RX_RING_STORE_END_INT_Msk (0x01UL << LL_TRX_REG_INT_RX_RING_LL_RX_RING_STORE_END_INT_Pos)/*!< LL_TRX_REG INT_RX_RING: LL_RX_RING_STORE_END_INT Mask */
#define LL_TRX_REG_INT_RX_RING_LL_RX_RING_FULL_INT_Pos 8                                              /*!< LL_TRX_REG INT_RX_RING: LL_RX_RING_FULL_INT Position */
#define LL_TRX_REG_INT_RX_RING_LL_RX_RING_FULL_INT_Msk (0x01UL << LL_TRX_REG_INT_RX_RING_LL_RX_RING_FULL_INT_Pos)/*!< LL_TRX_REG INT_RX_RING: LL_RX_RING_FULL_INT Mask */

/* -------------------------  LL_TRX_REG_DBG_RX_RING_CNT  ------------------------- */
#define LL_TRX_REG_DBG_RX_RING_CNT_RO_LL_RX_RING_ENTRY_CNT_Pos 0                                      /*!< LL_TRX_REG DBG_RX_RING_CNT: RO_LL_RX_RING_ENTRY_CNT Position */
#define LL_TRX_REG_DBG_RX_RING_CNT_RO_LL_RX_RING_ENTRY_CNT_Msk (0x000000ffUL << LL_TRX_REG_DBG_RX_RING_CNT_RO_LL_RX_RING_ENTRY_CNT_Pos)/*!< LL_TRX_REG DBG_RX_RING_CNT: RO_LL_RX_RING_ENTRY_CNT Mask */

/* -----------------------  LL_TRX_REG_DBG_RX_RING_WR_ADDR  ----------------------- */
#define LL_TRX_REG_DBG_RX_RING_WR_ADDR_RO_LL_RX_RING_WR_ENTRY_ADDR_Pos 0                              /*!< LL_TRX_REG DBG_RX_RING_WR_ADDR: RO_LL_RX_RING_WR_ENTRY_ADDR
                                                         Position                                                                                  */
#define LL_TRX_REG_DBG_RX_RING_WR_ADDR_RO_LL_RX_RING_WR_ENTRY_ADDR_Msk (0xffffffffUL << LL_TRX_REG_DBG_RX_RING_WR_ADDR_RO_LL_RX_RING_WR_ENTRY_ADDR_Pos)/*!< LL_TRX_REG DBG_RX_RING_WR_ADDR: RO_LL_RX_RING_WR_ENTRY_ADDR
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_CSR_TX_WHITELIST_ADDR0_0  -------------------- */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR0_0_LL_DEVFILTER_WHITELIST_DEV0_ADDR_31_0_Pos 0               /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR0_0: LL_DEVFILTER_WHITELIST_DEV0_ADDR_31_0
                                                         Position                                                                                  */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR0_0_LL_DEVFILTER_WHITELIST_DEV0_ADDR_31_0_Msk (0xffffffffUL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR0_0_LL_DEVFILTER_WHITELIST_DEV0_ADDR_31_0_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR0_0: LL_DEVFILTER_WHITELIST_DEV0_ADDR_31_0
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_CSR_TX_WHITELIST_ADDR0_1  -------------------- */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR0_1_LL_DEVFILTER_WHITELIST_DEV0_ADDR_47_32_Pos 0              /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR0_1: LL_DEVFILTER_WHITELIST_DEV0_ADDR_47_3
                                                         2 Position                                                                                */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR0_1_LL_DEVFILTER_WHITELIST_DEV0_ADDR_47_32_Msk (0x0000ffffUL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR0_1_LL_DEVFILTER_WHITELIST_DEV0_ADDR_47_32_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR0_1: LL_DEVFILTER_WHITELIST_DEV0_ADDR_47_3
                                                         2 Mask                                                                                    */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR0_1_LL_DEVFILTER_WHITELIST_DEV0_TYPE_Pos 16                   /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR0_1: LL_DEVFILTER_WHITELIST_DEV0_TYPE
                                                         Position                                                                                  */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR0_1_LL_DEVFILTER_WHITELIST_DEV0_TYPE_Msk (0x01UL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR0_1_LL_DEVFILTER_WHITELIST_DEV0_TYPE_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR0_1: LL_DEVFILTER_WHITELIST_DEV0_TYPE
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_CSR_TX_WHITELIST_ADDR1_0  -------------------- */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR1_0_LL_DEVFILTER_WHITELIST_DEV1_ADDR_31_0_Pos 0               /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR1_0: LL_DEVFILTER_WHITELIST_DEV1_ADDR_31_0
                                                         Position                                                                                  */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR1_0_LL_DEVFILTER_WHITELIST_DEV1_ADDR_31_0_Msk (0xffffffffUL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR1_0_LL_DEVFILTER_WHITELIST_DEV1_ADDR_31_0_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR1_0: LL_DEVFILTER_WHITELIST_DEV1_ADDR_31_0
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_CSR_TX_WHITELIST_ADDR1_1  -------------------- */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR1_1_LL_DEVFILTER_WHITELIST_DEV1_ADDR_47_32_Pos 0              /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR1_1: LL_DEVFILTER_WHITELIST_DEV1_ADDR_47_3
                                                         2 Position                                                                                */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR1_1_LL_DEVFILTER_WHITELIST_DEV1_ADDR_47_32_Msk (0x0000ffffUL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR1_1_LL_DEVFILTER_WHITELIST_DEV1_ADDR_47_32_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR1_1: LL_DEVFILTER_WHITELIST_DEV1_ADDR_47_3
                                                         2 Mask                                                                                    */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR1_1_LL_DEVFILTER_WHITELIST_DEV1_TYPE_Pos 16                   /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR1_1: LL_DEVFILTER_WHITELIST_DEV1_TYPE
                                                         Position                                                                                  */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR1_1_LL_DEVFILTER_WHITELIST_DEV1_TYPE_Msk (0x01UL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR1_1_LL_DEVFILTER_WHITELIST_DEV1_TYPE_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR1_1: LL_DEVFILTER_WHITELIST_DEV1_TYPE
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_CSR_TX_WHITELIST_ADDR2_0  -------------------- */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR2_0_LL_DEVFILTER_WHITELIST_DEV2_ADDR_31_0_Pos 0               /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR2_0: LL_DEVFILTER_WHITELIST_DEV2_ADDR_31_0
                                                         Position                                                                                  */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR2_0_LL_DEVFILTER_WHITELIST_DEV2_ADDR_31_0_Msk (0xffffffffUL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR2_0_LL_DEVFILTER_WHITELIST_DEV2_ADDR_31_0_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR2_0: LL_DEVFILTER_WHITELIST_DEV2_ADDR_31_0
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_CSR_TX_WHITELIST_ADDR2_1  -------------------- */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR2_1_LL_DEVFILTER_WHITELIST_DEV2_ADDR_47_32_Pos 0              /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR2_1: LL_DEVFILTER_WHITELIST_DEV2_ADDR_47_3
                                                         2 Position                                                                                */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR2_1_LL_DEVFILTER_WHITELIST_DEV2_ADDR_47_32_Msk (0x0000ffffUL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR2_1_LL_DEVFILTER_WHITELIST_DEV2_ADDR_47_32_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR2_1: LL_DEVFILTER_WHITELIST_DEV2_ADDR_47_3
                                                         2 Mask                                                                                    */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR2_1_LL_DEVFILTER_WHITELIST_DEV2_TYPE_Pos 16                   /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR2_1: LL_DEVFILTER_WHITELIST_DEV2_TYPE
                                                         Position                                                                                  */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR2_1_LL_DEVFILTER_WHITELIST_DEV2_TYPE_Msk (0x01UL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR2_1_LL_DEVFILTER_WHITELIST_DEV2_TYPE_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR2_1: LL_DEVFILTER_WHITELIST_DEV2_TYPE
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_CSR_TX_WHITELIST_ADDR3_0  -------------------- */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR3_0_LL_DEVFILTER_WHITELIST_DEV3_ADDR_31_0_Pos 0               /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR3_0: LL_DEVFILTER_WHITELIST_DEV3_ADDR_31_0
                                                         Position                                                                                  */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR3_0_LL_DEVFILTER_WHITELIST_DEV3_ADDR_31_0_Msk (0xffffffffUL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR3_0_LL_DEVFILTER_WHITELIST_DEV3_ADDR_31_0_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR3_0: LL_DEVFILTER_WHITELIST_DEV3_ADDR_31_0
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_CSR_TX_WHITELIST_ADDR3_1  -------------------- */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR3_1_LL_DEVFILTER_WHITELIST_DEV3_ADDR_47_32_Pos 0              /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR3_1: LL_DEVFILTER_WHITELIST_DEV3_ADDR_47_3
                                                         2 Position                                                                                */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR3_1_LL_DEVFILTER_WHITELIST_DEV3_ADDR_47_32_Msk (0x0000ffffUL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR3_1_LL_DEVFILTER_WHITELIST_DEV3_ADDR_47_32_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR3_1: LL_DEVFILTER_WHITELIST_DEV3_ADDR_47_3
                                                         2 Mask                                                                                    */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR3_1_LL_DEVFILTER_WHITELIST_DEV3_TYPE_Pos 16                   /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR3_1: LL_DEVFILTER_WHITELIST_DEV3_TYPE
                                                         Position                                                                                  */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR3_1_LL_DEVFILTER_WHITELIST_DEV3_TYPE_Msk (0x01UL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR3_1_LL_DEVFILTER_WHITELIST_DEV3_TYPE_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR3_1: LL_DEVFILTER_WHITELIST_DEV3_TYPE
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_CSR_TX_WHITELIST_ADDR4_0  -------------------- */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR4_0_LL_DEVFILTER_WHITELIST_DEV4_ADDR_31_0_Pos 0               /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR4_0: LL_DEVFILTER_WHITELIST_DEV4_ADDR_31_0
                                                         Position                                                                                  */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR4_0_LL_DEVFILTER_WHITELIST_DEV4_ADDR_31_0_Msk (0xffffffffUL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR4_0_LL_DEVFILTER_WHITELIST_DEV4_ADDR_31_0_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR4_0: LL_DEVFILTER_WHITELIST_DEV4_ADDR_31_0
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_CSR_TX_WHITELIST_ADDR4_1  -------------------- */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR4_1_LL_DEVFILTER_WHITELIST_DEV4_ADDR_47_32_Pos 0              /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR4_1: LL_DEVFILTER_WHITELIST_DEV4_ADDR_47_3
                                                         2 Position                                                                                */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR4_1_LL_DEVFILTER_WHITELIST_DEV4_ADDR_47_32_Msk (0x0000ffffUL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR4_1_LL_DEVFILTER_WHITELIST_DEV4_ADDR_47_32_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR4_1: LL_DEVFILTER_WHITELIST_DEV4_ADDR_47_3
                                                         2 Mask                                                                                    */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR4_1_LL_DEVFILTER_WHITELIST_DEV4_TYPE_Pos 16                   /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR4_1: LL_DEVFILTER_WHITELIST_DEV4_TYPE
                                                         Position                                                                                  */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR4_1_LL_DEVFILTER_WHITELIST_DEV4_TYPE_Msk (0x01UL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR4_1_LL_DEVFILTER_WHITELIST_DEV4_TYPE_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR4_1: LL_DEVFILTER_WHITELIST_DEV4_TYPE
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_CSR_TX_WHITELIST_ADDR5_0  -------------------- */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR5_0_LL_DEVFILTER_WHITELIST_DEV5_ADDR_31_0_Pos 0               /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR5_0: LL_DEVFILTER_WHITELIST_DEV5_ADDR_31_0
                                                         Position                                                                                  */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR5_0_LL_DEVFILTER_WHITELIST_DEV5_ADDR_31_0_Msk (0xffffffffUL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR5_0_LL_DEVFILTER_WHITELIST_DEV5_ADDR_31_0_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR5_0: LL_DEVFILTER_WHITELIST_DEV5_ADDR_31_0
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_CSR_TX_WHITELIST_ADDR5_1  -------------------- */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR5_1_LL_DEVFILTER_WHITELIST_DEV5_ADDR_47_32_Pos 0              /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR5_1: LL_DEVFILTER_WHITELIST_DEV5_ADDR_47_3
                                                         2 Position                                                                                */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR5_1_LL_DEVFILTER_WHITELIST_DEV5_ADDR_47_32_Msk (0x0000ffffUL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR5_1_LL_DEVFILTER_WHITELIST_DEV5_ADDR_47_32_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR5_1: LL_DEVFILTER_WHITELIST_DEV5_ADDR_47_3
                                                         2 Mask                                                                                    */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR5_1_LL_DEVFILTER_WHITELIST_DEV5_TYPE_Pos 16                   /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR5_1: LL_DEVFILTER_WHITELIST_DEV5_TYPE
                                                         Position                                                                                  */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR5_1_LL_DEVFILTER_WHITELIST_DEV5_TYPE_Msk (0x01UL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR5_1_LL_DEVFILTER_WHITELIST_DEV5_TYPE_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR5_1: LL_DEVFILTER_WHITELIST_DEV5_TYPE
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_CSR_TX_WHITELIST_ADDR6_0  -------------------- */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR6_0_LL_DEVFILTER_WHITELIST_DEV6_ADDR_31_0_Pos 0               /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR6_0: LL_DEVFILTER_WHITELIST_DEV6_ADDR_31_0
                                                         Position                                                                                  */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR6_0_LL_DEVFILTER_WHITELIST_DEV6_ADDR_31_0_Msk (0xffffffffUL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR6_0_LL_DEVFILTER_WHITELIST_DEV6_ADDR_31_0_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR6_0: LL_DEVFILTER_WHITELIST_DEV6_ADDR_31_0
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_CSR_TX_WHITELIST_ADDR6_1  -------------------- */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR6_1_LL_DEVFILTER_WHITELIST_DEV6_ADDR_47_32_Pos 0              /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR6_1: LL_DEVFILTER_WHITELIST_DEV6_ADDR_47_3
                                                         2 Position                                                                                */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR6_1_LL_DEVFILTER_WHITELIST_DEV6_ADDR_47_32_Msk (0x0000ffffUL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR6_1_LL_DEVFILTER_WHITELIST_DEV6_ADDR_47_32_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR6_1: LL_DEVFILTER_WHITELIST_DEV6_ADDR_47_3
                                                         2 Mask                                                                                    */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR6_1_LL_DEVFILTER_WHITELIST_DEV6_TYPE_Pos 16                   /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR6_1: LL_DEVFILTER_WHITELIST_DEV6_TYPE
                                                         Position                                                                                  */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR6_1_LL_DEVFILTER_WHITELIST_DEV6_TYPE_Msk (0x01UL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR6_1_LL_DEVFILTER_WHITELIST_DEV6_TYPE_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR6_1: LL_DEVFILTER_WHITELIST_DEV6_TYPE
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_CSR_TX_WHITELIST_ADDR7_0  -------------------- */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR7_0_LL_DEVFILTER_WHITELIST_DEV7_ADDR_31_0_Pos 0               /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR7_0: LL_DEVFILTER_WHITELIST_DEV7_ADDR_31_0
                                                         Position                                                                                  */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR7_0_LL_DEVFILTER_WHITELIST_DEV7_ADDR_31_0_Msk (0xffffffffUL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR7_0_LL_DEVFILTER_WHITELIST_DEV7_ADDR_31_0_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR7_0: LL_DEVFILTER_WHITELIST_DEV7_ADDR_31_0
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_CSR_TX_WHITELIST_ADDR7_1  -------------------- */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR7_1_LL_DEVFILTER_WHITELIST_DEV7_ADDR_47_32_Pos 0              /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR7_1: LL_DEVFILTER_WHITELIST_DEV7_ADDR_47_3
                                                         2 Position                                                                                */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR7_1_LL_DEVFILTER_WHITELIST_DEV7_ADDR_47_32_Msk (0x0000ffffUL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR7_1_LL_DEVFILTER_WHITELIST_DEV7_ADDR_47_32_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR7_1: LL_DEVFILTER_WHITELIST_DEV7_ADDR_47_3
                                                         2 Mask                                                                                    */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR7_1_LL_DEVFILTER_WHITELIST_DEV7_TYPE_Pos 16                   /*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR7_1: LL_DEVFILTER_WHITELIST_DEV7_TYPE
                                                         Position                                                                                  */
#define LL_TRX_REG_CSR_TX_WHITELIST_ADDR7_1_LL_DEVFILTER_WHITELIST_DEV7_TYPE_Msk (0x01UL << LL_TRX_REG_CSR_TX_WHITELIST_ADDR7_1_LL_DEVFILTER_WHITELIST_DEV7_TYPE_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_ADDR7_1: LL_DEVFILTER_WHITELIST_DEV7_TYPE
                                                         Mask                                                                                      */

/* ----------------------  LL_TRX_REG_CSR_TX_WHITELIST_BASE0  --------------------- */
#define LL_TRX_REG_CSR_TX_WHITELIST_BASE0_LL_DEVFILTER_WHITELIST_ENABLE_Pos 0                         /*!< LL_TRX_REG CSR_TX_WHITELIST_BASE0: LL_DEVFILTER_WHITELIST_ENABLE
                                                         Position                                                                                  */
#define LL_TRX_REG_CSR_TX_WHITELIST_BASE0_LL_DEVFILTER_WHITELIST_ENABLE_Msk (0x000000ffUL << LL_TRX_REG_CSR_TX_WHITELIST_BASE0_LL_DEVFILTER_WHITELIST_ENABLE_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_BASE0: LL_DEVFILTER_WHITELIST_ENABLE
                                                         Mask                                                                                      */

/* ----------------------  LL_TRX_REG_CSR_TX_WHITELIST_BASE1  --------------------- */
#define LL_TRX_REG_CSR_TX_WHITELIST_BASE1_LL_DEVFILTER_WHITELIST_MASK_Pos 0                           /*!< LL_TRX_REG CSR_TX_WHITELIST_BASE1: LL_DEVFILTER_WHITELIST_MASK
                                                         Position                                                                                  */
#define LL_TRX_REG_CSR_TX_WHITELIST_BASE1_LL_DEVFILTER_WHITELIST_MASK_Msk (0x000fffffUL << LL_TRX_REG_CSR_TX_WHITELIST_BASE1_LL_DEVFILTER_WHITELIST_MASK_Pos)/*!< LL_TRX_REG CSR_TX_WHITELIST_BASE1: LL_DEVFILTER_WHITELIST_MASK
                                                         Mask                                                                                      */

/* ------------------------  LL_TRX_REG_LL_TX_PDU_RAW_MODE  ----------------------- */
#define LL_TRX_REG_LL_TX_PDU_RAW_MODE_LL_TX_RAW_MODE_Pos 0                                            /*!< LL_TRX_REG LL_TX_PDU_RAW_MODE: LL_TX_RAW_MODE Position */
#define LL_TRX_REG_LL_TX_PDU_RAW_MODE_LL_TX_RAW_MODE_Msk (0x01UL << LL_TRX_REG_LL_TX_PDU_RAW_MODE_LL_TX_RAW_MODE_Pos)/*!< LL_TRX_REG LL_TX_PDU_RAW_MODE: LL_TX_RAW_MODE Mask */
#define LL_TRX_REG_LL_TX_PDU_RAW_MODE_LL_TX_RAW_MODE_PDU_LENG_Pos 8                                   /*!< LL_TRX_REG LL_TX_PDU_RAW_MODE: LL_TX_RAW_MODE_PDU_LENG Position */
#define LL_TRX_REG_LL_TX_PDU_RAW_MODE_LL_TX_RAW_MODE_PDU_LENG_Msk (0x000000ffUL << LL_TRX_REG_LL_TX_PDU_RAW_MODE_LL_TX_RAW_MODE_PDU_LENG_Pos)/*!< LL_TRX_REG LL_TX_PDU_RAW_MODE: LL_TX_RAW_MODE_PDU_LENG Mask */

/* --------------------------  LL_TRX_REG_LL_TX_TBL_SET0  ------------------------- */
#define LL_TRX_REG_LL_TX_TBL_SET0_LL_TX_ADV_HDR_TBL_VALID_Pos 0                                       /*!< LL_TRX_REG LL_TX_TBL_SET0: LL_TX_ADV_HDR_TBL_VALID Position */
#define LL_TRX_REG_LL_TX_TBL_SET0_LL_TX_ADV_HDR_TBL_VALID_Msk (0x000000ffUL << LL_TRX_REG_LL_TX_TBL_SET0_LL_TX_ADV_HDR_TBL_VALID_Pos)/*!< LL_TRX_REG LL_TX_TBL_SET0: LL_TX_ADV_HDR_TBL_VALID Mask */

/* -------------------------  LL_TRX_REG_LL_TX_TBL_VALUE0  ------------------------ */
#define LL_TRX_REG_LL_TX_TBL_VALUE0_LL_TX_ADV_HDR_TBL_VALUE0_Pos 0                                    /*!< LL_TRX_REG LL_TX_TBL_VALUE0: LL_TX_ADV_HDR_TBL_VALUE0 Position */
#define LL_TRX_REG_LL_TX_TBL_VALUE0_LL_TX_ADV_HDR_TBL_VALUE0_Msk (0x000000ffUL << LL_TRX_REG_LL_TX_TBL_VALUE0_LL_TX_ADV_HDR_TBL_VALUE0_Pos)/*!< LL_TRX_REG LL_TX_TBL_VALUE0: LL_TX_ADV_HDR_TBL_VALUE0 Mask */
#define LL_TRX_REG_LL_TX_TBL_VALUE0_LL_TX_ADV_HDR_TBL_VALUE1_Pos 8                                    /*!< LL_TRX_REG LL_TX_TBL_VALUE0: LL_TX_ADV_HDR_TBL_VALUE1 Position */
#define LL_TRX_REG_LL_TX_TBL_VALUE0_LL_TX_ADV_HDR_TBL_VALUE1_Msk (0x000000ffUL << LL_TRX_REG_LL_TX_TBL_VALUE0_LL_TX_ADV_HDR_TBL_VALUE1_Pos)/*!< LL_TRX_REG LL_TX_TBL_VALUE0: LL_TX_ADV_HDR_TBL_VALUE1 Mask */
#define LL_TRX_REG_LL_TX_TBL_VALUE0_LL_TX_ADV_HDR_TBL_VALUE2_Pos 16                                   /*!< LL_TRX_REG LL_TX_TBL_VALUE0: LL_TX_ADV_HDR_TBL_VALUE2 Position */
#define LL_TRX_REG_LL_TX_TBL_VALUE0_LL_TX_ADV_HDR_TBL_VALUE2_Msk (0x000000ffUL << LL_TRX_REG_LL_TX_TBL_VALUE0_LL_TX_ADV_HDR_TBL_VALUE2_Pos)/*!< LL_TRX_REG LL_TX_TBL_VALUE0: LL_TX_ADV_HDR_TBL_VALUE2 Mask */
#define LL_TRX_REG_LL_TX_TBL_VALUE0_LL_TX_ADV_HDR_TBL_VALUE3_Pos 24                                   /*!< LL_TRX_REG LL_TX_TBL_VALUE0: LL_TX_ADV_HDR_TBL_VALUE3 Position */
#define LL_TRX_REG_LL_TX_TBL_VALUE0_LL_TX_ADV_HDR_TBL_VALUE3_Msk (0x000000ffUL << LL_TRX_REG_LL_TX_TBL_VALUE0_LL_TX_ADV_HDR_TBL_VALUE3_Pos)/*!< LL_TRX_REG LL_TX_TBL_VALUE0: LL_TX_ADV_HDR_TBL_VALUE3 Mask */

/* -------------------------  LL_TRX_REG_LL_TX_TBL_VALUE1  ------------------------ */
#define LL_TRX_REG_LL_TX_TBL_VALUE1_LL_TX_ADV_HDR_TBL_VALUE4_Pos 0                                    /*!< LL_TRX_REG LL_TX_TBL_VALUE1: LL_TX_ADV_HDR_TBL_VALUE4 Position */
#define LL_TRX_REG_LL_TX_TBL_VALUE1_LL_TX_ADV_HDR_TBL_VALUE4_Msk (0x000000ffUL << LL_TRX_REG_LL_TX_TBL_VALUE1_LL_TX_ADV_HDR_TBL_VALUE4_Pos)/*!< LL_TRX_REG LL_TX_TBL_VALUE1: LL_TX_ADV_HDR_TBL_VALUE4 Mask */
#define LL_TRX_REG_LL_TX_TBL_VALUE1_LL_TX_ADV_HDR_TBL_VALUE5_Pos 8                                    /*!< LL_TRX_REG LL_TX_TBL_VALUE1: LL_TX_ADV_HDR_TBL_VALUE5 Position */
#define LL_TRX_REG_LL_TX_TBL_VALUE1_LL_TX_ADV_HDR_TBL_VALUE5_Msk (0x000000ffUL << LL_TRX_REG_LL_TX_TBL_VALUE1_LL_TX_ADV_HDR_TBL_VALUE5_Pos)/*!< LL_TRX_REG LL_TX_TBL_VALUE1: LL_TX_ADV_HDR_TBL_VALUE5 Mask */
#define LL_TRX_REG_LL_TX_TBL_VALUE1_LL_TX_ADV_HDR_TBL_VALUE6_Pos 16                                   /*!< LL_TRX_REG LL_TX_TBL_VALUE1: LL_TX_ADV_HDR_TBL_VALUE6 Position */
#define LL_TRX_REG_LL_TX_TBL_VALUE1_LL_TX_ADV_HDR_TBL_VALUE6_Msk (0x000000ffUL << LL_TRX_REG_LL_TX_TBL_VALUE1_LL_TX_ADV_HDR_TBL_VALUE6_Pos)/*!< LL_TRX_REG LL_TX_TBL_VALUE1: LL_TX_ADV_HDR_TBL_VALUE6 Mask */
#define LL_TRX_REG_LL_TX_TBL_VALUE1_LL_TX_ADV_HDR_TBL_VALUE7_Pos 24                                   /*!< LL_TRX_REG LL_TX_TBL_VALUE1: LL_TX_ADV_HDR_TBL_VALUE7 Position */
#define LL_TRX_REG_LL_TX_TBL_VALUE1_LL_TX_ADV_HDR_TBL_VALUE7_Msk (0x000000ffUL << LL_TRX_REG_LL_TX_TBL_VALUE1_LL_TX_ADV_HDR_TBL_VALUE7_Pos)/*!< LL_TRX_REG LL_TX_TBL_VALUE1: LL_TX_ADV_HDR_TBL_VALUE7 Mask */

/* ----------------------  LL_TRX_REG_LL_ADV_HDR_BUILD_SET0  ---------------------- */
#define LL_TRX_REG_LL_ADV_HDR_BUILD_SET0_CFG_ADV_HDR_BUILD_RX_ADDR_Pos 0                              /*!< LL_TRX_REG LL_ADV_HDR_BUILD_SET0: CFG_ADV_HDR_BUILD_RX_ADDR
                                                         Position                                                                                  */
#define LL_TRX_REG_LL_ADV_HDR_BUILD_SET0_CFG_ADV_HDR_BUILD_RX_ADDR_Msk (0x01UL << LL_TRX_REG_LL_ADV_HDR_BUILD_SET0_CFG_ADV_HDR_BUILD_RX_ADDR_Pos)/*!< LL_TRX_REG LL_ADV_HDR_BUILD_SET0: CFG_ADV_HDR_BUILD_RX_ADDR
                                                         Mask                                                                                      */
#define LL_TRX_REG_LL_ADV_HDR_BUILD_SET0_CFG_ADV_HDR_BUILD_TX_ADDR_Pos 1                              /*!< LL_TRX_REG LL_ADV_HDR_BUILD_SET0: CFG_ADV_HDR_BUILD_TX_ADDR
                                                         Position                                                                                  */
#define LL_TRX_REG_LL_ADV_HDR_BUILD_SET0_CFG_ADV_HDR_BUILD_TX_ADDR_Msk (0x01UL << LL_TRX_REG_LL_ADV_HDR_BUILD_SET0_CFG_ADV_HDR_BUILD_TX_ADDR_Pos)/*!< LL_TRX_REG LL_ADV_HDR_BUILD_SET0: CFG_ADV_HDR_BUILD_TX_ADDR
                                                         Mask                                                                                      */
#define LL_TRX_REG_LL_ADV_HDR_BUILD_SET0_CFG_ADV_HDR_BUILD_TYPE_Pos 2                                 /*!< LL_TRX_REG LL_ADV_HDR_BUILD_SET0: CFG_ADV_HDR_BUILD_TYPE Position */
#define LL_TRX_REG_LL_ADV_HDR_BUILD_SET0_CFG_ADV_HDR_BUILD_TYPE_Msk (0x01UL << LL_TRX_REG_LL_ADV_HDR_BUILD_SET0_CFG_ADV_HDR_BUILD_TYPE_Pos)/*!< LL_TRX_REG LL_ADV_HDR_BUILD_SET0: CFG_ADV_HDR_BUILD_TYPE Mask */

/* ----------------------  LL_TRX_REG_LL_PAYLOAD_BUILD_SET0  ---------------------- */
#define LL_TRX_REG_LL_PAYLOAD_BUILD_SET0_CFG_ADV_PAYLOAD_BUILD_RX_ADDR_Pos 0                          /*!< LL_TRX_REG LL_PAYLOAD_BUILD_SET0: CFG_ADV_PAYLOAD_BUILD_RX_ADDR
                                                         Position                                                                                  */
#define LL_TRX_REG_LL_PAYLOAD_BUILD_SET0_CFG_ADV_PAYLOAD_BUILD_RX_ADDR_Msk (0x01UL << LL_TRX_REG_LL_PAYLOAD_BUILD_SET0_CFG_ADV_PAYLOAD_BUILD_RX_ADDR_Pos)/*!< LL_TRX_REG LL_PAYLOAD_BUILD_SET0: CFG_ADV_PAYLOAD_BUILD_RX_ADDR
                                                         Mask                                                                                      */
#define LL_TRX_REG_LL_PAYLOAD_BUILD_SET0_CFG_ADV_PAYLOAD_BUILD_TX_ADDR_Pos 1                          /*!< LL_TRX_REG LL_PAYLOAD_BUILD_SET0: CFG_ADV_PAYLOAD_BUILD_TX_ADDR
                                                         Position                                                                                  */
#define LL_TRX_REG_LL_PAYLOAD_BUILD_SET0_CFG_ADV_PAYLOAD_BUILD_TX_ADDR_Msk (0x01UL << LL_TRX_REG_LL_PAYLOAD_BUILD_SET0_CFG_ADV_PAYLOAD_BUILD_TX_ADDR_Pos)/*!< LL_TRX_REG LL_PAYLOAD_BUILD_SET0: CFG_ADV_PAYLOAD_BUILD_TX_ADDR
                                                         Mask                                                                                      */

/* -----------------------  LL_TRX_REG_LL_DAT_HDR_BUILD_SET  ---------------------- */
#define LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_MD_OV_VALUE_Pos 0                              /*!< LL_TRX_REG LL_DAT_HDR_BUILD_SET: DATA_HDR_BUILD_MD_OV_VALUE
                                                         Position                                                                                  */
#define LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_MD_OV_VALUE_Msk (0x01UL << LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_MD_OV_VALUE_Pos)/*!< LL_TRX_REG LL_DAT_HDR_BUILD_SET: DATA_HDR_BUILD_MD_OV_VALUE
                                                         Mask                                                                                      */
#define LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_MD_OV_Pos 1                                    /*!< LL_TRX_REG LL_DAT_HDR_BUILD_SET: DATA_HDR_BUILD_MD_OV Position */
#define LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_MD_OV_Msk (0x01UL << LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_MD_OV_Pos)/*!< LL_TRX_REG LL_DAT_HDR_BUILD_SET: DATA_HDR_BUILD_MD_OV Mask */
#define LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_MD_Pos 2                                       /*!< LL_TRX_REG LL_DAT_HDR_BUILD_SET: DATA_HDR_BUILD_MD Position */
#define LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_MD_Msk (0x01UL << LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_MD_Pos)/*!< LL_TRX_REG LL_DAT_HDR_BUILD_SET: DATA_HDR_BUILD_MD Mask */
#define LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_SN_OV_VALUE_Pos 3                              /*!< LL_TRX_REG LL_DAT_HDR_BUILD_SET: DATA_HDR_BUILD_SN_OV_VALUE
                                                         Position                                                                                  */
#define LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_SN_OV_VALUE_Msk (0x01UL << LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_SN_OV_VALUE_Pos)/*!< LL_TRX_REG LL_DAT_HDR_BUILD_SET: DATA_HDR_BUILD_SN_OV_VALUE
                                                         Mask                                                                                      */
#define LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_SN_OV_Pos 4                                    /*!< LL_TRX_REG LL_DAT_HDR_BUILD_SET: DATA_HDR_BUILD_SN_OV Position */
#define LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_SN_OV_Msk (0x01UL << LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_SN_OV_Pos)/*!< LL_TRX_REG LL_DAT_HDR_BUILD_SET: DATA_HDR_BUILD_SN_OV Mask */
#define LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_SN_Pos 5                                       /*!< LL_TRX_REG LL_DAT_HDR_BUILD_SET: DATA_HDR_BUILD_SN Position */
#define LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_SN_Msk (0x01UL << LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_SN_Pos)/*!< LL_TRX_REG LL_DAT_HDR_BUILD_SET: DATA_HDR_BUILD_SN Mask */
#define LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_NESN_OV_VALUE_Pos 6                            /*!< LL_TRX_REG LL_DAT_HDR_BUILD_SET: DATA_HDR_BUILD_NESN_OV_VALUE
                                                         Position                                                                                  */
#define LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_NESN_OV_VALUE_Msk (0x01UL << LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_NESN_OV_VALUE_Pos)/*!< LL_TRX_REG LL_DAT_HDR_BUILD_SET: DATA_HDR_BUILD_NESN_OV_VALUE
                                                         Mask                                                                                      */
#define LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_NESN_OV_Pos 7                                  /*!< LL_TRX_REG LL_DAT_HDR_BUILD_SET: DATA_HDR_BUILD_NESN_OV Position */
#define LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_NESN_OV_Msk (0x01UL << LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_NESN_OV_Pos)/*!< LL_TRX_REG LL_DAT_HDR_BUILD_SET: DATA_HDR_BUILD_NESN_OV Mask */
#define LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_NESN_Pos 8                                     /*!< LL_TRX_REG LL_DAT_HDR_BUILD_SET: DATA_HDR_BUILD_NESN Position */
#define LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_NESN_Msk (0x01UL << LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_NESN_Pos)/*!< LL_TRX_REG LL_DAT_HDR_BUILD_SET: DATA_HDR_BUILD_NESN Mask */
#define LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_TYPE_Pos 9                                     /*!< LL_TRX_REG LL_DAT_HDR_BUILD_SET: DATA_HDR_BUILD_TYPE Position */
#define LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_TYPE_Msk (0x01UL << LL_TRX_REG_LL_DAT_HDR_BUILD_SET_DATA_HDR_BUILD_TYPE_Pos)/*!< LL_TRX_REG LL_DAT_HDR_BUILD_SET: DATA_HDR_BUILD_TYPE Mask */
#define LL_TRX_REG_LL_DAT_HDR_BUILD_SET_RG_DATA_HDR_BUILD_Pos 16                                      /*!< LL_TRX_REG LL_DAT_HDR_BUILD_SET: RG_DATA_HDR_BUILD Position */
#define LL_TRX_REG_LL_DAT_HDR_BUILD_SET_RG_DATA_HDR_BUILD_Msk (0x01UL << LL_TRX_REG_LL_DAT_HDR_BUILD_SET_RG_DATA_HDR_BUILD_Pos)/*!< LL_TRX_REG LL_DAT_HDR_BUILD_SET: RG_DATA_HDR_BUILD Mask */

/* --------------------------  LL_TRX_REG_TX_PDU_REQ_SET  ------------------------- */
#define LL_TRX_REG_TX_PDU_REQ_SET_TX_PDU_REQ_MANUAL_Pos 0                                             /*!< LL_TRX_REG TX_PDU_REQ_SET: TX_PDU_REQ_MANUAL Position */
#define LL_TRX_REG_TX_PDU_REQ_SET_TX_PDU_REQ_MANUAL_Msk (0x01UL << LL_TRX_REG_TX_PDU_REQ_SET_TX_PDU_REQ_MANUAL_Pos)/*!< LL_TRX_REG TX_PDU_REQ_SET: TX_PDU_REQ_MANUAL Mask */

/* ----------------------  LL_TRX_REG_TX_ADV_HDR_BUILD_INFO  ---------------------- */
#define LL_TRX_REG_TX_ADV_HDR_BUILD_INFO_DECISION_TX_ADV_HDR_BUILD_MANUAL_INVALID_Pos 0               /*!< LL_TRX_REG TX_ADV_HDR_BUILD_INFO: DECISION_TX_ADV_HDR_BUILD_MANUAL_INVALID
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_ADV_HDR_BUILD_INFO_DECISION_TX_ADV_HDR_BUILD_MANUAL_INVALID_Msk (0x01UL << LL_TRX_REG_TX_ADV_HDR_BUILD_INFO_DECISION_TX_ADV_HDR_BUILD_MANUAL_INVALID_Pos)/*!< LL_TRX_REG TX_ADV_HDR_BUILD_INFO: DECISION_TX_ADV_HDR_BUILD_MANUAL_INVALID
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_ADV_HDR_BUILD_INFO_DECISION_TX_ADV_HDR_BUILD_MANUAL_SET_Pos 1                   /*!< LL_TRX_REG TX_ADV_HDR_BUILD_INFO: DECISION_TX_ADV_HDR_BUILD_MANUAL_SET
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_ADV_HDR_BUILD_INFO_DECISION_TX_ADV_HDR_BUILD_MANUAL_SET_Msk (0x01UL << LL_TRX_REG_TX_ADV_HDR_BUILD_INFO_DECISION_TX_ADV_HDR_BUILD_MANUAL_SET_Pos)/*!< LL_TRX_REG TX_ADV_HDR_BUILD_INFO: DECISION_TX_ADV_HDR_BUILD_MANUAL_SET
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_ADV_HDR_BUILD_INFO_DECISION_TX_ADV_HDR_BUILD_MANUAL_OVERWRITE_Pos 2             /*!< LL_TRX_REG TX_ADV_HDR_BUILD_INFO: DECISION_TX_ADV_HDR_BUILD_MANUAL_OVERWRI
                                                         TE Position                                                                               */
#define LL_TRX_REG_TX_ADV_HDR_BUILD_INFO_DECISION_TX_ADV_HDR_BUILD_MANUAL_OVERWRITE_Msk (0x01UL << LL_TRX_REG_TX_ADV_HDR_BUILD_INFO_DECISION_TX_ADV_HDR_BUILD_MANUAL_OVERWRITE_Pos)/*!< LL_TRX_REG TX_ADV_HDR_BUILD_INFO: DECISION_TX_ADV_HDR_BUILD_MANUAL_OVERWRI
                                                         TE Mask                                                                                   */
#define LL_TRX_REG_TX_ADV_HDR_BUILD_INFO_DECISION_TX_ADV_HDR_BUILD_MANUAL_VALID_Pos 4                 /*!< LL_TRX_REG TX_ADV_HDR_BUILD_INFO: DECISION_TX_ADV_HDR_BUILD_MANUAL_VALID
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_ADV_HDR_BUILD_INFO_DECISION_TX_ADV_HDR_BUILD_MANUAL_VALID_Msk (0x01UL << LL_TRX_REG_TX_ADV_HDR_BUILD_INFO_DECISION_TX_ADV_HDR_BUILD_MANUAL_VALID_Pos)/*!< LL_TRX_REG TX_ADV_HDR_BUILD_INFO: DECISION_TX_ADV_HDR_BUILD_MANUAL_VALID
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_ADV_HDR_BUILD_INFO_DECISION_TX_ADV_HDR_BUILD_MANUAL_VALUE_Pos 8                 /*!< LL_TRX_REG TX_ADV_HDR_BUILD_INFO: DECISION_TX_ADV_HDR_BUILD_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_ADV_HDR_BUILD_INFO_DECISION_TX_ADV_HDR_BUILD_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_TX_ADV_HDR_BUILD_INFO_DECISION_TX_ADV_HDR_BUILD_MANUAL_VALUE_Pos)/*!< LL_TRX_REG TX_ADV_HDR_BUILD_INFO: DECISION_TX_ADV_HDR_BUILD_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_ADV_HDR_BUILD_INFO_DECISION_TX_ADV_HDR_BUILD_INFO_VALID_Pos 16                  /*!< LL_TRX_REG TX_ADV_HDR_BUILD_INFO: DECISION_TX_ADV_HDR_BUILD_INFO_VALID
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_ADV_HDR_BUILD_INFO_DECISION_TX_ADV_HDR_BUILD_INFO_VALID_Msk (0x01UL << LL_TRX_REG_TX_ADV_HDR_BUILD_INFO_DECISION_TX_ADV_HDR_BUILD_INFO_VALID_Pos)/*!< LL_TRX_REG TX_ADV_HDR_BUILD_INFO: DECISION_TX_ADV_HDR_BUILD_INFO_VALID
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_ADV_HDR_BUILD_INFO_DECISION_TX_ADV_HDR_BUILD_INFO_VALUE_Pos 24                  /*!< LL_TRX_REG TX_ADV_HDR_BUILD_INFO: DECISION_TX_ADV_HDR_BUILD_INFO_VALUE
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_ADV_HDR_BUILD_INFO_DECISION_TX_ADV_HDR_BUILD_INFO_VALUE_Msk (0x01UL << LL_TRX_REG_TX_ADV_HDR_BUILD_INFO_DECISION_TX_ADV_HDR_BUILD_INFO_VALUE_Pos)/*!< LL_TRX_REG TX_ADV_HDR_BUILD_INFO: DECISION_TX_ADV_HDR_BUILD_INFO_VALUE
                                                         Mask                                                                                      */

/* ------------------  LL_TRX_REG_TX_ADV_PLOAD_TX_ADR_BUILD_INFO  ----------------- */
#define LL_TRX_REG_TX_ADV_PLOAD_TX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_MANUAL_INVALID_Pos 0/*!< LL_TRX_REG TX_ADV_PLOAD_TX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_TX_ADDR
                                                         _BUILD_MANUAL_INVALID Position                                                            */
#define LL_TRX_REG_TX_ADV_PLOAD_TX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_MANUAL_INVALID_Msk (0x01UL << LL_TRX_REG_TX_ADV_PLOAD_TX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_MANUAL_INVALID_Pos)/*!< LL_TRX_REG TX_ADV_PLOAD_TX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_TX_ADDR
                                                         _BUILD_MANUAL_INVALID Mask                                                                */
#define LL_TRX_REG_TX_ADV_PLOAD_TX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_MANUAL_SET_Pos 1/*!< LL_TRX_REG TX_ADV_PLOAD_TX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_TX_ADDR
                                                         _BUILD_MANUAL_SET Position                                                                */
#define LL_TRX_REG_TX_ADV_PLOAD_TX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_MANUAL_SET_Msk (0x01UL << LL_TRX_REG_TX_ADV_PLOAD_TX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_MANUAL_SET_Pos)/*!< LL_TRX_REG TX_ADV_PLOAD_TX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_TX_ADDR
                                                         _BUILD_MANUAL_SET Mask                                                                    */
#define LL_TRX_REG_TX_ADV_PLOAD_TX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_MANUAL_OVERWRITE_Pos 2/*!< LL_TRX_REG TX_ADV_PLOAD_TX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_TX_ADDR
                                                         _BUILD_MANUAL_OVERWRITE Position                                                          */
#define LL_TRX_REG_TX_ADV_PLOAD_TX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_MANUAL_OVERWRITE_Msk (0x01UL << LL_TRX_REG_TX_ADV_PLOAD_TX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_MANUAL_OVERWRITE_Pos)/*!< LL_TRX_REG TX_ADV_PLOAD_TX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_TX_ADDR
                                                         _BUILD_MANUAL_OVERWRITE Mask                                                              */
#define LL_TRX_REG_TX_ADV_PLOAD_TX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_MANUAL_VALID_Pos 4/*!< LL_TRX_REG TX_ADV_PLOAD_TX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_TX_ADDR
                                                         _BUILD_MANUAL_VALID Position                                                              */
#define LL_TRX_REG_TX_ADV_PLOAD_TX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_MANUAL_VALID_Msk (0x01UL << LL_TRX_REG_TX_ADV_PLOAD_TX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_MANUAL_VALID_Pos)/*!< LL_TRX_REG TX_ADV_PLOAD_TX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_TX_ADDR
                                                         _BUILD_MANUAL_VALID Mask                                                                  */
#define LL_TRX_REG_TX_ADV_PLOAD_TX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_MANUAL_VALUE_Pos 8/*!< LL_TRX_REG TX_ADV_PLOAD_TX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_TX_ADDR
                                                         _BUILD_MANUAL_VALUE Position                                                              */
#define LL_TRX_REG_TX_ADV_PLOAD_TX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_TX_ADV_PLOAD_TX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_MANUAL_VALUE_Pos)/*!< LL_TRX_REG TX_ADV_PLOAD_TX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_TX_ADDR
                                                         _BUILD_MANUAL_VALUE Mask                                                                  */
#define LL_TRX_REG_TX_ADV_PLOAD_TX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_INFO_VALID_Pos 16/*!< LL_TRX_REG TX_ADV_PLOAD_TX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_TX_ADDR
                                                         _BUILD_INFO_VALID Position                                                                */
#define LL_TRX_REG_TX_ADV_PLOAD_TX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_INFO_VALID_Msk (0x01UL << LL_TRX_REG_TX_ADV_PLOAD_TX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_INFO_VALID_Pos)/*!< LL_TRX_REG TX_ADV_PLOAD_TX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_TX_ADDR
                                                         _BUILD_INFO_VALID Mask                                                                    */
#define LL_TRX_REG_TX_ADV_PLOAD_TX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_INFO_VALUE_Pos 24/*!< LL_TRX_REG TX_ADV_PLOAD_TX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_TX_ADDR
                                                         _BUILD_INFO_VALUE Position                                                                */
#define LL_TRX_REG_TX_ADV_PLOAD_TX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_INFO_VALUE_Msk (0x01UL << LL_TRX_REG_TX_ADV_PLOAD_TX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_TX_ADDR_BUILD_INFO_VALUE_Pos)/*!< LL_TRX_REG TX_ADV_PLOAD_TX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_TX_ADDR
                                                         _BUILD_INFO_VALUE Mask                                                                    */

/* ------------------  LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_BUILD_INFO  ----------------- */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_MANUAL_INVALID_Pos 0/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR
                                                         _BUILD_MANUAL_INVALID Position                                                            */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_MANUAL_INVALID_Msk (0x01UL << LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_MANUAL_INVALID_Pos)/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR
                                                         _BUILD_MANUAL_INVALID Mask                                                                */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_MANUAL_SET_Pos 1/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR
                                                         _BUILD_MANUAL_SET Position                                                                */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_MANUAL_SET_Msk (0x01UL << LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_MANUAL_SET_Pos)/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR
                                                         _BUILD_MANUAL_SET Mask                                                                    */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_MANUAL_OVERWRITE_Pos 2/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR
                                                         _BUILD_MANUAL_OVERWRITE Position                                                          */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_MANUAL_OVERWRITE_Msk (0x01UL << LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_MANUAL_OVERWRITE_Pos)/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR
                                                         _BUILD_MANUAL_OVERWRITE Mask                                                              */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_MANUAL_VALID_Pos 4/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR
                                                         _BUILD_MANUAL_VALID Position                                                              */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_MANUAL_VALID_Msk (0x01UL << LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_MANUAL_VALID_Pos)/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR
                                                         _BUILD_MANUAL_VALID Mask                                                                  */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_MANUAL_VALUE_Pos 8/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR
                                                         _BUILD_MANUAL_VALUE Position                                                              */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_MANUAL_VALUE_Pos)/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR
                                                         _BUILD_MANUAL_VALUE Mask                                                                  */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_INFO_VALID_Pos 16/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR
                                                         _BUILD_INFO_VALID Position                                                                */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_INFO_VALID_Msk (0x01UL << LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_INFO_VALID_Pos)/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR
                                                         _BUILD_INFO_VALID Mask                                                                    */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_INFO_VALUE_Pos 24/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR
                                                         _BUILD_INFO_VALUE Position                                                                */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_INFO_VALUE_Msk (0x01UL << LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_BUILD_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_BUILD_INFO_VALUE_Pos)/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_BUILD_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR
                                                         _BUILD_INFO_VALUE Mask                                                                    */

/* -------------------  LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_SRC_INFO  ------------------ */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_SRC_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_MANUAL_INVALID_Pos 0/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_SRC_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR_S
                                                         RC_MANUAL_INVALID Position                                                                */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_SRC_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_MANUAL_INVALID_Msk (0x01UL << LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_SRC_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_MANUAL_INVALID_Pos)/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_SRC_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR_S
                                                         RC_MANUAL_INVALID Mask                                                                    */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_SRC_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_MANUAL_SET_Pos 1  /*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_SRC_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR_S
                                                         RC_MANUAL_SET Position                                                                    */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_SRC_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_MANUAL_SET_Msk (0x01UL << LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_SRC_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_MANUAL_SET_Pos)/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_SRC_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR_S
                                                         RC_MANUAL_SET Mask                                                                        */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_SRC_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_MANUAL_OVERWRITE_Pos 2/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_SRC_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR_S
                                                         RC_MANUAL_OVERWRITE Position                                                              */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_SRC_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_MANUAL_OVERWRITE_Msk (0x01UL << LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_SRC_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_MANUAL_OVERWRITE_Pos)/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_SRC_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR_S
                                                         RC_MANUAL_OVERWRITE Mask                                                                  */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_SRC_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_MANUAL_VALID_Pos 4/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_SRC_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR_S
                                                         RC_MANUAL_VALID Position                                                                  */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_SRC_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_MANUAL_VALID_Msk (0x01UL << LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_SRC_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_MANUAL_VALID_Pos)/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_SRC_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR_S
                                                         RC_MANUAL_VALID Mask                                                                      */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_SRC_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_MANUAL_VALUE_Pos 8/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_SRC_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR_S
                                                         RC_MANUAL_VALUE Position                                                                  */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_SRC_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_SRC_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_MANUAL_VALUE_Pos)/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_SRC_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR_S
                                                         RC_MANUAL_VALUE Mask                                                                      */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_SRC_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_INFO_VALID_Pos 16 /*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_SRC_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR_S
                                                         RC_INFO_VALID Position                                                                    */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_SRC_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_INFO_VALID_Msk (0x01UL << LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_SRC_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_INFO_VALID_Pos)/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_SRC_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR_S
                                                         RC_INFO_VALID Mask                                                                        */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_SRC_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_INFO_VALUE_Pos 24 /*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_SRC_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR_S
                                                         RC_INFO_VALUE Position                                                                    */
#define LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_SRC_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_INFO_VALUE_Msk (0x01UL << LL_TRX_REG_TX_ADV_PLOAD_RX_ADR_SRC_INFO_DECISION_TX_ADV_PAYLOAD_RX_ADDR_SRC_INFO_VALUE_Pos)/*!< LL_TRX_REG TX_ADV_PLOAD_RX_ADR_SRC_INFO: DECISION_TX_ADV_PAYLOAD_RX_ADDR_S
                                                         RC_INFO_VALUE Mask                                                                        */

/* -------------------------  LL_TRX_REG_DATA_SN_OWN_INFO  ------------------------ */
#define LL_TRX_REG_DATA_SN_OWN_INFO_DATA_SN_OWN_MANUAL_INVALID_Pos 0                                  /*!< LL_TRX_REG DATA_SN_OWN_INFO: DATA_SN_OWN_MANUAL_INVALID Position */
#define LL_TRX_REG_DATA_SN_OWN_INFO_DATA_SN_OWN_MANUAL_INVALID_Msk (0x01UL << LL_TRX_REG_DATA_SN_OWN_INFO_DATA_SN_OWN_MANUAL_INVALID_Pos)/*!< LL_TRX_REG DATA_SN_OWN_INFO: DATA_SN_OWN_MANUAL_INVALID Mask */
#define LL_TRX_REG_DATA_SN_OWN_INFO_DATA_SN_OWN_MANUAL_SET_Pos 1                                      /*!< LL_TRX_REG DATA_SN_OWN_INFO: DATA_SN_OWN_MANUAL_SET Position */
#define LL_TRX_REG_DATA_SN_OWN_INFO_DATA_SN_OWN_MANUAL_SET_Msk (0x01UL << LL_TRX_REG_DATA_SN_OWN_INFO_DATA_SN_OWN_MANUAL_SET_Pos)/*!< LL_TRX_REG DATA_SN_OWN_INFO: DATA_SN_OWN_MANUAL_SET Mask */
#define LL_TRX_REG_DATA_SN_OWN_INFO_DATA_SN_OWN_MANUAL_OVERWRITE_Pos 2                                /*!< LL_TRX_REG DATA_SN_OWN_INFO: DATA_SN_OWN_MANUAL_OVERWRITE Position */
#define LL_TRX_REG_DATA_SN_OWN_INFO_DATA_SN_OWN_MANUAL_OVERWRITE_Msk (0x01UL << LL_TRX_REG_DATA_SN_OWN_INFO_DATA_SN_OWN_MANUAL_OVERWRITE_Pos)/*!< LL_TRX_REG DATA_SN_OWN_INFO: DATA_SN_OWN_MANUAL_OVERWRITE Mask */
#define LL_TRX_REG_DATA_SN_OWN_INFO_DATA_SN_OWN_MANUAL_VALID_Pos 4                                    /*!< LL_TRX_REG DATA_SN_OWN_INFO: DATA_SN_OWN_MANUAL_VALID Position */
#define LL_TRX_REG_DATA_SN_OWN_INFO_DATA_SN_OWN_MANUAL_VALID_Msk (0x01UL << LL_TRX_REG_DATA_SN_OWN_INFO_DATA_SN_OWN_MANUAL_VALID_Pos)/*!< LL_TRX_REG DATA_SN_OWN_INFO: DATA_SN_OWN_MANUAL_VALID Mask */
#define LL_TRX_REG_DATA_SN_OWN_INFO_DATA_SN_OWN_MANUAL_VALUE_Pos 8                                    /*!< LL_TRX_REG DATA_SN_OWN_INFO: DATA_SN_OWN_MANUAL_VALUE Position */
#define LL_TRX_REG_DATA_SN_OWN_INFO_DATA_SN_OWN_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_DATA_SN_OWN_INFO_DATA_SN_OWN_MANUAL_VALUE_Pos)/*!< LL_TRX_REG DATA_SN_OWN_INFO: DATA_SN_OWN_MANUAL_VALUE Mask */
#define LL_TRX_REG_DATA_SN_OWN_INFO_DATA_SN_OWN_INFO_VALID_Pos 16                                     /*!< LL_TRX_REG DATA_SN_OWN_INFO: DATA_SN_OWN_INFO_VALID Position */
#define LL_TRX_REG_DATA_SN_OWN_INFO_DATA_SN_OWN_INFO_VALID_Msk (0x01UL << LL_TRX_REG_DATA_SN_OWN_INFO_DATA_SN_OWN_INFO_VALID_Pos)/*!< LL_TRX_REG DATA_SN_OWN_INFO: DATA_SN_OWN_INFO_VALID Mask */
#define LL_TRX_REG_DATA_SN_OWN_INFO_DATA_SN_OWN_INFO_VALUE_Pos 24                                     /*!< LL_TRX_REG DATA_SN_OWN_INFO: DATA_SN_OWN_INFO_VALUE Position */
#define LL_TRX_REG_DATA_SN_OWN_INFO_DATA_SN_OWN_INFO_VALUE_Msk (0x01UL << LL_TRX_REG_DATA_SN_OWN_INFO_DATA_SN_OWN_INFO_VALUE_Pos)/*!< LL_TRX_REG DATA_SN_OWN_INFO: DATA_SN_OWN_INFO_VALUE Mask */

/* ---------------------------  LL_TRX_REG_DATA_MD_INFO  -------------------------- */
#define LL_TRX_REG_DATA_MD_INFO_DATA_MD_OWN_MANUAL_INVALID_Pos 0                                      /*!< LL_TRX_REG DATA_MD_INFO: DATA_MD_OWN_MANUAL_INVALID Position */
#define LL_TRX_REG_DATA_MD_INFO_DATA_MD_OWN_MANUAL_INVALID_Msk (0x01UL << LL_TRX_REG_DATA_MD_INFO_DATA_MD_OWN_MANUAL_INVALID_Pos)/*!< LL_TRX_REG DATA_MD_INFO: DATA_MD_OWN_MANUAL_INVALID Mask */
#define LL_TRX_REG_DATA_MD_INFO_DATA_MD_OWN_MANUAL_SET_Pos 1                                          /*!< LL_TRX_REG DATA_MD_INFO: DATA_MD_OWN_MANUAL_SET Position */
#define LL_TRX_REG_DATA_MD_INFO_DATA_MD_OWN_MANUAL_SET_Msk (0x01UL << LL_TRX_REG_DATA_MD_INFO_DATA_MD_OWN_MANUAL_SET_Pos)/*!< LL_TRX_REG DATA_MD_INFO: DATA_MD_OWN_MANUAL_SET Mask */
#define LL_TRX_REG_DATA_MD_INFO_DATA_MD_OWN_MANUAL_OVERWRITE_Pos 2                                    /*!< LL_TRX_REG DATA_MD_INFO: DATA_MD_OWN_MANUAL_OVERWRITE Position */
#define LL_TRX_REG_DATA_MD_INFO_DATA_MD_OWN_MANUAL_OVERWRITE_Msk (0x01UL << LL_TRX_REG_DATA_MD_INFO_DATA_MD_OWN_MANUAL_OVERWRITE_Pos)/*!< LL_TRX_REG DATA_MD_INFO: DATA_MD_OWN_MANUAL_OVERWRITE Mask */
#define LL_TRX_REG_DATA_MD_INFO_DATA_MD_OWN_MANUAL_VALID_Pos 4                                        /*!< LL_TRX_REG DATA_MD_INFO: DATA_MD_OWN_MANUAL_VALID Position */
#define LL_TRX_REG_DATA_MD_INFO_DATA_MD_OWN_MANUAL_VALID_Msk (0x01UL << LL_TRX_REG_DATA_MD_INFO_DATA_MD_OWN_MANUAL_VALID_Pos)/*!< LL_TRX_REG DATA_MD_INFO: DATA_MD_OWN_MANUAL_VALID Mask */
#define LL_TRX_REG_DATA_MD_INFO_DATA_MD_OWN_MANUAL_VALUE_Pos 8                                        /*!< LL_TRX_REG DATA_MD_INFO: DATA_MD_OWN_MANUAL_VALUE Position */
#define LL_TRX_REG_DATA_MD_INFO_DATA_MD_OWN_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_DATA_MD_INFO_DATA_MD_OWN_MANUAL_VALUE_Pos)/*!< LL_TRX_REG DATA_MD_INFO: DATA_MD_OWN_MANUAL_VALUE Mask */
#define LL_TRX_REG_DATA_MD_INFO_DATA_MD_OWN_INFO_VALID_Pos 16                                         /*!< LL_TRX_REG DATA_MD_INFO: DATA_MD_OWN_INFO_VALID Position */
#define LL_TRX_REG_DATA_MD_INFO_DATA_MD_OWN_INFO_VALID_Msk (0x01UL << LL_TRX_REG_DATA_MD_INFO_DATA_MD_OWN_INFO_VALID_Pos)/*!< LL_TRX_REG DATA_MD_INFO: DATA_MD_OWN_INFO_VALID Mask */
#define LL_TRX_REG_DATA_MD_INFO_DATA_MD_OWN_INFO_VALUE_Pos 24                                         /*!< LL_TRX_REG DATA_MD_INFO: DATA_MD_OWN_INFO_VALUE Position */
#define LL_TRX_REG_DATA_MD_INFO_DATA_MD_OWN_INFO_VALUE_Msk (0x01UL << LL_TRX_REG_DATA_MD_INFO_DATA_MD_OWN_INFO_VALUE_Pos)/*!< LL_TRX_REG DATA_MD_INFO: DATA_MD_OWN_INFO_VALUE Mask */

/* -------------------------  LL_TRX_REG_TX_DUMY_POLICY_0  ------------------------ */
#define LL_TRX_REG_TX_DUMY_POLICY_0_TX_DUMY_POLICY_SIG0_SEL_Pos 0                                     /*!< LL_TRX_REG TX_DUMY_POLICY_0: TX_DUMY_POLICY_SIG0_SEL Position */
#define LL_TRX_REG_TX_DUMY_POLICY_0_TX_DUMY_POLICY_SIG0_SEL_Msk (0x3fUL << LL_TRX_REG_TX_DUMY_POLICY_0_TX_DUMY_POLICY_SIG0_SEL_Pos)/*!< LL_TRX_REG TX_DUMY_POLICY_0: TX_DUMY_POLICY_SIG0_SEL Mask */
#define LL_TRX_REG_TX_DUMY_POLICY_0_TX_DUMY_POLICY_SIG1_SEL_Pos 8                                     /*!< LL_TRX_REG TX_DUMY_POLICY_0: TX_DUMY_POLICY_SIG1_SEL Position */
#define LL_TRX_REG_TX_DUMY_POLICY_0_TX_DUMY_POLICY_SIG1_SEL_Msk (0x3fUL << LL_TRX_REG_TX_DUMY_POLICY_0_TX_DUMY_POLICY_SIG1_SEL_Pos)/*!< LL_TRX_REG TX_DUMY_POLICY_0: TX_DUMY_POLICY_SIG1_SEL Mask */
#define LL_TRX_REG_TX_DUMY_POLICY_0_TX_DUMY_POLICY_SIG2_SEL_Pos 16                                    /*!< LL_TRX_REG TX_DUMY_POLICY_0: TX_DUMY_POLICY_SIG2_SEL Position */
#define LL_TRX_REG_TX_DUMY_POLICY_0_TX_DUMY_POLICY_SIG2_SEL_Msk (0x3fUL << LL_TRX_REG_TX_DUMY_POLICY_0_TX_DUMY_POLICY_SIG2_SEL_Pos)/*!< LL_TRX_REG TX_DUMY_POLICY_0: TX_DUMY_POLICY_SIG2_SEL Mask */
#define LL_TRX_REG_TX_DUMY_POLICY_0_TX_DUMY_POLICY_SIG3_SEL_Pos 24                                    /*!< LL_TRX_REG TX_DUMY_POLICY_0: TX_DUMY_POLICY_SIG3_SEL Position */
#define LL_TRX_REG_TX_DUMY_POLICY_0_TX_DUMY_POLICY_SIG3_SEL_Msk (0x3fUL << LL_TRX_REG_TX_DUMY_POLICY_0_TX_DUMY_POLICY_SIG3_SEL_Pos)/*!< LL_TRX_REG TX_DUMY_POLICY_0: TX_DUMY_POLICY_SIG3_SEL Mask */
#define LL_TRX_REG_TX_DUMY_POLICY_0_TX_DUMY_POLICY_MANUAL_VALUE_Pos 30                                /*!< LL_TRX_REG TX_DUMY_POLICY_0: TX_DUMY_POLICY_MANUAL_VALUE Position */
#define LL_TRX_REG_TX_DUMY_POLICY_0_TX_DUMY_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_TX_DUMY_POLICY_0_TX_DUMY_POLICY_MANUAL_VALUE_Pos)/*!< LL_TRX_REG TX_DUMY_POLICY_0: TX_DUMY_POLICY_MANUAL_VALUE Mask */
#define LL_TRX_REG_TX_DUMY_POLICY_0_TX_DUMY_POLICY_MANUAL_EN_Pos 31                                   /*!< LL_TRX_REG TX_DUMY_POLICY_0: TX_DUMY_POLICY_MANUAL_EN Position */
#define LL_TRX_REG_TX_DUMY_POLICY_0_TX_DUMY_POLICY_MANUAL_EN_Msk (0x01UL << LL_TRX_REG_TX_DUMY_POLICY_0_TX_DUMY_POLICY_MANUAL_EN_Pos)/*!< LL_TRX_REG TX_DUMY_POLICY_0: TX_DUMY_POLICY_MANUAL_EN Mask */

/* -------------------------  LL_TRX_REG_TX_DUMY_POLICY_1  ------------------------ */
#define LL_TRX_REG_TX_DUMY_POLICY_1_TX_DUMY_POLICY_W1C_Pos 0                                          /*!< LL_TRX_REG TX_DUMY_POLICY_1: TX_DUMY_POLICY_W1C Position */
#define LL_TRX_REG_TX_DUMY_POLICY_1_TX_DUMY_POLICY_W1C_Msk (0x01UL << LL_TRX_REG_TX_DUMY_POLICY_1_TX_DUMY_POLICY_W1C_Pos)/*!< LL_TRX_REG TX_DUMY_POLICY_1: TX_DUMY_POLICY_W1C Mask */
#define LL_TRX_REG_TX_DUMY_POLICY_1_TX_DUMY_POLICY_W1S_Pos 1                                          /*!< LL_TRX_REG TX_DUMY_POLICY_1: TX_DUMY_POLICY_W1S Position */
#define LL_TRX_REG_TX_DUMY_POLICY_1_TX_DUMY_POLICY_W1S_Msk (0x01UL << LL_TRX_REG_TX_DUMY_POLICY_1_TX_DUMY_POLICY_W1S_Pos)/*!< LL_TRX_REG TX_DUMY_POLICY_1: TX_DUMY_POLICY_W1S Mask */

/* -------------------------  LL_TRX_REG_TX_DUMY_POLICY_2  ------------------------ */
#define LL_TRX_REG_TX_DUMY_POLICY_2_TX_DUMY_POLICY_Pos 0                                              /*!< LL_TRX_REG TX_DUMY_POLICY_2: TX_DUMY_POLICY Position */
#define LL_TRX_REG_TX_DUMY_POLICY_2_TX_DUMY_POLICY_Msk (0xffffffffUL << LL_TRX_REG_TX_DUMY_POLICY_2_TX_DUMY_POLICY_Pos)/*!< LL_TRX_REG TX_DUMY_POLICY_2: TX_DUMY_POLICY Mask */

/* --------------------  LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_0  -------------------- */
#define LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_0_PDU_ASSEMBLE_IRQ_POLICY_SIG0_SEL_Pos 0                   /*!< LL_TRX_REG PDU_ASSEMBLE_IRQ_POLICY_0: PDU_ASSEMBLE_IRQ_POLICY_SIG0_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_0_PDU_ASSEMBLE_IRQ_POLICY_SIG0_SEL_Msk (0x3fUL << LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_0_PDU_ASSEMBLE_IRQ_POLICY_SIG0_SEL_Pos)/*!< LL_TRX_REG PDU_ASSEMBLE_IRQ_POLICY_0: PDU_ASSEMBLE_IRQ_POLICY_SIG0_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_0_PDU_ASSEMBLE_IRQ_POLICY_SIG1_SEL_Pos 8                   /*!< LL_TRX_REG PDU_ASSEMBLE_IRQ_POLICY_0: PDU_ASSEMBLE_IRQ_POLICY_SIG1_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_0_PDU_ASSEMBLE_IRQ_POLICY_SIG1_SEL_Msk (0x3fUL << LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_0_PDU_ASSEMBLE_IRQ_POLICY_SIG1_SEL_Pos)/*!< LL_TRX_REG PDU_ASSEMBLE_IRQ_POLICY_0: PDU_ASSEMBLE_IRQ_POLICY_SIG1_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_0_PDU_ASSEMBLE_IRQ_POLICY_SIG2_SEL_Pos 16                  /*!< LL_TRX_REG PDU_ASSEMBLE_IRQ_POLICY_0: PDU_ASSEMBLE_IRQ_POLICY_SIG2_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_0_PDU_ASSEMBLE_IRQ_POLICY_SIG2_SEL_Msk (0x3fUL << LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_0_PDU_ASSEMBLE_IRQ_POLICY_SIG2_SEL_Pos)/*!< LL_TRX_REG PDU_ASSEMBLE_IRQ_POLICY_0: PDU_ASSEMBLE_IRQ_POLICY_SIG2_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_0_PDU_ASSEMBLE_IRQ_POLICY_SIG3_SEL_Pos 24                  /*!< LL_TRX_REG PDU_ASSEMBLE_IRQ_POLICY_0: PDU_ASSEMBLE_IRQ_POLICY_SIG3_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_0_PDU_ASSEMBLE_IRQ_POLICY_SIG3_SEL_Msk (0x3fUL << LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_0_PDU_ASSEMBLE_IRQ_POLICY_SIG3_SEL_Pos)/*!< LL_TRX_REG PDU_ASSEMBLE_IRQ_POLICY_0: PDU_ASSEMBLE_IRQ_POLICY_SIG3_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_0_PDU_ASSEMBLE_IRQ_POLICY_MANUAL_VALUE_Pos 30              /*!< LL_TRX_REG PDU_ASSEMBLE_IRQ_POLICY_0: PDU_ASSEMBLE_IRQ_POLICY_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_0_PDU_ASSEMBLE_IRQ_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_0_PDU_ASSEMBLE_IRQ_POLICY_MANUAL_VALUE_Pos)/*!< LL_TRX_REG PDU_ASSEMBLE_IRQ_POLICY_0: PDU_ASSEMBLE_IRQ_POLICY_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_0_PDU_ASSEMBLE_IRQ_POLICY_MANUAL_EN_Pos 31                 /*!< LL_TRX_REG PDU_ASSEMBLE_IRQ_POLICY_0: PDU_ASSEMBLE_IRQ_POLICY_MANUAL_EN
                                                         Position                                                                                  */
#define LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_0_PDU_ASSEMBLE_IRQ_POLICY_MANUAL_EN_Msk (0x01UL << LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_0_PDU_ASSEMBLE_IRQ_POLICY_MANUAL_EN_Pos)/*!< LL_TRX_REG PDU_ASSEMBLE_IRQ_POLICY_0: PDU_ASSEMBLE_IRQ_POLICY_MANUAL_EN
                                                         Mask                                                                                      */

/* --------------------  LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_1  -------------------- */
#define LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_1_PDU_ASSEMBLE_IRQ_POLICY_W1C_Pos 0                        /*!< LL_TRX_REG PDU_ASSEMBLE_IRQ_POLICY_1: PDU_ASSEMBLE_IRQ_POLICY_W1C
                                                         Position                                                                                  */
#define LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_1_PDU_ASSEMBLE_IRQ_POLICY_W1C_Msk (0x01UL << LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_1_PDU_ASSEMBLE_IRQ_POLICY_W1C_Pos)/*!< LL_TRX_REG PDU_ASSEMBLE_IRQ_POLICY_1: PDU_ASSEMBLE_IRQ_POLICY_W1C
                                                         Mask                                                                                      */
#define LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_1_PDU_ASSEMBLE_IRQ_POLICY_W1S_Pos 1                        /*!< LL_TRX_REG PDU_ASSEMBLE_IRQ_POLICY_1: PDU_ASSEMBLE_IRQ_POLICY_W1S
                                                         Position                                                                                  */
#define LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_1_PDU_ASSEMBLE_IRQ_POLICY_W1S_Msk (0x01UL << LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_1_PDU_ASSEMBLE_IRQ_POLICY_W1S_Pos)/*!< LL_TRX_REG PDU_ASSEMBLE_IRQ_POLICY_1: PDU_ASSEMBLE_IRQ_POLICY_W1S
                                                         Mask                                                                                      */

/* --------------------  LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_2  -------------------- */
#define LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_2_PDU_ASSEMBLE_IRQ_POLICY_Pos 0                            /*!< LL_TRX_REG PDU_ASSEMBLE_IRQ_POLICY_2: PDU_ASSEMBLE_IRQ_POLICY
                                                         Position                                                                                  */
#define LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_2_PDU_ASSEMBLE_IRQ_POLICY_Msk (0xffffffffUL << LL_TRX_REG_PDU_ASSEMBLE_IRQ_POLICY_2_PDU_ASSEMBLE_IRQ_POLICY_Pos)/*!< LL_TRX_REG PDU_ASSEMBLE_IRQ_POLICY_2: PDU_ASSEMBLE_IRQ_POLICY
                                                         Mask                                                                                      */

/* --------------------  LL_TRX_REG_ASSEBLER_POLICY_SRC_BUS_0  -------------------- */
#define LL_TRX_REG_ASSEBLER_POLICY_SRC_BUS_0_ASSEMBLER_POLICY_SRC_BUS_31_0_Pos 0                      /*!< LL_TRX_REG ASSEBLER_POLICY_SRC_BUS_0: ASSEMBLER_POLICY_SRC_BUS_31_0
                                                         Position                                                                                  */
#define LL_TRX_REG_ASSEBLER_POLICY_SRC_BUS_0_ASSEMBLER_POLICY_SRC_BUS_31_0_Msk (0xffffffffUL << LL_TRX_REG_ASSEBLER_POLICY_SRC_BUS_0_ASSEMBLER_POLICY_SRC_BUS_31_0_Pos)/*!< LL_TRX_REG ASSEBLER_POLICY_SRC_BUS_0: ASSEMBLER_POLICY_SRC_BUS_31_0
                                                         Mask                                                                                      */

/* --------------------  LL_TRX_REG_ASSEBLER_POLICY_SRC_BUS_1  -------------------- */
#define LL_TRX_REG_ASSEBLER_POLICY_SRC_BUS_1_ASSEMBLER_POLICY_SRC_BUS_63_32_Pos 0                     /*!< LL_TRX_REG ASSEBLER_POLICY_SRC_BUS_1: ASSEMBLER_POLICY_SRC_BUS_63_32
                                                         Position                                                                                  */
#define LL_TRX_REG_ASSEBLER_POLICY_SRC_BUS_1_ASSEMBLER_POLICY_SRC_BUS_63_32_Msk (0xffffffffUL << LL_TRX_REG_ASSEBLER_POLICY_SRC_BUS_1_ASSEMBLER_POLICY_SRC_BUS_63_32_Pos)/*!< LL_TRX_REG ASSEBLER_POLICY_SRC_BUS_1: ASSEMBLER_POLICY_SRC_BUS_63_32
                                                         Mask                                                                                      */

/* --------------------------  LL_TRX_REG_LL_TX_TBL_INFO  ------------------------- */
#define LL_TRX_REG_LL_TX_TBL_INFO_TBL_LOOKUP_NO_HIT_Pos 0                                             /*!< LL_TRX_REG LL_TX_TBL_INFO: TBL_LOOKUP_NO_HIT Position */
#define LL_TRX_REG_LL_TX_TBL_INFO_TBL_LOOKUP_NO_HIT_Msk (0x01UL << LL_TRX_REG_LL_TX_TBL_INFO_TBL_LOOKUP_NO_HIT_Pos)/*!< LL_TRX_REG LL_TX_TBL_INFO: TBL_LOOKUP_NO_HIT Mask */

/* ------------------------  LL_TRX_REG_CSR_TX_RING_CTRL_0  ----------------------- */
#define LL_TRX_REG_CSR_TX_RING_CTRL_0_TX_RING_DESC_BASE_ADDR_Pos 0                                    /*!< LL_TRX_REG CSR_TX_RING_CTRL_0: TX_RING_DESC_BASE_ADDR Position */
#define LL_TRX_REG_CSR_TX_RING_CTRL_0_TX_RING_DESC_BASE_ADDR_Msk (0xffffffffUL << LL_TRX_REG_CSR_TX_RING_CTRL_0_TX_RING_DESC_BASE_ADDR_Pos)/*!< LL_TRX_REG CSR_TX_RING_CTRL_0: TX_RING_DESC_BASE_ADDR Mask */

/* ------------------------  LL_TRX_REG_CSR_TX_RING_CTRL_1  ----------------------- */
#define LL_TRX_REG_CSR_TX_RING_CTRL_1_TX_RING_ENTRY_BASE_ADDR_Pos 0                                   /*!< LL_TRX_REG CSR_TX_RING_CTRL_1: TX_RING_ENTRY_BASE_ADDR Position */
#define LL_TRX_REG_CSR_TX_RING_CTRL_1_TX_RING_ENTRY_BASE_ADDR_Msk (0xffffffffUL << LL_TRX_REG_CSR_TX_RING_CTRL_1_TX_RING_ENTRY_BASE_ADDR_Pos)/*!< LL_TRX_REG CSR_TX_RING_CTRL_1: TX_RING_ENTRY_BASE_ADDR Mask */

/* ------------------------  LL_TRX_REG_CSR_TX_RING_CTRL_2  ----------------------- */
#define LL_TRX_REG_CSR_TX_RING_CTRL_2_TX_RING_RD_VPTR_Pos 0                                           /*!< LL_TRX_REG CSR_TX_RING_CTRL_2: TX_RING_RD_VPTR Position */
#define LL_TRX_REG_CSR_TX_RING_CTRL_2_TX_RING_RD_VPTR_Msk (0x000000ffUL << LL_TRX_REG_CSR_TX_RING_CTRL_2_TX_RING_RD_VPTR_Pos)/*!< LL_TRX_REG CSR_TX_RING_CTRL_2: TX_RING_RD_VPTR Mask */
#define LL_TRX_REG_CSR_TX_RING_CTRL_2_TX_RING_WR_VPTR_Pos 8                                           /*!< LL_TRX_REG CSR_TX_RING_CTRL_2: TX_RING_WR_VPTR Position */
#define LL_TRX_REG_CSR_TX_RING_CTRL_2_TX_RING_WR_VPTR_Msk (0x000000ffUL << LL_TRX_REG_CSR_TX_RING_CTRL_2_TX_RING_WR_VPTR_Pos)/*!< LL_TRX_REG CSR_TX_RING_CTRL_2: TX_RING_WR_VPTR Mask */

/* ------------------------  LL_TRX_REG_CSR_TX_RING_CTRL_3  ----------------------- */
#define LL_TRX_REG_CSR_TX_RING_CTRL_3_TX_RING_SIZE_Pos 0                                              /*!< LL_TRX_REG CSR_TX_RING_CTRL_3: TX_RING_SIZE Position */
#define LL_TRX_REG_CSR_TX_RING_CTRL_3_TX_RING_SIZE_Msk (0x7fUL << LL_TRX_REG_CSR_TX_RING_CTRL_3_TX_RING_SIZE_Pos)/*!< LL_TRX_REG CSR_TX_RING_CTRL_3: TX_RING_SIZE Mask */

/* --------------------  LL_TRX_REG_TX_RING_LONG_PDU_BUF_ADDR  -------------------- */
#define LL_TRX_REG_TX_RING_LONG_PDU_BUF_ADDR_TX_LONG_PDU_BUF_ADDR_Pos 0                               /*!< LL_TRX_REG TX_RING_LONG_PDU_BUF_ADDR: TX_LONG_PDU_BUF_ADDR Position */
#define LL_TRX_REG_TX_RING_LONG_PDU_BUF_ADDR_TX_LONG_PDU_BUF_ADDR_Msk (0xffffffffUL << LL_TRX_REG_TX_RING_LONG_PDU_BUF_ADDR_TX_LONG_PDU_BUF_ADDR_Pos)/*!< LL_TRX_REG TX_RING_LONG_PDU_BUF_ADDR: TX_LONG_PDU_BUF_ADDR Mask */

/* ------------------------  LL_TRX_REG_CSR_TX_RING_CTRL_5  ----------------------- */
#define LL_TRX_REG_CSR_TX_RING_CTRL_5_RG_NULL_ADDR_Pos 0                                              /*!< LL_TRX_REG CSR_TX_RING_CTRL_5: RG_NULL_ADDR Position */
#define LL_TRX_REG_CSR_TX_RING_CTRL_5_RG_NULL_ADDR_Msk (0xffffffffUL << LL_TRX_REG_CSR_TX_RING_CTRL_5_RG_NULL_ADDR_Pos)/*!< LL_TRX_REG CSR_TX_RING_CTRL_5: RG_NULL_ADDR Mask */

/* ---------------------  LL_TRX_REG_TX_DATA_SN_OWN_POLICY_0  --------------------- */
#define LL_TRX_REG_TX_DATA_SN_OWN_POLICY_0_TX_DATA_SN_OWN_POLICY_SIG0_SEL_Pos 0                       /*!< LL_TRX_REG TX_DATA_SN_OWN_POLICY_0: TX_DATA_SN_OWN_POLICY_SIG0_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_DATA_SN_OWN_POLICY_0_TX_DATA_SN_OWN_POLICY_SIG0_SEL_Msk (0x3fUL << LL_TRX_REG_TX_DATA_SN_OWN_POLICY_0_TX_DATA_SN_OWN_POLICY_SIG0_SEL_Pos)/*!< LL_TRX_REG TX_DATA_SN_OWN_POLICY_0: TX_DATA_SN_OWN_POLICY_SIG0_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_DATA_SN_OWN_POLICY_0_TX_DATA_SN_OWN_POLICY_SIG1_SEL_Pos 8                       /*!< LL_TRX_REG TX_DATA_SN_OWN_POLICY_0: TX_DATA_SN_OWN_POLICY_SIG1_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_DATA_SN_OWN_POLICY_0_TX_DATA_SN_OWN_POLICY_SIG1_SEL_Msk (0x3fUL << LL_TRX_REG_TX_DATA_SN_OWN_POLICY_0_TX_DATA_SN_OWN_POLICY_SIG1_SEL_Pos)/*!< LL_TRX_REG TX_DATA_SN_OWN_POLICY_0: TX_DATA_SN_OWN_POLICY_SIG1_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_DATA_SN_OWN_POLICY_0_TX_DATA_SN_OWN_POLICY_SIG2_SEL_Pos 16                      /*!< LL_TRX_REG TX_DATA_SN_OWN_POLICY_0: TX_DATA_SN_OWN_POLICY_SIG2_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_DATA_SN_OWN_POLICY_0_TX_DATA_SN_OWN_POLICY_SIG2_SEL_Msk (0x3fUL << LL_TRX_REG_TX_DATA_SN_OWN_POLICY_0_TX_DATA_SN_OWN_POLICY_SIG2_SEL_Pos)/*!< LL_TRX_REG TX_DATA_SN_OWN_POLICY_0: TX_DATA_SN_OWN_POLICY_SIG2_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_DATA_SN_OWN_POLICY_0_TX_DATA_SN_OWN_POLICY_SIG3_SEL_Pos 24                      /*!< LL_TRX_REG TX_DATA_SN_OWN_POLICY_0: TX_DATA_SN_OWN_POLICY_SIG3_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_DATA_SN_OWN_POLICY_0_TX_DATA_SN_OWN_POLICY_SIG3_SEL_Msk (0x3fUL << LL_TRX_REG_TX_DATA_SN_OWN_POLICY_0_TX_DATA_SN_OWN_POLICY_SIG3_SEL_Pos)/*!< LL_TRX_REG TX_DATA_SN_OWN_POLICY_0: TX_DATA_SN_OWN_POLICY_SIG3_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_DATA_SN_OWN_POLICY_0_TX_DATA_SN_OWN_POLICY_MANUAL_VALUE_Pos 30                  /*!< LL_TRX_REG TX_DATA_SN_OWN_POLICY_0: TX_DATA_SN_OWN_POLICY_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_DATA_SN_OWN_POLICY_0_TX_DATA_SN_OWN_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_TX_DATA_SN_OWN_POLICY_0_TX_DATA_SN_OWN_POLICY_MANUAL_VALUE_Pos)/*!< LL_TRX_REG TX_DATA_SN_OWN_POLICY_0: TX_DATA_SN_OWN_POLICY_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_DATA_SN_OWN_POLICY_0_TX_DATA_SN_OWN_POLICY_MANUAL_EN_Pos 31                     /*!< LL_TRX_REG TX_DATA_SN_OWN_POLICY_0: TX_DATA_SN_OWN_POLICY_MANUAL_EN
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_DATA_SN_OWN_POLICY_0_TX_DATA_SN_OWN_POLICY_MANUAL_EN_Msk (0x01UL << LL_TRX_REG_TX_DATA_SN_OWN_POLICY_0_TX_DATA_SN_OWN_POLICY_MANUAL_EN_Pos)/*!< LL_TRX_REG TX_DATA_SN_OWN_POLICY_0: TX_DATA_SN_OWN_POLICY_MANUAL_EN
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_TX_DATA_SN_OWN_POLICY_1  --------------------- */
#define LL_TRX_REG_TX_DATA_SN_OWN_POLICY_1_TX_DATA_SN_OWN_POLICY_W1C_Pos 0                            /*!< LL_TRX_REG TX_DATA_SN_OWN_POLICY_1: TX_DATA_SN_OWN_POLICY_W1C
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_DATA_SN_OWN_POLICY_1_TX_DATA_SN_OWN_POLICY_W1C_Msk (0x01UL << LL_TRX_REG_TX_DATA_SN_OWN_POLICY_1_TX_DATA_SN_OWN_POLICY_W1C_Pos)/*!< LL_TRX_REG TX_DATA_SN_OWN_POLICY_1: TX_DATA_SN_OWN_POLICY_W1C
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_DATA_SN_OWN_POLICY_1_TX_DATA_SN_OWN_POLICY_W1S_Pos 1                            /*!< LL_TRX_REG TX_DATA_SN_OWN_POLICY_1: TX_DATA_SN_OWN_POLICY_W1S
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_DATA_SN_OWN_POLICY_1_TX_DATA_SN_OWN_POLICY_W1S_Msk (0x01UL << LL_TRX_REG_TX_DATA_SN_OWN_POLICY_1_TX_DATA_SN_OWN_POLICY_W1S_Pos)/*!< LL_TRX_REG TX_DATA_SN_OWN_POLICY_1: TX_DATA_SN_OWN_POLICY_W1S
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_TX_DATA_SN_OWN_POLICY_2  --------------------- */
#define LL_TRX_REG_TX_DATA_SN_OWN_POLICY_2_TX_DATA_SN_OWN_POLICY_Pos 0                                /*!< LL_TRX_REG TX_DATA_SN_OWN_POLICY_2: TX_DATA_SN_OWN_POLICY Position */
#define LL_TRX_REG_TX_DATA_SN_OWN_POLICY_2_TX_DATA_SN_OWN_POLICY_Msk (0xffffffffUL << LL_TRX_REG_TX_DATA_SN_OWN_POLICY_2_TX_DATA_SN_OWN_POLICY_Pos)/*!< LL_TRX_REG TX_DATA_SN_OWN_POLICY_2: TX_DATA_SN_OWN_POLICY Mask */

/* ---------------------  LL_TRX_REG_TX_DATA_MD_OWN_POLICY_0  --------------------- */
#define LL_TRX_REG_TX_DATA_MD_OWN_POLICY_0_TX_DATA_MD_OWN_POLICY_SIG0_SEL_Pos 0                       /*!< LL_TRX_REG TX_DATA_MD_OWN_POLICY_0: TX_DATA_MD_OWN_POLICY_SIG0_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_DATA_MD_OWN_POLICY_0_TX_DATA_MD_OWN_POLICY_SIG0_SEL_Msk (0x3fUL << LL_TRX_REG_TX_DATA_MD_OWN_POLICY_0_TX_DATA_MD_OWN_POLICY_SIG0_SEL_Pos)/*!< LL_TRX_REG TX_DATA_MD_OWN_POLICY_0: TX_DATA_MD_OWN_POLICY_SIG0_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_DATA_MD_OWN_POLICY_0_TX_DATA_MD_OWN_POLICY_SIG1_SEL_Pos 8                       /*!< LL_TRX_REG TX_DATA_MD_OWN_POLICY_0: TX_DATA_MD_OWN_POLICY_SIG1_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_DATA_MD_OWN_POLICY_0_TX_DATA_MD_OWN_POLICY_SIG1_SEL_Msk (0x3fUL << LL_TRX_REG_TX_DATA_MD_OWN_POLICY_0_TX_DATA_MD_OWN_POLICY_SIG1_SEL_Pos)/*!< LL_TRX_REG TX_DATA_MD_OWN_POLICY_0: TX_DATA_MD_OWN_POLICY_SIG1_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_DATA_MD_OWN_POLICY_0_TX_DATA_MD_OWN_POLICY_SIG2_SEL_Pos 16                      /*!< LL_TRX_REG TX_DATA_MD_OWN_POLICY_0: TX_DATA_MD_OWN_POLICY_SIG2_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_DATA_MD_OWN_POLICY_0_TX_DATA_MD_OWN_POLICY_SIG2_SEL_Msk (0x3fUL << LL_TRX_REG_TX_DATA_MD_OWN_POLICY_0_TX_DATA_MD_OWN_POLICY_SIG2_SEL_Pos)/*!< LL_TRX_REG TX_DATA_MD_OWN_POLICY_0: TX_DATA_MD_OWN_POLICY_SIG2_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_DATA_MD_OWN_POLICY_0_TX_DATA_MD_OWN_POLICY_SIG3_SEL_Pos 24                      /*!< LL_TRX_REG TX_DATA_MD_OWN_POLICY_0: TX_DATA_MD_OWN_POLICY_SIG3_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_DATA_MD_OWN_POLICY_0_TX_DATA_MD_OWN_POLICY_SIG3_SEL_Msk (0x3fUL << LL_TRX_REG_TX_DATA_MD_OWN_POLICY_0_TX_DATA_MD_OWN_POLICY_SIG3_SEL_Pos)/*!< LL_TRX_REG TX_DATA_MD_OWN_POLICY_0: TX_DATA_MD_OWN_POLICY_SIG3_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_DATA_MD_OWN_POLICY_0_TX_DATA_MD_OWN_POLICY_MANUAL_VALUE_Pos 30                  /*!< LL_TRX_REG TX_DATA_MD_OWN_POLICY_0: TX_DATA_MD_OWN_POLICY_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_DATA_MD_OWN_POLICY_0_TX_DATA_MD_OWN_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_TX_DATA_MD_OWN_POLICY_0_TX_DATA_MD_OWN_POLICY_MANUAL_VALUE_Pos)/*!< LL_TRX_REG TX_DATA_MD_OWN_POLICY_0: TX_DATA_MD_OWN_POLICY_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_DATA_MD_OWN_POLICY_0_TX_DATA_MD_OWN_POLICY_MANUAL_EN_Pos 31                     /*!< LL_TRX_REG TX_DATA_MD_OWN_POLICY_0: TX_DATA_MD_OWN_POLICY_MANUAL_EN
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_DATA_MD_OWN_POLICY_0_TX_DATA_MD_OWN_POLICY_MANUAL_EN_Msk (0x01UL << LL_TRX_REG_TX_DATA_MD_OWN_POLICY_0_TX_DATA_MD_OWN_POLICY_MANUAL_EN_Pos)/*!< LL_TRX_REG TX_DATA_MD_OWN_POLICY_0: TX_DATA_MD_OWN_POLICY_MANUAL_EN
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_TX_DATA_MD_OWN_POLICY_1  --------------------- */
#define LL_TRX_REG_TX_DATA_MD_OWN_POLICY_1_TX_DATA_MD_OWN_POLICY_W1C_Pos 0                            /*!< LL_TRX_REG TX_DATA_MD_OWN_POLICY_1: TX_DATA_MD_OWN_POLICY_W1C
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_DATA_MD_OWN_POLICY_1_TX_DATA_MD_OWN_POLICY_W1C_Msk (0x01UL << LL_TRX_REG_TX_DATA_MD_OWN_POLICY_1_TX_DATA_MD_OWN_POLICY_W1C_Pos)/*!< LL_TRX_REG TX_DATA_MD_OWN_POLICY_1: TX_DATA_MD_OWN_POLICY_W1C
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_DATA_MD_OWN_POLICY_1_TX_DATA_MD_OWN_POLICY_W1S_Pos 1                            /*!< LL_TRX_REG TX_DATA_MD_OWN_POLICY_1: TX_DATA_MD_OWN_POLICY_W1S
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_DATA_MD_OWN_POLICY_1_TX_DATA_MD_OWN_POLICY_W1S_Msk (0x01UL << LL_TRX_REG_TX_DATA_MD_OWN_POLICY_1_TX_DATA_MD_OWN_POLICY_W1S_Pos)/*!< LL_TRX_REG TX_DATA_MD_OWN_POLICY_1: TX_DATA_MD_OWN_POLICY_W1S
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_TX_DATA_MD_OWN_POLICY_2  --------------------- */
#define LL_TRX_REG_TX_DATA_MD_OWN_POLICY_2_TX_DATA_MD_OWN_POLICY_Pos 0                                /*!< LL_TRX_REG TX_DATA_MD_OWN_POLICY_2: TX_DATA_MD_OWN_POLICY Position */
#define LL_TRX_REG_TX_DATA_MD_OWN_POLICY_2_TX_DATA_MD_OWN_POLICY_Msk (0xffffffffUL << LL_TRX_REG_TX_DATA_MD_OWN_POLICY_2_TX_DATA_MD_OWN_POLICY_Pos)/*!< LL_TRX_REG TX_DATA_MD_OWN_POLICY_2: TX_DATA_MD_OWN_POLICY Mask */

/* ---------------- LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0 ---------------- */
#define LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_SIG0_SEL_Pos 0/*!< LL_TRX_REG TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0: TX_RING_RD_VPTR_INC_NOTIFY
                                                         _POLICY_SIG0_SEL Position                                                                 */
#define LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_SIG0_SEL_Msk (0x3fUL << LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_SIG0_SEL_Pos)/*!< LL_TRX_REG TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0: TX_RING_RD_VPTR_INC_NOTIFY
                                                         _POLICY_SIG0_SEL Mask                                                                     */
#define LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_SIG1_SEL_Pos 8/*!< LL_TRX_REG TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0: TX_RING_RD_VPTR_INC_NOTIFY
                                                         _POLICY_SIG1_SEL Position                                                                 */
#define LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_SIG1_SEL_Msk (0x3fUL << LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_SIG1_SEL_Pos)/*!< LL_TRX_REG TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0: TX_RING_RD_VPTR_INC_NOTIFY
                                                         _POLICY_SIG1_SEL Mask                                                                     */
#define LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_SIG2_SEL_Pos 16/*!< LL_TRX_REG TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0: TX_RING_RD_VPTR_INC_NOTIFY
                                                         _POLICY_SIG2_SEL Position                                                                 */
#define LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_SIG2_SEL_Msk (0x3fUL << LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_SIG2_SEL_Pos)/*!< LL_TRX_REG TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0: TX_RING_RD_VPTR_INC_NOTIFY
                                                         _POLICY_SIG2_SEL Mask                                                                     */
#define LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_SIG3_SEL_Pos 24/*!< LL_TRX_REG TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0: TX_RING_RD_VPTR_INC_NOTIFY
                                                         _POLICY_SIG3_SEL Position                                                                 */
#define LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_SIG3_SEL_Msk (0x3fUL << LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_SIG3_SEL_Pos)/*!< LL_TRX_REG TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0: TX_RING_RD_VPTR_INC_NOTIFY
                                                         _POLICY_SIG3_SEL Mask                                                                     */
#define LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_MANUAL_VALUE_Pos 30/*!< LL_TRX_REG TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0: TX_RING_RD_VPTR_INC_NOTIFY
                                                         _POLICY_MANUAL_VALUE Position                                                             */
#define LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_MANUAL_VALUE_Pos)/*!< LL_TRX_REG TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0: TX_RING_RD_VPTR_INC_NOTIFY
                                                         _POLICY_MANUAL_VALUE Mask                                                                 */
#define LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_MANUAL_EN_Pos 31/*!< LL_TRX_REG TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0: TX_RING_RD_VPTR_INC_NOTIFY
                                                         _POLICY_MANUAL_EN Position                                                                */
#define LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_MANUAL_EN_Msk (0x01UL << LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_MANUAL_EN_Pos)/*!< LL_TRX_REG TX_RING_RD_VPTR_INC_NOTIFY_POLICY_0: TX_RING_RD_VPTR_INC_NOTIFY
                                                         _POLICY_MANUAL_EN Mask                                                                    */

/* ---------------- LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_1 ---------------- */
#define LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_1_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_W1C_Pos 0    /*!< LL_TRX_REG TX_RING_RD_VPTR_INC_NOTIFY_POLICY_1: TX_RING_RD_VPTR_INC_NOTIFY
                                                         _POLICY_W1C Position                                                                      */
#define LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_1_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_W1C_Msk (0x01UL << LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_1_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_W1C_Pos)/*!< LL_TRX_REG TX_RING_RD_VPTR_INC_NOTIFY_POLICY_1: TX_RING_RD_VPTR_INC_NOTIFY
                                                         _POLICY_W1C Mask                                                                          */
#define LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_1_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_W1S_Pos 1    /*!< LL_TRX_REG TX_RING_RD_VPTR_INC_NOTIFY_POLICY_1: TX_RING_RD_VPTR_INC_NOTIFY
                                                         _POLICY_W1S Position                                                                      */
#define LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_1_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_W1S_Msk (0x01UL << LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_1_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_W1S_Pos)/*!< LL_TRX_REG TX_RING_RD_VPTR_INC_NOTIFY_POLICY_1: TX_RING_RD_VPTR_INC_NOTIFY
                                                         _POLICY_W1S Mask                                                                          */

/* ---------------- LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_2 ---------------- */
#define LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_2_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_Pos 0        /*!< LL_TRX_REG TX_RING_RD_VPTR_INC_NOTIFY_POLICY_2: TX_RING_RD_VPTR_INC_NOTIFY
                                                         _POLICY Position                                                                          */
#define LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_2_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_Msk (0xffffffffUL << LL_TRX_REG_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_2_TX_RING_RD_VPTR_INC_NOTIFY_POLICY_Pos)/*!< LL_TRX_REG TX_RING_RD_VPTR_INC_NOTIFY_POLICY_2: TX_RING_RD_VPTR_INC_NOTIFY
                                                         _POLICY Mask                                                                              */

/* ----------------------  LL_TRX_REG_DMA_SRC_NULL_POLICY_0  ---------------------- */
#define LL_TRX_REG_DMA_SRC_NULL_POLICY_0_DMA_SRC_NULL_POLICY_SIG0_SEL_Pos 0                           /*!< LL_TRX_REG DMA_SRC_NULL_POLICY_0: DMA_SRC_NULL_POLICY_SIG0_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_DMA_SRC_NULL_POLICY_0_DMA_SRC_NULL_POLICY_SIG0_SEL_Msk (0x3fUL << LL_TRX_REG_DMA_SRC_NULL_POLICY_0_DMA_SRC_NULL_POLICY_SIG0_SEL_Pos)/*!< LL_TRX_REG DMA_SRC_NULL_POLICY_0: DMA_SRC_NULL_POLICY_SIG0_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_DMA_SRC_NULL_POLICY_0_DMA_SRC_NULL_POLICY_SIG1_SEL_Pos 8                           /*!< LL_TRX_REG DMA_SRC_NULL_POLICY_0: DMA_SRC_NULL_POLICY_SIG1_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_DMA_SRC_NULL_POLICY_0_DMA_SRC_NULL_POLICY_SIG1_SEL_Msk (0x3fUL << LL_TRX_REG_DMA_SRC_NULL_POLICY_0_DMA_SRC_NULL_POLICY_SIG1_SEL_Pos)/*!< LL_TRX_REG DMA_SRC_NULL_POLICY_0: DMA_SRC_NULL_POLICY_SIG1_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_DMA_SRC_NULL_POLICY_0_DMA_SRC_NULL_POLICY_SIG2_SEL_Pos 16                          /*!< LL_TRX_REG DMA_SRC_NULL_POLICY_0: DMA_SRC_NULL_POLICY_SIG2_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_DMA_SRC_NULL_POLICY_0_DMA_SRC_NULL_POLICY_SIG2_SEL_Msk (0x3fUL << LL_TRX_REG_DMA_SRC_NULL_POLICY_0_DMA_SRC_NULL_POLICY_SIG2_SEL_Pos)/*!< LL_TRX_REG DMA_SRC_NULL_POLICY_0: DMA_SRC_NULL_POLICY_SIG2_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_DMA_SRC_NULL_POLICY_0_DMA_SRC_NULL_POLICY_SIG3_SEL_Pos 24                          /*!< LL_TRX_REG DMA_SRC_NULL_POLICY_0: DMA_SRC_NULL_POLICY_SIG3_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_DMA_SRC_NULL_POLICY_0_DMA_SRC_NULL_POLICY_SIG3_SEL_Msk (0x3fUL << LL_TRX_REG_DMA_SRC_NULL_POLICY_0_DMA_SRC_NULL_POLICY_SIG3_SEL_Pos)/*!< LL_TRX_REG DMA_SRC_NULL_POLICY_0: DMA_SRC_NULL_POLICY_SIG3_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_DMA_SRC_NULL_POLICY_0_DMA_SRC_NULL_POLICY_MANUAL_VALUE_Pos 30                      /*!< LL_TRX_REG DMA_SRC_NULL_POLICY_0: DMA_SRC_NULL_POLICY_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_TRX_REG_DMA_SRC_NULL_POLICY_0_DMA_SRC_NULL_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_DMA_SRC_NULL_POLICY_0_DMA_SRC_NULL_POLICY_MANUAL_VALUE_Pos)/*!< LL_TRX_REG DMA_SRC_NULL_POLICY_0: DMA_SRC_NULL_POLICY_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_TRX_REG_DMA_SRC_NULL_POLICY_0_DMA_SRC_NULL_POLICY_MANUAL_EN_Pos 31                         /*!< LL_TRX_REG DMA_SRC_NULL_POLICY_0: DMA_SRC_NULL_POLICY_MANUAL_EN
                                                         Position                                                                                  */
#define LL_TRX_REG_DMA_SRC_NULL_POLICY_0_DMA_SRC_NULL_POLICY_MANUAL_EN_Msk (0x01UL << LL_TRX_REG_DMA_SRC_NULL_POLICY_0_DMA_SRC_NULL_POLICY_MANUAL_EN_Pos)/*!< LL_TRX_REG DMA_SRC_NULL_POLICY_0: DMA_SRC_NULL_POLICY_MANUAL_EN
                                                         Mask                                                                                      */

/* ----------------------  LL_TRX_REG_DMA_SRC_NULL_POLICY_1  ---------------------- */
#define LL_TRX_REG_DMA_SRC_NULL_POLICY_1_DMA_SRC_NULL_POLICY_W1C_Pos 0                                /*!< LL_TRX_REG DMA_SRC_NULL_POLICY_1: DMA_SRC_NULL_POLICY_W1C Position */
#define LL_TRX_REG_DMA_SRC_NULL_POLICY_1_DMA_SRC_NULL_POLICY_W1C_Msk (0x01UL << LL_TRX_REG_DMA_SRC_NULL_POLICY_1_DMA_SRC_NULL_POLICY_W1C_Pos)/*!< LL_TRX_REG DMA_SRC_NULL_POLICY_1: DMA_SRC_NULL_POLICY_W1C Mask */
#define LL_TRX_REG_DMA_SRC_NULL_POLICY_1_DMA_SRC_NULL_POLICY_W1S_Pos 1                                /*!< LL_TRX_REG DMA_SRC_NULL_POLICY_1: DMA_SRC_NULL_POLICY_W1S Position */
#define LL_TRX_REG_DMA_SRC_NULL_POLICY_1_DMA_SRC_NULL_POLICY_W1S_Msk (0x01UL << LL_TRX_REG_DMA_SRC_NULL_POLICY_1_DMA_SRC_NULL_POLICY_W1S_Pos)/*!< LL_TRX_REG DMA_SRC_NULL_POLICY_1: DMA_SRC_NULL_POLICY_W1S Mask */

/* ----------------------  LL_TRX_REG_DMA_SRC_NULL_POLICY_2  ---------------------- */
#define LL_TRX_REG_DMA_SRC_NULL_POLICY_2_DMA_SRC_NULL_POLICY_Pos 0                                    /*!< LL_TRX_REG DMA_SRC_NULL_POLICY_2: DMA_SRC_NULL_POLICY Position */
#define LL_TRX_REG_DMA_SRC_NULL_POLICY_2_DMA_SRC_NULL_POLICY_Msk (0xffffffffUL << LL_TRX_REG_DMA_SRC_NULL_POLICY_2_DMA_SRC_NULL_POLICY_Pos)/*!< LL_TRX_REG DMA_SRC_NULL_POLICY_2: DMA_SRC_NULL_POLICY Mask */

/* ----------------------  LL_TRX_REG_TX_RING_DUMY_POLICY_0  ---------------------- */
#define LL_TRX_REG_TX_RING_DUMY_POLICY_0_TX_RING_DUMY_POLICY_SIG0_SEL_Pos 0                           /*!< LL_TRX_REG TX_RING_DUMY_POLICY_0: TX_RING_DUMY_POLICY_SIG0_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_RING_DUMY_POLICY_0_TX_RING_DUMY_POLICY_SIG0_SEL_Msk (0x3fUL << LL_TRX_REG_TX_RING_DUMY_POLICY_0_TX_RING_DUMY_POLICY_SIG0_SEL_Pos)/*!< LL_TRX_REG TX_RING_DUMY_POLICY_0: TX_RING_DUMY_POLICY_SIG0_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_RING_DUMY_POLICY_0_TX_RING_DUMY_POLICY_SIG1_SEL_Pos 6                           /*!< LL_TRX_REG TX_RING_DUMY_POLICY_0: TX_RING_DUMY_POLICY_SIG1_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_RING_DUMY_POLICY_0_TX_RING_DUMY_POLICY_SIG1_SEL_Msk (0x3fUL << LL_TRX_REG_TX_RING_DUMY_POLICY_0_TX_RING_DUMY_POLICY_SIG1_SEL_Pos)/*!< LL_TRX_REG TX_RING_DUMY_POLICY_0: TX_RING_DUMY_POLICY_SIG1_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_RING_DUMY_POLICY_0_TX_RING_DUMY_POLICY_SIG2_SEL_Pos 12                          /*!< LL_TRX_REG TX_RING_DUMY_POLICY_0: TX_RING_DUMY_POLICY_SIG2_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_RING_DUMY_POLICY_0_TX_RING_DUMY_POLICY_SIG2_SEL_Msk (0x3fUL << LL_TRX_REG_TX_RING_DUMY_POLICY_0_TX_RING_DUMY_POLICY_SIG2_SEL_Pos)/*!< LL_TRX_REG TX_RING_DUMY_POLICY_0: TX_RING_DUMY_POLICY_SIG2_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_RING_DUMY_POLICY_0_TX_RING_DUMY_POLICY_SIG3_SEL_Pos 18                          /*!< LL_TRX_REG TX_RING_DUMY_POLICY_0: TX_RING_DUMY_POLICY_SIG3_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_RING_DUMY_POLICY_0_TX_RING_DUMY_POLICY_SIG3_SEL_Msk (0x3fUL << LL_TRX_REG_TX_RING_DUMY_POLICY_0_TX_RING_DUMY_POLICY_SIG3_SEL_Pos)/*!< LL_TRX_REG TX_RING_DUMY_POLICY_0: TX_RING_DUMY_POLICY_SIG3_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_RING_DUMY_POLICY_0_TX_RING_DUMY_POLICY_MANUAL_VALUE_Pos 30                      /*!< LL_TRX_REG TX_RING_DUMY_POLICY_0: TX_RING_DUMY_POLICY_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_RING_DUMY_POLICY_0_TX_RING_DUMY_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_TX_RING_DUMY_POLICY_0_TX_RING_DUMY_POLICY_MANUAL_VALUE_Pos)/*!< LL_TRX_REG TX_RING_DUMY_POLICY_0: TX_RING_DUMY_POLICY_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_TRX_REG_TX_RING_DUMY_POLICY_0_TX_RING_DUMY_POLICY_MANUAL_EN_Pos 31                         /*!< LL_TRX_REG TX_RING_DUMY_POLICY_0: TX_RING_DUMY_POLICY_MANUAL_EN
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_RING_DUMY_POLICY_0_TX_RING_DUMY_POLICY_MANUAL_EN_Msk (0x01UL << LL_TRX_REG_TX_RING_DUMY_POLICY_0_TX_RING_DUMY_POLICY_MANUAL_EN_Pos)/*!< LL_TRX_REG TX_RING_DUMY_POLICY_0: TX_RING_DUMY_POLICY_MANUAL_EN
                                                         Mask                                                                                      */

/* ----------------------  LL_TRX_REG_TX_RING_DUMY_POLICY_1  ---------------------- */
#define LL_TRX_REG_TX_RING_DUMY_POLICY_1_TX_RING_DUMY_POLICY_W1C_Pos 0                                /*!< LL_TRX_REG TX_RING_DUMY_POLICY_1: TX_RING_DUMY_POLICY_W1C Position */
#define LL_TRX_REG_TX_RING_DUMY_POLICY_1_TX_RING_DUMY_POLICY_W1C_Msk (0x01UL << LL_TRX_REG_TX_RING_DUMY_POLICY_1_TX_RING_DUMY_POLICY_W1C_Pos)/*!< LL_TRX_REG TX_RING_DUMY_POLICY_1: TX_RING_DUMY_POLICY_W1C Mask */
#define LL_TRX_REG_TX_RING_DUMY_POLICY_1_TX_RING_DUMY_POLICY_W1S_Pos 1                                /*!< LL_TRX_REG TX_RING_DUMY_POLICY_1: TX_RING_DUMY_POLICY_W1S Position */
#define LL_TRX_REG_TX_RING_DUMY_POLICY_1_TX_RING_DUMY_POLICY_W1S_Msk (0x01UL << LL_TRX_REG_TX_RING_DUMY_POLICY_1_TX_RING_DUMY_POLICY_W1S_Pos)/*!< LL_TRX_REG TX_RING_DUMY_POLICY_1: TX_RING_DUMY_POLICY_W1S Mask */

/* ----------------------  LL_TRX_REG_TX_RING_DUMY_POLICY_2  ---------------------- */
#define LL_TRX_REG_TX_RING_DUMY_POLICY_2_TX_RING_DUMY_POLICY_Pos 0                                    /*!< LL_TRX_REG TX_RING_DUMY_POLICY_2: TX_RING_DUMY_POLICY Position */
#define LL_TRX_REG_TX_RING_DUMY_POLICY_2_TX_RING_DUMY_POLICY_Msk (0xffffffffUL << LL_TRX_REG_TX_RING_DUMY_POLICY_2_TX_RING_DUMY_POLICY_Pos)/*!< LL_TRX_REG TX_RING_DUMY_POLICY_2: TX_RING_DUMY_POLICY Mask */

/* ------------------------  LL_TRX_REG_PDU_LOAD_POLICY_0  ------------------------ */
#define LL_TRX_REG_PDU_LOAD_POLICY_0_PDU_LOAD_NOTIFY_POLICY_SIG0_SEL_Pos 0                            /*!< LL_TRX_REG PDU_LOAD_POLICY_0: PDU_LOAD_NOTIFY_POLICY_SIG0_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_PDU_LOAD_POLICY_0_PDU_LOAD_NOTIFY_POLICY_SIG0_SEL_Msk (0x3fUL << LL_TRX_REG_PDU_LOAD_POLICY_0_PDU_LOAD_NOTIFY_POLICY_SIG0_SEL_Pos)/*!< LL_TRX_REG PDU_LOAD_POLICY_0: PDU_LOAD_NOTIFY_POLICY_SIG0_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_PDU_LOAD_POLICY_0_PDU_LOAD_NOTIFY_POLICY_SIG1_SEL_Pos 8                            /*!< LL_TRX_REG PDU_LOAD_POLICY_0: PDU_LOAD_NOTIFY_POLICY_SIG1_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_PDU_LOAD_POLICY_0_PDU_LOAD_NOTIFY_POLICY_SIG1_SEL_Msk (0x3fUL << LL_TRX_REG_PDU_LOAD_POLICY_0_PDU_LOAD_NOTIFY_POLICY_SIG1_SEL_Pos)/*!< LL_TRX_REG PDU_LOAD_POLICY_0: PDU_LOAD_NOTIFY_POLICY_SIG1_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_PDU_LOAD_POLICY_0_PDU_LOAD_NOTIFY_POLICY_SIG2_SEL_Pos 16                           /*!< LL_TRX_REG PDU_LOAD_POLICY_0: PDU_LOAD_NOTIFY_POLICY_SIG2_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_PDU_LOAD_POLICY_0_PDU_LOAD_NOTIFY_POLICY_SIG2_SEL_Msk (0x3fUL << LL_TRX_REG_PDU_LOAD_POLICY_0_PDU_LOAD_NOTIFY_POLICY_SIG2_SEL_Pos)/*!< LL_TRX_REG PDU_LOAD_POLICY_0: PDU_LOAD_NOTIFY_POLICY_SIG2_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_PDU_LOAD_POLICY_0_PDU_LOAD_NOTIFY_POLICY_SIG3_SEL_Pos 24                           /*!< LL_TRX_REG PDU_LOAD_POLICY_0: PDU_LOAD_NOTIFY_POLICY_SIG3_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_PDU_LOAD_POLICY_0_PDU_LOAD_NOTIFY_POLICY_SIG3_SEL_Msk (0x3fUL << LL_TRX_REG_PDU_LOAD_POLICY_0_PDU_LOAD_NOTIFY_POLICY_SIG3_SEL_Pos)/*!< LL_TRX_REG PDU_LOAD_POLICY_0: PDU_LOAD_NOTIFY_POLICY_SIG3_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_PDU_LOAD_POLICY_0_PDU_LOAD_NOTIFY_POLICY_MANUAL_VALUE_Pos 30                       /*!< LL_TRX_REG PDU_LOAD_POLICY_0: PDU_LOAD_NOTIFY_POLICY_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_TRX_REG_PDU_LOAD_POLICY_0_PDU_LOAD_NOTIFY_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_PDU_LOAD_POLICY_0_PDU_LOAD_NOTIFY_POLICY_MANUAL_VALUE_Pos)/*!< LL_TRX_REG PDU_LOAD_POLICY_0: PDU_LOAD_NOTIFY_POLICY_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_TRX_REG_PDU_LOAD_POLICY_0_PDU_LOAD_NOTIFY_POLICY_MANUAL_EN_Pos 31                          /*!< LL_TRX_REG PDU_LOAD_POLICY_0: PDU_LOAD_NOTIFY_POLICY_MANUAL_EN
                                                         Position                                                                                  */
#define LL_TRX_REG_PDU_LOAD_POLICY_0_PDU_LOAD_NOTIFY_POLICY_MANUAL_EN_Msk (0x01UL << LL_TRX_REG_PDU_LOAD_POLICY_0_PDU_LOAD_NOTIFY_POLICY_MANUAL_EN_Pos)/*!< LL_TRX_REG PDU_LOAD_POLICY_0: PDU_LOAD_NOTIFY_POLICY_MANUAL_EN
                                                         Mask                                                                                      */

/* ------------------------  LL_TRX_REG_PDU_LOAD_POLICY_1  ------------------------ */
#define LL_TRX_REG_PDU_LOAD_POLICY_1_PDU_LOAD_NOTIFY_POLICY_W1C_Pos 0                                 /*!< LL_TRX_REG PDU_LOAD_POLICY_1: PDU_LOAD_NOTIFY_POLICY_W1C Position */
#define LL_TRX_REG_PDU_LOAD_POLICY_1_PDU_LOAD_NOTIFY_POLICY_W1C_Msk (0x01UL << LL_TRX_REG_PDU_LOAD_POLICY_1_PDU_LOAD_NOTIFY_POLICY_W1C_Pos)/*!< LL_TRX_REG PDU_LOAD_POLICY_1: PDU_LOAD_NOTIFY_POLICY_W1C Mask */
#define LL_TRX_REG_PDU_LOAD_POLICY_1_PDU_LOAD_NOTIFY_POLICY_W1S_Pos 1                                 /*!< LL_TRX_REG PDU_LOAD_POLICY_1: PDU_LOAD_NOTIFY_POLICY_W1S Position */
#define LL_TRX_REG_PDU_LOAD_POLICY_1_PDU_LOAD_NOTIFY_POLICY_W1S_Msk (0x01UL << LL_TRX_REG_PDU_LOAD_POLICY_1_PDU_LOAD_NOTIFY_POLICY_W1S_Pos)/*!< LL_TRX_REG PDU_LOAD_POLICY_1: PDU_LOAD_NOTIFY_POLICY_W1S Mask */

/* ------------------------  LL_TRX_REG_PDU_LOAD_POLICY_2  ------------------------ */
#define LL_TRX_REG_PDU_LOAD_POLICY_2_PDU_LOAD_NOTIFY_POLICY_Pos 0                                     /*!< LL_TRX_REG PDU_LOAD_POLICY_2: PDU_LOAD_NOTIFY_POLICY Position */
#define LL_TRX_REG_PDU_LOAD_POLICY_2_PDU_LOAD_NOTIFY_POLICY_Msk (0xffffffffUL << LL_TRX_REG_PDU_LOAD_POLICY_2_PDU_LOAD_NOTIFY_POLICY_Pos)/*!< LL_TRX_REG PDU_LOAD_POLICY_2: PDU_LOAD_NOTIFY_POLICY Mask */

/* ------------------------  LL_TRX_REG_NULL_LOAD_POLICY_0  ----------------------- */
#define LL_TRX_REG_NULL_LOAD_POLICY_0_NULL_LOAD_NOTIFY_POLICY_SIG0_SEL_Pos 0                          /*!< LL_TRX_REG NULL_LOAD_POLICY_0: NULL_LOAD_NOTIFY_POLICY_SIG0_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_NULL_LOAD_POLICY_0_NULL_LOAD_NOTIFY_POLICY_SIG0_SEL_Msk (0x3fUL << LL_TRX_REG_NULL_LOAD_POLICY_0_NULL_LOAD_NOTIFY_POLICY_SIG0_SEL_Pos)/*!< LL_TRX_REG NULL_LOAD_POLICY_0: NULL_LOAD_NOTIFY_POLICY_SIG0_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_NULL_LOAD_POLICY_0_NULL_LOAD_NOTIFY_POLICY_SIG1_SEL_Pos 8                          /*!< LL_TRX_REG NULL_LOAD_POLICY_0: NULL_LOAD_NOTIFY_POLICY_SIG1_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_NULL_LOAD_POLICY_0_NULL_LOAD_NOTIFY_POLICY_SIG1_SEL_Msk (0x3fUL << LL_TRX_REG_NULL_LOAD_POLICY_0_NULL_LOAD_NOTIFY_POLICY_SIG1_SEL_Pos)/*!< LL_TRX_REG NULL_LOAD_POLICY_0: NULL_LOAD_NOTIFY_POLICY_SIG1_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_NULL_LOAD_POLICY_0_NULL_LOAD_NOTIFY_POLICY_SIG2_SEL_Pos 16                         /*!< LL_TRX_REG NULL_LOAD_POLICY_0: NULL_LOAD_NOTIFY_POLICY_SIG2_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_NULL_LOAD_POLICY_0_NULL_LOAD_NOTIFY_POLICY_SIG2_SEL_Msk (0x3fUL << LL_TRX_REG_NULL_LOAD_POLICY_0_NULL_LOAD_NOTIFY_POLICY_SIG2_SEL_Pos)/*!< LL_TRX_REG NULL_LOAD_POLICY_0: NULL_LOAD_NOTIFY_POLICY_SIG2_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_NULL_LOAD_POLICY_0_NULL_LOAD_NOTIFY_POLICY_SIG3_SEL_Pos 24                         /*!< LL_TRX_REG NULL_LOAD_POLICY_0: NULL_LOAD_NOTIFY_POLICY_SIG3_SEL
                                                         Position                                                                                  */
#define LL_TRX_REG_NULL_LOAD_POLICY_0_NULL_LOAD_NOTIFY_POLICY_SIG3_SEL_Msk (0x3fUL << LL_TRX_REG_NULL_LOAD_POLICY_0_NULL_LOAD_NOTIFY_POLICY_SIG3_SEL_Pos)/*!< LL_TRX_REG NULL_LOAD_POLICY_0: NULL_LOAD_NOTIFY_POLICY_SIG3_SEL
                                                         Mask                                                                                      */
#define LL_TRX_REG_NULL_LOAD_POLICY_0_NULL_LOAD_NOTIFY_POLICY_MANUAL_VALUE_Pos 30                     /*!< LL_TRX_REG NULL_LOAD_POLICY_0: NULL_LOAD_NOTIFY_POLICY_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_TRX_REG_NULL_LOAD_POLICY_0_NULL_LOAD_NOTIFY_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_TRX_REG_NULL_LOAD_POLICY_0_NULL_LOAD_NOTIFY_POLICY_MANUAL_VALUE_Pos)/*!< LL_TRX_REG NULL_LOAD_POLICY_0: NULL_LOAD_NOTIFY_POLICY_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_TRX_REG_NULL_LOAD_POLICY_0_NULL_LOAD_NOTIFY_POLICY_MANUAL_EN_Pos 31                        /*!< LL_TRX_REG NULL_LOAD_POLICY_0: NULL_LOAD_NOTIFY_POLICY_MANUAL_EN
                                                         Position                                                                                  */
#define LL_TRX_REG_NULL_LOAD_POLICY_0_NULL_LOAD_NOTIFY_POLICY_MANUAL_EN_Msk (0x01UL << LL_TRX_REG_NULL_LOAD_POLICY_0_NULL_LOAD_NOTIFY_POLICY_MANUAL_EN_Pos)/*!< LL_TRX_REG NULL_LOAD_POLICY_0: NULL_LOAD_NOTIFY_POLICY_MANUAL_EN
                                                         Mask                                                                                      */

/* ------------------------  LL_TRX_REG_NULL_LOAD_POLICY_1  ----------------------- */
#define LL_TRX_REG_NULL_LOAD_POLICY_1_NULL_LOAD_NOTIFY_POLICY_W1C_Pos 0                               /*!< LL_TRX_REG NULL_LOAD_POLICY_1: NULL_LOAD_NOTIFY_POLICY_W1C Position */
#define LL_TRX_REG_NULL_LOAD_POLICY_1_NULL_LOAD_NOTIFY_POLICY_W1C_Msk (0x01UL << LL_TRX_REG_NULL_LOAD_POLICY_1_NULL_LOAD_NOTIFY_POLICY_W1C_Pos)/*!< LL_TRX_REG NULL_LOAD_POLICY_1: NULL_LOAD_NOTIFY_POLICY_W1C Mask */
#define LL_TRX_REG_NULL_LOAD_POLICY_1_NULL_LOAD_NOTIFY_POLICY_W1S_Pos 1                               /*!< LL_TRX_REG NULL_LOAD_POLICY_1: NULL_LOAD_NOTIFY_POLICY_W1S Position */
#define LL_TRX_REG_NULL_LOAD_POLICY_1_NULL_LOAD_NOTIFY_POLICY_W1S_Msk (0x01UL << LL_TRX_REG_NULL_LOAD_POLICY_1_NULL_LOAD_NOTIFY_POLICY_W1S_Pos)/*!< LL_TRX_REG NULL_LOAD_POLICY_1: NULL_LOAD_NOTIFY_POLICY_W1S Mask */

/* ------------------------  LL_TRX_REG_NULL_LOAD_POLICY_2  ----------------------- */
#define LL_TRX_REG_NULL_LOAD_POLICY_2_NULL_LOAD_NOTIFY_POLICY_Pos 0                                   /*!< LL_TRX_REG NULL_LOAD_POLICY_2: NULL_LOAD_NOTIFY_POLICY Position */
#define LL_TRX_REG_NULL_LOAD_POLICY_2_NULL_LOAD_NOTIFY_POLICY_Msk (0xffffffffUL << LL_TRX_REG_NULL_LOAD_POLICY_2_NULL_LOAD_NOTIFY_POLICY_Pos)/*!< LL_TRX_REG NULL_LOAD_POLICY_2: NULL_LOAD_NOTIFY_POLICY Mask */

/* ---------------------  LL_TRX_REG_TX_RING_POLICY_SRC_BUS_0  -------------------- */
#define LL_TRX_REG_TX_RING_POLICY_SRC_BUS_0_TX_RING_POLICY_SRC_BUS_31_0_Pos 0                         /*!< LL_TRX_REG TX_RING_POLICY_SRC_BUS_0: TX_RING_POLICY_SRC_BUS_31_0
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_RING_POLICY_SRC_BUS_0_TX_RING_POLICY_SRC_BUS_31_0_Msk (0xffffffffUL << LL_TRX_REG_TX_RING_POLICY_SRC_BUS_0_TX_RING_POLICY_SRC_BUS_31_0_Pos)/*!< LL_TRX_REG TX_RING_POLICY_SRC_BUS_0: TX_RING_POLICY_SRC_BUS_31_0
                                                         Mask                                                                                      */

/* ---------------------  LL_TRX_REG_TX_RING_POLICY_SRC_BUS_1  -------------------- */
#define LL_TRX_REG_TX_RING_POLICY_SRC_BUS_1_TX_RING_POLICY_SRC_BUS_63_32_Pos 0                        /*!< LL_TRX_REG TX_RING_POLICY_SRC_BUS_1: TX_RING_POLICY_SRC_BUS_63_32
                                                         Position                                                                                  */
#define LL_TRX_REG_TX_RING_POLICY_SRC_BUS_1_TX_RING_POLICY_SRC_BUS_63_32_Msk (0xffffffffUL << LL_TRX_REG_TX_RING_POLICY_SRC_BUS_1_TX_RING_POLICY_SRC_BUS_63_32_Pos)/*!< LL_TRX_REG TX_RING_POLICY_SRC_BUS_1: TX_RING_POLICY_SRC_BUS_63_32
                                                         Mask                                                                                      */

/* ----------------------  LL_TRX_REG_CSR_TX_RING_TXQ_DMA_3  ---------------------- */
#define LL_TRX_REG_CSR_TX_RING_TXQ_DMA_3_RG_TX_RING_ENTRY_DMA_LENGTH_Pos 0                            /*!< LL_TRX_REG CSR_TX_RING_TXQ_DMA_3: RG_TX_RING_ENTRY_DMA_LENGTH
                                                         Position                                                                                  */
#define LL_TRX_REG_CSR_TX_RING_TXQ_DMA_3_RG_TX_RING_ENTRY_DMA_LENGTH_Msk (0x0000ffffUL << LL_TRX_REG_CSR_TX_RING_TXQ_DMA_3_RG_TX_RING_ENTRY_DMA_LENGTH_Pos)/*!< LL_TRX_REG CSR_TX_RING_TXQ_DMA_3: RG_TX_RING_ENTRY_DMA_LENGTH
                                                         Mask                                                                                      */

/* ------------------------  LL_TRX_REG_CSR_TX_RING_CTRL_4  ----------------------- */
#define LL_TRX_REG_CSR_TX_RING_CTRL_4_TX_RING_DMA_DST_BASE_ADDR_Pos 0                                 /*!< LL_TRX_REG CSR_TX_RING_CTRL_4: TX_RING_DMA_DST_BASE_ADDR Position */
#define LL_TRX_REG_CSR_TX_RING_CTRL_4_TX_RING_DMA_DST_BASE_ADDR_Msk (0xffffffffUL << LL_TRX_REG_CSR_TX_RING_CTRL_4_TX_RING_DMA_DST_BASE_ADDR_Pos)/*!< LL_TRX_REG CSR_TX_RING_CTRL_4: TX_RING_DMA_DST_BASE_ADDR Mask */

/* -----------------------  LL_TRX_REG_CSR_TX_RING_TXQ_DMA  ----------------------- */
#define LL_TRX_REG_CSR_TX_RING_TXQ_DMA_TXQ_DMA_BADR_EN_Pos 0                                          /*!< LL_TRX_REG CSR_TX_RING_TXQ_DMA: TXQ_DMA_BADR_EN Position */
#define LL_TRX_REG_CSR_TX_RING_TXQ_DMA_TXQ_DMA_BADR_EN_Msk (0x01UL << LL_TRX_REG_CSR_TX_RING_TXQ_DMA_TXQ_DMA_BADR_EN_Pos)/*!< LL_TRX_REG CSR_TX_RING_TXQ_DMA: TXQ_DMA_BADR_EN Mask */
#define LL_TRX_REG_CSR_TX_RING_TXQ_DMA_TXQ_DMA_DST_INC_Pos 1                                          /*!< LL_TRX_REG CSR_TX_RING_TXQ_DMA: TXQ_DMA_DST_INC Position */
#define LL_TRX_REG_CSR_TX_RING_TXQ_DMA_TXQ_DMA_DST_INC_Msk (0x01UL << LL_TRX_REG_CSR_TX_RING_TXQ_DMA_TXQ_DMA_DST_INC_Pos)/*!< LL_TRX_REG CSR_TX_RING_TXQ_DMA: TXQ_DMA_DST_INC Mask */
#define LL_TRX_REG_CSR_TX_RING_TXQ_DMA_TXQ_DMA_SRC_INC_Pos 2                                          /*!< LL_TRX_REG CSR_TX_RING_TXQ_DMA: TXQ_DMA_SRC_INC Position */
#define LL_TRX_REG_CSR_TX_RING_TXQ_DMA_TXQ_DMA_SRC_INC_Msk (0x01UL << LL_TRX_REG_CSR_TX_RING_TXQ_DMA_TXQ_DMA_SRC_INC_Pos)/*!< LL_TRX_REG CSR_TX_RING_TXQ_DMA: TXQ_DMA_SRC_INC Mask */
#define LL_TRX_REG_CSR_TX_RING_TXQ_DMA_TXQ_DMA_DST_SIZE_Pos 3                                         /*!< LL_TRX_REG CSR_TX_RING_TXQ_DMA: TXQ_DMA_DST_SIZE Position */
#define LL_TRX_REG_CSR_TX_RING_TXQ_DMA_TXQ_DMA_DST_SIZE_Msk (0x07UL << LL_TRX_REG_CSR_TX_RING_TXQ_DMA_TXQ_DMA_DST_SIZE_Pos)/*!< LL_TRX_REG CSR_TX_RING_TXQ_DMA: TXQ_DMA_DST_SIZE Mask */
#define LL_TRX_REG_CSR_TX_RING_TXQ_DMA_TXQ_DMA_SRC_SIZE_Pos 6                                         /*!< LL_TRX_REG CSR_TX_RING_TXQ_DMA: TXQ_DMA_SRC_SIZE Position */
#define LL_TRX_REG_CSR_TX_RING_TXQ_DMA_TXQ_DMA_SRC_SIZE_Msk (0x07UL << LL_TRX_REG_CSR_TX_RING_TXQ_DMA_TXQ_DMA_SRC_SIZE_Pos)/*!< LL_TRX_REG CSR_TX_RING_TXQ_DMA: TXQ_DMA_SRC_SIZE Mask */

/* ---------------------------  LL_TRX_REG_INT_TX_RING  --------------------------- */
#define LL_TRX_REG_INT_TX_RING_RING_LOADED_END_INT_Pos 0                                              /*!< LL_TRX_REG INT_TX_RING: RING_LOADED_END_INT Position */
#define LL_TRX_REG_INT_TX_RING_RING_LOADED_END_INT_Msk (0x01UL << LL_TRX_REG_INT_TX_RING_RING_LOADED_END_INT_Pos)/*!< LL_TRX_REG INT_TX_RING: RING_LOADED_END_INT Mask */
#define LL_TRX_REG_INT_TX_RING_RING_FULL_INT_Pos 8                                                    /*!< LL_TRX_REG INT_TX_RING: RING_FULL_INT Position */
#define LL_TRX_REG_INT_TX_RING_RING_FULL_INT_Msk (0x01UL << LL_TRX_REG_INT_TX_RING_RING_FULL_INT_Pos) /*!< LL_TRX_REG INT_TX_RING: RING_FULL_INT Mask */

/* -------------------------  LL_TRX_REG_DBG_TX_ENTRY_CNT  ------------------------ */
#define LL_TRX_REG_DBG_TX_ENTRY_CNT_ENTRY_CNT_Pos 0                                                   /*!< LL_TRX_REG DBG_TX_ENTRY_CNT: ENTRY_CNT Position */
#define LL_TRX_REG_DBG_TX_ENTRY_CNT_ENTRY_CNT_Msk (0x000000ffUL << LL_TRX_REG_DBG_TX_ENTRY_CNT_ENTRY_CNT_Pos)/*!< LL_TRX_REG DBG_TX_ENTRY_CNT: ENTRY_CNT Mask */

/* -----------------------  LL_TRX_REG_DBG_TX_RING_RD_ADDR  ----------------------- */
#define LL_TRX_REG_DBG_TX_RING_RD_ADDR_ENTRY_ADDR_Pos 0                                               /*!< LL_TRX_REG DBG_TX_RING_RD_ADDR: ENTRY_ADDR Position */
#define LL_TRX_REG_DBG_TX_RING_RD_ADDR_ENTRY_ADDR_Msk (0xffffffffUL << LL_TRX_REG_DBG_TX_RING_RD_ADDR_ENTRY_ADDR_Pos)/*!< LL_TRX_REG DBG_TX_RING_RD_ADDR: ENTRY_ADDR Mask */

/* ----------------------------  LL_TRX_REG_DBG_TX_CNT  --------------------------- */
#define LL_TRX_REG_DBG_TX_CNT_ENTRY_TX_CNT_Pos 0                                                      /*!< LL_TRX_REG DBG_TX_CNT: ENTRY_TX_CNT Position */
#define LL_TRX_REG_DBG_TX_CNT_ENTRY_TX_CNT_Msk (0x0000ffffUL << LL_TRX_REG_DBG_TX_CNT_ENTRY_TX_CNT_Pos)/*!< LL_TRX_REG DBG_TX_CNT: ENTRY_TX_CNT Mask */
#define LL_TRX_REG_DBG_TX_CNT_ENTRY_TX_NULL_CNT_Pos 16                                                /*!< LL_TRX_REG DBG_TX_CNT: ENTRY_TX_NULL_CNT Position */
#define LL_TRX_REG_DBG_TX_CNT_ENTRY_TX_NULL_CNT_Msk (0x0000ffffUL << LL_TRX_REG_DBG_TX_CNT_ENTRY_TX_NULL_CNT_Pos)/*!< LL_TRX_REG DBG_TX_CNT: ENTRY_TX_NULL_CNT Mask */

/* -----------------------  LL_TRX_REG_TX_RING_ENTRY_OFFSET  ---------------------- */
#define LL_TRX_REG_TX_RING_ENTRY_OFFSET_TX_RING_ENTRY_OFFSET_Pos 0                                    /*!< LL_TRX_REG TX_RING_ENTRY_OFFSET: TX_RING_ENTRY_OFFSET Position */
#define LL_TRX_REG_TX_RING_ENTRY_OFFSET_TX_RING_ENTRY_OFFSET_Msk (0x0000ffffUL << LL_TRX_REG_TX_RING_ENTRY_OFFSET_TX_RING_ENTRY_OFFSET_Pos)/*!< LL_TRX_REG TX_RING_ENTRY_OFFSET: TX_RING_ENTRY_OFFSET Mask */

/* -------------------------  LL_TRX_REG_CSR_TX_RING_INT  ------------------------- */
#define LL_TRX_REG_CSR_TX_RING_INT_RING_EMPTY_INT_Pos 0                                               /*!< LL_TRX_REG CSR_TX_RING_INT: RING_EMPTY_INT Position */
#define LL_TRX_REG_CSR_TX_RING_INT_RING_EMPTY_INT_Msk (0x01UL << LL_TRX_REG_CSR_TX_RING_INT_RING_EMPTY_INT_Pos)/*!< LL_TRX_REG CSR_TX_RING_INT: RING_EMPTY_INT Mask */


/* ================================================================================ */
/* ================      struct 'LL_FUNC_REG' Position & Mask      ================ */
/* ================================================================================ */


/* -------------------------  LL_FUNC_REG_ACM_TX_TBL_SET0  ------------------------ */
#define LL_FUNC_REG_ACM_TX_TBL_SET0_ACM_TX_ADV_HDR_TBL_VALID_Pos 0                                    /*!< LL_FUNC_REG ACM_TX_TBL_SET0: ACM_TX_ADV_HDR_TBL_VALID Position */
#define LL_FUNC_REG_ACM_TX_TBL_SET0_ACM_TX_ADV_HDR_TBL_VALID_Msk (0x000000ffUL << LL_FUNC_REG_ACM_TX_TBL_SET0_ACM_TX_ADV_HDR_TBL_VALID_Pos)/*!< LL_FUNC_REG ACM_TX_TBL_SET0: ACM_TX_ADV_HDR_TBL_VALID Mask */

/* ------------------------  LL_FUNC_REG_ACM_TX_TBL_VALUE0  ----------------------- */
#define LL_FUNC_REG_ACM_TX_TBL_VALUE0_ACM_TX_ADV_HDR_TBL_VALUE0_Pos 0                                 /*!< LL_FUNC_REG ACM_TX_TBL_VALUE0: ACM_TX_ADV_HDR_TBL_VALUE0 Position */
#define LL_FUNC_REG_ACM_TX_TBL_VALUE0_ACM_TX_ADV_HDR_TBL_VALUE0_Msk (0x000003ffUL << LL_FUNC_REG_ACM_TX_TBL_VALUE0_ACM_TX_ADV_HDR_TBL_VALUE0_Pos)/*!< LL_FUNC_REG ACM_TX_TBL_VALUE0: ACM_TX_ADV_HDR_TBL_VALUE0 Mask */
#define LL_FUNC_REG_ACM_TX_TBL_VALUE0_ACM_TX_ADV_HDR_TBL_VALUE1_Pos 16                                /*!< LL_FUNC_REG ACM_TX_TBL_VALUE0: ACM_TX_ADV_HDR_TBL_VALUE1 Position */
#define LL_FUNC_REG_ACM_TX_TBL_VALUE0_ACM_TX_ADV_HDR_TBL_VALUE1_Msk (0x000003ffUL << LL_FUNC_REG_ACM_TX_TBL_VALUE0_ACM_TX_ADV_HDR_TBL_VALUE1_Pos)/*!< LL_FUNC_REG ACM_TX_TBL_VALUE0: ACM_TX_ADV_HDR_TBL_VALUE1 Mask */

/* ------------------------  LL_FUNC_REG_ACM_TX_TBL_VALUE1  ----------------------- */
#define LL_FUNC_REG_ACM_TX_TBL_VALUE1_ACM_TX_ADV_HDR_TBL_VALUE2_Pos 0                                 /*!< LL_FUNC_REG ACM_TX_TBL_VALUE1: ACM_TX_ADV_HDR_TBL_VALUE2 Position */
#define LL_FUNC_REG_ACM_TX_TBL_VALUE1_ACM_TX_ADV_HDR_TBL_VALUE2_Msk (0x000003ffUL << LL_FUNC_REG_ACM_TX_TBL_VALUE1_ACM_TX_ADV_HDR_TBL_VALUE2_Pos)/*!< LL_FUNC_REG ACM_TX_TBL_VALUE1: ACM_TX_ADV_HDR_TBL_VALUE2 Mask */
#define LL_FUNC_REG_ACM_TX_TBL_VALUE1_ACM_TX_ADV_HDR_TBL_VALUE3_Pos 16                                /*!< LL_FUNC_REG ACM_TX_TBL_VALUE1: ACM_TX_ADV_HDR_TBL_VALUE3 Position */
#define LL_FUNC_REG_ACM_TX_TBL_VALUE1_ACM_TX_ADV_HDR_TBL_VALUE3_Msk (0x000003ffUL << LL_FUNC_REG_ACM_TX_TBL_VALUE1_ACM_TX_ADV_HDR_TBL_VALUE3_Pos)/*!< LL_FUNC_REG ACM_TX_TBL_VALUE1: ACM_TX_ADV_HDR_TBL_VALUE3 Mask */

/* ------------------------  LL_FUNC_REG_ACM_TX_TBL_VALUE2  ----------------------- */
#define LL_FUNC_REG_ACM_TX_TBL_VALUE2_ACM_TX_ADV_HDR_TBL_VALUE4_Pos 0                                 /*!< LL_FUNC_REG ACM_TX_TBL_VALUE2: ACM_TX_ADV_HDR_TBL_VALUE4 Position */
#define LL_FUNC_REG_ACM_TX_TBL_VALUE2_ACM_TX_ADV_HDR_TBL_VALUE4_Msk (0x000003ffUL << LL_FUNC_REG_ACM_TX_TBL_VALUE2_ACM_TX_ADV_HDR_TBL_VALUE4_Pos)/*!< LL_FUNC_REG ACM_TX_TBL_VALUE2: ACM_TX_ADV_HDR_TBL_VALUE4 Mask */
#define LL_FUNC_REG_ACM_TX_TBL_VALUE2_ACM_TX_ADV_HDR_TBL_VALUE5_Pos 16                                /*!< LL_FUNC_REG ACM_TX_TBL_VALUE2: ACM_TX_ADV_HDR_TBL_VALUE5 Position */
#define LL_FUNC_REG_ACM_TX_TBL_VALUE2_ACM_TX_ADV_HDR_TBL_VALUE5_Msk (0x000003ffUL << LL_FUNC_REG_ACM_TX_TBL_VALUE2_ACM_TX_ADV_HDR_TBL_VALUE5_Pos)/*!< LL_FUNC_REG ACM_TX_TBL_VALUE2: ACM_TX_ADV_HDR_TBL_VALUE5 Mask */

/* ------------------------  LL_FUNC_REG_ACM_TX_TBL_VALUE3  ----------------------- */
#define LL_FUNC_REG_ACM_TX_TBL_VALUE3_ACM_TX_ADV_HDR_TBL_VALUE6_Pos 0                                 /*!< LL_FUNC_REG ACM_TX_TBL_VALUE3: ACM_TX_ADV_HDR_TBL_VALUE6 Position */
#define LL_FUNC_REG_ACM_TX_TBL_VALUE3_ACM_TX_ADV_HDR_TBL_VALUE6_Msk (0x000003ffUL << LL_FUNC_REG_ACM_TX_TBL_VALUE3_ACM_TX_ADV_HDR_TBL_VALUE6_Pos)/*!< LL_FUNC_REG ACM_TX_TBL_VALUE3: ACM_TX_ADV_HDR_TBL_VALUE6 Mask */
#define LL_FUNC_REG_ACM_TX_TBL_VALUE3_ACM_TX_ADV_HDR_TBL_VALUE7_Pos 16                                /*!< LL_FUNC_REG ACM_TX_TBL_VALUE3: ACM_TX_ADV_HDR_TBL_VALUE7 Position */
#define LL_FUNC_REG_ACM_TX_TBL_VALUE3_ACM_TX_ADV_HDR_TBL_VALUE7_Msk (0x000003ffUL << LL_FUNC_REG_ACM_TX_TBL_VALUE3_ACM_TX_ADV_HDR_TBL_VALUE7_Pos)/*!< LL_FUNC_REG ACM_TX_TBL_VALUE3: ACM_TX_ADV_HDR_TBL_VALUE7 Mask */

/* -------------------  LL_FUNC_REG_AS_ACK_ADV_HDR_EXP_AND_INFO  ------------------ */
#define LL_FUNC_REG_AS_ACK_ADV_HDR_EXP_AND_INFO_AS_ACK_ADV_HDR_EXPAND_MANUAL_INVALID_Pos 0            /*!< LL_FUNC_REG AS_ACK_ADV_HDR_EXP_AND_INFO: AS_ACK_ADV_HDR_EXPAND_MANUAL_INVA
                                                         LID Position                                                                              */
#define LL_FUNC_REG_AS_ACK_ADV_HDR_EXP_AND_INFO_AS_ACK_ADV_HDR_EXPAND_MANUAL_INVALID_Msk (0x01UL << LL_FUNC_REG_AS_ACK_ADV_HDR_EXP_AND_INFO_AS_ACK_ADV_HDR_EXPAND_MANUAL_INVALID_Pos)/*!< LL_FUNC_REG AS_ACK_ADV_HDR_EXP_AND_INFO: AS_ACK_ADV_HDR_EXPAND_MANUAL_INVA
                                                         LID Mask                                                                                  */
#define LL_FUNC_REG_AS_ACK_ADV_HDR_EXP_AND_INFO_AS_ACK_ADV_HDR_EXPAND_MANUAL_SET_Pos 1                /*!< LL_FUNC_REG AS_ACK_ADV_HDR_EXP_AND_INFO: AS_ACK_ADV_HDR_EXPAND_MANUAL_SET
                                                         Position                                                                                  */
#define LL_FUNC_REG_AS_ACK_ADV_HDR_EXP_AND_INFO_AS_ACK_ADV_HDR_EXPAND_MANUAL_SET_Msk (0x01UL << LL_FUNC_REG_AS_ACK_ADV_HDR_EXP_AND_INFO_AS_ACK_ADV_HDR_EXPAND_MANUAL_SET_Pos)/*!< LL_FUNC_REG AS_ACK_ADV_HDR_EXP_AND_INFO: AS_ACK_ADV_HDR_EXPAND_MANUAL_SET
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AS_ACK_ADV_HDR_EXP_AND_INFO_AS_ACK_ADV_HDR_EXPAND_MANUAL_OVERWRITE_Pos 2          /*!< LL_FUNC_REG AS_ACK_ADV_HDR_EXP_AND_INFO: AS_ACK_ADV_HDR_EXPAND_MANUAL_OVER
                                                         WRITE Position                                                                            */
#define LL_FUNC_REG_AS_ACK_ADV_HDR_EXP_AND_INFO_AS_ACK_ADV_HDR_EXPAND_MANUAL_OVERWRITE_Msk (0x01UL << LL_FUNC_REG_AS_ACK_ADV_HDR_EXP_AND_INFO_AS_ACK_ADV_HDR_EXPAND_MANUAL_OVERWRITE_Pos)/*!< LL_FUNC_REG AS_ACK_ADV_HDR_EXP_AND_INFO: AS_ACK_ADV_HDR_EXPAND_MANUAL_OVER
                                                         WRITE Mask                                                                                */
#define LL_FUNC_REG_AS_ACK_ADV_HDR_EXP_AND_INFO_AS_ACK_ADV_HDR_EXPAND_MANUAL_VALID_Pos 4              /*!< LL_FUNC_REG AS_ACK_ADV_HDR_EXP_AND_INFO: AS_ACK_ADV_HDR_EXPAND_MANUAL_VALI
                                                         D Position                                                                                */
#define LL_FUNC_REG_AS_ACK_ADV_HDR_EXP_AND_INFO_AS_ACK_ADV_HDR_EXPAND_MANUAL_VALID_Msk (0x01UL << LL_FUNC_REG_AS_ACK_ADV_HDR_EXP_AND_INFO_AS_ACK_ADV_HDR_EXPAND_MANUAL_VALID_Pos)/*!< LL_FUNC_REG AS_ACK_ADV_HDR_EXP_AND_INFO: AS_ACK_ADV_HDR_EXPAND_MANUAL_VALI
                                                         D Mask                                                                                    */
#define LL_FUNC_REG_AS_ACK_ADV_HDR_EXP_AND_INFO_AS_ACK_ADV_HDR_EXPAND_MANUAL_VALUE_Pos 8              /*!< LL_FUNC_REG AS_ACK_ADV_HDR_EXP_AND_INFO: AS_ACK_ADV_HDR_EXPAND_MANUAL_VALU
                                                         E Position                                                                                */
#define LL_FUNC_REG_AS_ACK_ADV_HDR_EXP_AND_INFO_AS_ACK_ADV_HDR_EXPAND_MANUAL_VALUE_Msk (0x7fUL << LL_FUNC_REG_AS_ACK_ADV_HDR_EXP_AND_INFO_AS_ACK_ADV_HDR_EXPAND_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG AS_ACK_ADV_HDR_EXP_AND_INFO: AS_ACK_ADV_HDR_EXPAND_MANUAL_VALU
                                                         E Mask                                                                                    */
#define LL_FUNC_REG_AS_ACK_ADV_HDR_EXP_AND_INFO_AS_ACK_ADV_HDR_EXPAND_INFO_VALID_Pos 16               /*!< LL_FUNC_REG AS_ACK_ADV_HDR_EXP_AND_INFO: AS_ACK_ADV_HDR_EXPAND_INFO_VALID
                                                         Position                                                                                  */
#define LL_FUNC_REG_AS_ACK_ADV_HDR_EXP_AND_INFO_AS_ACK_ADV_HDR_EXPAND_INFO_VALID_Msk (0x01UL << LL_FUNC_REG_AS_ACK_ADV_HDR_EXP_AND_INFO_AS_ACK_ADV_HDR_EXPAND_INFO_VALID_Pos)/*!< LL_FUNC_REG AS_ACK_ADV_HDR_EXP_AND_INFO: AS_ACK_ADV_HDR_EXPAND_INFO_VALID
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AS_ACK_ADV_HDR_EXP_AND_INFO_AS_ACK_ADV_HDR_EXPAND_INFO_VALUE_Pos 24               /*!< LL_FUNC_REG AS_ACK_ADV_HDR_EXP_AND_INFO: AS_ACK_ADV_HDR_EXPAND_INFO_VALUE
                                                         Position                                                                                  */
#define LL_FUNC_REG_AS_ACK_ADV_HDR_EXP_AND_INFO_AS_ACK_ADV_HDR_EXPAND_INFO_VALUE_Msk (0x7fUL << LL_FUNC_REG_AS_ACK_ADV_HDR_EXP_AND_INFO_AS_ACK_ADV_HDR_EXPAND_INFO_VALUE_Pos)/*!< LL_FUNC_REG AS_ACK_ADV_HDR_EXP_AND_INFO: AS_ACK_ADV_HDR_EXPAND_INFO_VALUE
                                                         Mask                                                                                      */

/* -------------------  LL_FUNC_REG_AS_ACK_DATA_NESN_PEER_INFO  ------------------- */
#define LL_FUNC_REG_AS_ACK_DATA_NESN_PEER_INFO_AS_ACK_DATA_NESN_PEER_MANUAL_INVALID_Pos 0             /*!< LL_FUNC_REG AS_ACK_DATA_NESN_PEER_INFO: AS_ACK_DATA_NESN_PEER_MANUAL_INVAL
                                                         ID Position                                                                               */
#define LL_FUNC_REG_AS_ACK_DATA_NESN_PEER_INFO_AS_ACK_DATA_NESN_PEER_MANUAL_INVALID_Msk (0x01UL << LL_FUNC_REG_AS_ACK_DATA_NESN_PEER_INFO_AS_ACK_DATA_NESN_PEER_MANUAL_INVALID_Pos)/*!< LL_FUNC_REG AS_ACK_DATA_NESN_PEER_INFO: AS_ACK_DATA_NESN_PEER_MANUAL_INVAL
                                                         ID Mask                                                                                   */
#define LL_FUNC_REG_AS_ACK_DATA_NESN_PEER_INFO_AS_ACK_DATA_NESN_PEER_MANUAL_SET_Pos 1                 /*!< LL_FUNC_REG AS_ACK_DATA_NESN_PEER_INFO: AS_ACK_DATA_NESN_PEER_MANUAL_SET
                                                         Position                                                                                  */
#define LL_FUNC_REG_AS_ACK_DATA_NESN_PEER_INFO_AS_ACK_DATA_NESN_PEER_MANUAL_SET_Msk (0x01UL << LL_FUNC_REG_AS_ACK_DATA_NESN_PEER_INFO_AS_ACK_DATA_NESN_PEER_MANUAL_SET_Pos)/*!< LL_FUNC_REG AS_ACK_DATA_NESN_PEER_INFO: AS_ACK_DATA_NESN_PEER_MANUAL_SET
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AS_ACK_DATA_NESN_PEER_INFO_AS_ACK_DATA_NESN_PEER_MANUAL_OVERWRITE_Pos 2           /*!< LL_FUNC_REG AS_ACK_DATA_NESN_PEER_INFO: AS_ACK_DATA_NESN_PEER_MANUAL_OVERW
                                                         RITE Position                                                                             */
#define LL_FUNC_REG_AS_ACK_DATA_NESN_PEER_INFO_AS_ACK_DATA_NESN_PEER_MANUAL_OVERWRITE_Msk (0x01UL << LL_FUNC_REG_AS_ACK_DATA_NESN_PEER_INFO_AS_ACK_DATA_NESN_PEER_MANUAL_OVERWRITE_Pos)/*!< LL_FUNC_REG AS_ACK_DATA_NESN_PEER_INFO: AS_ACK_DATA_NESN_PEER_MANUAL_OVERW
                                                         RITE Mask                                                                                 */
#define LL_FUNC_REG_AS_ACK_DATA_NESN_PEER_INFO_AS_ACK_DATA_NESN_PEER_MANUAL_VALID_Pos 4               /*!< LL_FUNC_REG AS_ACK_DATA_NESN_PEER_INFO: AS_ACK_DATA_NESN_PEER_MANUAL_VALID
                                                         Position                                                                                  */
#define LL_FUNC_REG_AS_ACK_DATA_NESN_PEER_INFO_AS_ACK_DATA_NESN_PEER_MANUAL_VALID_Msk (0x01UL << LL_FUNC_REG_AS_ACK_DATA_NESN_PEER_INFO_AS_ACK_DATA_NESN_PEER_MANUAL_VALID_Pos)/*!< LL_FUNC_REG AS_ACK_DATA_NESN_PEER_INFO: AS_ACK_DATA_NESN_PEER_MANUAL_VALID
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AS_ACK_DATA_NESN_PEER_INFO_AS_ACK_DATA_NESN_PEER_MANUAL_VALUE_Pos 8               /*!< LL_FUNC_REG AS_ACK_DATA_NESN_PEER_INFO: AS_ACK_DATA_NESN_PEER_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_FUNC_REG_AS_ACK_DATA_NESN_PEER_INFO_AS_ACK_DATA_NESN_PEER_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_AS_ACK_DATA_NESN_PEER_INFO_AS_ACK_DATA_NESN_PEER_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG AS_ACK_DATA_NESN_PEER_INFO: AS_ACK_DATA_NESN_PEER_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AS_ACK_DATA_NESN_PEER_INFO_AS_ACK_DATA_NESN_PEER_INFO_VALID_Pos 16                /*!< LL_FUNC_REG AS_ACK_DATA_NESN_PEER_INFO: AS_ACK_DATA_NESN_PEER_INFO_VALID
                                                         Position                                                                                  */
#define LL_FUNC_REG_AS_ACK_DATA_NESN_PEER_INFO_AS_ACK_DATA_NESN_PEER_INFO_VALID_Msk (0x01UL << LL_FUNC_REG_AS_ACK_DATA_NESN_PEER_INFO_AS_ACK_DATA_NESN_PEER_INFO_VALID_Pos)/*!< LL_FUNC_REG AS_ACK_DATA_NESN_PEER_INFO: AS_ACK_DATA_NESN_PEER_INFO_VALID
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AS_ACK_DATA_NESN_PEER_INFO_AS_ACK_DATA_NESN_PEER_INFO_VALUE_Pos 24                /*!< LL_FUNC_REG AS_ACK_DATA_NESN_PEER_INFO: AS_ACK_DATA_NESN_PEER_INFO_VALUE
                                                         Position                                                                                  */
#define LL_FUNC_REG_AS_ACK_DATA_NESN_PEER_INFO_AS_ACK_DATA_NESN_PEER_INFO_VALUE_Msk (0x01UL << LL_FUNC_REG_AS_ACK_DATA_NESN_PEER_INFO_AS_ACK_DATA_NESN_PEER_INFO_VALUE_Pos)/*!< LL_FUNC_REG AS_ACK_DATA_NESN_PEER_INFO: AS_ACK_DATA_NESN_PEER_INFO_VALUE
                                                         Mask                                                                                      */

/* -----------------------  LL_FUNC_REG_DATA_NESN_OWN_INFO  ----------------------- */
#define LL_FUNC_REG_DATA_NESN_OWN_INFO_DATA_NESN_OWN_MANUAL_INVALID_Pos 0                             /*!< LL_FUNC_REG DATA_NESN_OWN_INFO: DATA_NESN_OWN_MANUAL_INVALID
                                                         Position                                                                                  */
#define LL_FUNC_REG_DATA_NESN_OWN_INFO_DATA_NESN_OWN_MANUAL_INVALID_Msk (0x01UL << LL_FUNC_REG_DATA_NESN_OWN_INFO_DATA_NESN_OWN_MANUAL_INVALID_Pos)/*!< LL_FUNC_REG DATA_NESN_OWN_INFO: DATA_NESN_OWN_MANUAL_INVALID
                                                         Mask                                                                                      */
#define LL_FUNC_REG_DATA_NESN_OWN_INFO_DATA_NESN_OWN_MANUAL_SET_Pos 1                                 /*!< LL_FUNC_REG DATA_NESN_OWN_INFO: DATA_NESN_OWN_MANUAL_SET Position */
#define LL_FUNC_REG_DATA_NESN_OWN_INFO_DATA_NESN_OWN_MANUAL_SET_Msk (0x01UL << LL_FUNC_REG_DATA_NESN_OWN_INFO_DATA_NESN_OWN_MANUAL_SET_Pos)/*!< LL_FUNC_REG DATA_NESN_OWN_INFO: DATA_NESN_OWN_MANUAL_SET Mask */
#define LL_FUNC_REG_DATA_NESN_OWN_INFO_DATA_NESN_OWN_MANUAL_OVERWRITE_Pos 2                           /*!< LL_FUNC_REG DATA_NESN_OWN_INFO: DATA_NESN_OWN_MANUAL_OVERWRITE
                                                         Position                                                                                  */
#define LL_FUNC_REG_DATA_NESN_OWN_INFO_DATA_NESN_OWN_MANUAL_OVERWRITE_Msk (0x01UL << LL_FUNC_REG_DATA_NESN_OWN_INFO_DATA_NESN_OWN_MANUAL_OVERWRITE_Pos)/*!< LL_FUNC_REG DATA_NESN_OWN_INFO: DATA_NESN_OWN_MANUAL_OVERWRITE
                                                         Mask                                                                                      */
#define LL_FUNC_REG_DATA_NESN_OWN_INFO_DATA_NESN_OWN_MANUAL_VALID_Pos 4                               /*!< LL_FUNC_REG DATA_NESN_OWN_INFO: DATA_NESN_OWN_MANUAL_VALID Position */
#define LL_FUNC_REG_DATA_NESN_OWN_INFO_DATA_NESN_OWN_MANUAL_VALID_Msk (0x01UL << LL_FUNC_REG_DATA_NESN_OWN_INFO_DATA_NESN_OWN_MANUAL_VALID_Pos)/*!< LL_FUNC_REG DATA_NESN_OWN_INFO: DATA_NESN_OWN_MANUAL_VALID Mask */
#define LL_FUNC_REG_DATA_NESN_OWN_INFO_DATA_NESN_OWN_MANUAL_VALUE_Pos 8                               /*!< LL_FUNC_REG DATA_NESN_OWN_INFO: DATA_NESN_OWN_MANUAL_VALUE Position */
#define LL_FUNC_REG_DATA_NESN_OWN_INFO_DATA_NESN_OWN_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_DATA_NESN_OWN_INFO_DATA_NESN_OWN_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG DATA_NESN_OWN_INFO: DATA_NESN_OWN_MANUAL_VALUE Mask */
#define LL_FUNC_REG_DATA_NESN_OWN_INFO_DATA_NESN_OWN_INFO_VALID_Pos 16                                /*!< LL_FUNC_REG DATA_NESN_OWN_INFO: DATA_NESN_OWN_INFO_VALID Position */
#define LL_FUNC_REG_DATA_NESN_OWN_INFO_DATA_NESN_OWN_INFO_VALID_Msk (0x01UL << LL_FUNC_REG_DATA_NESN_OWN_INFO_DATA_NESN_OWN_INFO_VALID_Pos)/*!< LL_FUNC_REG DATA_NESN_OWN_INFO: DATA_NESN_OWN_INFO_VALID Mask */
#define LL_FUNC_REG_DATA_NESN_OWN_INFO_DATA_NESN_OWN_INFO_VALUE_Pos 24                                /*!< LL_FUNC_REG DATA_NESN_OWN_INFO: DATA_NESN_OWN_INFO_VALUE Position */
#define LL_FUNC_REG_DATA_NESN_OWN_INFO_DATA_NESN_OWN_INFO_VALUE_Msk (0x01UL << LL_FUNC_REG_DATA_NESN_OWN_INFO_DATA_NESN_OWN_INFO_VALUE_Pos)/*!< LL_FUNC_REG DATA_NESN_OWN_INFO: DATA_NESN_OWN_INFO_VALUE Mask */

/* ----------------------  LL_FUNC_REG_ACM_DATA_MD_POLICY_0  ---------------------- */
#define LL_FUNC_REG_ACM_DATA_MD_POLICY_0_ACM_DATA_MD_POLICY_SIG0_SEL_Pos 0                            /*!< LL_FUNC_REG ACM_DATA_MD_POLICY_0: ACM_DATA_MD_POLICY_SIG0_SEL
                                                         Position                                                                                  */
#define LL_FUNC_REG_ACM_DATA_MD_POLICY_0_ACM_DATA_MD_POLICY_SIG0_SEL_Msk (0x3fUL << LL_FUNC_REG_ACM_DATA_MD_POLICY_0_ACM_DATA_MD_POLICY_SIG0_SEL_Pos)/*!< LL_FUNC_REG ACM_DATA_MD_POLICY_0: ACM_DATA_MD_POLICY_SIG0_SEL
                                                         Mask                                                                                      */
#define LL_FUNC_REG_ACM_DATA_MD_POLICY_0_ACM_DATA_MD_POLICY_SIG1_SEL_Pos 8                            /*!< LL_FUNC_REG ACM_DATA_MD_POLICY_0: ACM_DATA_MD_POLICY_SIG1_SEL
                                                         Position                                                                                  */
#define LL_FUNC_REG_ACM_DATA_MD_POLICY_0_ACM_DATA_MD_POLICY_SIG1_SEL_Msk (0x3fUL << LL_FUNC_REG_ACM_DATA_MD_POLICY_0_ACM_DATA_MD_POLICY_SIG1_SEL_Pos)/*!< LL_FUNC_REG ACM_DATA_MD_POLICY_0: ACM_DATA_MD_POLICY_SIG1_SEL
                                                         Mask                                                                                      */
#define LL_FUNC_REG_ACM_DATA_MD_POLICY_0_ACM_DATA_MD_POLICY_SIG2_SEL_Pos 16                           /*!< LL_FUNC_REG ACM_DATA_MD_POLICY_0: ACM_DATA_MD_POLICY_SIG2_SEL
                                                         Position                                                                                  */
#define LL_FUNC_REG_ACM_DATA_MD_POLICY_0_ACM_DATA_MD_POLICY_SIG2_SEL_Msk (0x3fUL << LL_FUNC_REG_ACM_DATA_MD_POLICY_0_ACM_DATA_MD_POLICY_SIG2_SEL_Pos)/*!< LL_FUNC_REG ACM_DATA_MD_POLICY_0: ACM_DATA_MD_POLICY_SIG2_SEL
                                                         Mask                                                                                      */
#define LL_FUNC_REG_ACM_DATA_MD_POLICY_0_ACM_DATA_MD_POLICY_SIG3_SEL_Pos 24                           /*!< LL_FUNC_REG ACM_DATA_MD_POLICY_0: ACM_DATA_MD_POLICY_SIG3_SEL
                                                         Position                                                                                  */
#define LL_FUNC_REG_ACM_DATA_MD_POLICY_0_ACM_DATA_MD_POLICY_SIG3_SEL_Msk (0x3fUL << LL_FUNC_REG_ACM_DATA_MD_POLICY_0_ACM_DATA_MD_POLICY_SIG3_SEL_Pos)/*!< LL_FUNC_REG ACM_DATA_MD_POLICY_0: ACM_DATA_MD_POLICY_SIG3_SEL
                                                         Mask                                                                                      */
#define LL_FUNC_REG_ACM_DATA_MD_POLICY_0_ACM_DATA_MD_POLICY_MANUAL_VALUE_Pos 30                       /*!< LL_FUNC_REG ACM_DATA_MD_POLICY_0: ACM_DATA_MD_POLICY_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_FUNC_REG_ACM_DATA_MD_POLICY_0_ACM_DATA_MD_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_ACM_DATA_MD_POLICY_0_ACM_DATA_MD_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG ACM_DATA_MD_POLICY_0: ACM_DATA_MD_POLICY_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_FUNC_REG_ACM_DATA_MD_POLICY_0_ACM_DATA_MD_POLICY_MANUAL_EN_Pos 31                          /*!< LL_FUNC_REG ACM_DATA_MD_POLICY_0: ACM_DATA_MD_POLICY_MANUAL_EN
                                                         Position                                                                                  */
#define LL_FUNC_REG_ACM_DATA_MD_POLICY_0_ACM_DATA_MD_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_ACM_DATA_MD_POLICY_0_ACM_DATA_MD_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG ACM_DATA_MD_POLICY_0: ACM_DATA_MD_POLICY_MANUAL_EN
                                                         Mask                                                                                      */

/* ----------------------  LL_FUNC_REG_ACM_DATA_MD_POLICY_1  ---------------------- */
#define LL_FUNC_REG_ACM_DATA_MD_POLICY_1_ACM_DATA_MD_POLICY_W1C_Pos 0                                 /*!< LL_FUNC_REG ACM_DATA_MD_POLICY_1: ACM_DATA_MD_POLICY_W1C Position */
#define LL_FUNC_REG_ACM_DATA_MD_POLICY_1_ACM_DATA_MD_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_ACM_DATA_MD_POLICY_1_ACM_DATA_MD_POLICY_W1C_Pos)/*!< LL_FUNC_REG ACM_DATA_MD_POLICY_1: ACM_DATA_MD_POLICY_W1C Mask */
#define LL_FUNC_REG_ACM_DATA_MD_POLICY_1_ACM_DATA_MD_POLICY_W1S_Pos 1                                 /*!< LL_FUNC_REG ACM_DATA_MD_POLICY_1: ACM_DATA_MD_POLICY_W1S Position */
#define LL_FUNC_REG_ACM_DATA_MD_POLICY_1_ACM_DATA_MD_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_ACM_DATA_MD_POLICY_1_ACM_DATA_MD_POLICY_W1S_Pos)/*!< LL_FUNC_REG ACM_DATA_MD_POLICY_1: ACM_DATA_MD_POLICY_W1S Mask */

/* ----------------------  LL_FUNC_REG_ACM_DATA_MD_POLICY_2  ---------------------- */
#define LL_FUNC_REG_ACM_DATA_MD_POLICY_2_ACM_DATA_MD_POLICY_Pos 0                                     /*!< LL_FUNC_REG ACM_DATA_MD_POLICY_2: ACM_DATA_MD_POLICY Position */
#define LL_FUNC_REG_ACM_DATA_MD_POLICY_2_ACM_DATA_MD_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_ACM_DATA_MD_POLICY_2_ACM_DATA_MD_POLICY_Pos)/*!< LL_FUNC_REG ACM_DATA_MD_POLICY_2: ACM_DATA_MD_POLICY Mask */

/* ------------------------  LL_FUNC_REG_ACM_DUMY_POLICY_0  ----------------------- */
#define LL_FUNC_REG_ACM_DUMY_POLICY_0_ACM_DUMY_POLICY_SIG0_SEL_Pos 0                                  /*!< LL_FUNC_REG ACM_DUMY_POLICY_0: ACM_DUMY_POLICY_SIG0_SEL Position */
#define LL_FUNC_REG_ACM_DUMY_POLICY_0_ACM_DUMY_POLICY_SIG0_SEL_Msk (0x3fUL << LL_FUNC_REG_ACM_DUMY_POLICY_0_ACM_DUMY_POLICY_SIG0_SEL_Pos)/*!< LL_FUNC_REG ACM_DUMY_POLICY_0: ACM_DUMY_POLICY_SIG0_SEL Mask */
#define LL_FUNC_REG_ACM_DUMY_POLICY_0_ACM_DUMY_POLICY_SIG1_SEL_Pos 8                                  /*!< LL_FUNC_REG ACM_DUMY_POLICY_0: ACM_DUMY_POLICY_SIG1_SEL Position */
#define LL_FUNC_REG_ACM_DUMY_POLICY_0_ACM_DUMY_POLICY_SIG1_SEL_Msk (0x3fUL << LL_FUNC_REG_ACM_DUMY_POLICY_0_ACM_DUMY_POLICY_SIG1_SEL_Pos)/*!< LL_FUNC_REG ACM_DUMY_POLICY_0: ACM_DUMY_POLICY_SIG1_SEL Mask */
#define LL_FUNC_REG_ACM_DUMY_POLICY_0_ACM_DUMY_POLICY_SIG2_SEL_Pos 16                                 /*!< LL_FUNC_REG ACM_DUMY_POLICY_0: ACM_DUMY_POLICY_SIG2_SEL Position */
#define LL_FUNC_REG_ACM_DUMY_POLICY_0_ACM_DUMY_POLICY_SIG2_SEL_Msk (0x3fUL << LL_FUNC_REG_ACM_DUMY_POLICY_0_ACM_DUMY_POLICY_SIG2_SEL_Pos)/*!< LL_FUNC_REG ACM_DUMY_POLICY_0: ACM_DUMY_POLICY_SIG2_SEL Mask */
#define LL_FUNC_REG_ACM_DUMY_POLICY_0_ACM_DUMY_POLICY_SIG3_SEL_Pos 24                                 /*!< LL_FUNC_REG ACM_DUMY_POLICY_0: ACM_DUMY_POLICY_SIG3_SEL Position */
#define LL_FUNC_REG_ACM_DUMY_POLICY_0_ACM_DUMY_POLICY_SIG3_SEL_Msk (0x3fUL << LL_FUNC_REG_ACM_DUMY_POLICY_0_ACM_DUMY_POLICY_SIG3_SEL_Pos)/*!< LL_FUNC_REG ACM_DUMY_POLICY_0: ACM_DUMY_POLICY_SIG3_SEL Mask */
#define LL_FUNC_REG_ACM_DUMY_POLICY_0_ACM_DUMY_POLICY_MANUAL_VALUE_Pos 30                             /*!< LL_FUNC_REG ACM_DUMY_POLICY_0: ACM_DUMY_POLICY_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_FUNC_REG_ACM_DUMY_POLICY_0_ACM_DUMY_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_ACM_DUMY_POLICY_0_ACM_DUMY_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG ACM_DUMY_POLICY_0: ACM_DUMY_POLICY_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_FUNC_REG_ACM_DUMY_POLICY_0_ACM_DUMY_POLICY_MANUAL_EN_Pos 31                                /*!< LL_FUNC_REG ACM_DUMY_POLICY_0: ACM_DUMY_POLICY_MANUAL_EN Position */
#define LL_FUNC_REG_ACM_DUMY_POLICY_0_ACM_DUMY_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_ACM_DUMY_POLICY_0_ACM_DUMY_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG ACM_DUMY_POLICY_0: ACM_DUMY_POLICY_MANUAL_EN Mask */

/* ------------------------  LL_FUNC_REG_ACM_DUMY_POLICY_1  ----------------------- */
#define LL_FUNC_REG_ACM_DUMY_POLICY_1_ACM_DUMY_POLICY_W1C_Pos 0                                       /*!< LL_FUNC_REG ACM_DUMY_POLICY_1: ACM_DUMY_POLICY_W1C Position */
#define LL_FUNC_REG_ACM_DUMY_POLICY_1_ACM_DUMY_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_ACM_DUMY_POLICY_1_ACM_DUMY_POLICY_W1C_Pos)/*!< LL_FUNC_REG ACM_DUMY_POLICY_1: ACM_DUMY_POLICY_W1C Mask */
#define LL_FUNC_REG_ACM_DUMY_POLICY_1_ACM_DUMY_POLICY_W1S_Pos 1                                       /*!< LL_FUNC_REG ACM_DUMY_POLICY_1: ACM_DUMY_POLICY_W1S Position */
#define LL_FUNC_REG_ACM_DUMY_POLICY_1_ACM_DUMY_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_ACM_DUMY_POLICY_1_ACM_DUMY_POLICY_W1S_Pos)/*!< LL_FUNC_REG ACM_DUMY_POLICY_1: ACM_DUMY_POLICY_W1S Mask */

/* ------------------------  LL_FUNC_REG_ACM_DUMY_POLICY_2  ----------------------- */
#define LL_FUNC_REG_ACM_DUMY_POLICY_2_ACM_DUMY_POLICY_Pos 0                                           /*!< LL_FUNC_REG ACM_DUMY_POLICY_2: ACM_DUMY_POLICY Position */
#define LL_FUNC_REG_ACM_DUMY_POLICY_2_ACM_DUMY_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_ACM_DUMY_POLICY_2_ACM_DUMY_POLICY_Pos)/*!< LL_FUNC_REG ACM_DUMY_POLICY_2: ACM_DUMY_POLICY Mask */

/* ----------------------  LL_FUNC_REG_ACM_POLICY_SRC_BUS_0  ---------------------- */
#define LL_FUNC_REG_ACM_POLICY_SRC_BUS_0_ACM_POLICY_SRC_BUS_31_0_Pos 0                                /*!< LL_FUNC_REG ACM_POLICY_SRC_BUS_0: ACM_POLICY_SRC_BUS_31_0 Position */
#define LL_FUNC_REG_ACM_POLICY_SRC_BUS_0_ACM_POLICY_SRC_BUS_31_0_Msk (0xffffffffUL << LL_FUNC_REG_ACM_POLICY_SRC_BUS_0_ACM_POLICY_SRC_BUS_31_0_Pos)/*!< LL_FUNC_REG ACM_POLICY_SRC_BUS_0: ACM_POLICY_SRC_BUS_31_0 Mask */

/* ----------------------  LL_FUNC_REG_ACM_POLICY_SRC_BUS_1  ---------------------- */
#define LL_FUNC_REG_ACM_POLICY_SRC_BUS_1_ACM_POLICY_SRC_BUS_63_32_Pos 0                               /*!< LL_FUNC_REG ACM_POLICY_SRC_BUS_1: ACM_POLICY_SRC_BUS_63_32 Position */
#define LL_FUNC_REG_ACM_POLICY_SRC_BUS_1_ACM_POLICY_SRC_BUS_63_32_Msk (0xffffffffUL << LL_FUNC_REG_ACM_POLICY_SRC_BUS_1_ACM_POLICY_SRC_BUS_63_32_Pos)/*!< LL_FUNC_REG ACM_POLICY_SRC_BUS_1: ACM_POLICY_SRC_BUS_63_32 Mask */

/* -------------------------  LL_FUNC_REG_ACM_TX_TBL_INFO  ------------------------ */
#define LL_FUNC_REG_ACM_TX_TBL_INFO_ACM_TBL_LOOKUP_NO_HIT_Pos 0                                       /*!< LL_FUNC_REG ACM_TX_TBL_INFO: ACM_TBL_LOOKUP_NO_HIT Position */
#define LL_FUNC_REG_ACM_TX_TBL_INFO_ACM_TBL_LOOKUP_NO_HIT_Msk (0x01UL << LL_FUNC_REG_ACM_TX_TBL_INFO_ACM_TBL_LOOKUP_NO_HIT_Pos)/*!< LL_FUNC_REG ACM_TX_TBL_INFO: ACM_TBL_LOOKUP_NO_HIT Mask */
#define LL_FUNC_REG_ACM_TX_TBL_INFO_ACM_TBL_VALUE_Pos 16                                              /*!< LL_FUNC_REG ACM_TX_TBL_INFO: ACM_TBL_VALUE Position */
#define LL_FUNC_REG_ACM_TX_TBL_INFO_ACM_TBL_VALUE_Msk (0x000003ffUL << LL_FUNC_REG_ACM_TX_TBL_INFO_ACM_TBL_VALUE_Pos)/*!< LL_FUNC_REG ACM_TX_TBL_INFO: ACM_TBL_VALUE Mask */

/* ------------------------  LL_FUNC_REG_AEM_ACCUMULATOR_0  ----------------------- */
#define LL_FUNC_REG_AEM_ACCUMULATOR_0_AEM_ACCUM_0_ACCU_THOLD_Pos 0                                    /*!< LL_FUNC_REG AEM_ACCUMULATOR_0: AEM_ACCUM_0_ACCU_THOLD Position */
#define LL_FUNC_REG_AEM_ACCUMULATOR_0_AEM_ACCUM_0_ACCU_THOLD_Msk (0x000000ffUL << LL_FUNC_REG_AEM_ACCUMULATOR_0_AEM_ACCUM_0_ACCU_THOLD_Pos)/*!< LL_FUNC_REG AEM_ACCUMULATOR_0: AEM_ACCUM_0_ACCU_THOLD Mask */
#define LL_FUNC_REG_AEM_ACCUMULATOR_0_AEM_ACCUM_0_INIT_VALUE_Pos 8                                    /*!< LL_FUNC_REG AEM_ACCUMULATOR_0: AEM_ACCUM_0_INIT_VALUE Position */
#define LL_FUNC_REG_AEM_ACCUMULATOR_0_AEM_ACCUM_0_INIT_VALUE_Msk (0x000000ffUL << LL_FUNC_REG_AEM_ACCUMULATOR_0_AEM_ACCUM_0_INIT_VALUE_Pos)/*!< LL_FUNC_REG AEM_ACCUMULATOR_0: AEM_ACCUM_0_INIT_VALUE Mask */
#define LL_FUNC_REG_AEM_ACCUMULATOR_0_AEM_ACCUM_0_INC_SEL_Pos 16                                      /*!< LL_FUNC_REG AEM_ACCUMULATOR_0: AEM_ACCUM_0_INC_SEL Position */
#define LL_FUNC_REG_AEM_ACCUMULATOR_0_AEM_ACCUM_0_INC_SEL_Msk (0x3fUL << LL_FUNC_REG_AEM_ACCUMULATOR_0_AEM_ACCUM_0_INC_SEL_Pos)/*!< LL_FUNC_REG AEM_ACCUMULATOR_0: AEM_ACCUM_0_INC_SEL Mask */
#define LL_FUNC_REG_AEM_ACCUMULATOR_0_AEM_ACCUM_0_EN_Pos 24                                           /*!< LL_FUNC_REG AEM_ACCUMULATOR_0: AEM_ACCUM_0_EN Position */
#define LL_FUNC_REG_AEM_ACCUMULATOR_0_AEM_ACCUM_0_EN_Msk (0x01UL << LL_FUNC_REG_AEM_ACCUMULATOR_0_AEM_ACCUM_0_EN_Pos)/*!< LL_FUNC_REG AEM_ACCUMULATOR_0: AEM_ACCUM_0_EN Mask */

/* ------------------------  LL_FUNC_REG_AEM_SIG_ANCHOR_TX  ----------------------- */
#define LL_FUNC_REG_AEM_SIG_ANCHOR_TX_AEM_SIGNAL_ANCHOR_AT_TX_Pos 0                                   /*!< LL_FUNC_REG AEM_SIG_ANCHOR_TX: AEM_SIGNAL_ANCHOR_AT_TX Position */
#define LL_FUNC_REG_AEM_SIG_ANCHOR_TX_AEM_SIGNAL_ANCHOR_AT_TX_Msk (0x01UL << LL_FUNC_REG_AEM_SIG_ANCHOR_TX_AEM_SIGNAL_ANCHOR_AT_TX_Pos)/*!< LL_FUNC_REG AEM_SIG_ANCHOR_TX: AEM_SIGNAL_ANCHOR_AT_TX Mask */

/* ------------------------  LL_FUNC_REG_AEM_ACCUMULATOR_1  ----------------------- */
#define LL_FUNC_REG_AEM_ACCUMULATOR_1_AEM_ACCUM_1_ACCU_THOLD_Pos 0                                    /*!< LL_FUNC_REG AEM_ACCUMULATOR_1: AEM_ACCUM_1_ACCU_THOLD Position */
#define LL_FUNC_REG_AEM_ACCUMULATOR_1_AEM_ACCUM_1_ACCU_THOLD_Msk (0x000000ffUL << LL_FUNC_REG_AEM_ACCUMULATOR_1_AEM_ACCUM_1_ACCU_THOLD_Pos)/*!< LL_FUNC_REG AEM_ACCUMULATOR_1: AEM_ACCUM_1_ACCU_THOLD Mask */
#define LL_FUNC_REG_AEM_ACCUMULATOR_1_AEM_ACCUM_1_INIT_VALUE_Pos 8                                    /*!< LL_FUNC_REG AEM_ACCUMULATOR_1: AEM_ACCUM_1_INIT_VALUE Position */
#define LL_FUNC_REG_AEM_ACCUMULATOR_1_AEM_ACCUM_1_INIT_VALUE_Msk (0x000000ffUL << LL_FUNC_REG_AEM_ACCUMULATOR_1_AEM_ACCUM_1_INIT_VALUE_Pos)/*!< LL_FUNC_REG AEM_ACCUMULATOR_1: AEM_ACCUM_1_INIT_VALUE Mask */
#define LL_FUNC_REG_AEM_ACCUMULATOR_1_AEM_ACCUM_1_INC_SEL_Pos 16                                      /*!< LL_FUNC_REG AEM_ACCUMULATOR_1: AEM_ACCUM_1_INC_SEL Position */
#define LL_FUNC_REG_AEM_ACCUMULATOR_1_AEM_ACCUM_1_INC_SEL_Msk (0x3fUL << LL_FUNC_REG_AEM_ACCUMULATOR_1_AEM_ACCUM_1_INC_SEL_Pos)/*!< LL_FUNC_REG AEM_ACCUMULATOR_1: AEM_ACCUM_1_INC_SEL Mask */
#define LL_FUNC_REG_AEM_ACCUMULATOR_1_AEM_ACCUM_1_EN_Pos 24                                           /*!< LL_FUNC_REG AEM_ACCUMULATOR_1: AEM_ACCUM_1_EN Position */
#define LL_FUNC_REG_AEM_ACCUMULATOR_1_AEM_ACCUM_1_EN_Msk (0x01UL << LL_FUNC_REG_AEM_ACCUMULATOR_1_AEM_ACCUM_1_EN_Pos)/*!< LL_FUNC_REG AEM_ACCUMULATOR_1: AEM_ACCUM_1_EN Mask */

/* ------------------------  LL_FUNC_REG_AEM_SYNC_POLICY_0  ----------------------- */
#define LL_FUNC_REG_AEM_SYNC_POLICY_0_AEM_SYNC_POLICY_SIG0_SEL_Pos 0                                  /*!< LL_FUNC_REG AEM_SYNC_POLICY_0: AEM_SYNC_POLICY_SIG0_SEL Position */
#define LL_FUNC_REG_AEM_SYNC_POLICY_0_AEM_SYNC_POLICY_SIG0_SEL_Msk (0x3fUL << LL_FUNC_REG_AEM_SYNC_POLICY_0_AEM_SYNC_POLICY_SIG0_SEL_Pos)/*!< LL_FUNC_REG AEM_SYNC_POLICY_0: AEM_SYNC_POLICY_SIG0_SEL Mask */
#define LL_FUNC_REG_AEM_SYNC_POLICY_0_AEM_SYNC_POLICY_SIG1_SEL_Pos 8                                  /*!< LL_FUNC_REG AEM_SYNC_POLICY_0: AEM_SYNC_POLICY_SIG1_SEL Position */
#define LL_FUNC_REG_AEM_SYNC_POLICY_0_AEM_SYNC_POLICY_SIG1_SEL_Msk (0x3fUL << LL_FUNC_REG_AEM_SYNC_POLICY_0_AEM_SYNC_POLICY_SIG1_SEL_Pos)/*!< LL_FUNC_REG AEM_SYNC_POLICY_0: AEM_SYNC_POLICY_SIG1_SEL Mask */
#define LL_FUNC_REG_AEM_SYNC_POLICY_0_AEM_SYNC_POLICY_SIG2_SEL_Pos 16                                 /*!< LL_FUNC_REG AEM_SYNC_POLICY_0: AEM_SYNC_POLICY_SIG2_SEL Position */
#define LL_FUNC_REG_AEM_SYNC_POLICY_0_AEM_SYNC_POLICY_SIG2_SEL_Msk (0x3fUL << LL_FUNC_REG_AEM_SYNC_POLICY_0_AEM_SYNC_POLICY_SIG2_SEL_Pos)/*!< LL_FUNC_REG AEM_SYNC_POLICY_0: AEM_SYNC_POLICY_SIG2_SEL Mask */
#define LL_FUNC_REG_AEM_SYNC_POLICY_0_AEM_SYNC_POLICY_SIG3_SEL_Pos 24                                 /*!< LL_FUNC_REG AEM_SYNC_POLICY_0: AEM_SYNC_POLICY_SIG3_SEL Position */
#define LL_FUNC_REG_AEM_SYNC_POLICY_0_AEM_SYNC_POLICY_SIG3_SEL_Msk (0x3fUL << LL_FUNC_REG_AEM_SYNC_POLICY_0_AEM_SYNC_POLICY_SIG3_SEL_Pos)/*!< LL_FUNC_REG AEM_SYNC_POLICY_0: AEM_SYNC_POLICY_SIG3_SEL Mask */
#define LL_FUNC_REG_AEM_SYNC_POLICY_0_AEM_SYNC_POLICY_MANUAL_VALUE_Pos 30                             /*!< LL_FUNC_REG AEM_SYNC_POLICY_0: AEM_SYNC_POLICY_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_FUNC_REG_AEM_SYNC_POLICY_0_AEM_SYNC_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_AEM_SYNC_POLICY_0_AEM_SYNC_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG AEM_SYNC_POLICY_0: AEM_SYNC_POLICY_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AEM_SYNC_POLICY_0_AEM_SYNC_POLICY_MANUAL_EN_Pos 31                                /*!< LL_FUNC_REG AEM_SYNC_POLICY_0: AEM_SYNC_POLICY_MANUAL_EN Position */
#define LL_FUNC_REG_AEM_SYNC_POLICY_0_AEM_SYNC_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_AEM_SYNC_POLICY_0_AEM_SYNC_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG AEM_SYNC_POLICY_0: AEM_SYNC_POLICY_MANUAL_EN Mask */

/* ------------------------  LL_FUNC_REG_AEM_SYNC_POLICY_1  ----------------------- */
#define LL_FUNC_REG_AEM_SYNC_POLICY_1_AEM_SYNC_POLICY_W1C_Pos 0                                       /*!< LL_FUNC_REG AEM_SYNC_POLICY_1: AEM_SYNC_POLICY_W1C Position */
#define LL_FUNC_REG_AEM_SYNC_POLICY_1_AEM_SYNC_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_AEM_SYNC_POLICY_1_AEM_SYNC_POLICY_W1C_Pos)/*!< LL_FUNC_REG AEM_SYNC_POLICY_1: AEM_SYNC_POLICY_W1C Mask */
#define LL_FUNC_REG_AEM_SYNC_POLICY_1_AEM_SYNC_POLICY_W1S_Pos 1                                       /*!< LL_FUNC_REG AEM_SYNC_POLICY_1: AEM_SYNC_POLICY_W1S Position */
#define LL_FUNC_REG_AEM_SYNC_POLICY_1_AEM_SYNC_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_AEM_SYNC_POLICY_1_AEM_SYNC_POLICY_W1S_Pos)/*!< LL_FUNC_REG AEM_SYNC_POLICY_1: AEM_SYNC_POLICY_W1S Mask */

/* ------------------------  LL_FUNC_REG_AEM_SYNC_POLICY_2  ----------------------- */
#define LL_FUNC_REG_AEM_SYNC_POLICY_2_AEM_SYNC_POLICY_Pos 0                                           /*!< LL_FUNC_REG AEM_SYNC_POLICY_2: AEM_SYNC_POLICY Position */
#define LL_FUNC_REG_AEM_SYNC_POLICY_2_AEM_SYNC_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_AEM_SYNC_POLICY_2_AEM_SYNC_POLICY_Pos)/*!< LL_FUNC_REG AEM_SYNC_POLICY_2: AEM_SYNC_POLICY Mask */

/* ----------------------  LL_FUNC_REG_RF_LONG_CALI_POLICY_0  --------------------- */
#define LL_FUNC_REG_RF_LONG_CALI_POLICY_0_RF_LONG_CALI_POLICY_SIG0_SEL_Pos 0                          /*!< LL_FUNC_REG RF_LONG_CALI_POLICY_0: RF_LONG_CALI_POLICY_SIG0_SEL
                                                         Position                                                                                  */
#define LL_FUNC_REG_RF_LONG_CALI_POLICY_0_RF_LONG_CALI_POLICY_SIG0_SEL_Msk (0x3fUL << LL_FUNC_REG_RF_LONG_CALI_POLICY_0_RF_LONG_CALI_POLICY_SIG0_SEL_Pos)/*!< LL_FUNC_REG RF_LONG_CALI_POLICY_0: RF_LONG_CALI_POLICY_SIG0_SEL
                                                         Mask                                                                                      */
#define LL_FUNC_REG_RF_LONG_CALI_POLICY_0_RF_LONG_CALI_POLICY_SIG1_SEL_Pos 8                          /*!< LL_FUNC_REG RF_LONG_CALI_POLICY_0: RF_LONG_CALI_POLICY_SIG1_SEL
                                                         Position                                                                                  */
#define LL_FUNC_REG_RF_LONG_CALI_POLICY_0_RF_LONG_CALI_POLICY_SIG1_SEL_Msk (0x3fUL << LL_FUNC_REG_RF_LONG_CALI_POLICY_0_RF_LONG_CALI_POLICY_SIG1_SEL_Pos)/*!< LL_FUNC_REG RF_LONG_CALI_POLICY_0: RF_LONG_CALI_POLICY_SIG1_SEL
                                                         Mask                                                                                      */
#define LL_FUNC_REG_RF_LONG_CALI_POLICY_0_RF_LONG_CALI_POLICY_SIG2_SEL_Pos 16                         /*!< LL_FUNC_REG RF_LONG_CALI_POLICY_0: RF_LONG_CALI_POLICY_SIG2_SEL
                                                         Position                                                                                  */
#define LL_FUNC_REG_RF_LONG_CALI_POLICY_0_RF_LONG_CALI_POLICY_SIG2_SEL_Msk (0x3fUL << LL_FUNC_REG_RF_LONG_CALI_POLICY_0_RF_LONG_CALI_POLICY_SIG2_SEL_Pos)/*!< LL_FUNC_REG RF_LONG_CALI_POLICY_0: RF_LONG_CALI_POLICY_SIG2_SEL
                                                         Mask                                                                                      */
#define LL_FUNC_REG_RF_LONG_CALI_POLICY_0_RF_LONG_CALI_POLICY_SIG3_SEL_Pos 24                         /*!< LL_FUNC_REG RF_LONG_CALI_POLICY_0: RF_LONG_CALI_POLICY_SIG3_SEL
                                                         Position                                                                                  */
#define LL_FUNC_REG_RF_LONG_CALI_POLICY_0_RF_LONG_CALI_POLICY_SIG3_SEL_Msk (0x3fUL << LL_FUNC_REG_RF_LONG_CALI_POLICY_0_RF_LONG_CALI_POLICY_SIG3_SEL_Pos)/*!< LL_FUNC_REG RF_LONG_CALI_POLICY_0: RF_LONG_CALI_POLICY_SIG3_SEL
                                                         Mask                                                                                      */
#define LL_FUNC_REG_RF_LONG_CALI_POLICY_0_RF_LONG_CALI_POLICY_MANUAL_VALUE_Pos 30                     /*!< LL_FUNC_REG RF_LONG_CALI_POLICY_0: RF_LONG_CALI_POLICY_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_FUNC_REG_RF_LONG_CALI_POLICY_0_RF_LONG_CALI_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_RF_LONG_CALI_POLICY_0_RF_LONG_CALI_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG RF_LONG_CALI_POLICY_0: RF_LONG_CALI_POLICY_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_FUNC_REG_RF_LONG_CALI_POLICY_0_RF_LONG_CALI_POLICY_MANUAL_EN_Pos 31                        /*!< LL_FUNC_REG RF_LONG_CALI_POLICY_0: RF_LONG_CALI_POLICY_MANUAL_EN
                                                         Position                                                                                  */
#define LL_FUNC_REG_RF_LONG_CALI_POLICY_0_RF_LONG_CALI_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_RF_LONG_CALI_POLICY_0_RF_LONG_CALI_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG RF_LONG_CALI_POLICY_0: RF_LONG_CALI_POLICY_MANUAL_EN
                                                         Mask                                                                                      */

/* ----------------------  LL_FUNC_REG_RF_LONG_CALI_POLICY_1  --------------------- */
#define LL_FUNC_REG_RF_LONG_CALI_POLICY_1_RF_LONG_CALI_POLICY_W1C_Pos 0                               /*!< LL_FUNC_REG RF_LONG_CALI_POLICY_1: RF_LONG_CALI_POLICY_W1C Position */
#define LL_FUNC_REG_RF_LONG_CALI_POLICY_1_RF_LONG_CALI_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_RF_LONG_CALI_POLICY_1_RF_LONG_CALI_POLICY_W1C_Pos)/*!< LL_FUNC_REG RF_LONG_CALI_POLICY_1: RF_LONG_CALI_POLICY_W1C Mask */
#define LL_FUNC_REG_RF_LONG_CALI_POLICY_1_RF_LONG_CALI_POLICY_W1S_Pos 1                               /*!< LL_FUNC_REG RF_LONG_CALI_POLICY_1: RF_LONG_CALI_POLICY_W1S Position */
#define LL_FUNC_REG_RF_LONG_CALI_POLICY_1_RF_LONG_CALI_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_RF_LONG_CALI_POLICY_1_RF_LONG_CALI_POLICY_W1S_Pos)/*!< LL_FUNC_REG RF_LONG_CALI_POLICY_1: RF_LONG_CALI_POLICY_W1S Mask */

/* ----------------------  LL_FUNC_REG_RF_LONG_CALI_POLICY_2  --------------------- */
#define LL_FUNC_REG_RF_LONG_CALI_POLICY_2_RF_LONG_CALI_POLICY_Pos 0                                   /*!< LL_FUNC_REG RF_LONG_CALI_POLICY_2: RF_LONG_CALI_POLICY Position */
#define LL_FUNC_REG_RF_LONG_CALI_POLICY_2_RF_LONG_CALI_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_RF_LONG_CALI_POLICY_2_RF_LONG_CALI_POLICY_Pos)/*!< LL_FUNC_REG RF_LONG_CALI_POLICY_2: RF_LONG_CALI_POLICY Mask */

/* -----------------------  LL_FUNC_REG_RX_TIMEOUT_POLICY_0  ---------------------- */
#define LL_FUNC_REG_RX_TIMEOUT_POLICY_0_RX_TIMEOUT_POLICY_SIG0_SEL_Pos 0                              /*!< LL_FUNC_REG RX_TIMEOUT_POLICY_0: RX_TIMEOUT_POLICY_SIG0_SEL
                                                         Position                                                                                  */
#define LL_FUNC_REG_RX_TIMEOUT_POLICY_0_RX_TIMEOUT_POLICY_SIG0_SEL_Msk (0x3fUL << LL_FUNC_REG_RX_TIMEOUT_POLICY_0_RX_TIMEOUT_POLICY_SIG0_SEL_Pos)/*!< LL_FUNC_REG RX_TIMEOUT_POLICY_0: RX_TIMEOUT_POLICY_SIG0_SEL
                                                         Mask                                                                                      */
#define LL_FUNC_REG_RX_TIMEOUT_POLICY_0_RX_TIMEOUT_POLICY_SIG1_SEL_Pos 8                              /*!< LL_FUNC_REG RX_TIMEOUT_POLICY_0: RX_TIMEOUT_POLICY_SIG1_SEL
                                                         Position                                                                                  */
#define LL_FUNC_REG_RX_TIMEOUT_POLICY_0_RX_TIMEOUT_POLICY_SIG1_SEL_Msk (0x3fUL << LL_FUNC_REG_RX_TIMEOUT_POLICY_0_RX_TIMEOUT_POLICY_SIG1_SEL_Pos)/*!< LL_FUNC_REG RX_TIMEOUT_POLICY_0: RX_TIMEOUT_POLICY_SIG1_SEL
                                                         Mask                                                                                      */
#define LL_FUNC_REG_RX_TIMEOUT_POLICY_0_RX_TIMEOUT_POLICY_SIG2_SEL_Pos 16                             /*!< LL_FUNC_REG RX_TIMEOUT_POLICY_0: RX_TIMEOUT_POLICY_SIG2_SEL
                                                         Position                                                                                  */
#define LL_FUNC_REG_RX_TIMEOUT_POLICY_0_RX_TIMEOUT_POLICY_SIG2_SEL_Msk (0x3fUL << LL_FUNC_REG_RX_TIMEOUT_POLICY_0_RX_TIMEOUT_POLICY_SIG2_SEL_Pos)/*!< LL_FUNC_REG RX_TIMEOUT_POLICY_0: RX_TIMEOUT_POLICY_SIG2_SEL
                                                         Mask                                                                                      */
#define LL_FUNC_REG_RX_TIMEOUT_POLICY_0_RX_TIMEOUT_POLICY_SIG3_SEL_Pos 24                             /*!< LL_FUNC_REG RX_TIMEOUT_POLICY_0: RX_TIMEOUT_POLICY_SIG3_SEL
                                                         Position                                                                                  */
#define LL_FUNC_REG_RX_TIMEOUT_POLICY_0_RX_TIMEOUT_POLICY_SIG3_SEL_Msk (0x3fUL << LL_FUNC_REG_RX_TIMEOUT_POLICY_0_RX_TIMEOUT_POLICY_SIG3_SEL_Pos)/*!< LL_FUNC_REG RX_TIMEOUT_POLICY_0: RX_TIMEOUT_POLICY_SIG3_SEL
                                                         Mask                                                                                      */
#define LL_FUNC_REG_RX_TIMEOUT_POLICY_0_RX_TIMEOUT_POLICY_MANUAL_VALUE_Pos 30                         /*!< LL_FUNC_REG RX_TIMEOUT_POLICY_0: RX_TIMEOUT_POLICY_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_FUNC_REG_RX_TIMEOUT_POLICY_0_RX_TIMEOUT_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_RX_TIMEOUT_POLICY_0_RX_TIMEOUT_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG RX_TIMEOUT_POLICY_0: RX_TIMEOUT_POLICY_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_FUNC_REG_RX_TIMEOUT_POLICY_0_RX_TIMEOUT_POLICY_MANUAL_EN_Pos 31                            /*!< LL_FUNC_REG RX_TIMEOUT_POLICY_0: RX_TIMEOUT_POLICY_MANUAL_EN
                                                         Position                                                                                  */
#define LL_FUNC_REG_RX_TIMEOUT_POLICY_0_RX_TIMEOUT_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_RX_TIMEOUT_POLICY_0_RX_TIMEOUT_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG RX_TIMEOUT_POLICY_0: RX_TIMEOUT_POLICY_MANUAL_EN
                                                         Mask                                                                                      */

/* -----------------------  LL_FUNC_REG_RX_TIMEOUT_POLICY_1  ---------------------- */
#define LL_FUNC_REG_RX_TIMEOUT_POLICY_1_RX_TIMEOUT_POLICY_W1C_Pos 0                                   /*!< LL_FUNC_REG RX_TIMEOUT_POLICY_1: RX_TIMEOUT_POLICY_W1C Position */
#define LL_FUNC_REG_RX_TIMEOUT_POLICY_1_RX_TIMEOUT_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_RX_TIMEOUT_POLICY_1_RX_TIMEOUT_POLICY_W1C_Pos)/*!< LL_FUNC_REG RX_TIMEOUT_POLICY_1: RX_TIMEOUT_POLICY_W1C Mask */
#define LL_FUNC_REG_RX_TIMEOUT_POLICY_1_RX_TIMEOUT_POLICY_W1S_Pos 1                                   /*!< LL_FUNC_REG RX_TIMEOUT_POLICY_1: RX_TIMEOUT_POLICY_W1S Position */
#define LL_FUNC_REG_RX_TIMEOUT_POLICY_1_RX_TIMEOUT_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_RX_TIMEOUT_POLICY_1_RX_TIMEOUT_POLICY_W1S_Pos)/*!< LL_FUNC_REG RX_TIMEOUT_POLICY_1: RX_TIMEOUT_POLICY_W1S Mask */

/* -----------------------  LL_FUNC_REG_RX_TIMEOUT_POLICY_2  ---------------------- */
#define LL_FUNC_REG_RX_TIMEOUT_POLICY_2_RX_TIMEOUT_POLICY_Pos 0                                       /*!< LL_FUNC_REG RX_TIMEOUT_POLICY_2: RX_TIMEOUT_POLICY Position */
#define LL_FUNC_REG_RX_TIMEOUT_POLICY_2_RX_TIMEOUT_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_RX_TIMEOUT_POLICY_2_RX_TIMEOUT_POLICY_Pos)/*!< LL_FUNC_REG RX_TIMEOUT_POLICY_2: RX_TIMEOUT_POLICY Mask */

/* ----------------------  LL_FUNC_REG_AIR_EVNT_IP_POLICY_0  ---------------------- */
#define LL_FUNC_REG_AIR_EVNT_IP_POLICY_0_AIR_EVENT_IP_POLICY_SIG0_SEL_Pos 0                           /*!< LL_FUNC_REG AIR_EVNT_IP_POLICY_0: AIR_EVENT_IP_POLICY_SIG0_SEL
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIR_EVNT_IP_POLICY_0_AIR_EVENT_IP_POLICY_SIG0_SEL_Msk (0x3fUL << LL_FUNC_REG_AIR_EVNT_IP_POLICY_0_AIR_EVENT_IP_POLICY_SIG0_SEL_Pos)/*!< LL_FUNC_REG AIR_EVNT_IP_POLICY_0: AIR_EVENT_IP_POLICY_SIG0_SEL
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIR_EVNT_IP_POLICY_0_AIR_EVENT_IP_POLICY_SIG1_SEL_Pos 8                           /*!< LL_FUNC_REG AIR_EVNT_IP_POLICY_0: AIR_EVENT_IP_POLICY_SIG1_SEL
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIR_EVNT_IP_POLICY_0_AIR_EVENT_IP_POLICY_SIG1_SEL_Msk (0x3fUL << LL_FUNC_REG_AIR_EVNT_IP_POLICY_0_AIR_EVENT_IP_POLICY_SIG1_SEL_Pos)/*!< LL_FUNC_REG AIR_EVNT_IP_POLICY_0: AIR_EVENT_IP_POLICY_SIG1_SEL
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIR_EVNT_IP_POLICY_0_AIR_EVENT_IP_POLICY_SIG2_SEL_Pos 16                          /*!< LL_FUNC_REG AIR_EVNT_IP_POLICY_0: AIR_EVENT_IP_POLICY_SIG2_SEL
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIR_EVNT_IP_POLICY_0_AIR_EVENT_IP_POLICY_SIG2_SEL_Msk (0x3fUL << LL_FUNC_REG_AIR_EVNT_IP_POLICY_0_AIR_EVENT_IP_POLICY_SIG2_SEL_Pos)/*!< LL_FUNC_REG AIR_EVNT_IP_POLICY_0: AIR_EVENT_IP_POLICY_SIG2_SEL
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIR_EVNT_IP_POLICY_0_AIR_EVENT_IP_POLICY_SIG3_SEL_Pos 24                          /*!< LL_FUNC_REG AIR_EVNT_IP_POLICY_0: AIR_EVENT_IP_POLICY_SIG3_SEL
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIR_EVNT_IP_POLICY_0_AIR_EVENT_IP_POLICY_SIG3_SEL_Msk (0x3fUL << LL_FUNC_REG_AIR_EVNT_IP_POLICY_0_AIR_EVENT_IP_POLICY_SIG3_SEL_Pos)/*!< LL_FUNC_REG AIR_EVNT_IP_POLICY_0: AIR_EVENT_IP_POLICY_SIG3_SEL
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIR_EVNT_IP_POLICY_0_AIR_EVENT_IP_POLICY_MANUAL_VALUE_Pos 30                      /*!< LL_FUNC_REG AIR_EVNT_IP_POLICY_0: AIR_EVENT_IP_POLICY_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIR_EVNT_IP_POLICY_0_AIR_EVENT_IP_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_AIR_EVNT_IP_POLICY_0_AIR_EVENT_IP_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG AIR_EVNT_IP_POLICY_0: AIR_EVENT_IP_POLICY_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIR_EVNT_IP_POLICY_0_AIR_EVENT_IP_POLICY_MANUAL_EN_Pos 31                         /*!< LL_FUNC_REG AIR_EVNT_IP_POLICY_0: AIR_EVENT_IP_POLICY_MANUAL_EN
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIR_EVNT_IP_POLICY_0_AIR_EVENT_IP_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_AIR_EVNT_IP_POLICY_0_AIR_EVENT_IP_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG AIR_EVNT_IP_POLICY_0: AIR_EVENT_IP_POLICY_MANUAL_EN
                                                         Mask                                                                                      */

/* ----------------------  LL_FUNC_REG_AIR_EVNT_IP_POLICY_1  ---------------------- */
#define LL_FUNC_REG_AIR_EVNT_IP_POLICY_1_AIR_EVENT_IP_POLICY_W1C_Pos 0                                /*!< LL_FUNC_REG AIR_EVNT_IP_POLICY_1: AIR_EVENT_IP_POLICY_W1C Position */
#define LL_FUNC_REG_AIR_EVNT_IP_POLICY_1_AIR_EVENT_IP_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_AIR_EVNT_IP_POLICY_1_AIR_EVENT_IP_POLICY_W1C_Pos)/*!< LL_FUNC_REG AIR_EVNT_IP_POLICY_1: AIR_EVENT_IP_POLICY_W1C Mask */
#define LL_FUNC_REG_AIR_EVNT_IP_POLICY_1_AIR_EVENT_IP_POLICY_W1S_Pos 1                                /*!< LL_FUNC_REG AIR_EVNT_IP_POLICY_1: AIR_EVENT_IP_POLICY_W1S Position */
#define LL_FUNC_REG_AIR_EVNT_IP_POLICY_1_AIR_EVENT_IP_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_AIR_EVNT_IP_POLICY_1_AIR_EVENT_IP_POLICY_W1S_Pos)/*!< LL_FUNC_REG AIR_EVNT_IP_POLICY_1: AIR_EVENT_IP_POLICY_W1S Mask */

/* ----------------------  LL_FUNC_REG_AIR_EVNT_IP_POLICY_2  ---------------------- */
#define LL_FUNC_REG_AIR_EVNT_IP_POLICY_2_AIR_EVENT_IP_POLICY_Pos 0                                    /*!< LL_FUNC_REG AIR_EVNT_IP_POLICY_2: AIR_EVENT_IP_POLICY Position */
#define LL_FUNC_REG_AIR_EVNT_IP_POLICY_2_AIR_EVENT_IP_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_AIR_EVNT_IP_POLICY_2_AIR_EVENT_IP_POLICY_Pos)/*!< LL_FUNC_REG AIR_EVNT_IP_POLICY_2: AIR_EVENT_IP_POLICY Mask */

/* ------------------------  LL_FUNC_REG_HARD_END_POLICY_0  ----------------------- */
#define LL_FUNC_REG_HARD_END_POLICY_0_HARD_END_POLICY_SIG0_SEL_Pos 0                                  /*!< LL_FUNC_REG HARD_END_POLICY_0: HARD_END_POLICY_SIG0_SEL Position */
#define LL_FUNC_REG_HARD_END_POLICY_0_HARD_END_POLICY_SIG0_SEL_Msk (0x3fUL << LL_FUNC_REG_HARD_END_POLICY_0_HARD_END_POLICY_SIG0_SEL_Pos)/*!< LL_FUNC_REG HARD_END_POLICY_0: HARD_END_POLICY_SIG0_SEL Mask */
#define LL_FUNC_REG_HARD_END_POLICY_0_HARD_END_POLICY_SIG1_SEL_Pos 8                                  /*!< LL_FUNC_REG HARD_END_POLICY_0: HARD_END_POLICY_SIG1_SEL Position */
#define LL_FUNC_REG_HARD_END_POLICY_0_HARD_END_POLICY_SIG1_SEL_Msk (0x3fUL << LL_FUNC_REG_HARD_END_POLICY_0_HARD_END_POLICY_SIG1_SEL_Pos)/*!< LL_FUNC_REG HARD_END_POLICY_0: HARD_END_POLICY_SIG1_SEL Mask */
#define LL_FUNC_REG_HARD_END_POLICY_0_HARD_END_POLICY_SIG2_SEL_Pos 16                                 /*!< LL_FUNC_REG HARD_END_POLICY_0: HARD_END_POLICY_SIG2_SEL Position */
#define LL_FUNC_REG_HARD_END_POLICY_0_HARD_END_POLICY_SIG2_SEL_Msk (0x3fUL << LL_FUNC_REG_HARD_END_POLICY_0_HARD_END_POLICY_SIG2_SEL_Pos)/*!< LL_FUNC_REG HARD_END_POLICY_0: HARD_END_POLICY_SIG2_SEL Mask */
#define LL_FUNC_REG_HARD_END_POLICY_0_HARD_END_POLICY_SIG3_SEL_Pos 24                                 /*!< LL_FUNC_REG HARD_END_POLICY_0: HARD_END_POLICY_SIG3_SEL Position */
#define LL_FUNC_REG_HARD_END_POLICY_0_HARD_END_POLICY_SIG3_SEL_Msk (0x3fUL << LL_FUNC_REG_HARD_END_POLICY_0_HARD_END_POLICY_SIG3_SEL_Pos)/*!< LL_FUNC_REG HARD_END_POLICY_0: HARD_END_POLICY_SIG3_SEL Mask */
#define LL_FUNC_REG_HARD_END_POLICY_0_HARD_END_POLICY_MANUAL_VALUE_Pos 30                             /*!< LL_FUNC_REG HARD_END_POLICY_0: HARD_END_POLICY_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_FUNC_REG_HARD_END_POLICY_0_HARD_END_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_HARD_END_POLICY_0_HARD_END_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG HARD_END_POLICY_0: HARD_END_POLICY_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_FUNC_REG_HARD_END_POLICY_0_HARD_END_POLICY_MANUAL_EN_Pos 31                                /*!< LL_FUNC_REG HARD_END_POLICY_0: HARD_END_POLICY_MANUAL_EN Position */
#define LL_FUNC_REG_HARD_END_POLICY_0_HARD_END_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_HARD_END_POLICY_0_HARD_END_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG HARD_END_POLICY_0: HARD_END_POLICY_MANUAL_EN Mask */

/* ------------------------  LL_FUNC_REG_HARD_END_POLICY_1  ----------------------- */
#define LL_FUNC_REG_HARD_END_POLICY_1_HARD_END_POLICY_W1C_Pos 0                                       /*!< LL_FUNC_REG HARD_END_POLICY_1: HARD_END_POLICY_W1C Position */
#define LL_FUNC_REG_HARD_END_POLICY_1_HARD_END_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_HARD_END_POLICY_1_HARD_END_POLICY_W1C_Pos)/*!< LL_FUNC_REG HARD_END_POLICY_1: HARD_END_POLICY_W1C Mask */
#define LL_FUNC_REG_HARD_END_POLICY_1_HARD_END_POLICY_W1S_Pos 1                                       /*!< LL_FUNC_REG HARD_END_POLICY_1: HARD_END_POLICY_W1S Position */
#define LL_FUNC_REG_HARD_END_POLICY_1_HARD_END_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_HARD_END_POLICY_1_HARD_END_POLICY_W1S_Pos)/*!< LL_FUNC_REG HARD_END_POLICY_1: HARD_END_POLICY_W1S Mask */

/* ------------------------  LL_FUNC_REG_HARD_END_POLICY_2  ----------------------- */
#define LL_FUNC_REG_HARD_END_POLICY_2_HARD_END_POLICY_Pos 0                                           /*!< LL_FUNC_REG HARD_END_POLICY_2: HARD_END_POLICY Position */
#define LL_FUNC_REG_HARD_END_POLICY_2_HARD_END_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_HARD_END_POLICY_2_HARD_END_POLICY_Pos)/*!< LL_FUNC_REG HARD_END_POLICY_2: HARD_END_POLICY Mask */

/* ---------------------  LL_FUNC_REG_DATA_SOFT_END_POLICY_0  --------------------- */
#define LL_FUNC_REG_DATA_SOFT_END_POLICY_0_DATA_SOFT_END_POLICY_SIG0_SEL_Pos 0                        /*!< LL_FUNC_REG DATA_SOFT_END_POLICY_0: DATA_SOFT_END_POLICY_SIG0_SEL
                                                         Position                                                                                  */
#define LL_FUNC_REG_DATA_SOFT_END_POLICY_0_DATA_SOFT_END_POLICY_SIG0_SEL_Msk (0x3fUL << LL_FUNC_REG_DATA_SOFT_END_POLICY_0_DATA_SOFT_END_POLICY_SIG0_SEL_Pos)/*!< LL_FUNC_REG DATA_SOFT_END_POLICY_0: DATA_SOFT_END_POLICY_SIG0_SEL
                                                         Mask                                                                                      */
#define LL_FUNC_REG_DATA_SOFT_END_POLICY_0_DATA_SOFT_END_POLICY_SIG1_SEL_Pos 8                        /*!< LL_FUNC_REG DATA_SOFT_END_POLICY_0: DATA_SOFT_END_POLICY_SIG1_SEL
                                                         Position                                                                                  */
#define LL_FUNC_REG_DATA_SOFT_END_POLICY_0_DATA_SOFT_END_POLICY_SIG1_SEL_Msk (0x3fUL << LL_FUNC_REG_DATA_SOFT_END_POLICY_0_DATA_SOFT_END_POLICY_SIG1_SEL_Pos)/*!< LL_FUNC_REG DATA_SOFT_END_POLICY_0: DATA_SOFT_END_POLICY_SIG1_SEL
                                                         Mask                                                                                      */
#define LL_FUNC_REG_DATA_SOFT_END_POLICY_0_DATA_SOFT_END_POLICY_SIG2_SEL_Pos 16                       /*!< LL_FUNC_REG DATA_SOFT_END_POLICY_0: DATA_SOFT_END_POLICY_SIG2_SEL
                                                         Position                                                                                  */
#define LL_FUNC_REG_DATA_SOFT_END_POLICY_0_DATA_SOFT_END_POLICY_SIG2_SEL_Msk (0x3fUL << LL_FUNC_REG_DATA_SOFT_END_POLICY_0_DATA_SOFT_END_POLICY_SIG2_SEL_Pos)/*!< LL_FUNC_REG DATA_SOFT_END_POLICY_0: DATA_SOFT_END_POLICY_SIG2_SEL
                                                         Mask                                                                                      */
#define LL_FUNC_REG_DATA_SOFT_END_POLICY_0_DATA_SOFT_END_POLICY_SIG3_SEL_Pos 24                       /*!< LL_FUNC_REG DATA_SOFT_END_POLICY_0: DATA_SOFT_END_POLICY_SIG3_SEL
                                                         Position                                                                                  */
#define LL_FUNC_REG_DATA_SOFT_END_POLICY_0_DATA_SOFT_END_POLICY_SIG3_SEL_Msk (0x3fUL << LL_FUNC_REG_DATA_SOFT_END_POLICY_0_DATA_SOFT_END_POLICY_SIG3_SEL_Pos)/*!< LL_FUNC_REG DATA_SOFT_END_POLICY_0: DATA_SOFT_END_POLICY_SIG3_SEL
                                                         Mask                                                                                      */
#define LL_FUNC_REG_DATA_SOFT_END_POLICY_0_DATA_SOFT_END_POLICY_MANUAL_VALUE_Pos 30                   /*!< LL_FUNC_REG DATA_SOFT_END_POLICY_0: DATA_SOFT_END_POLICY_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_FUNC_REG_DATA_SOFT_END_POLICY_0_DATA_SOFT_END_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_DATA_SOFT_END_POLICY_0_DATA_SOFT_END_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG DATA_SOFT_END_POLICY_0: DATA_SOFT_END_POLICY_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_FUNC_REG_DATA_SOFT_END_POLICY_0_DATA_SOFT_END_POLICY_MANUAL_EN_Pos 31                      /*!< LL_FUNC_REG DATA_SOFT_END_POLICY_0: DATA_SOFT_END_POLICY_MANUAL_EN
                                                         Position                                                                                  */
#define LL_FUNC_REG_DATA_SOFT_END_POLICY_0_DATA_SOFT_END_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_DATA_SOFT_END_POLICY_0_DATA_SOFT_END_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG DATA_SOFT_END_POLICY_0: DATA_SOFT_END_POLICY_MANUAL_EN
                                                         Mask                                                                                      */

/* ---------------------  LL_FUNC_REG_DATA_SOFT_END_POLICY_1  --------------------- */
#define LL_FUNC_REG_DATA_SOFT_END_POLICY_1_DATA_SOFT_END_POLICY_W1C_Pos 0                             /*!< LL_FUNC_REG DATA_SOFT_END_POLICY_1: DATA_SOFT_END_POLICY_W1C
                                                         Position                                                                                  */
#define LL_FUNC_REG_DATA_SOFT_END_POLICY_1_DATA_SOFT_END_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_DATA_SOFT_END_POLICY_1_DATA_SOFT_END_POLICY_W1C_Pos)/*!< LL_FUNC_REG DATA_SOFT_END_POLICY_1: DATA_SOFT_END_POLICY_W1C
                                                         Mask                                                                                      */
#define LL_FUNC_REG_DATA_SOFT_END_POLICY_1_DATA_SOFT_END_POLICY_W1S_Pos 1                             /*!< LL_FUNC_REG DATA_SOFT_END_POLICY_1: DATA_SOFT_END_POLICY_W1S
                                                         Position                                                                                  */
#define LL_FUNC_REG_DATA_SOFT_END_POLICY_1_DATA_SOFT_END_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_DATA_SOFT_END_POLICY_1_DATA_SOFT_END_POLICY_W1S_Pos)/*!< LL_FUNC_REG DATA_SOFT_END_POLICY_1: DATA_SOFT_END_POLICY_W1S
                                                         Mask                                                                                      */

/* ---------------------  LL_FUNC_REG_DATA_SOFT_END_POLICY_2  --------------------- */
#define LL_FUNC_REG_DATA_SOFT_END_POLICY_2_DATA_SOFT_END_POLICY_Pos 0                                 /*!< LL_FUNC_REG DATA_SOFT_END_POLICY_2: DATA_SOFT_END_POLICY Position */
#define LL_FUNC_REG_DATA_SOFT_END_POLICY_2_DATA_SOFT_END_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_DATA_SOFT_END_POLICY_2_DATA_SOFT_END_POLICY_Pos)/*!< LL_FUNC_REG DATA_SOFT_END_POLICY_2: DATA_SOFT_END_POLICY Mask */

/* -------------------------  LL_FUNC_REG_TX_REQ_POLICY_0  ------------------------ */
#define LL_FUNC_REG_TX_REQ_POLICY_0_TX_REQ_POLICY_SIG0_SEL_Pos 0                                      /*!< LL_FUNC_REG TX_REQ_POLICY_0: TX_REQ_POLICY_SIG0_SEL Position */
#define LL_FUNC_REG_TX_REQ_POLICY_0_TX_REQ_POLICY_SIG0_SEL_Msk (0x3fUL << LL_FUNC_REG_TX_REQ_POLICY_0_TX_REQ_POLICY_SIG0_SEL_Pos)/*!< LL_FUNC_REG TX_REQ_POLICY_0: TX_REQ_POLICY_SIG0_SEL Mask */
#define LL_FUNC_REG_TX_REQ_POLICY_0_TX_REQ_POLICY_SIG1_SEL_Pos 8                                      /*!< LL_FUNC_REG TX_REQ_POLICY_0: TX_REQ_POLICY_SIG1_SEL Position */
#define LL_FUNC_REG_TX_REQ_POLICY_0_TX_REQ_POLICY_SIG1_SEL_Msk (0x3fUL << LL_FUNC_REG_TX_REQ_POLICY_0_TX_REQ_POLICY_SIG1_SEL_Pos)/*!< LL_FUNC_REG TX_REQ_POLICY_0: TX_REQ_POLICY_SIG1_SEL Mask */
#define LL_FUNC_REG_TX_REQ_POLICY_0_TX_REQ_POLICY_SIG2_SEL_Pos 16                                     /*!< LL_FUNC_REG TX_REQ_POLICY_0: TX_REQ_POLICY_SIG2_SEL Position */
#define LL_FUNC_REG_TX_REQ_POLICY_0_TX_REQ_POLICY_SIG2_SEL_Msk (0x3fUL << LL_FUNC_REG_TX_REQ_POLICY_0_TX_REQ_POLICY_SIG2_SEL_Pos)/*!< LL_FUNC_REG TX_REQ_POLICY_0: TX_REQ_POLICY_SIG2_SEL Mask */
#define LL_FUNC_REG_TX_REQ_POLICY_0_TX_REQ_POLICY_SIG3_SEL_Pos 24                                     /*!< LL_FUNC_REG TX_REQ_POLICY_0: TX_REQ_POLICY_SIG3_SEL Position */
#define LL_FUNC_REG_TX_REQ_POLICY_0_TX_REQ_POLICY_SIG3_SEL_Msk (0x3fUL << LL_FUNC_REG_TX_REQ_POLICY_0_TX_REQ_POLICY_SIG3_SEL_Pos)/*!< LL_FUNC_REG TX_REQ_POLICY_0: TX_REQ_POLICY_SIG3_SEL Mask */
#define LL_FUNC_REG_TX_REQ_POLICY_0_TX_REQ_POLICY_MANUAL_VALUE_Pos 30                                 /*!< LL_FUNC_REG TX_REQ_POLICY_0: TX_REQ_POLICY_MANUAL_VALUE Position */
#define LL_FUNC_REG_TX_REQ_POLICY_0_TX_REQ_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_TX_REQ_POLICY_0_TX_REQ_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG TX_REQ_POLICY_0: TX_REQ_POLICY_MANUAL_VALUE Mask */
#define LL_FUNC_REG_TX_REQ_POLICY_0_TX_REQ_POLICY_MANUAL_EN_Pos 31                                    /*!< LL_FUNC_REG TX_REQ_POLICY_0: TX_REQ_POLICY_MANUAL_EN Position */
#define LL_FUNC_REG_TX_REQ_POLICY_0_TX_REQ_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_TX_REQ_POLICY_0_TX_REQ_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG TX_REQ_POLICY_0: TX_REQ_POLICY_MANUAL_EN Mask */

/* -------------------------  LL_FUNC_REG_TX_REQ_POLICY_1  ------------------------ */
#define LL_FUNC_REG_TX_REQ_POLICY_1_TX_REQ_POLICY_W1C_Pos 0                                           /*!< LL_FUNC_REG TX_REQ_POLICY_1: TX_REQ_POLICY_W1C Position */
#define LL_FUNC_REG_TX_REQ_POLICY_1_TX_REQ_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_TX_REQ_POLICY_1_TX_REQ_POLICY_W1C_Pos)/*!< LL_FUNC_REG TX_REQ_POLICY_1: TX_REQ_POLICY_W1C Mask */
#define LL_FUNC_REG_TX_REQ_POLICY_1_TX_REQ_POLICY_W1S_Pos 1                                           /*!< LL_FUNC_REG TX_REQ_POLICY_1: TX_REQ_POLICY_W1S Position */
#define LL_FUNC_REG_TX_REQ_POLICY_1_TX_REQ_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_TX_REQ_POLICY_1_TX_REQ_POLICY_W1S_Pos)/*!< LL_FUNC_REG TX_REQ_POLICY_1: TX_REQ_POLICY_W1S Mask */

/* -------------------------  LL_FUNC_REG_TX_REQ_POLICY_2  ------------------------ */
#define LL_FUNC_REG_TX_REQ_POLICY_2_TX_REQ_POLICY_Pos 0                                               /*!< LL_FUNC_REG TX_REQ_POLICY_2: TX_REQ_POLICY Position */
#define LL_FUNC_REG_TX_REQ_POLICY_2_TX_REQ_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_TX_REQ_POLICY_2_TX_REQ_POLICY_Pos)/*!< LL_FUNC_REG TX_REQ_POLICY_2: TX_REQ_POLICY Mask */

/* -------------------------  LL_FUNC_REG_RX_REQ_POLICY_0  ------------------------ */
#define LL_FUNC_REG_RX_REQ_POLICY_0_RX_REQ_POLICY_SIG0_SEL_Pos 0                                      /*!< LL_FUNC_REG RX_REQ_POLICY_0: RX_REQ_POLICY_SIG0_SEL Position */
#define LL_FUNC_REG_RX_REQ_POLICY_0_RX_REQ_POLICY_SIG0_SEL_Msk (0x3fUL << LL_FUNC_REG_RX_REQ_POLICY_0_RX_REQ_POLICY_SIG0_SEL_Pos)/*!< LL_FUNC_REG RX_REQ_POLICY_0: RX_REQ_POLICY_SIG0_SEL Mask */
#define LL_FUNC_REG_RX_REQ_POLICY_0_RX_REQ_POLICY_SIG1_SEL_Pos 8                                      /*!< LL_FUNC_REG RX_REQ_POLICY_0: RX_REQ_POLICY_SIG1_SEL Position */
#define LL_FUNC_REG_RX_REQ_POLICY_0_RX_REQ_POLICY_SIG1_SEL_Msk (0x3fUL << LL_FUNC_REG_RX_REQ_POLICY_0_RX_REQ_POLICY_SIG1_SEL_Pos)/*!< LL_FUNC_REG RX_REQ_POLICY_0: RX_REQ_POLICY_SIG1_SEL Mask */
#define LL_FUNC_REG_RX_REQ_POLICY_0_RX_REQ_POLICY_SIG2_SEL_Pos 16                                     /*!< LL_FUNC_REG RX_REQ_POLICY_0: RX_REQ_POLICY_SIG2_SEL Position */
#define LL_FUNC_REG_RX_REQ_POLICY_0_RX_REQ_POLICY_SIG2_SEL_Msk (0x3fUL << LL_FUNC_REG_RX_REQ_POLICY_0_RX_REQ_POLICY_SIG2_SEL_Pos)/*!< LL_FUNC_REG RX_REQ_POLICY_0: RX_REQ_POLICY_SIG2_SEL Mask */
#define LL_FUNC_REG_RX_REQ_POLICY_0_RX_REQ_POLICY_SIG3_SEL_Pos 24                                     /*!< LL_FUNC_REG RX_REQ_POLICY_0: RX_REQ_POLICY_SIG3_SEL Position */
#define LL_FUNC_REG_RX_REQ_POLICY_0_RX_REQ_POLICY_SIG3_SEL_Msk (0x3fUL << LL_FUNC_REG_RX_REQ_POLICY_0_RX_REQ_POLICY_SIG3_SEL_Pos)/*!< LL_FUNC_REG RX_REQ_POLICY_0: RX_REQ_POLICY_SIG3_SEL Mask */
#define LL_FUNC_REG_RX_REQ_POLICY_0_RX_REQ_POLICY_MANUAL_VALUE_Pos 30                                 /*!< LL_FUNC_REG RX_REQ_POLICY_0: RX_REQ_POLICY_MANUAL_VALUE Position */
#define LL_FUNC_REG_RX_REQ_POLICY_0_RX_REQ_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_RX_REQ_POLICY_0_RX_REQ_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG RX_REQ_POLICY_0: RX_REQ_POLICY_MANUAL_VALUE Mask */
#define LL_FUNC_REG_RX_REQ_POLICY_0_RX_REQ_POLICY_MANUAL_EN_Pos 31                                    /*!< LL_FUNC_REG RX_REQ_POLICY_0: RX_REQ_POLICY_MANUAL_EN Position */
#define LL_FUNC_REG_RX_REQ_POLICY_0_RX_REQ_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_RX_REQ_POLICY_0_RX_REQ_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG RX_REQ_POLICY_0: RX_REQ_POLICY_MANUAL_EN Mask */

/* -------------------------  LL_FUNC_REG_RX_REQ_POLICY_1  ------------------------ */
#define LL_FUNC_REG_RX_REQ_POLICY_1_RX_REQ_POLICY_W1C_Pos 0                                           /*!< LL_FUNC_REG RX_REQ_POLICY_1: RX_REQ_POLICY_W1C Position */
#define LL_FUNC_REG_RX_REQ_POLICY_1_RX_REQ_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_RX_REQ_POLICY_1_RX_REQ_POLICY_W1C_Pos)/*!< LL_FUNC_REG RX_REQ_POLICY_1: RX_REQ_POLICY_W1C Mask */
#define LL_FUNC_REG_RX_REQ_POLICY_1_RX_REQ_POLICY_W1S_Pos 1                                           /*!< LL_FUNC_REG RX_REQ_POLICY_1: RX_REQ_POLICY_W1S Position */
#define LL_FUNC_REG_RX_REQ_POLICY_1_RX_REQ_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_RX_REQ_POLICY_1_RX_REQ_POLICY_W1S_Pos)/*!< LL_FUNC_REG RX_REQ_POLICY_1: RX_REQ_POLICY_W1S Mask */

/* -------------------------  LL_FUNC_REG_RX_REQ_POLICY_2  ------------------------ */
#define LL_FUNC_REG_RX_REQ_POLICY_2_RX_REQ_POLICY_Pos 0                                               /*!< LL_FUNC_REG RX_REQ_POLICY_2: RX_REQ_POLICY Position */
#define LL_FUNC_REG_RX_REQ_POLICY_2_RX_REQ_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_RX_REQ_POLICY_2_RX_REQ_POLICY_Pos)/*!< LL_FUNC_REG RX_REQ_POLICY_2: RX_REQ_POLICY Mask */

/* ------------------------  LL_FUNC_REG_AEM_IRQ0_POLICY_0  ----------------------- */
#define LL_FUNC_REG_AEM_IRQ0_POLICY_0_AEM_IRQ0_POLICY_SIG0_SEL_Pos 0                                  /*!< LL_FUNC_REG AEM_IRQ0_POLICY_0: AEM_IRQ0_POLICY_SIG0_SEL Position */
#define LL_FUNC_REG_AEM_IRQ0_POLICY_0_AEM_IRQ0_POLICY_SIG0_SEL_Msk (0x3fUL << LL_FUNC_REG_AEM_IRQ0_POLICY_0_AEM_IRQ0_POLICY_SIG0_SEL_Pos)/*!< LL_FUNC_REG AEM_IRQ0_POLICY_0: AEM_IRQ0_POLICY_SIG0_SEL Mask */
#define LL_FUNC_REG_AEM_IRQ0_POLICY_0_AEM_IRQ0_POLICY_SIG1_SEL_Pos 8                                  /*!< LL_FUNC_REG AEM_IRQ0_POLICY_0: AEM_IRQ0_POLICY_SIG1_SEL Position */
#define LL_FUNC_REG_AEM_IRQ0_POLICY_0_AEM_IRQ0_POLICY_SIG1_SEL_Msk (0x3fUL << LL_FUNC_REG_AEM_IRQ0_POLICY_0_AEM_IRQ0_POLICY_SIG1_SEL_Pos)/*!< LL_FUNC_REG AEM_IRQ0_POLICY_0: AEM_IRQ0_POLICY_SIG1_SEL Mask */
#define LL_FUNC_REG_AEM_IRQ0_POLICY_0_AEM_IRQ0_POLICY_SIG2_SEL_Pos 16                                 /*!< LL_FUNC_REG AEM_IRQ0_POLICY_0: AEM_IRQ0_POLICY_SIG2_SEL Position */
#define LL_FUNC_REG_AEM_IRQ0_POLICY_0_AEM_IRQ0_POLICY_SIG2_SEL_Msk (0x3fUL << LL_FUNC_REG_AEM_IRQ0_POLICY_0_AEM_IRQ0_POLICY_SIG2_SEL_Pos)/*!< LL_FUNC_REG AEM_IRQ0_POLICY_0: AEM_IRQ0_POLICY_SIG2_SEL Mask */
#define LL_FUNC_REG_AEM_IRQ0_POLICY_0_AEM_IRQ0_POLICY_SIG3_SEL_Pos 24                                 /*!< LL_FUNC_REG AEM_IRQ0_POLICY_0: AEM_IRQ0_POLICY_SIG3_SEL Position */
#define LL_FUNC_REG_AEM_IRQ0_POLICY_0_AEM_IRQ0_POLICY_SIG3_SEL_Msk (0x3fUL << LL_FUNC_REG_AEM_IRQ0_POLICY_0_AEM_IRQ0_POLICY_SIG3_SEL_Pos)/*!< LL_FUNC_REG AEM_IRQ0_POLICY_0: AEM_IRQ0_POLICY_SIG3_SEL Mask */
#define LL_FUNC_REG_AEM_IRQ0_POLICY_0_AEM_IRQ0_POLICY_MANUAL_VALUE_Pos 30                             /*!< LL_FUNC_REG AEM_IRQ0_POLICY_0: AEM_IRQ0_POLICY_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_FUNC_REG_AEM_IRQ0_POLICY_0_AEM_IRQ0_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_AEM_IRQ0_POLICY_0_AEM_IRQ0_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG AEM_IRQ0_POLICY_0: AEM_IRQ0_POLICY_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AEM_IRQ0_POLICY_0_AEM_IRQ0_POLICY_MANUAL_EN_Pos 31                                /*!< LL_FUNC_REG AEM_IRQ0_POLICY_0: AEM_IRQ0_POLICY_MANUAL_EN Position */
#define LL_FUNC_REG_AEM_IRQ0_POLICY_0_AEM_IRQ0_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_AEM_IRQ0_POLICY_0_AEM_IRQ0_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG AEM_IRQ0_POLICY_0: AEM_IRQ0_POLICY_MANUAL_EN Mask */

/* ------------------------  LL_FUNC_REG_AEM_IRQ0_POLICY_1  ----------------------- */
#define LL_FUNC_REG_AEM_IRQ0_POLICY_1_AEM_IRQ0_POLICY_W1C_Pos 0                                       /*!< LL_FUNC_REG AEM_IRQ0_POLICY_1: AEM_IRQ0_POLICY_W1C Position */
#define LL_FUNC_REG_AEM_IRQ0_POLICY_1_AEM_IRQ0_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_AEM_IRQ0_POLICY_1_AEM_IRQ0_POLICY_W1C_Pos)/*!< LL_FUNC_REG AEM_IRQ0_POLICY_1: AEM_IRQ0_POLICY_W1C Mask */
#define LL_FUNC_REG_AEM_IRQ0_POLICY_1_AEM_IRQ0_POLICY_W1S_Pos 1                                       /*!< LL_FUNC_REG AEM_IRQ0_POLICY_1: AEM_IRQ0_POLICY_W1S Position */
#define LL_FUNC_REG_AEM_IRQ0_POLICY_1_AEM_IRQ0_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_AEM_IRQ0_POLICY_1_AEM_IRQ0_POLICY_W1S_Pos)/*!< LL_FUNC_REG AEM_IRQ0_POLICY_1: AEM_IRQ0_POLICY_W1S Mask */

/* ------------------------  LL_FUNC_REG_AEM_IRQ0_POLICY_2  ----------------------- */
#define LL_FUNC_REG_AEM_IRQ0_POLICY_2_AEM_IRQ0_POLICY_Pos 0                                           /*!< LL_FUNC_REG AEM_IRQ0_POLICY_2: AEM_IRQ0_POLICY Position */
#define LL_FUNC_REG_AEM_IRQ0_POLICY_2_AEM_IRQ0_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_AEM_IRQ0_POLICY_2_AEM_IRQ0_POLICY_Pos)/*!< LL_FUNC_REG AEM_IRQ0_POLICY_2: AEM_IRQ0_POLICY Mask */

/* ------------------------  LL_FUNC_REG_AEM_IRQ1_POLICY_0  ----------------------- */
#define LL_FUNC_REG_AEM_IRQ1_POLICY_0_AEM_IRQ1_POLICY_SIG0_SEL_Pos 0                                  /*!< LL_FUNC_REG AEM_IRQ1_POLICY_0: AEM_IRQ1_POLICY_SIG0_SEL Position */
#define LL_FUNC_REG_AEM_IRQ1_POLICY_0_AEM_IRQ1_POLICY_SIG0_SEL_Msk (0x3fUL << LL_FUNC_REG_AEM_IRQ1_POLICY_0_AEM_IRQ1_POLICY_SIG0_SEL_Pos)/*!< LL_FUNC_REG AEM_IRQ1_POLICY_0: AEM_IRQ1_POLICY_SIG0_SEL Mask */
#define LL_FUNC_REG_AEM_IRQ1_POLICY_0_AEM_IRQ1_POLICY_SIG1_SEL_Pos 8                                  /*!< LL_FUNC_REG AEM_IRQ1_POLICY_0: AEM_IRQ1_POLICY_SIG1_SEL Position */
#define LL_FUNC_REG_AEM_IRQ1_POLICY_0_AEM_IRQ1_POLICY_SIG1_SEL_Msk (0x3fUL << LL_FUNC_REG_AEM_IRQ1_POLICY_0_AEM_IRQ1_POLICY_SIG1_SEL_Pos)/*!< LL_FUNC_REG AEM_IRQ1_POLICY_0: AEM_IRQ1_POLICY_SIG1_SEL Mask */
#define LL_FUNC_REG_AEM_IRQ1_POLICY_0_AEM_IRQ1_POLICY_SIG2_SEL_Pos 16                                 /*!< LL_FUNC_REG AEM_IRQ1_POLICY_0: AEM_IRQ1_POLICY_SIG2_SEL Position */
#define LL_FUNC_REG_AEM_IRQ1_POLICY_0_AEM_IRQ1_POLICY_SIG2_SEL_Msk (0x3fUL << LL_FUNC_REG_AEM_IRQ1_POLICY_0_AEM_IRQ1_POLICY_SIG2_SEL_Pos)/*!< LL_FUNC_REG AEM_IRQ1_POLICY_0: AEM_IRQ1_POLICY_SIG2_SEL Mask */
#define LL_FUNC_REG_AEM_IRQ1_POLICY_0_AEM_IRQ1_POLICY_SIG3_SEL_Pos 24                                 /*!< LL_FUNC_REG AEM_IRQ1_POLICY_0: AEM_IRQ1_POLICY_SIG3_SEL Position */
#define LL_FUNC_REG_AEM_IRQ1_POLICY_0_AEM_IRQ1_POLICY_SIG3_SEL_Msk (0x3fUL << LL_FUNC_REG_AEM_IRQ1_POLICY_0_AEM_IRQ1_POLICY_SIG3_SEL_Pos)/*!< LL_FUNC_REG AEM_IRQ1_POLICY_0: AEM_IRQ1_POLICY_SIG3_SEL Mask */
#define LL_FUNC_REG_AEM_IRQ1_POLICY_0_AEM_IRQ1_POLICY_MANUAL_VALUE_Pos 30                             /*!< LL_FUNC_REG AEM_IRQ1_POLICY_0: AEM_IRQ1_POLICY_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_FUNC_REG_AEM_IRQ1_POLICY_0_AEM_IRQ1_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_AEM_IRQ1_POLICY_0_AEM_IRQ1_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG AEM_IRQ1_POLICY_0: AEM_IRQ1_POLICY_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AEM_IRQ1_POLICY_0_AEM_IRQ1_POLICY_MANUAL_EN_Pos 31                                /*!< LL_FUNC_REG AEM_IRQ1_POLICY_0: AEM_IRQ1_POLICY_MANUAL_EN Position */
#define LL_FUNC_REG_AEM_IRQ1_POLICY_0_AEM_IRQ1_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_AEM_IRQ1_POLICY_0_AEM_IRQ1_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG AEM_IRQ1_POLICY_0: AEM_IRQ1_POLICY_MANUAL_EN Mask */

/* ------------------------  LL_FUNC_REG_AEM_IRQ1_POLICY_1  ----------------------- */
#define LL_FUNC_REG_AEM_IRQ1_POLICY_1_AEM_IRQ1_POLICY_W1C_Pos 0                                       /*!< LL_FUNC_REG AEM_IRQ1_POLICY_1: AEM_IRQ1_POLICY_W1C Position */
#define LL_FUNC_REG_AEM_IRQ1_POLICY_1_AEM_IRQ1_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_AEM_IRQ1_POLICY_1_AEM_IRQ1_POLICY_W1C_Pos)/*!< LL_FUNC_REG AEM_IRQ1_POLICY_1: AEM_IRQ1_POLICY_W1C Mask */
#define LL_FUNC_REG_AEM_IRQ1_POLICY_1_AEM_IRQ1_POLICY_W1S_Pos 1                                       /*!< LL_FUNC_REG AEM_IRQ1_POLICY_1: AEM_IRQ1_POLICY_W1S Position */
#define LL_FUNC_REG_AEM_IRQ1_POLICY_1_AEM_IRQ1_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_AEM_IRQ1_POLICY_1_AEM_IRQ1_POLICY_W1S_Pos)/*!< LL_FUNC_REG AEM_IRQ1_POLICY_1: AEM_IRQ1_POLICY_W1S Mask */

/* ------------------------  LL_FUNC_REG_AEM_IRQ1_POLICY_2  ----------------------- */
#define LL_FUNC_REG_AEM_IRQ1_POLICY_2_AEM_IRQ1_POLICY_Pos 0                                           /*!< LL_FUNC_REG AEM_IRQ1_POLICY_2: AEM_IRQ1_POLICY Position */
#define LL_FUNC_REG_AEM_IRQ1_POLICY_2_AEM_IRQ1_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_AEM_IRQ1_POLICY_2_AEM_IRQ1_POLICY_Pos)/*!< LL_FUNC_REG AEM_IRQ1_POLICY_2: AEM_IRQ1_POLICY Mask */

/* -----------------------  LL_FUNC_REG_AEM_DUMY0_POLICY_0  ----------------------- */
#define LL_FUNC_REG_AEM_DUMY0_POLICY_0_AEM_DUMY0_POLICY_SIG0_SEL_Pos 0                                /*!< LL_FUNC_REG AEM_DUMY0_POLICY_0: AEM_DUMY0_POLICY_SIG0_SEL Position */
#define LL_FUNC_REG_AEM_DUMY0_POLICY_0_AEM_DUMY0_POLICY_SIG0_SEL_Msk (0x3fUL << LL_FUNC_REG_AEM_DUMY0_POLICY_0_AEM_DUMY0_POLICY_SIG0_SEL_Pos)/*!< LL_FUNC_REG AEM_DUMY0_POLICY_0: AEM_DUMY0_POLICY_SIG0_SEL Mask */
#define LL_FUNC_REG_AEM_DUMY0_POLICY_0_AEM_DUMY0_POLICY_SIG1_SEL_Pos 8                                /*!< LL_FUNC_REG AEM_DUMY0_POLICY_0: AEM_DUMY0_POLICY_SIG1_SEL Position */
#define LL_FUNC_REG_AEM_DUMY0_POLICY_0_AEM_DUMY0_POLICY_SIG1_SEL_Msk (0x3fUL << LL_FUNC_REG_AEM_DUMY0_POLICY_0_AEM_DUMY0_POLICY_SIG1_SEL_Pos)/*!< LL_FUNC_REG AEM_DUMY0_POLICY_0: AEM_DUMY0_POLICY_SIG1_SEL Mask */
#define LL_FUNC_REG_AEM_DUMY0_POLICY_0_AEM_DUMY0_POLICY_SIG2_SEL_Pos 16                               /*!< LL_FUNC_REG AEM_DUMY0_POLICY_0: AEM_DUMY0_POLICY_SIG2_SEL Position */
#define LL_FUNC_REG_AEM_DUMY0_POLICY_0_AEM_DUMY0_POLICY_SIG2_SEL_Msk (0x3fUL << LL_FUNC_REG_AEM_DUMY0_POLICY_0_AEM_DUMY0_POLICY_SIG2_SEL_Pos)/*!< LL_FUNC_REG AEM_DUMY0_POLICY_0: AEM_DUMY0_POLICY_SIG2_SEL Mask */
#define LL_FUNC_REG_AEM_DUMY0_POLICY_0_AEM_DUMY0_POLICY_SIG3_SEL_Pos 24                               /*!< LL_FUNC_REG AEM_DUMY0_POLICY_0: AEM_DUMY0_POLICY_SIG3_SEL Position */
#define LL_FUNC_REG_AEM_DUMY0_POLICY_0_AEM_DUMY0_POLICY_SIG3_SEL_Msk (0x3fUL << LL_FUNC_REG_AEM_DUMY0_POLICY_0_AEM_DUMY0_POLICY_SIG3_SEL_Pos)/*!< LL_FUNC_REG AEM_DUMY0_POLICY_0: AEM_DUMY0_POLICY_SIG3_SEL Mask */
#define LL_FUNC_REG_AEM_DUMY0_POLICY_0_AEM_DUMY0_POLICY_MANUAL_VALUE_Pos 30                           /*!< LL_FUNC_REG AEM_DUMY0_POLICY_0: AEM_DUMY0_POLICY_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_FUNC_REG_AEM_DUMY0_POLICY_0_AEM_DUMY0_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_AEM_DUMY0_POLICY_0_AEM_DUMY0_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG AEM_DUMY0_POLICY_0: AEM_DUMY0_POLICY_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AEM_DUMY0_POLICY_0_AEM_DUMY0_POLICY_MANUAL_EN_Pos 31                              /*!< LL_FUNC_REG AEM_DUMY0_POLICY_0: AEM_DUMY0_POLICY_MANUAL_EN Position */
#define LL_FUNC_REG_AEM_DUMY0_POLICY_0_AEM_DUMY0_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_AEM_DUMY0_POLICY_0_AEM_DUMY0_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG AEM_DUMY0_POLICY_0: AEM_DUMY0_POLICY_MANUAL_EN Mask */

/* -----------------------  LL_FUNC_REG_AEM_DUMY0_POLICY_1  ----------------------- */
#define LL_FUNC_REG_AEM_DUMY0_POLICY_1_AEM_DUMY0_POLICY_W1C_Pos 0                                     /*!< LL_FUNC_REG AEM_DUMY0_POLICY_1: AEM_DUMY0_POLICY_W1C Position */
#define LL_FUNC_REG_AEM_DUMY0_POLICY_1_AEM_DUMY0_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_AEM_DUMY0_POLICY_1_AEM_DUMY0_POLICY_W1C_Pos)/*!< LL_FUNC_REG AEM_DUMY0_POLICY_1: AEM_DUMY0_POLICY_W1C Mask */
#define LL_FUNC_REG_AEM_DUMY0_POLICY_1_AEM_DUMY0_POLICY_W1S_Pos 1                                     /*!< LL_FUNC_REG AEM_DUMY0_POLICY_1: AEM_DUMY0_POLICY_W1S Position */
#define LL_FUNC_REG_AEM_DUMY0_POLICY_1_AEM_DUMY0_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_AEM_DUMY0_POLICY_1_AEM_DUMY0_POLICY_W1S_Pos)/*!< LL_FUNC_REG AEM_DUMY0_POLICY_1: AEM_DUMY0_POLICY_W1S Mask */

/* -----------------------  LL_FUNC_REG_AEM_DUMY0_POLICY_2  ----------------------- */
#define LL_FUNC_REG_AEM_DUMY0_POLICY_2_AEM_DUMY0_POLICY_Pos 0                                         /*!< LL_FUNC_REG AEM_DUMY0_POLICY_2: AEM_DUMY0_POLICY Position */
#define LL_FUNC_REG_AEM_DUMY0_POLICY_2_AEM_DUMY0_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_AEM_DUMY0_POLICY_2_AEM_DUMY0_POLICY_Pos)/*!< LL_FUNC_REG AEM_DUMY0_POLICY_2: AEM_DUMY0_POLICY Mask */

/* -----------------------  LL_FUNC_REG_AEM_DUMY1_POLICY_0  ----------------------- */
#define LL_FUNC_REG_AEM_DUMY1_POLICY_0_AEM_DUMY1_POLICY_SIG0_SEL_Pos 0                                /*!< LL_FUNC_REG AEM_DUMY1_POLICY_0: AEM_DUMY1_POLICY_SIG0_SEL Position */
#define LL_FUNC_REG_AEM_DUMY1_POLICY_0_AEM_DUMY1_POLICY_SIG0_SEL_Msk (0x3fUL << LL_FUNC_REG_AEM_DUMY1_POLICY_0_AEM_DUMY1_POLICY_SIG0_SEL_Pos)/*!< LL_FUNC_REG AEM_DUMY1_POLICY_0: AEM_DUMY1_POLICY_SIG0_SEL Mask */
#define LL_FUNC_REG_AEM_DUMY1_POLICY_0_AEM_DUMY1_POLICY_SIG1_SEL_Pos 8                                /*!< LL_FUNC_REG AEM_DUMY1_POLICY_0: AEM_DUMY1_POLICY_SIG1_SEL Position */
#define LL_FUNC_REG_AEM_DUMY1_POLICY_0_AEM_DUMY1_POLICY_SIG1_SEL_Msk (0x3fUL << LL_FUNC_REG_AEM_DUMY1_POLICY_0_AEM_DUMY1_POLICY_SIG1_SEL_Pos)/*!< LL_FUNC_REG AEM_DUMY1_POLICY_0: AEM_DUMY1_POLICY_SIG1_SEL Mask */
#define LL_FUNC_REG_AEM_DUMY1_POLICY_0_AEM_DUMY1_POLICY_SIG2_SEL_Pos 16                               /*!< LL_FUNC_REG AEM_DUMY1_POLICY_0: AEM_DUMY1_POLICY_SIG2_SEL Position */
#define LL_FUNC_REG_AEM_DUMY1_POLICY_0_AEM_DUMY1_POLICY_SIG2_SEL_Msk (0x3fUL << LL_FUNC_REG_AEM_DUMY1_POLICY_0_AEM_DUMY1_POLICY_SIG2_SEL_Pos)/*!< LL_FUNC_REG AEM_DUMY1_POLICY_0: AEM_DUMY1_POLICY_SIG2_SEL Mask */
#define LL_FUNC_REG_AEM_DUMY1_POLICY_0_AEM_DUMY1_POLICY_SIG3_SEL_Pos 24                               /*!< LL_FUNC_REG AEM_DUMY1_POLICY_0: AEM_DUMY1_POLICY_SIG3_SEL Position */
#define LL_FUNC_REG_AEM_DUMY1_POLICY_0_AEM_DUMY1_POLICY_SIG3_SEL_Msk (0x3fUL << LL_FUNC_REG_AEM_DUMY1_POLICY_0_AEM_DUMY1_POLICY_SIG3_SEL_Pos)/*!< LL_FUNC_REG AEM_DUMY1_POLICY_0: AEM_DUMY1_POLICY_SIG3_SEL Mask */
#define LL_FUNC_REG_AEM_DUMY1_POLICY_0_AEM_DUMY1_POLICY_MANUAL_VALUE_Pos 30                           /*!< LL_FUNC_REG AEM_DUMY1_POLICY_0: AEM_DUMY1_POLICY_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_FUNC_REG_AEM_DUMY1_POLICY_0_AEM_DUMY1_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_AEM_DUMY1_POLICY_0_AEM_DUMY1_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG AEM_DUMY1_POLICY_0: AEM_DUMY1_POLICY_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AEM_DUMY1_POLICY_0_AEM_DUMY1_POLICY_MANUAL_EN_Pos 31                              /*!< LL_FUNC_REG AEM_DUMY1_POLICY_0: AEM_DUMY1_POLICY_MANUAL_EN Position */
#define LL_FUNC_REG_AEM_DUMY1_POLICY_0_AEM_DUMY1_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_AEM_DUMY1_POLICY_0_AEM_DUMY1_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG AEM_DUMY1_POLICY_0: AEM_DUMY1_POLICY_MANUAL_EN Mask */

/* -----------------------  LL_FUNC_REG_AEM_DUMY1_POLICY_1  ----------------------- */
#define LL_FUNC_REG_AEM_DUMY1_POLICY_1_AEM_DUMY1_POLICY_W1C_Pos 0                                     /*!< LL_FUNC_REG AEM_DUMY1_POLICY_1: AEM_DUMY1_POLICY_W1C Position */
#define LL_FUNC_REG_AEM_DUMY1_POLICY_1_AEM_DUMY1_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_AEM_DUMY1_POLICY_1_AEM_DUMY1_POLICY_W1C_Pos)/*!< LL_FUNC_REG AEM_DUMY1_POLICY_1: AEM_DUMY1_POLICY_W1C Mask */
#define LL_FUNC_REG_AEM_DUMY1_POLICY_1_AEM_DUMY1_POLICY_W1S_Pos 1                                     /*!< LL_FUNC_REG AEM_DUMY1_POLICY_1: AEM_DUMY1_POLICY_W1S Position */
#define LL_FUNC_REG_AEM_DUMY1_POLICY_1_AEM_DUMY1_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_AEM_DUMY1_POLICY_1_AEM_DUMY1_POLICY_W1S_Pos)/*!< LL_FUNC_REG AEM_DUMY1_POLICY_1: AEM_DUMY1_POLICY_W1S Mask */

/* -----------------------  LL_FUNC_REG_AEM_DUMY1_POLICY_2  ----------------------- */
#define LL_FUNC_REG_AEM_DUMY1_POLICY_2_AEM_DUMY1_POLICY_Pos 0                                         /*!< LL_FUNC_REG AEM_DUMY1_POLICY_2: AEM_DUMY1_POLICY Position */
#define LL_FUNC_REG_AEM_DUMY1_POLICY_2_AEM_DUMY1_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_AEM_DUMY1_POLICY_2_AEM_DUMY1_POLICY_Pos)/*!< LL_FUNC_REG AEM_DUMY1_POLICY_2: AEM_DUMY1_POLICY Mask */

/* ----------------------  LL_FUNC_REG_AEM_POLICY_SRC_BUS_0  ---------------------- */
#define LL_FUNC_REG_AEM_POLICY_SRC_BUS_0_AEM_POLICY_SRC_BUS_31_0_Pos 0                                /*!< LL_FUNC_REG AEM_POLICY_SRC_BUS_0: AEM_POLICY_SRC_BUS_31_0 Position */
#define LL_FUNC_REG_AEM_POLICY_SRC_BUS_0_AEM_POLICY_SRC_BUS_31_0_Msk (0xffffffffUL << LL_FUNC_REG_AEM_POLICY_SRC_BUS_0_AEM_POLICY_SRC_BUS_31_0_Pos)/*!< LL_FUNC_REG AEM_POLICY_SRC_BUS_0: AEM_POLICY_SRC_BUS_31_0 Mask */

/* ----------------------  LL_FUNC_REG_AEM_POLICY_SRC_BUS_1  ---------------------- */
#define LL_FUNC_REG_AEM_POLICY_SRC_BUS_1_AEM_POLICY_SRC_BUS_63_32_Pos 0                               /*!< LL_FUNC_REG AEM_POLICY_SRC_BUS_1: AEM_POLICY_SRC_BUS_63_32 Position */
#define LL_FUNC_REG_AEM_POLICY_SRC_BUS_1_AEM_POLICY_SRC_BUS_63_32_Msk (0xffffffffUL << LL_FUNC_REG_AEM_POLICY_SRC_BUS_1_AEM_POLICY_SRC_BUS_63_32_Pos)/*!< LL_FUNC_REG AEM_POLICY_SRC_BUS_1: AEM_POLICY_SRC_BUS_63_32 Mask */

/* -------------------------  LL_FUNC_REG_AEM_ACCUM_INFO  ------------------------- */
#define LL_FUNC_REG_AEM_ACCUM_INFO_AEM_ACCUM_0_ACC_CNT_Pos 0                                          /*!< LL_FUNC_REG AEM_ACCUM_INFO: AEM_ACCUM_0_ACC_CNT Position */
#define LL_FUNC_REG_AEM_ACCUM_INFO_AEM_ACCUM_0_ACC_CNT_Msk (0x000000ffUL << LL_FUNC_REG_AEM_ACCUM_INFO_AEM_ACCUM_0_ACC_CNT_Pos)/*!< LL_FUNC_REG AEM_ACCUM_INFO: AEM_ACCUM_0_ACC_CNT Mask */
#define LL_FUNC_REG_AEM_ACCUM_INFO_AEM_ACCUM_1_ACC_CNT_Pos 8                                          /*!< LL_FUNC_REG AEM_ACCUM_INFO: AEM_ACCUM_1_ACC_CNT Position */
#define LL_FUNC_REG_AEM_ACCUM_INFO_AEM_ACCUM_1_ACC_CNT_Msk (0x000000ffUL << LL_FUNC_REG_AEM_ACCUM_INFO_AEM_ACCUM_1_ACC_CNT_Pos)/*!< LL_FUNC_REG AEM_ACCUM_INFO: AEM_ACCUM_1_ACC_CNT Mask */

/* ----------------------  LL_FUNC_REG_AEM_HALF_DUPLEX_INFO  ---------------------- */
#define LL_FUNC_REG_AEM_HALF_DUPLEX_INFO_AEM_HALF_DUPLEX_STATE_Pos 0                                  /*!< LL_FUNC_REG AEM_HALF_DUPLEX_INFO: AEM_HALF_DUPLEX_STATE Position */
#define LL_FUNC_REG_AEM_HALF_DUPLEX_INFO_AEM_HALF_DUPLEX_STATE_Msk (0x07UL << LL_FUNC_REG_AEM_HALF_DUPLEX_INFO_AEM_HALF_DUPLEX_STATE_Pos)/*!< LL_FUNC_REG AEM_HALF_DUPLEX_INFO: AEM_HALF_DUPLEX_STATE Mask */

/* ------------------------  LL_FUNC_REG_AIRPRO_TICKMAP_0  ------------------------ */
#define LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_RX_ACCESS_TIMEOUT_TICK_SEL_Pos 0                          /*!< LL_FUNC_REG AIRPRO_TICKMAP_0: AIRPRO_RX_ACCESS_TIMEOUT_TICK_SEL
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_RX_ACCESS_TIMEOUT_TICK_SEL_Msk (0x07UL << LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_RX_ACCESS_TIMEOUT_TICK_SEL_Pos)/*!< LL_FUNC_REG AIRPRO_TICKMAP_0: AIRPRO_RX_ACCESS_TIMEOUT_TICK_SEL
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_PHY_RX_EN_TICK_SEL_Pos 4                                  /*!< LL_FUNC_REG AIRPRO_TICKMAP_0: AIRPRO_PHY_RX_EN_TICK_SEL Position */
#define LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_PHY_RX_EN_TICK_SEL_Msk (0x07UL << LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_PHY_RX_EN_TICK_SEL_Pos)/*!< LL_FUNC_REG AIRPRO_TICKMAP_0: AIRPRO_PHY_RX_EN_TICK_SEL Mask */
#define LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_RF_RX_EN_TICK_SEL_Pos 8                                   /*!< LL_FUNC_REG AIRPRO_TICKMAP_0: AIRPRO_RF_RX_EN_TICK_SEL Position */
#define LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_RF_RX_EN_TICK_SEL_Msk (0x07UL << LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_RF_RX_EN_TICK_SEL_Pos)/*!< LL_FUNC_REG AIRPRO_TICKMAP_0: AIRPRO_RF_RX_EN_TICK_SEL Mask */
#define LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_LONG_RF_RX_EN_TICK_SEL_Pos 12                             /*!< LL_FUNC_REG AIRPRO_TICKMAP_0: AIRPRO_LONG_RF_RX_EN_TICK_SEL
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_LONG_RF_RX_EN_TICK_SEL_Msk (0x07UL << LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_LONG_RF_RX_EN_TICK_SEL_Pos)/*!< LL_FUNC_REG AIRPRO_TICKMAP_0: AIRPRO_LONG_RF_RX_EN_TICK_SEL
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_PHY_TX_EN_TICK_SEL_Pos 16                                 /*!< LL_FUNC_REG AIRPRO_TICKMAP_0: AIRPRO_PHY_TX_EN_TICK_SEL Position */
#define LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_PHY_TX_EN_TICK_SEL_Msk (0x07UL << LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_PHY_TX_EN_TICK_SEL_Pos)/*!< LL_FUNC_REG AIRPRO_TICKMAP_0: AIRPRO_PHY_TX_EN_TICK_SEL Mask */
#define LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_RF_TX_EN_TICK_SEL_Pos 20                                  /*!< LL_FUNC_REG AIRPRO_TICKMAP_0: AIRPRO_RF_TX_EN_TICK_SEL Position */
#define LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_RF_TX_EN_TICK_SEL_Msk (0x07UL << LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_RF_TX_EN_TICK_SEL_Pos)/*!< LL_FUNC_REG AIRPRO_TICKMAP_0: AIRPRO_RF_TX_EN_TICK_SEL Mask */
#define LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_LONG_RF_TX_EN_TICK_SEL_Pos 24                             /*!< LL_FUNC_REG AIRPRO_TICKMAP_0: AIRPRO_LONG_RF_TX_EN_TICK_SEL
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_LONG_RF_TX_EN_TICK_SEL_Msk (0x07UL << LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_LONG_RF_TX_EN_TICK_SEL_Pos)/*!< LL_FUNC_REG AIRPRO_TICKMAP_0: AIRPRO_LONG_RF_TX_EN_TICK_SEL
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_PDU_REQ_TICK_SEL_Pos 28                                   /*!< LL_FUNC_REG AIRPRO_TICKMAP_0: AIRPRO_PDU_REQ_TICK_SEL Position */
#define LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_PDU_REQ_TICK_SEL_Msk (0x07UL << LL_FUNC_REG_AIRPRO_TICKMAP_0_AIRPRO_PDU_REQ_TICK_SEL_Pos)/*!< LL_FUNC_REG AIRPRO_TICKMAP_0: AIRPRO_PDU_REQ_TICK_SEL Mask */

/* ------------------------  LL_FUNC_REG_AIRPRO_TICKMAP_1  ------------------------ */
#define LL_FUNC_REG_AIRPRO_TICKMAP_1_AIRPRO_ALARM1_AS_RX_Pos 0                                        /*!< LL_FUNC_REG AIRPRO_TICKMAP_1: AIRPRO_ALARM1_AS_RX Position */
#define LL_FUNC_REG_AIRPRO_TICKMAP_1_AIRPRO_ALARM1_AS_RX_Msk (0x01UL << LL_FUNC_REG_AIRPRO_TICKMAP_1_AIRPRO_ALARM1_AS_RX_Pos)/*!< LL_FUNC_REG AIRPRO_TICKMAP_1: AIRPRO_ALARM1_AS_RX Mask */
#define LL_FUNC_REG_AIRPRO_TICKMAP_1_AIRPRO_ALARM1_AS_TX_Pos 1                                        /*!< LL_FUNC_REG AIRPRO_TICKMAP_1: AIRPRO_ALARM1_AS_TX Position */
#define LL_FUNC_REG_AIRPRO_TICKMAP_1_AIRPRO_ALARM1_AS_TX_Msk (0x01UL << LL_FUNC_REG_AIRPRO_TICKMAP_1_AIRPRO_ALARM1_AS_TX_Pos)/*!< LL_FUNC_REG AIRPRO_TICKMAP_1: AIRPRO_ALARM1_AS_TX Mask */
#define LL_FUNC_REG_AIRPRO_TICKMAP_1_AIRPRO_ALARM0_AS_RX_Pos 2                                        /*!< LL_FUNC_REG AIRPRO_TICKMAP_1: AIRPRO_ALARM0_AS_RX Position */
#define LL_FUNC_REG_AIRPRO_TICKMAP_1_AIRPRO_ALARM0_AS_RX_Msk (0x01UL << LL_FUNC_REG_AIRPRO_TICKMAP_1_AIRPRO_ALARM0_AS_RX_Pos)/*!< LL_FUNC_REG AIRPRO_TICKMAP_1: AIRPRO_ALARM0_AS_RX Mask */
#define LL_FUNC_REG_AIRPRO_TICKMAP_1_AIRPRO_ALARM0_AS_TX_Pos 3                                        /*!< LL_FUNC_REG AIRPRO_TICKMAP_1: AIRPRO_ALARM0_AS_TX Position */
#define LL_FUNC_REG_AIRPRO_TICKMAP_1_AIRPRO_ALARM0_AS_TX_Msk (0x01UL << LL_FUNC_REG_AIRPRO_TICKMAP_1_AIRPRO_ALARM0_AS_TX_Pos)/*!< LL_FUNC_REG AIRPRO_TICKMAP_1: AIRPRO_ALARM0_AS_TX Mask */

/* ------------------------  LL_FUNC_REG_AIRPRO_POLICY_GPI  ----------------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_GPI_RG_POLICY_GPI_Pos 0                                             /*!< LL_FUNC_REG AIRPRO_POLICY_GPI: RG_POLICY_GPI Position */
#define LL_FUNC_REG_AIRPRO_POLICY_GPI_RG_POLICY_GPI_Msk (0x0fUL << LL_FUNC_REG_AIRPRO_POLICY_GPI_RG_POLICY_GPI_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_GPI: RG_POLICY_GPI Mask */

/* --------------------  LL_FUNC_REG_AIRPRO_FOLLOWER_0_CONTROL  ------------------- */
#define LL_FUNC_REG_AIRPRO_FOLLOWER_0_CONTROL_RG_FOLLOWER0_OFFSET_Pos 0                               /*!< LL_FUNC_REG AIRPRO_FOLLOWER_0_CONTROL: RG_FOLLOWER0_OFFSET Position */
#define LL_FUNC_REG_AIRPRO_FOLLOWER_0_CONTROL_RG_FOLLOWER0_OFFSET_Msk (0x00000fffUL << LL_FUNC_REG_AIRPRO_FOLLOWER_0_CONTROL_RG_FOLLOWER0_OFFSET_Pos)/*!< LL_FUNC_REG AIRPRO_FOLLOWER_0_CONTROL: RG_FOLLOWER0_OFFSET Mask */
#define LL_FUNC_REG_AIRPRO_FOLLOWER_0_CONTROL_RG_FOLLOWER0_TRIGGER_SRC_Pos 16                         /*!< LL_FUNC_REG AIRPRO_FOLLOWER_0_CONTROL: RG_FOLLOWER0_TRIGGER_SRC
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_FOLLOWER_0_CONTROL_RG_FOLLOWER0_TRIGGER_SRC_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_FOLLOWER_0_CONTROL_RG_FOLLOWER0_TRIGGER_SRC_Pos)/*!< LL_FUNC_REG AIRPRO_FOLLOWER_0_CONTROL: RG_FOLLOWER0_TRIGGER_SRC
                                                         Mask                                                                                      */

/* --------------------  LL_FUNC_REG_AIRPRO_FOLLOWER_1_CONTROL  ------------------- */
#define LL_FUNC_REG_AIRPRO_FOLLOWER_1_CONTROL_RG_FOLLOWER1_OFFSET_Pos 0                               /*!< LL_FUNC_REG AIRPRO_FOLLOWER_1_CONTROL: RG_FOLLOWER1_OFFSET Position */
#define LL_FUNC_REG_AIRPRO_FOLLOWER_1_CONTROL_RG_FOLLOWER1_OFFSET_Msk (0x00000fffUL << LL_FUNC_REG_AIRPRO_FOLLOWER_1_CONTROL_RG_FOLLOWER1_OFFSET_Pos)/*!< LL_FUNC_REG AIRPRO_FOLLOWER_1_CONTROL: RG_FOLLOWER1_OFFSET Mask */
#define LL_FUNC_REG_AIRPRO_FOLLOWER_1_CONTROL_RG_FOLLOWER1_TRIGGER_SRC_Pos 16                         /*!< LL_FUNC_REG AIRPRO_FOLLOWER_1_CONTROL: RG_FOLLOWER1_TRIGGER_SRC
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_FOLLOWER_1_CONTROL_RG_FOLLOWER1_TRIGGER_SRC_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_FOLLOWER_1_CONTROL_RG_FOLLOWER1_TRIGGER_SRC_Pos)/*!< LL_FUNC_REG AIRPRO_FOLLOWER_1_CONTROL: RG_FOLLOWER1_TRIGGER_SRC
                                                         Mask                                                                                      */

/* ------------------------  LL_FUNC_REG_AIRPRO_ALARM0_EN  ------------------------ */
#define LL_FUNC_REG_AIRPRO_ALARM0_EN_RG_AIRPROTOCOL_ALARM0_EN_Pos 0                                   /*!< LL_FUNC_REG AIRPRO_ALARM0_EN: RG_AIRPROTOCOL_ALARM0_EN Position */
#define LL_FUNC_REG_AIRPRO_ALARM0_EN_RG_AIRPROTOCOL_ALARM0_EN_Msk (0x01UL << LL_FUNC_REG_AIRPRO_ALARM0_EN_RG_AIRPROTOCOL_ALARM0_EN_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM0_EN: RG_AIRPROTOCOL_ALARM0_EN Mask */

/* -----------------------  LL_FUNC_REG_AIRPRO_ALARM0_TIME  ----------------------- */
#define LL_FUNC_REG_AIRPRO_ALARM0_TIME_RG_AIRPROTOCOL_ALARM0_TIME_Pos 0                               /*!< LL_FUNC_REG AIRPRO_ALARM0_TIME: RG_AIRPROTOCOL_ALARM0_TIME Position */
#define LL_FUNC_REG_AIRPRO_ALARM0_TIME_RG_AIRPROTOCOL_ALARM0_TIME_Msk (0x00000fffUL << LL_FUNC_REG_AIRPRO_ALARM0_TIME_RG_AIRPROTOCOL_ALARM0_TIME_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM0_TIME: RG_AIRPROTOCOL_ALARM0_TIME Mask */

/* -------------------  LL_FUNC_REG_AIRPRO_ALARM0_OFFSET_EARLY  ------------------- */
#define LL_FUNC_REG_AIRPRO_ALARM0_OFFSET_EARLY_RG_AIRPROTOCOL_ALARM0_WINDOW_OFFSET_EARLY_Pos 0        /*!< LL_FUNC_REG AIRPRO_ALARM0_OFFSET_EARLY: RG_AIRPROTOCOL_ALARM0_WINDOW_OFFSE
                                                         T_EARLY Position                                                                          */
#define LL_FUNC_REG_AIRPRO_ALARM0_OFFSET_EARLY_RG_AIRPROTOCOL_ALARM0_WINDOW_OFFSET_EARLY_Msk (0x00000fffUL << LL_FUNC_REG_AIRPRO_ALARM0_OFFSET_EARLY_RG_AIRPROTOCOL_ALARM0_WINDOW_OFFSET_EARLY_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM0_OFFSET_EARLY: RG_AIRPROTOCOL_ALARM0_WINDOW_OFFSE
                                                         T_EARLY Mask                                                                              */

/* --------------------  LL_FUNC_REG_AIRPRO_ALARM0_OFFSET_LATE  ------------------- */
#define LL_FUNC_REG_AIRPRO_ALARM0_OFFSET_LATE_RG_AIRPROTOCOL_ALARM0_WINDOW_OFFSET_LATE_Pos 0          /*!< LL_FUNC_REG AIRPRO_ALARM0_OFFSET_LATE: RG_AIRPROTOCOL_ALARM0_WINDOW_OFFSET
                                                         _LATE Position                                                                            */
#define LL_FUNC_REG_AIRPRO_ALARM0_OFFSET_LATE_RG_AIRPROTOCOL_ALARM0_WINDOW_OFFSET_LATE_Msk (0x00000fffUL << LL_FUNC_REG_AIRPRO_ALARM0_OFFSET_LATE_RG_AIRPROTOCOL_ALARM0_WINDOW_OFFSET_LATE_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM0_OFFSET_LATE: RG_AIRPROTOCOL_ALARM0_WINDOW_OFFSET
                                                         _LATE Mask                                                                                */

/* ------------------  LL_FUNC_REG_AIRPRO_ALARM0_NOTIFY0_OFFSET  ------------------ */
#define LL_FUNC_REG_AIRPRO_ALARM0_NOTIFY0_OFFSET_RG_AIRPROTOCOL_ALARM0_NOTIFY0_OFFSET_Pos 0           /*!< LL_FUNC_REG AIRPRO_ALARM0_NOTIFY0_OFFSET: RG_AIRPROTOCOL_ALARM0_NOTIFY0_OF
                                                         FSET Position                                                                             */
#define LL_FUNC_REG_AIRPRO_ALARM0_NOTIFY0_OFFSET_RG_AIRPROTOCOL_ALARM0_NOTIFY0_OFFSET_Msk (0x00000fffUL << LL_FUNC_REG_AIRPRO_ALARM0_NOTIFY0_OFFSET_RG_AIRPROTOCOL_ALARM0_NOTIFY0_OFFSET_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM0_NOTIFY0_OFFSET: RG_AIRPROTOCOL_ALARM0_NOTIFY0_OF
                                                         FSET Mask                                                                                 */

/* ------------------  LL_FUNC_REG_AIRPRO_ALARM0_NOTIFY1_OFFSET  ------------------ */
#define LL_FUNC_REG_AIRPRO_ALARM0_NOTIFY1_OFFSET_RG_AIRPROTOCOL_ALARM0_NOTIFY1_OFFSET_Pos 0           /*!< LL_FUNC_REG AIRPRO_ALARM0_NOTIFY1_OFFSET: RG_AIRPROTOCOL_ALARM0_NOTIFY1_OF
                                                         FSET Position                                                                             */
#define LL_FUNC_REG_AIRPRO_ALARM0_NOTIFY1_OFFSET_RG_AIRPROTOCOL_ALARM0_NOTIFY1_OFFSET_Msk (0x00000fffUL << LL_FUNC_REG_AIRPRO_ALARM0_NOTIFY1_OFFSET_RG_AIRPROTOCOL_ALARM0_NOTIFY1_OFFSET_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM0_NOTIFY1_OFFSET: RG_AIRPROTOCOL_ALARM0_NOTIFY1_OF
                                                         FSET Mask                                                                                 */

/* ------------------  LL_FUNC_REG_AIRPRO_ALARM0_NOTIFY2_OFFSET  ------------------ */
#define LL_FUNC_REG_AIRPRO_ALARM0_NOTIFY2_OFFSET_RG_AIRPROTOCOL_ALARM0_NOTIFY2_OFFSET_Pos 0           /*!< LL_FUNC_REG AIRPRO_ALARM0_NOTIFY2_OFFSET: RG_AIRPROTOCOL_ALARM0_NOTIFY2_OF
                                                         FSET Position                                                                             */
#define LL_FUNC_REG_AIRPRO_ALARM0_NOTIFY2_OFFSET_RG_AIRPROTOCOL_ALARM0_NOTIFY2_OFFSET_Msk (0x00000fffUL << LL_FUNC_REG_AIRPRO_ALARM0_NOTIFY2_OFFSET_RG_AIRPROTOCOL_ALARM0_NOTIFY2_OFFSET_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM0_NOTIFY2_OFFSET: RG_AIRPROTOCOL_ALARM0_NOTIFY2_OF
                                                         FSET Mask                                                                                 */

/* ------------------  LL_FUNC_REG_AIRPRO_ALARM0_NOTIFY3_OFFSET  ------------------ */
#define LL_FUNC_REG_AIRPRO_ALARM0_NOTIFY3_OFFSET_RG_AIRPROTOCOL_ALARM0_NOTIFY3_OFFSET_Pos 0           /*!< LL_FUNC_REG AIRPRO_ALARM0_NOTIFY3_OFFSET: RG_AIRPROTOCOL_ALARM0_NOTIFY3_OF
                                                         FSET Position                                                                             */
#define LL_FUNC_REG_AIRPRO_ALARM0_NOTIFY3_OFFSET_RG_AIRPROTOCOL_ALARM0_NOTIFY3_OFFSET_Msk (0x00000fffUL << LL_FUNC_REG_AIRPRO_ALARM0_NOTIFY3_OFFSET_RG_AIRPROTOCOL_ALARM0_NOTIFY3_OFFSET_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM0_NOTIFY3_OFFSET: RG_AIRPROTOCOL_ALARM0_NOTIFY3_OF
                                                         FSET Mask                                                                                 */

/* ------------------  LL_FUNC_REG_AIRPRO_ALARM0_NOTIFY4_OFFSET  ------------------ */
#define LL_FUNC_REG_AIRPRO_ALARM0_NOTIFY4_OFFSET_RG_AIRPROTOCOL_ALARM0_NOTIFY4_OFFSET_Pos 0           /*!< LL_FUNC_REG AIRPRO_ALARM0_NOTIFY4_OFFSET: RG_AIRPROTOCOL_ALARM0_NOTIFY4_OF
                                                         FSET Position                                                                             */
#define LL_FUNC_REG_AIRPRO_ALARM0_NOTIFY4_OFFSET_RG_AIRPROTOCOL_ALARM0_NOTIFY4_OFFSET_Msk (0x00000fffUL << LL_FUNC_REG_AIRPRO_ALARM0_NOTIFY4_OFFSET_RG_AIRPROTOCOL_ALARM0_NOTIFY4_OFFSET_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM0_NOTIFY4_OFFSET: RG_AIRPROTOCOL_ALARM0_NOTIFY4_OF
                                                         FSET Mask                                                                                 */

/* ---------------------  LL_FUNC_REG_AIRPRO_ALARM0_IRQ_MASK  --------------------- */
#define LL_FUNC_REG_AIRPRO_ALARM0_IRQ_MASK_RG_AIRPROTOCOL_ALARM0_IRQ_MASK_Pos 0                       /*!< LL_FUNC_REG AIRPRO_ALARM0_IRQ_MASK: RG_AIRPROTOCOL_ALARM0_IRQ_MASK
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_ALARM0_IRQ_MASK_RG_AIRPROTOCOL_ALARM0_IRQ_MASK_Msk (0x000000ffUL << LL_FUNC_REG_AIRPRO_ALARM0_IRQ_MASK_RG_AIRPROTOCOL_ALARM0_IRQ_MASK_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM0_IRQ_MASK: RG_AIRPROTOCOL_ALARM0_IRQ_MASK
                                                         Mask                                                                                      */

/* ---------------------  LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR  -------------------- */
#define LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_0_Pos 0                   /*!< LL_FUNC_REG AIRPRO_ALARM0_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_0
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_0_Msk (0x01UL << LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_0_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM0_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_0
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_1_Pos 1                   /*!< LL_FUNC_REG AIRPRO_ALARM0_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_1
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_1_Msk (0x01UL << LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_1_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM0_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_1
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_2_Pos 2                   /*!< LL_FUNC_REG AIRPRO_ALARM0_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_2
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_2_Msk (0x01UL << LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_2_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM0_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_2
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_3_Pos 3                   /*!< LL_FUNC_REG AIRPRO_ALARM0_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_3
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_3_Msk (0x01UL << LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_3_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM0_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_3
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_4_Pos 4                   /*!< LL_FUNC_REG AIRPRO_ALARM0_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_4
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_4_Msk (0x01UL << LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_4_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM0_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_4
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_5_Pos 5                   /*!< LL_FUNC_REG AIRPRO_ALARM0_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_5
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_5_Msk (0x01UL << LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_5_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM0_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_5
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_6_Pos 6                   /*!< LL_FUNC_REG AIRPRO_ALARM0_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_6
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_6_Msk (0x01UL << LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_6_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM0_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_6
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_7_Pos 7                   /*!< LL_FUNC_REG AIRPRO_ALARM0_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_7
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_7_Msk (0x01UL << LL_FUNC_REG_AIRPRO_ALARM0_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_7_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM0_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM0_IRQ_CLEAR_7
                                                         Mask                                                                                      */

/* --------------------  LL_FUNC_REG_AIRPRO_ALARM_0_IRQ_REASON  ------------------- */
#define LL_FUNC_REG_AIRPRO_ALARM_0_IRQ_REASON_AIR_PROTOCOL_ALARM0_IRQ_REASON_Pos 0                    /*!< LL_FUNC_REG AIRPRO_ALARM_0_IRQ_REASON: AIR_PROTOCOL_ALARM0_IRQ_REASON
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_ALARM_0_IRQ_REASON_AIR_PROTOCOL_ALARM0_IRQ_REASON_Msk (0x000000ffUL << LL_FUNC_REG_AIRPRO_ALARM_0_IRQ_REASON_AIR_PROTOCOL_ALARM0_IRQ_REASON_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM_0_IRQ_REASON: AIR_PROTOCOL_ALARM0_IRQ_REASON
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_ALARM_0_IRQ_REASON_AIR_PROTOCOL_ALARM0_IRQ_Pos 8                           /*!< LL_FUNC_REG AIRPRO_ALARM_0_IRQ_REASON: AIR_PROTOCOL_ALARM0_IRQ
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_ALARM_0_IRQ_REASON_AIR_PROTOCOL_ALARM0_IRQ_Msk (0x01UL << LL_FUNC_REG_AIRPRO_ALARM_0_IRQ_REASON_AIR_PROTOCOL_ALARM0_IRQ_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM_0_IRQ_REASON: AIR_PROTOCOL_ALARM0_IRQ
                                                         Mask                                                                                      */

/* ------------------------  LL_FUNC_REG_AIRPRO_ALARM1_EN  ------------------------ */
#define LL_FUNC_REG_AIRPRO_ALARM1_EN_RG_AIRPROTOCOL_ALARM1_EN_Pos 0                                   /*!< LL_FUNC_REG AIRPRO_ALARM1_EN: RG_AIRPROTOCOL_ALARM1_EN Position */
#define LL_FUNC_REG_AIRPRO_ALARM1_EN_RG_AIRPROTOCOL_ALARM1_EN_Msk (0x01UL << LL_FUNC_REG_AIRPRO_ALARM1_EN_RG_AIRPROTOCOL_ALARM1_EN_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM1_EN: RG_AIRPROTOCOL_ALARM1_EN Mask */

/* -----------------------  LL_FUNC_REG_AIRPRO_ALARM1_TIME  ----------------------- */
#define LL_FUNC_REG_AIRPRO_ALARM1_TIME_RG_AIRPROTOCOL_ALARM1_TIME_Pos 0                               /*!< LL_FUNC_REG AIRPRO_ALARM1_TIME: RG_AIRPROTOCOL_ALARM1_TIME Position */
#define LL_FUNC_REG_AIRPRO_ALARM1_TIME_RG_AIRPROTOCOL_ALARM1_TIME_Msk (0x00000fffUL << LL_FUNC_REG_AIRPRO_ALARM1_TIME_RG_AIRPROTOCOL_ALARM1_TIME_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM1_TIME: RG_AIRPROTOCOL_ALARM1_TIME Mask */

/* -------------------  LL_FUNC_REG_AIRPRO_ALARM1_OFFSET_EARLY  ------------------- */
#define LL_FUNC_REG_AIRPRO_ALARM1_OFFSET_EARLY_RG_AIRPROTOCOL_ALARM1_WINDOW_OFFSET_EARLY_Pos 0        /*!< LL_FUNC_REG AIRPRO_ALARM1_OFFSET_EARLY: RG_AIRPROTOCOL_ALARM1_WINDOW_OFFSE
                                                         T_EARLY Position                                                                          */
#define LL_FUNC_REG_AIRPRO_ALARM1_OFFSET_EARLY_RG_AIRPROTOCOL_ALARM1_WINDOW_OFFSET_EARLY_Msk (0x00000fffUL << LL_FUNC_REG_AIRPRO_ALARM1_OFFSET_EARLY_RG_AIRPROTOCOL_ALARM1_WINDOW_OFFSET_EARLY_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM1_OFFSET_EARLY: RG_AIRPROTOCOL_ALARM1_WINDOW_OFFSE
                                                         T_EARLY Mask                                                                              */

/* --------------------  LL_FUNC_REG_AIRPRO_ALARM1_OFFSET_LATE  ------------------- */
#define LL_FUNC_REG_AIRPRO_ALARM1_OFFSET_LATE_RG_AIRPROTOCOL_ALARM1_WINDOW_OFFSET_LATE_Pos 0          /*!< LL_FUNC_REG AIRPRO_ALARM1_OFFSET_LATE: RG_AIRPROTOCOL_ALARM1_WINDOW_OFFSET
                                                         _LATE Position                                                                            */
#define LL_FUNC_REG_AIRPRO_ALARM1_OFFSET_LATE_RG_AIRPROTOCOL_ALARM1_WINDOW_OFFSET_LATE_Msk (0x00000fffUL << LL_FUNC_REG_AIRPRO_ALARM1_OFFSET_LATE_RG_AIRPROTOCOL_ALARM1_WINDOW_OFFSET_LATE_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM1_OFFSET_LATE: RG_AIRPROTOCOL_ALARM1_WINDOW_OFFSET
                                                         _LATE Mask                                                                                */

/* ------------------  LL_FUNC_REG_AIRPRO_ALARM1_NOTIFY0_OFFSET  ------------------ */
#define LL_FUNC_REG_AIRPRO_ALARM1_NOTIFY0_OFFSET_RG_AIRPROTOCOL_ALARM1_NOTIFY0_OFFSET_Pos 0           /*!< LL_FUNC_REG AIRPRO_ALARM1_NOTIFY0_OFFSET: RG_AIRPROTOCOL_ALARM1_NOTIFY0_OF
                                                         FSET Position                                                                             */
#define LL_FUNC_REG_AIRPRO_ALARM1_NOTIFY0_OFFSET_RG_AIRPROTOCOL_ALARM1_NOTIFY0_OFFSET_Msk (0x00000fffUL << LL_FUNC_REG_AIRPRO_ALARM1_NOTIFY0_OFFSET_RG_AIRPROTOCOL_ALARM1_NOTIFY0_OFFSET_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM1_NOTIFY0_OFFSET: RG_AIRPROTOCOL_ALARM1_NOTIFY0_OF
                                                         FSET Mask                                                                                 */

/* ------------------  LL_FUNC_REG_AIRPRO_ALARM1_NOTIFY1_OFFSET  ------------------ */
#define LL_FUNC_REG_AIRPRO_ALARM1_NOTIFY1_OFFSET_RG_AIRPROTOCOL_ALARM1_NOTIFY1_OFFSET_Pos 0           /*!< LL_FUNC_REG AIRPRO_ALARM1_NOTIFY1_OFFSET: RG_AIRPROTOCOL_ALARM1_NOTIFY1_OF
                                                         FSET Position                                                                             */
#define LL_FUNC_REG_AIRPRO_ALARM1_NOTIFY1_OFFSET_RG_AIRPROTOCOL_ALARM1_NOTIFY1_OFFSET_Msk (0x00000fffUL << LL_FUNC_REG_AIRPRO_ALARM1_NOTIFY1_OFFSET_RG_AIRPROTOCOL_ALARM1_NOTIFY1_OFFSET_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM1_NOTIFY1_OFFSET: RG_AIRPROTOCOL_ALARM1_NOTIFY1_OF
                                                         FSET Mask                                                                                 */

/* ------------------  LL_FUNC_REG_AIRPRO_ALARM1_NOTIFY2_OFFSET  ------------------ */
#define LL_FUNC_REG_AIRPRO_ALARM1_NOTIFY2_OFFSET_RG_AIRPROTOCOL_ALARM1_NOTIFY2_OFFSET_Pos 0           /*!< LL_FUNC_REG AIRPRO_ALARM1_NOTIFY2_OFFSET: RG_AIRPROTOCOL_ALARM1_NOTIFY2_OF
                                                         FSET Position                                                                             */
#define LL_FUNC_REG_AIRPRO_ALARM1_NOTIFY2_OFFSET_RG_AIRPROTOCOL_ALARM1_NOTIFY2_OFFSET_Msk (0x00000fffUL << LL_FUNC_REG_AIRPRO_ALARM1_NOTIFY2_OFFSET_RG_AIRPROTOCOL_ALARM1_NOTIFY2_OFFSET_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM1_NOTIFY2_OFFSET: RG_AIRPROTOCOL_ALARM1_NOTIFY2_OF
                                                         FSET Mask                                                                                 */

/* ------------------  LL_FUNC_REG_AIRPRO_ALARM1_NOTIFY3_OFFSET  ------------------ */
#define LL_FUNC_REG_AIRPRO_ALARM1_NOTIFY3_OFFSET_RG_AIRPROTOCOL_ALARM1_NOTIFY3_OFFSET_Pos 0           /*!< LL_FUNC_REG AIRPRO_ALARM1_NOTIFY3_OFFSET: RG_AIRPROTOCOL_ALARM1_NOTIFY3_OF
                                                         FSET Position                                                                             */
#define LL_FUNC_REG_AIRPRO_ALARM1_NOTIFY3_OFFSET_RG_AIRPROTOCOL_ALARM1_NOTIFY3_OFFSET_Msk (0x00000fffUL << LL_FUNC_REG_AIRPRO_ALARM1_NOTIFY3_OFFSET_RG_AIRPROTOCOL_ALARM1_NOTIFY3_OFFSET_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM1_NOTIFY3_OFFSET: RG_AIRPROTOCOL_ALARM1_NOTIFY3_OF
                                                         FSET Mask                                                                                 */

/* ------------------  LL_FUNC_REG_AIRPRO_ALARM1_NOTIFY4_OFFSET  ------------------ */
#define LL_FUNC_REG_AIRPRO_ALARM1_NOTIFY4_OFFSET_RG_AIRPROTOCOL_ALARM1_NOTIFY4_OFFSET_Pos 0           /*!< LL_FUNC_REG AIRPRO_ALARM1_NOTIFY4_OFFSET: RG_AIRPROTOCOL_ALARM1_NOTIFY4_OF
                                                         FSET Position                                                                             */
#define LL_FUNC_REG_AIRPRO_ALARM1_NOTIFY4_OFFSET_RG_AIRPROTOCOL_ALARM1_NOTIFY4_OFFSET_Msk (0x00000fffUL << LL_FUNC_REG_AIRPRO_ALARM1_NOTIFY4_OFFSET_RG_AIRPROTOCOL_ALARM1_NOTIFY4_OFFSET_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM1_NOTIFY4_OFFSET: RG_AIRPROTOCOL_ALARM1_NOTIFY4_OF
                                                         FSET Mask                                                                                 */

/* ---------------------  LL_FUNC_REG_AIRPRO_ALARM1_IRQ_MASK  --------------------- */
#define LL_FUNC_REG_AIRPRO_ALARM1_IRQ_MASK_RG_AIRPROTOCOL_ALARM1_IRQ_MASK_Pos 0                       /*!< LL_FUNC_REG AIRPRO_ALARM1_IRQ_MASK: RG_AIRPROTOCOL_ALARM1_IRQ_MASK
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_ALARM1_IRQ_MASK_RG_AIRPROTOCOL_ALARM1_IRQ_MASK_Msk (0x000000ffUL << LL_FUNC_REG_AIRPRO_ALARM1_IRQ_MASK_RG_AIRPROTOCOL_ALARM1_IRQ_MASK_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM1_IRQ_MASK: RG_AIRPROTOCOL_ALARM1_IRQ_MASK
                                                         Mask                                                                                      */

/* ---------------------  LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR  -------------------- */
#define LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_0_Pos 0                   /*!< LL_FUNC_REG AIRPRO_ALARM1_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_0
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_0_Msk (0x01UL << LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_0_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM1_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_0
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_1_Pos 1                   /*!< LL_FUNC_REG AIRPRO_ALARM1_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_1
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_1_Msk (0x01UL << LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_1_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM1_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_1
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_2_Pos 2                   /*!< LL_FUNC_REG AIRPRO_ALARM1_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_2
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_2_Msk (0x01UL << LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_2_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM1_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_2
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_3_Pos 3                   /*!< LL_FUNC_REG AIRPRO_ALARM1_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_3
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_3_Msk (0x01UL << LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_3_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM1_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_3
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_4_Pos 4                   /*!< LL_FUNC_REG AIRPRO_ALARM1_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_4
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_4_Msk (0x01UL << LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_4_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM1_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_4
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_5_Pos 5                   /*!< LL_FUNC_REG AIRPRO_ALARM1_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_5
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_5_Msk (0x01UL << LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_5_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM1_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_5
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_6_Pos 6                   /*!< LL_FUNC_REG AIRPRO_ALARM1_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_6
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_6_Msk (0x01UL << LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_6_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM1_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_6
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_7_Pos 7                   /*!< LL_FUNC_REG AIRPRO_ALARM1_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_7
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_7_Msk (0x01UL << LL_FUNC_REG_AIRPRO_ALARM1_IRQ_CLEAR_RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_7_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM1_IRQ_CLEAR: RG_AIRPROTOCOL_ALARM1_IRQ_CLEAR_7
                                                         Mask                                                                                      */

/* --------------------  LL_FUNC_REG_AIRPRO_ALARM_1_IRQ_REASON  ------------------- */
#define LL_FUNC_REG_AIRPRO_ALARM_1_IRQ_REASON_AIR_PROTOCOL_ALARM1_IRQ_REASON_Pos 0                    /*!< LL_FUNC_REG AIRPRO_ALARM_1_IRQ_REASON: AIR_PROTOCOL_ALARM1_IRQ_REASON
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_ALARM_1_IRQ_REASON_AIR_PROTOCOL_ALARM1_IRQ_REASON_Msk (0x000000ffUL << LL_FUNC_REG_AIRPRO_ALARM_1_IRQ_REASON_AIR_PROTOCOL_ALARM1_IRQ_REASON_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM_1_IRQ_REASON: AIR_PROTOCOL_ALARM1_IRQ_REASON
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_ALARM_1_IRQ_REASON_AIR_PROTOCOL_ALARM1_IRQ_Pos 8                           /*!< LL_FUNC_REG AIRPRO_ALARM_1_IRQ_REASON: AIR_PROTOCOL_ALARM1_IRQ
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_ALARM_1_IRQ_REASON_AIR_PROTOCOL_ALARM1_IRQ_Msk (0x01UL << LL_FUNC_REG_AIRPRO_ALARM_1_IRQ_REASON_AIR_PROTOCOL_ALARM1_IRQ_Pos)/*!< LL_FUNC_REG AIRPRO_ALARM_1_IRQ_REASON: AIR_PROTOCOL_ALARM1_IRQ
                                                         Mask                                                                                      */

/* ----------------LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL_ALARM0_BY_FOLLOWER0_POLICY_SEL0_Pos 0    /*!< LL_FUNC_REG AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL: ALARM0_BY_FOLLOWER0_
                                                         POLICY_SEL0 Position                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL_ALARM0_BY_FOLLOWER0_POLICY_SEL0_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL_ALARM0_BY_FOLLOWER0_POLICY_SEL0_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL: ALARM0_BY_FOLLOWER0_
                                                         POLICY_SEL0 Mask                                                                          */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL_ALARM0_BY_FOLLOWER0_POLICY_SEL1_Pos 8    /*!< LL_FUNC_REG AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL: ALARM0_BY_FOLLOWER0_
                                                         POLICY_SEL1 Position                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL_ALARM0_BY_FOLLOWER0_POLICY_SEL1_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL_ALARM0_BY_FOLLOWER0_POLICY_SEL1_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL: ALARM0_BY_FOLLOWER0_
                                                         POLICY_SEL1 Mask                                                                          */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL_ALARM0_BY_FOLLOWER0_POLICY_SEL2_Pos 16   /*!< LL_FUNC_REG AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL: ALARM0_BY_FOLLOWER0_
                                                         POLICY_SEL2 Position                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL_ALARM0_BY_FOLLOWER0_POLICY_SEL2_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL_ALARM0_BY_FOLLOWER0_POLICY_SEL2_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL: ALARM0_BY_FOLLOWER0_
                                                         POLICY_SEL2 Mask                                                                          */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL_ALARM0_BY_FOLLOWER0_POLICY_SEL3_Pos 24   /*!< LL_FUNC_REG AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL: ALARM0_BY_FOLLOWER0_
                                                         POLICY_SEL3 Position                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL_ALARM0_BY_FOLLOWER0_POLICY_SEL3_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL_ALARM0_BY_FOLLOWER0_POLICY_SEL3_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL: ALARM0_BY_FOLLOWER0_
                                                         POLICY_SEL3 Mask                                                                          */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL_ALARM0_BY_FOLLOWER0_POLICY_MANUAL_VALUE_Pos 30/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL: ALARM0_BY_FOLLOWER0_
                                                         POLICY_MANUAL_VALUE Position                                                              */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL_ALARM0_BY_FOLLOWER0_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL_ALARM0_BY_FOLLOWER0_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL: ALARM0_BY_FOLLOWER0_
                                                         POLICY_MANUAL_VALUE Mask                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL_ALARM0_BY_FOLLOWER0_POLICY_MANUAL_EN_Pos 31/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL: ALARM0_BY_FOLLOWER0_
                                                         POLICY_MANUAL_EN Position                                                                 */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL_ALARM0_BY_FOLLOWER0_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL_ALARM0_BY_FOLLOWER0_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_SIGNAL: ALARM0_BY_FOLLOWER0_
                                                         POLICY_MANUAL_EN Mask                                                                     */

/* ----------------LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_W1C_W1S---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_W1C_W1S_ALARM0_BY_FOLLOWER0_POLICY_W1C_Pos 0    /*!< LL_FUNC_REG AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_W1C_W1S: ALARM0_BY_FOLLOWER0
                                                         _POLICY_W1C Position                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_W1C_W1S_ALARM0_BY_FOLLOWER0_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_W1C_W1S_ALARM0_BY_FOLLOWER0_POLICY_W1C_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_W1C_W1S: ALARM0_BY_FOLLOWER0
                                                         _POLICY_W1C Mask                                                                          */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_W1C_W1S_ALARM0_BY_FOLLOWER0_POLICY_W1S_Pos 1    /*!< LL_FUNC_REG AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_W1C_W1S: ALARM0_BY_FOLLOWER0
                                                         _POLICY_W1S Position                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_W1C_W1S_ALARM0_BY_FOLLOWER0_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_W1C_W1S_ALARM0_BY_FOLLOWER0_POLICY_W1S_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_W1C_W1S: ALARM0_BY_FOLLOWER0
                                                         _POLICY_W1S Mask                                                                          */

/* ----------------LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_POLICY---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_POLICY_ALARM0_BY_FOLLOWER0_POLICY_Pos 0         /*!< LL_FUNC_REG AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_POLICY: ALARM0_BY_FOLLOWER0_
                                                         POLICY Position                                                                           */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_POLICY_ALARM0_BY_FOLLOWER0_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_POLICY_ALARM0_BY_FOLLOWER0_POLICY_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_POLICY: ALARM0_BY_FOLLOWER0_
                                                         POLICY Mask                                                                               */

/* ----------------LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL_ALARM1_BY_FOLLOWER1_POLICY_SEL0_Pos 0    /*!< LL_FUNC_REG AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL: ALARM1_BY_FOLLOWER1_
                                                         POLICY_SEL0 Position                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL_ALARM1_BY_FOLLOWER1_POLICY_SEL0_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL_ALARM1_BY_FOLLOWER1_POLICY_SEL0_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL: ALARM1_BY_FOLLOWER1_
                                                         POLICY_SEL0 Mask                                                                          */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL_ALARM1_BY_FOLLOWER1_POLICY_SEL1_Pos 8    /*!< LL_FUNC_REG AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL: ALARM1_BY_FOLLOWER1_
                                                         POLICY_SEL1 Position                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL_ALARM1_BY_FOLLOWER1_POLICY_SEL1_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL_ALARM1_BY_FOLLOWER1_POLICY_SEL1_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL: ALARM1_BY_FOLLOWER1_
                                                         POLICY_SEL1 Mask                                                                          */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL_ALARM1_BY_FOLLOWER1_POLICY_SEL2_Pos 16   /*!< LL_FUNC_REG AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL: ALARM1_BY_FOLLOWER1_
                                                         POLICY_SEL2 Position                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL_ALARM1_BY_FOLLOWER1_POLICY_SEL2_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL_ALARM1_BY_FOLLOWER1_POLICY_SEL2_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL: ALARM1_BY_FOLLOWER1_
                                                         POLICY_SEL2 Mask                                                                          */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL_ALARM1_BY_FOLLOWER1_POLICY_SEL3_Pos 24   /*!< LL_FUNC_REG AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL: ALARM1_BY_FOLLOWER1_
                                                         POLICY_SEL3 Position                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL_ALARM1_BY_FOLLOWER1_POLICY_SEL3_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL_ALARM1_BY_FOLLOWER1_POLICY_SEL3_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL: ALARM1_BY_FOLLOWER1_
                                                         POLICY_SEL3 Mask                                                                          */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL_ALARM1_BY_FOLLOWER1_POLICY_MANUAL_VALUE_Pos 30/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL: ALARM1_BY_FOLLOWER1_
                                                         POLICY_MANUAL_VALUE Position                                                              */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL_ALARM1_BY_FOLLOWER1_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL_ALARM1_BY_FOLLOWER1_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL: ALARM1_BY_FOLLOWER1_
                                                         POLICY_MANUAL_VALUE Mask                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL_ALARM1_BY_FOLLOWER1_POLICY_MANUAL_EN_Pos 31/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL: ALARM1_BY_FOLLOWER1_
                                                         POLICY_MANUAL_EN Position                                                                 */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL_ALARM1_BY_FOLLOWER1_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL_ALARM1_BY_FOLLOWER1_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_SIGNAL: ALARM1_BY_FOLLOWER1_
                                                         POLICY_MANUAL_EN Mask                                                                     */

/* ----------------LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_W1C_W1S---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_W1C_W1S_ALARM1_BY_FOLLOWER1_POLICY_W1C_Pos 0    /*!< LL_FUNC_REG AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_W1C_W1S: ALARM1_BY_FOLLOWER1
                                                         _POLICY_W1C Position                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_W1C_W1S_ALARM1_BY_FOLLOWER1_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_W1C_W1S_ALARM1_BY_FOLLOWER1_POLICY_W1C_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_W1C_W1S: ALARM1_BY_FOLLOWER1
                                                         _POLICY_W1C Mask                                                                          */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_W1C_W1S_ALARM1_BY_FOLLOWER1_POLICY_W1S_Pos 1    /*!< LL_FUNC_REG AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_W1C_W1S: ALARM1_BY_FOLLOWER1
                                                         _POLICY_W1S Position                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_W1C_W1S_ALARM1_BY_FOLLOWER1_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_W1C_W1S_ALARM1_BY_FOLLOWER1_POLICY_W1S_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_W1C_W1S: ALARM1_BY_FOLLOWER1
                                                         _POLICY_W1S Mask                                                                          */

/* ----------------LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_POLICY---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_POLICY_ALARM1_BY_FOLLOWER1_POLICY_Pos 0         /*!< LL_FUNC_REG AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_POLICY: ALARM1_BY_FOLLOWER1_
                                                         POLICY Position                                                                           */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_POLICY_ALARM1_BY_FOLLOWER1_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_POLICY_ALARM1_BY_FOLLOWER1_POLICY_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_POLICY: ALARM1_BY_FOLLOWER1_
                                                         POLICY Mask                                                                               */

/* ----------------  LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL_FOLLOWER0_EN_POLICY_SEL0_Pos 0                  /*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL: FOLLOWER0_EN_POLICY_SEL0
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL_FOLLOWER0_EN_POLICY_SEL0_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL_FOLLOWER0_EN_POLICY_SEL0_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL: FOLLOWER0_EN_POLICY_SEL0
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL_FOLLOWER0_EN_POLICY_SEL1_Pos 8                  /*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL: FOLLOWER0_EN_POLICY_SEL1
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL_FOLLOWER0_EN_POLICY_SEL1_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL_FOLLOWER0_EN_POLICY_SEL1_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL: FOLLOWER0_EN_POLICY_SEL1
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL_FOLLOWER0_EN_POLICY_SEL2_Pos 16                 /*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL: FOLLOWER0_EN_POLICY_SEL2
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL_FOLLOWER0_EN_POLICY_SEL2_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL_FOLLOWER0_EN_POLICY_SEL2_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL: FOLLOWER0_EN_POLICY_SEL2
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL_FOLLOWER0_EN_POLICY_SEL3_Pos 24                 /*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL: FOLLOWER0_EN_POLICY_SEL3
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL_FOLLOWER0_EN_POLICY_SEL3_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL_FOLLOWER0_EN_POLICY_SEL3_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL: FOLLOWER0_EN_POLICY_SEL3
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL_FOLLOWER0_EN_POLICY_MANUAL_VALUE_Pos 30         /*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL: FOLLOWER0_EN_POLICY_MANUAL_
                                                         VALUE Position                                                                            */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL_FOLLOWER0_EN_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL_FOLLOWER0_EN_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL: FOLLOWER0_EN_POLICY_MANUAL_
                                                         VALUE Mask                                                                                */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL_FOLLOWER0_EN_POLICY_MANUAL_EN_Pos 31            /*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL: FOLLOWER0_EN_POLICY_MANUAL_
                                                         EN Position                                                                               */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL_FOLLOWER0_EN_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL_FOLLOWER0_EN_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER0_EN_SIGNAL: FOLLOWER0_EN_POLICY_MANUAL_
                                                         EN Mask                                                                                   */

/* ---------------- LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_W1C_W1S ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_W1C_W1S_FOLLOWER0_EN_POLICY_W1C_Pos 0                  /*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER0_EN_W1C_W1S: FOLLOWER0_EN_POLICY_W1C
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_W1C_W1S_FOLLOWER0_EN_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_W1C_W1S_FOLLOWER0_EN_POLICY_W1C_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER0_EN_W1C_W1S: FOLLOWER0_EN_POLICY_W1C
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_W1C_W1S_FOLLOWER0_EN_POLICY_W1S_Pos 1                  /*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER0_EN_W1C_W1S: FOLLOWER0_EN_POLICY_W1S
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_W1C_W1S_FOLLOWER0_EN_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_W1C_W1S_FOLLOWER0_EN_POLICY_W1S_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER0_EN_W1C_W1S: FOLLOWER0_EN_POLICY_W1S
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_POLICY ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_POLICY_FOLLOWER0_EN_POLICY_Pos 0                       /*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER0_EN_POLICY: FOLLOWER0_EN_POLICY
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_POLICY_FOLLOWER0_EN_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_POLICY_FOLLOWER0_EN_POLICY_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER0_EN_POLICY: FOLLOWER0_EN_POLICY
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL_FOLLOWER1_EN_POLICY_SEL0_Pos 0                  /*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL: FOLLOWER1_EN_POLICY_SEL0
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL_FOLLOWER1_EN_POLICY_SEL0_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL_FOLLOWER1_EN_POLICY_SEL0_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL: FOLLOWER1_EN_POLICY_SEL0
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL_FOLLOWER1_EN_POLICY_SEL1_Pos 8                  /*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL: FOLLOWER1_EN_POLICY_SEL1
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL_FOLLOWER1_EN_POLICY_SEL1_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL_FOLLOWER1_EN_POLICY_SEL1_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL: FOLLOWER1_EN_POLICY_SEL1
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL_FOLLOWER1_EN_POLICY_SEL2_Pos 16                 /*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL: FOLLOWER1_EN_POLICY_SEL2
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL_FOLLOWER1_EN_POLICY_SEL2_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL_FOLLOWER1_EN_POLICY_SEL2_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL: FOLLOWER1_EN_POLICY_SEL2
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL_FOLLOWER1_EN_POLICY_SEL3_Pos 24                 /*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL: FOLLOWER1_EN_POLICY_SEL3
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL_FOLLOWER1_EN_POLICY_SEL3_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL_FOLLOWER1_EN_POLICY_SEL3_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL: FOLLOWER1_EN_POLICY_SEL3
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL_FOLLOWER1_EN_POLICY_MANUAL_VALUE_Pos 30         /*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL: FOLLOWER1_EN_POLICY_MANUAL_
                                                         VALUE Position                                                                            */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL_FOLLOWER1_EN_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL_FOLLOWER1_EN_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL: FOLLOWER1_EN_POLICY_MANUAL_
                                                         VALUE Mask                                                                                */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL_FOLLOWER1_EN_POLICY_MANUAL_EN_Pos 31            /*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL: FOLLOWER1_EN_POLICY_MANUAL_
                                                         EN Position                                                                               */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL_FOLLOWER1_EN_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL_FOLLOWER1_EN_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER1_EN_SIGNAL: FOLLOWER1_EN_POLICY_MANUAL_
                                                         EN Mask                                                                                   */

/* ---------------- LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_W1C_W1S ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_W1C_W1S_FOLLOWER1_EN_POLICY_W1C_Pos 0                  /*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER1_EN_W1C_W1S: FOLLOWER1_EN_POLICY_W1C
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_W1C_W1S_FOLLOWER1_EN_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_W1C_W1S_FOLLOWER1_EN_POLICY_W1C_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER1_EN_W1C_W1S: FOLLOWER1_EN_POLICY_W1C
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_W1C_W1S_FOLLOWER1_EN_POLICY_W1S_Pos 1                  /*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER1_EN_W1C_W1S: FOLLOWER1_EN_POLICY_W1S
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_W1C_W1S_FOLLOWER1_EN_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_W1C_W1S_FOLLOWER1_EN_POLICY_W1S_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER1_EN_W1C_W1S: FOLLOWER1_EN_POLICY_W1S
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_POLICY ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_POLICY_FOLLOWER1_EN_POLICY_Pos 0                       /*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER1_EN_POLICY: FOLLOWER1_EN_POLICY
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_POLICY_FOLLOWER1_EN_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_POLICY_FOLLOWER1_EN_POLICY_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER1_EN_POLICY: FOLLOWER1_EN_POLICY
                                                         Mask                                                                                      */

/* -----------------  LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_SIGNAL  ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_SIGNAL_RF_TX_EN_R_POLICY_SEL0_Pos 0                      /*!< LL_FUNC_REG AIRPRO_POLICY_RF_TX_EN_R_SIGNAL: RF_TX_EN_R_POLICY_SEL0
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_SIGNAL_RF_TX_EN_R_POLICY_SEL0_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_SIGNAL_RF_TX_EN_R_POLICY_SEL0_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RF_TX_EN_R_SIGNAL: RF_TX_EN_R_POLICY_SEL0
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_SIGNAL_RF_TX_EN_R_POLICY_SEL1_Pos 8                      /*!< LL_FUNC_REG AIRPRO_POLICY_RF_TX_EN_R_SIGNAL: RF_TX_EN_R_POLICY_SEL1
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_SIGNAL_RF_TX_EN_R_POLICY_SEL1_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_SIGNAL_RF_TX_EN_R_POLICY_SEL1_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RF_TX_EN_R_SIGNAL: RF_TX_EN_R_POLICY_SEL1
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_SIGNAL_RF_TX_EN_R_POLICY_SEL2_Pos 16                     /*!< LL_FUNC_REG AIRPRO_POLICY_RF_TX_EN_R_SIGNAL: RF_TX_EN_R_POLICY_SEL2
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_SIGNAL_RF_TX_EN_R_POLICY_SEL2_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_SIGNAL_RF_TX_EN_R_POLICY_SEL2_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RF_TX_EN_R_SIGNAL: RF_TX_EN_R_POLICY_SEL2
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_SIGNAL_RF_TX_EN_R_POLICY_SEL3_Pos 24                     /*!< LL_FUNC_REG AIRPRO_POLICY_RF_TX_EN_R_SIGNAL: RF_TX_EN_R_POLICY_SEL3
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_SIGNAL_RF_TX_EN_R_POLICY_SEL3_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_SIGNAL_RF_TX_EN_R_POLICY_SEL3_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RF_TX_EN_R_SIGNAL: RF_TX_EN_R_POLICY_SEL3
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_SIGNAL_RF_TX_EN_R_POLICY_MANUAL_VALUE_Pos 30             /*!< LL_FUNC_REG AIRPRO_POLICY_RF_TX_EN_R_SIGNAL: RF_TX_EN_R_POLICY_MANUAL_VALU
                                                         E Position                                                                                */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_SIGNAL_RF_TX_EN_R_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_SIGNAL_RF_TX_EN_R_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RF_TX_EN_R_SIGNAL: RF_TX_EN_R_POLICY_MANUAL_VALU
                                                         E Mask                                                                                    */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_SIGNAL_RF_TX_EN_R_POLICY_MANUAL_EN_Pos 31                /*!< LL_FUNC_REG AIRPRO_POLICY_RF_TX_EN_R_SIGNAL: RF_TX_EN_R_POLICY_MANUAL_EN
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_SIGNAL_RF_TX_EN_R_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_SIGNAL_RF_TX_EN_R_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RF_TX_EN_R_SIGNAL: RF_TX_EN_R_POLICY_MANUAL_EN
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_W1C_W1S  ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_W1C_W1S_RF_TX_EN_R_POLICY_W1C_Pos 0                      /*!< LL_FUNC_REG AIRPRO_POLICY_RF_TX_EN_R_W1C_W1S: RF_TX_EN_R_POLICY_W1C
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_W1C_W1S_RF_TX_EN_R_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_W1C_W1S_RF_TX_EN_R_POLICY_W1C_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RF_TX_EN_R_W1C_W1S: RF_TX_EN_R_POLICY_W1C
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_W1C_W1S_RF_TX_EN_R_POLICY_W1S_Pos 1                      /*!< LL_FUNC_REG AIRPRO_POLICY_RF_TX_EN_R_W1C_W1S: RF_TX_EN_R_POLICY_W1S
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_W1C_W1S_RF_TX_EN_R_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_W1C_W1S_RF_TX_EN_R_POLICY_W1S_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RF_TX_EN_R_W1C_W1S: RF_TX_EN_R_POLICY_W1S
                                                         Mask                                                                                      */

/* -----------------  LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_POLICY  ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_POLICY_RF_TX_EN_R_POLICY_Pos 0                           /*!< LL_FUNC_REG AIRPRO_POLICY_RF_TX_EN_R_POLICY: RF_TX_EN_R_POLICY
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_POLICY_RF_TX_EN_R_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_POLICY_RF_TX_EN_R_POLICY_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RF_TX_EN_R_POLICY: RF_TX_EN_R_POLICY
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL  ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL_PHY_TX_EN_R_POLICY_SEL0_Pos 0                    /*!< LL_FUNC_REG AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL: PHY_TX_EN_R_POLICY_SEL0
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL_PHY_TX_EN_R_POLICY_SEL0_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL_PHY_TX_EN_R_POLICY_SEL0_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL: PHY_TX_EN_R_POLICY_SEL0
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL_PHY_TX_EN_R_POLICY_SEL1_Pos 8                    /*!< LL_FUNC_REG AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL: PHY_TX_EN_R_POLICY_SEL1
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL_PHY_TX_EN_R_POLICY_SEL1_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL_PHY_TX_EN_R_POLICY_SEL1_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL: PHY_TX_EN_R_POLICY_SEL1
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL_PHY_TX_EN_R_POLICY_SEL2_Pos 16                   /*!< LL_FUNC_REG AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL: PHY_TX_EN_R_POLICY_SEL2
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL_PHY_TX_EN_R_POLICY_SEL2_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL_PHY_TX_EN_R_POLICY_SEL2_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL: PHY_TX_EN_R_POLICY_SEL2
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL_PHY_TX_EN_R_POLICY_SEL3_Pos 24                   /*!< LL_FUNC_REG AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL: PHY_TX_EN_R_POLICY_SEL3
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL_PHY_TX_EN_R_POLICY_SEL3_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL_PHY_TX_EN_R_POLICY_SEL3_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL: PHY_TX_EN_R_POLICY_SEL3
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL_PHY_TX_EN_R_POLICY_MANUAL_VALUE_Pos 30           /*!< LL_FUNC_REG AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL: PHY_TX_EN_R_POLICY_MANUAL_VA
                                                         LUE Position                                                                              */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL_PHY_TX_EN_R_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL_PHY_TX_EN_R_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL: PHY_TX_EN_R_POLICY_MANUAL_VA
                                                         LUE Mask                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL_PHY_TX_EN_R_POLICY_MANUAL_EN_Pos 31              /*!< LL_FUNC_REG AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL: PHY_TX_EN_R_POLICY_MANUAL_EN
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL_PHY_TX_EN_R_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL_PHY_TX_EN_R_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PHY_TX_EN_R_SIGNAL: PHY_TX_EN_R_POLICY_MANUAL_EN
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_W1C_W1S ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_W1C_W1S_PHY_TX_EN_R_POLICY_W1C_Pos 0                    /*!< LL_FUNC_REG AIRPRO_POLICY_PHY_TX_EN_R_W1C_W1S: PHY_TX_EN_R_POLICY_W1C
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_W1C_W1S_PHY_TX_EN_R_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_W1C_W1S_PHY_TX_EN_R_POLICY_W1C_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PHY_TX_EN_R_W1C_W1S: PHY_TX_EN_R_POLICY_W1C
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_W1C_W1S_PHY_TX_EN_R_POLICY_W1S_Pos 1                    /*!< LL_FUNC_REG AIRPRO_POLICY_PHY_TX_EN_R_W1C_W1S: PHY_TX_EN_R_POLICY_W1S
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_W1C_W1S_PHY_TX_EN_R_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_W1C_W1S_PHY_TX_EN_R_POLICY_W1S_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PHY_TX_EN_R_W1C_W1S: PHY_TX_EN_R_POLICY_W1S
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_POLICY  ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_POLICY_PHY_TX_EN_R_POLICY_Pos 0                         /*!< LL_FUNC_REG AIRPRO_POLICY_PHY_TX_EN_R_POLICY: PHY_TX_EN_R_POLICY
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_POLICY_PHY_TX_EN_R_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_POLICY_PHY_TX_EN_R_POLICY_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PHY_TX_EN_R_POLICY: PHY_TX_EN_R_POLICY
                                                         Mask                                                                                      */

/* -----------------  LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_SIGNAL  ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_SIGNAL_RF_RX_EN_R_POLICY_SEL0_Pos 0                      /*!< LL_FUNC_REG AIRPRO_POLICY_RF_RX_EN_R_SIGNAL: RF_RX_EN_R_POLICY_SEL0
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_SIGNAL_RF_RX_EN_R_POLICY_SEL0_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_SIGNAL_RF_RX_EN_R_POLICY_SEL0_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RF_RX_EN_R_SIGNAL: RF_RX_EN_R_POLICY_SEL0
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_SIGNAL_RF_RX_EN_R_POLICY_SEL1_Pos 8                      /*!< LL_FUNC_REG AIRPRO_POLICY_RF_RX_EN_R_SIGNAL: RF_RX_EN_R_POLICY_SEL1
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_SIGNAL_RF_RX_EN_R_POLICY_SEL1_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_SIGNAL_RF_RX_EN_R_POLICY_SEL1_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RF_RX_EN_R_SIGNAL: RF_RX_EN_R_POLICY_SEL1
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_SIGNAL_RF_RX_EN_R_POLICY_SEL2_Pos 16                     /*!< LL_FUNC_REG AIRPRO_POLICY_RF_RX_EN_R_SIGNAL: RF_RX_EN_R_POLICY_SEL2
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_SIGNAL_RF_RX_EN_R_POLICY_SEL2_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_SIGNAL_RF_RX_EN_R_POLICY_SEL2_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RF_RX_EN_R_SIGNAL: RF_RX_EN_R_POLICY_SEL2
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_SIGNAL_RF_RX_EN_R_POLICY_SEL3_Pos 24                     /*!< LL_FUNC_REG AIRPRO_POLICY_RF_RX_EN_R_SIGNAL: RF_RX_EN_R_POLICY_SEL3
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_SIGNAL_RF_RX_EN_R_POLICY_SEL3_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_SIGNAL_RF_RX_EN_R_POLICY_SEL3_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RF_RX_EN_R_SIGNAL: RF_RX_EN_R_POLICY_SEL3
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_SIGNAL_RF_RX_EN_R_POLICY_MANUAL_VALUE_Pos 30             /*!< LL_FUNC_REG AIRPRO_POLICY_RF_RX_EN_R_SIGNAL: RF_RX_EN_R_POLICY_MANUAL_VALU
                                                         E Position                                                                                */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_SIGNAL_RF_RX_EN_R_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_SIGNAL_RF_RX_EN_R_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RF_RX_EN_R_SIGNAL: RF_RX_EN_R_POLICY_MANUAL_VALU
                                                         E Mask                                                                                    */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_SIGNAL_RF_RX_EN_R_POLICY_MANUAL_EN_Pos 31                /*!< LL_FUNC_REG AIRPRO_POLICY_RF_RX_EN_R_SIGNAL: RF_RX_EN_R_POLICY_MANUAL_EN
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_SIGNAL_RF_RX_EN_R_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_SIGNAL_RF_RX_EN_R_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RF_RX_EN_R_SIGNAL: RF_RX_EN_R_POLICY_MANUAL_EN
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_W1C_W1S  ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_W1C_W1S_RF_RX_EN_R_POLICY_W1C_Pos 0                      /*!< LL_FUNC_REG AIRPRO_POLICY_RF_RX_EN_R_W1C_W1S: RF_RX_EN_R_POLICY_W1C
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_W1C_W1S_RF_RX_EN_R_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_W1C_W1S_RF_RX_EN_R_POLICY_W1C_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RF_RX_EN_R_W1C_W1S: RF_RX_EN_R_POLICY_W1C
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_W1C_W1S_RF_RX_EN_R_POLICY_W1S_Pos 1                      /*!< LL_FUNC_REG AIRPRO_POLICY_RF_RX_EN_R_W1C_W1S: RF_RX_EN_R_POLICY_W1S
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_W1C_W1S_RF_RX_EN_R_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_W1C_W1S_RF_RX_EN_R_POLICY_W1S_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RF_RX_EN_R_W1C_W1S: RF_RX_EN_R_POLICY_W1S
                                                         Mask                                                                                      */

/* -----------------  LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_POLICY  ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_POLICY_RF_RX_EN_R_POLICY_Pos 0                           /*!< LL_FUNC_REG AIRPRO_POLICY_RF_RX_EN_R_POLICY: RF_RX_EN_R_POLICY
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_POLICY_RF_RX_EN_R_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_POLICY_RF_RX_EN_R_POLICY_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RF_RX_EN_R_POLICY: RF_RX_EN_R_POLICY
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL  ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL_PHY_RX_EN_R_POLICY_SEL0_Pos 0                    /*!< LL_FUNC_REG AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL: PHY_RX_EN_R_POLICY_SEL0
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL_PHY_RX_EN_R_POLICY_SEL0_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL_PHY_RX_EN_R_POLICY_SEL0_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL: PHY_RX_EN_R_POLICY_SEL0
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL_PHY_RX_EN_R_POLICY_SEL1_Pos 8                    /*!< LL_FUNC_REG AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL: PHY_RX_EN_R_POLICY_SEL1
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL_PHY_RX_EN_R_POLICY_SEL1_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL_PHY_RX_EN_R_POLICY_SEL1_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL: PHY_RX_EN_R_POLICY_SEL1
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL_PHY_RX_EN_R_POLICY_SEL2_Pos 16                   /*!< LL_FUNC_REG AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL: PHY_RX_EN_R_POLICY_SEL2
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL_PHY_RX_EN_R_POLICY_SEL2_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL_PHY_RX_EN_R_POLICY_SEL2_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL: PHY_RX_EN_R_POLICY_SEL2
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL_PHY_RX_EN_R_POLICY_SEL3_Pos 24                   /*!< LL_FUNC_REG AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL: PHY_RX_EN_R_POLICY_SEL3
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL_PHY_RX_EN_R_POLICY_SEL3_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL_PHY_RX_EN_R_POLICY_SEL3_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL: PHY_RX_EN_R_POLICY_SEL3
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL_PHY_RX_EN_R_POLICY_MANUAL_VALUE_Pos 30           /*!< LL_FUNC_REG AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL: PHY_RX_EN_R_POLICY_MANUAL_VA
                                                         LUE Position                                                                              */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL_PHY_RX_EN_R_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL_PHY_RX_EN_R_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL: PHY_RX_EN_R_POLICY_MANUAL_VA
                                                         LUE Mask                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL_PHY_RX_EN_R_POLICY_MANUAL_EN_Pos 31              /*!< LL_FUNC_REG AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL: PHY_RX_EN_R_POLICY_MANUAL_EN
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL_PHY_RX_EN_R_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL_PHY_RX_EN_R_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PHY_RX_EN_R_SIGNAL: PHY_RX_EN_R_POLICY_MANUAL_EN
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_W1C_W1S ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_W1C_W1S_PHY_RX_EN_R_POLICY_W1C_Pos 0                    /*!< LL_FUNC_REG AIRPRO_POLICY_PHY_RX_EN_R_W1C_W1S: PHY_RX_EN_R_POLICY_W1C
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_W1C_W1S_PHY_RX_EN_R_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_W1C_W1S_PHY_RX_EN_R_POLICY_W1C_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PHY_RX_EN_R_W1C_W1S: PHY_RX_EN_R_POLICY_W1C
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_W1C_W1S_PHY_RX_EN_R_POLICY_W1S_Pos 1                    /*!< LL_FUNC_REG AIRPRO_POLICY_PHY_RX_EN_R_W1C_W1S: PHY_RX_EN_R_POLICY_W1S
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_W1C_W1S_PHY_RX_EN_R_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_W1C_W1S_PHY_RX_EN_R_POLICY_W1S_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PHY_RX_EN_R_W1C_W1S: PHY_RX_EN_R_POLICY_W1S
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_POLICY  ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_POLICY_PHY_RX_EN_R_POLICY_Pos 0                         /*!< LL_FUNC_REG AIRPRO_POLICY_PHY_RX_EN_R_POLICY: PHY_RX_EN_R_POLICY
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_POLICY_PHY_RX_EN_R_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_POLICY_PHY_RX_EN_R_POLICY_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PHY_RX_EN_R_POLICY: PHY_RX_EN_R_POLICY
                                                         Mask                                                                                      */

/* ----------------LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL_RX_ACCESS_TIMEOUT_POLICY_SEL0_Pos 0        /*!< LL_FUNC_REG AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL: RX_ACCESS_TIMEOUT_POLI
                                                         CY_SEL0 Position                                                                          */
#define LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL_RX_ACCESS_TIMEOUT_POLICY_SEL0_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL_RX_ACCESS_TIMEOUT_POLICY_SEL0_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL: RX_ACCESS_TIMEOUT_POLI
                                                         CY_SEL0 Mask                                                                              */
#define LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL_RX_ACCESS_TIMEOUT_POLICY_SEL1_Pos 8        /*!< LL_FUNC_REG AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL: RX_ACCESS_TIMEOUT_POLI
                                                         CY_SEL1 Position                                                                          */
#define LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL_RX_ACCESS_TIMEOUT_POLICY_SEL1_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL_RX_ACCESS_TIMEOUT_POLICY_SEL1_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL: RX_ACCESS_TIMEOUT_POLI
                                                         CY_SEL1 Mask                                                                              */
#define LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL_RX_ACCESS_TIMEOUT_POLICY_SEL2_Pos 16       /*!< LL_FUNC_REG AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL: RX_ACCESS_TIMEOUT_POLI
                                                         CY_SEL2 Position                                                                          */
#define LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL_RX_ACCESS_TIMEOUT_POLICY_SEL2_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL_RX_ACCESS_TIMEOUT_POLICY_SEL2_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL: RX_ACCESS_TIMEOUT_POLI
                                                         CY_SEL2 Mask                                                                              */
#define LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL_RX_ACCESS_TIMEOUT_POLICY_SEL3_Pos 24       /*!< LL_FUNC_REG AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL: RX_ACCESS_TIMEOUT_POLI
                                                         CY_SEL3 Position                                                                          */
#define LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL_RX_ACCESS_TIMEOUT_POLICY_SEL3_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL_RX_ACCESS_TIMEOUT_POLICY_SEL3_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL: RX_ACCESS_TIMEOUT_POLI
                                                         CY_SEL3 Mask                                                                              */
#define LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL_RX_ACCESS_TIMEOUT_POLICY_MANUAL_VALUE_Pos 30/*!< LL_FUNC_REG AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL: RX_ACCESS_TIMEOUT_POLI
                                                         CY_MANUAL_VALUE Position                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL_RX_ACCESS_TIMEOUT_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL_RX_ACCESS_TIMEOUT_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL: RX_ACCESS_TIMEOUT_POLI
                                                         CY_MANUAL_VALUE Mask                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL_RX_ACCESS_TIMEOUT_POLICY_MANUAL_EN_Pos 31  /*!< LL_FUNC_REG AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL: RX_ACCESS_TIMEOUT_POLI
                                                         CY_MANUAL_EN Position                                                                     */
#define LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL_RX_ACCESS_TIMEOUT_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL_RX_ACCESS_TIMEOUT_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RX_ACCESS_TIMEOUT_SIGNAL: RX_ACCESS_TIMEOUT_POLI
                                                         CY_MANUAL_EN Mask                                                                         */

/* ----------------LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_W1C_W1S---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_W1C_W1S_RX_ACCESS_TIMEOUT_POLICY_W1C_Pos 0        /*!< LL_FUNC_REG AIRPRO_POLICY_RX_ACCESS_TIMEOUT_W1C_W1S: RX_ACCESS_TIMEOUT_POL
                                                         ICY_W1C Position                                                                          */
#define LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_W1C_W1S_RX_ACCESS_TIMEOUT_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_W1C_W1S_RX_ACCESS_TIMEOUT_POLICY_W1C_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RX_ACCESS_TIMEOUT_W1C_W1S: RX_ACCESS_TIMEOUT_POL
                                                         ICY_W1C Mask                                                                              */
#define LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_W1C_W1S_RX_ACCESS_TIMEOUT_POLICY_W1S_Pos 1        /*!< LL_FUNC_REG AIRPRO_POLICY_RX_ACCESS_TIMEOUT_W1C_W1S: RX_ACCESS_TIMEOUT_POL
                                                         ICY_W1S Position                                                                          */
#define LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_W1C_W1S_RX_ACCESS_TIMEOUT_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_W1C_W1S_RX_ACCESS_TIMEOUT_POLICY_W1S_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RX_ACCESS_TIMEOUT_W1C_W1S: RX_ACCESS_TIMEOUT_POL
                                                         ICY_W1S Mask                                                                              */

/* ----------------LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_POLICY---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_POLICY_RX_ACCESS_TIMEOUT_POLICY_Pos 0             /*!< LL_FUNC_REG AIRPRO_POLICY_RX_ACCESS_TIMEOUT_POLICY: RX_ACCESS_TIMEOUT_POLI
                                                         CY Position                                                                               */
#define LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_POLICY_RX_ACCESS_TIMEOUT_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_POLICY_RX_ACCESS_TIMEOUT_POLICY_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RX_ACCESS_TIMEOUT_POLICY: RX_ACCESS_TIMEOUT_POLI
                                                         CY Mask                                                                                   */

/* ----------------  LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_SIGNAL ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_SIGNAL_DUMY_POLICY0_POLICY_SEL0_Pos 0                  /*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY0_SIGNAL: DUMY_POLICY0_POLICY_SEL0
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_SIGNAL_DUMY_POLICY0_POLICY_SEL0_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_SIGNAL_DUMY_POLICY0_POLICY_SEL0_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY0_SIGNAL: DUMY_POLICY0_POLICY_SEL0
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_SIGNAL_DUMY_POLICY0_POLICY_SEL1_Pos 8                  /*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY0_SIGNAL: DUMY_POLICY0_POLICY_SEL1
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_SIGNAL_DUMY_POLICY0_POLICY_SEL1_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_SIGNAL_DUMY_POLICY0_POLICY_SEL1_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY0_SIGNAL: DUMY_POLICY0_POLICY_SEL1
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_SIGNAL_DUMY_POLICY0_POLICY_SEL2_Pos 16                 /*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY0_SIGNAL: DUMY_POLICY0_POLICY_SEL2
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_SIGNAL_DUMY_POLICY0_POLICY_SEL2_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_SIGNAL_DUMY_POLICY0_POLICY_SEL2_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY0_SIGNAL: DUMY_POLICY0_POLICY_SEL2
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_SIGNAL_DUMY_POLICY0_POLICY_SEL3_Pos 24                 /*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY0_SIGNAL: DUMY_POLICY0_POLICY_SEL3
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_SIGNAL_DUMY_POLICY0_POLICY_SEL3_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_SIGNAL_DUMY_POLICY0_POLICY_SEL3_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY0_SIGNAL: DUMY_POLICY0_POLICY_SEL3
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_SIGNAL_DUMY_POLICY0_MANUAL_VALUE_Pos 30                /*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY0_SIGNAL: DUMY_POLICY0_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_SIGNAL_DUMY_POLICY0_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_SIGNAL_DUMY_POLICY0_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY0_SIGNAL: DUMY_POLICY0_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_SIGNAL_DUMY_POLICY0_MANUAL_EN_Pos 31                   /*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY0_SIGNAL: DUMY_POLICY0_MANUAL_EN
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_SIGNAL_DUMY_POLICY0_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_SIGNAL_DUMY_POLICY0_MANUAL_EN_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY0_SIGNAL: DUMY_POLICY0_MANUAL_EN
                                                         Mask                                                                                      */

/* ---------------- LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_W1C_W1S ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_W1C_W1S_DUMY_POLICY0_POLICY_W1C_Pos 0                  /*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY0_W1C_W1S: DUMY_POLICY0_POLICY_W1C
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_W1C_W1S_DUMY_POLICY0_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_W1C_W1S_DUMY_POLICY0_POLICY_W1C_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY0_W1C_W1S: DUMY_POLICY0_POLICY_W1C
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_W1C_W1S_DUMY_POLICY0_POLICY_W1S_Pos 1                  /*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY0_W1C_W1S: DUMY_POLICY0_POLICY_W1S
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_W1C_W1S_DUMY_POLICY0_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_W1C_W1S_DUMY_POLICY0_POLICY_W1S_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY0_W1C_W1S: DUMY_POLICY0_POLICY_W1S
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_POLICY ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_POLICY_DUMY_POLICY0_POLICY_Pos 0                       /*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY0_POLICY: DUMY_POLICY0_POLICY
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_POLICY_DUMY_POLICY0_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_POLICY_DUMY_POLICY0_POLICY_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY0_POLICY: DUMY_POLICY0_POLICY
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_SIGNAL ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_SIGNAL_DUMY_POLICY1_POLICY_SEL0_Pos 0                  /*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY1_SIGNAL: DUMY_POLICY1_POLICY_SEL0
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_SIGNAL_DUMY_POLICY1_POLICY_SEL0_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_SIGNAL_DUMY_POLICY1_POLICY_SEL0_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY1_SIGNAL: DUMY_POLICY1_POLICY_SEL0
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_SIGNAL_DUMY_POLICY1_POLICY_SEL1_Pos 8                  /*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY1_SIGNAL: DUMY_POLICY1_POLICY_SEL1
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_SIGNAL_DUMY_POLICY1_POLICY_SEL1_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_SIGNAL_DUMY_POLICY1_POLICY_SEL1_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY1_SIGNAL: DUMY_POLICY1_POLICY_SEL1
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_SIGNAL_DUMY_POLICY1_POLICY_SEL2_Pos 16                 /*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY1_SIGNAL: DUMY_POLICY1_POLICY_SEL2
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_SIGNAL_DUMY_POLICY1_POLICY_SEL2_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_SIGNAL_DUMY_POLICY1_POLICY_SEL2_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY1_SIGNAL: DUMY_POLICY1_POLICY_SEL2
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_SIGNAL_DUMY_POLICY1_POLICY_SEL3_Pos 24                 /*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY1_SIGNAL: DUMY_POLICY1_POLICY_SEL3
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_SIGNAL_DUMY_POLICY1_POLICY_SEL3_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_SIGNAL_DUMY_POLICY1_POLICY_SEL3_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY1_SIGNAL: DUMY_POLICY1_POLICY_SEL3
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_SIGNAL_DUMY_POLICY1_MANUAL_VALUE_Pos 30                /*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY1_SIGNAL: DUMY_POLICY1_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_SIGNAL_DUMY_POLICY1_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_SIGNAL_DUMY_POLICY1_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY1_SIGNAL: DUMY_POLICY1_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_SIGNAL_DUMY_POLICY1_MANUAL_EN_Pos 31                   /*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY1_SIGNAL: DUMY_POLICY1_MANUAL_EN
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_SIGNAL_DUMY_POLICY1_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_SIGNAL_DUMY_POLICY1_MANUAL_EN_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY1_SIGNAL: DUMY_POLICY1_MANUAL_EN
                                                         Mask                                                                                      */

/* ---------------- LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_W1C_W1S ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_W1C_W1S_DUMY_POLICY1_POLICY_W1C_Pos 0                  /*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY1_W1C_W1S: DUMY_POLICY1_POLICY_W1C
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_W1C_W1S_DUMY_POLICY1_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_W1C_W1S_DUMY_POLICY1_POLICY_W1C_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY1_W1C_W1S: DUMY_POLICY1_POLICY_W1C
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_W1C_W1S_DUMY_POLICY1_POLICY_W1S_Pos 1                  /*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY1_W1C_W1S: DUMY_POLICY1_POLICY_W1S
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_W1C_W1S_DUMY_POLICY1_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_W1C_W1S_DUMY_POLICY1_POLICY_W1S_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY1_W1C_W1S: DUMY_POLICY1_POLICY_W1S
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_POLICY ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_POLICY_DUMY_POLICY1_POLICY_Pos 0                       /*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY1_POLICY: DUMY_POLICY1_POLICY
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_POLICY_DUMY_POLICY1_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_POLICY_DUMY_POLICY1_POLICY_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY1_POLICY: DUMY_POLICY1_POLICY
                                                         Mask                                                                                      */

/* ------------------  LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_SIGNAL  ------------------ */
#define LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_SIGNAL_PDU_REQ_POLICY_SEL0_Pos 0                            /*!< LL_FUNC_REG AIRPRO_POLICY_PDU_REQ_SIGNAL: PDU_REQ_POLICY_SEL0
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_SIGNAL_PDU_REQ_POLICY_SEL0_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_SIGNAL_PDU_REQ_POLICY_SEL0_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PDU_REQ_SIGNAL: PDU_REQ_POLICY_SEL0
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_SIGNAL_PDU_REQ_POLICY_SEL1_Pos 8                            /*!< LL_FUNC_REG AIRPRO_POLICY_PDU_REQ_SIGNAL: PDU_REQ_POLICY_SEL1
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_SIGNAL_PDU_REQ_POLICY_SEL1_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_SIGNAL_PDU_REQ_POLICY_SEL1_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PDU_REQ_SIGNAL: PDU_REQ_POLICY_SEL1
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_SIGNAL_PDU_REQ_POLICY_SEL2_Pos 16                           /*!< LL_FUNC_REG AIRPRO_POLICY_PDU_REQ_SIGNAL: PDU_REQ_POLICY_SEL2
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_SIGNAL_PDU_REQ_POLICY_SEL2_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_SIGNAL_PDU_REQ_POLICY_SEL2_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PDU_REQ_SIGNAL: PDU_REQ_POLICY_SEL2
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_SIGNAL_PDU_REQ_POLICY_SEL3_Pos 24                           /*!< LL_FUNC_REG AIRPRO_POLICY_PDU_REQ_SIGNAL: PDU_REQ_POLICY_SEL3
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_SIGNAL_PDU_REQ_POLICY_SEL3_Msk (0x3fUL << LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_SIGNAL_PDU_REQ_POLICY_SEL3_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PDU_REQ_SIGNAL: PDU_REQ_POLICY_SEL3
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_SIGNAL_PDU_REQ_POLICY_MANUAL_VALUE_Pos 30                   /*!< LL_FUNC_REG AIRPRO_POLICY_PDU_REQ_SIGNAL: PDU_REQ_POLICY_MANUAL_VALUE
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_SIGNAL_PDU_REQ_POLICY_MANUAL_VALUE_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_SIGNAL_PDU_REQ_POLICY_MANUAL_VALUE_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PDU_REQ_SIGNAL: PDU_REQ_POLICY_MANUAL_VALUE
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_SIGNAL_PDU_REQ_POLICY_MANUAL_EN_Pos 31                      /*!< LL_FUNC_REG AIRPRO_POLICY_PDU_REQ_SIGNAL: PDU_REQ_POLICY_MANUAL_EN
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_SIGNAL_PDU_REQ_POLICY_MANUAL_EN_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_SIGNAL_PDU_REQ_POLICY_MANUAL_EN_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PDU_REQ_SIGNAL: PDU_REQ_POLICY_MANUAL_EN
                                                         Mask                                                                                      */

/* ------------------  LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_W1C_W1S  ----------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_W1C_W1S_PDU_REQ_POLICY_W1C_Pos 0                            /*!< LL_FUNC_REG AIRPRO_POLICY_PDU_REQ_W1C_W1S: PDU_REQ_POLICY_W1C
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_W1C_W1S_PDU_REQ_POLICY_W1C_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_W1C_W1S_PDU_REQ_POLICY_W1C_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PDU_REQ_W1C_W1S: PDU_REQ_POLICY_W1C
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_W1C_W1S_PDU_REQ_POLICY_W1S_Pos 1                            /*!< LL_FUNC_REG AIRPRO_POLICY_PDU_REQ_W1C_W1S: PDU_REQ_POLICY_W1S
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_W1C_W1S_PDU_REQ_POLICY_W1S_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_W1C_W1S_PDU_REQ_POLICY_W1S_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PDU_REQ_W1C_W1S: PDU_REQ_POLICY_W1S
                                                         Mask                                                                                      */

/* ------------------  LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_POLICY  ------------------ */
#define LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_POLICY_PDU_REQ_POLICY_Pos 0                                 /*!< LL_FUNC_REG AIRPRO_POLICY_PDU_REQ_POLICY: PDU_REQ_POLICY Position */
#define LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_POLICY_PDU_REQ_POLICY_Msk (0xffffffffUL << LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_POLICY_PDU_REQ_POLICY_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PDU_REQ_POLICY: PDU_REQ_POLICY Mask */

/* ---------------------  LL_FUNC_REG_AIRPRO_POLICY_SRC_BUS_0  -------------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_SRC_BUS_0_AIRPRO_POLICY_SRC_BUS_31_0_Pos 0                          /*!< LL_FUNC_REG AIRPRO_POLICY_SRC_BUS_0: AIRPRO_POLICY_SRC_BUS_31_0
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_SRC_BUS_0_AIRPRO_POLICY_SRC_BUS_31_0_Msk (0xffffffffUL << LL_FUNC_REG_AIRPRO_POLICY_SRC_BUS_0_AIRPRO_POLICY_SRC_BUS_31_0_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_SRC_BUS_0: AIRPRO_POLICY_SRC_BUS_31_0
                                                         Mask                                                                                      */

/* ---------------------  LL_FUNC_REG_AIRPRO_POLICY_SRC_BUS_1  -------------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_SRC_BUS_1_AIRPRO_POLICY_SRC_BUS_63_32_Pos 0                         /*!< LL_FUNC_REG AIRPRO_POLICY_SRC_BUS_1: AIRPRO_POLICY_SRC_BUS_63_32
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_SRC_BUS_1_AIRPRO_POLICY_SRC_BUS_63_32_Msk (0xffffffffUL << LL_FUNC_REG_AIRPRO_POLICY_SRC_BUS_1_AIRPRO_POLICY_SRC_BUS_63_32_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_SRC_BUS_1: AIRPRO_POLICY_SRC_BUS_63_32
                                                         Mask                                                                                      */

/* ----------------LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_RDOUT---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_RDOUT_ALARM0_BY_FOLLOWER0_POLICY_OUT_Pos 0      /*!< LL_FUNC_REG AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_RDOUT: ALARM0_BY_FOLLOWER0_P
                                                         OLICY_OUT Position                                                                        */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_RDOUT_ALARM0_BY_FOLLOWER0_POLICY_OUT_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_RDOUT_ALARM0_BY_FOLLOWER0_POLICY_OUT_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM0_BY_FOLLOWER0_RDOUT: ALARM0_BY_FOLLOWER0_P
                                                         OLICY_OUT Mask                                                                            */

/* ----------------LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_RDOUT---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_RDOUT_ALARM1_BY_FOLLOWER1_POLICY_OUT_Pos 0      /*!< LL_FUNC_REG AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_RDOUT: ALARM1_BY_FOLLOWER1_P
                                                         OLICY_OUT Position                                                                        */
#define LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_RDOUT_ALARM1_BY_FOLLOWER1_POLICY_OUT_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_RDOUT_ALARM1_BY_FOLLOWER1_POLICY_OUT_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_ALARM1_BY_FOLLOWER1_RDOUT: ALARM1_BY_FOLLOWER1_P
                                                         OLICY_OUT Mask                                                                            */

/* ----------------  LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_RDOUT  ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_RDOUT_FOLLOWER0_EN_POLICY_OUT_Pos 0                    /*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER0_EN_RDOUT: FOLLOWER0_EN_POLICY_OUT
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_RDOUT_FOLLOWER0_EN_POLICY_OUT_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER0_EN_RDOUT_FOLLOWER0_EN_POLICY_OUT_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER0_EN_RDOUT: FOLLOWER0_EN_POLICY_OUT
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_RDOUT  ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_RDOUT_FOLLOWER1_EN_POLICY_OUT_Pos 0                    /*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER1_EN_RDOUT: FOLLOWER1_EN_POLICY_OUT
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_RDOUT_FOLLOWER1_EN_POLICY_OUT_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_FOLLOWER1_EN_RDOUT_FOLLOWER1_EN_POLICY_OUT_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_FOLLOWER1_EN_RDOUT: FOLLOWER1_EN_POLICY_OUT
                                                         Mask                                                                                      */

/* -----------------  LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_RDOUT  ----------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_RDOUT_RF_TX_EN_R_POLICY_OUT_Pos 0                        /*!< LL_FUNC_REG AIRPRO_POLICY_RF_TX_EN_R_RDOUT: RF_TX_EN_R_POLICY_OUT
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_RDOUT_RF_TX_EN_R_POLICY_OUT_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_RF_TX_EN_R_RDOUT_RF_TX_EN_R_POLICY_OUT_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RF_TX_EN_R_RDOUT: RF_TX_EN_R_POLICY_OUT
                                                         Mask                                                                                      */

/* -----------------  LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_RDOUT  ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_RDOUT_PHY_TX_EN_R_POLICY_OUT_Pos 0                      /*!< LL_FUNC_REG AIRPRO_POLICY_PHY_TX_EN_R_RDOUT: PHY_TX_EN_R_POLICY_OUT
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_RDOUT_PHY_TX_EN_R_POLICY_OUT_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_PHY_TX_EN_R_RDOUT_PHY_TX_EN_R_POLICY_OUT_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PHY_TX_EN_R_RDOUT: PHY_TX_EN_R_POLICY_OUT
                                                         Mask                                                                                      */

/* -----------------  LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_RDOUT  ----------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_RDOUT_RF_RX_EN_R_POLICY_OUT_Pos 0                        /*!< LL_FUNC_REG AIRPRO_POLICY_RF_RX_EN_R_RDOUT: RF_RX_EN_R_POLICY_OUT
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_RDOUT_RF_RX_EN_R_POLICY_OUT_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_RF_RX_EN_R_RDOUT_RF_RX_EN_R_POLICY_OUT_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RF_RX_EN_R_RDOUT: RF_RX_EN_R_POLICY_OUT
                                                         Mask                                                                                      */

/* -----------------  LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_RDOUT  ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_RDOUT_PHY_RX_EN_R_POLICY_OUT_Pos 0                      /*!< LL_FUNC_REG AIRPRO_POLICY_PHY_RX_EN_R_RDOUT: PHY_RX_EN_R_POLICY_OUT
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_RDOUT_PHY_RX_EN_R_POLICY_OUT_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_PHY_RX_EN_R_RDOUT_PHY_RX_EN_R_POLICY_OUT_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PHY_RX_EN_R_RDOUT: PHY_RX_EN_R_POLICY_OUT
                                                         Mask                                                                                      */

/* ----------------LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_RDOUT---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_RDOUT_RX_ACCESS_TIMEOUT_POLICY_OUT_Pos 0          /*!< LL_FUNC_REG AIRPRO_POLICY_RX_ACCESS_TIMEOUT_RDOUT: RX_ACCESS_TIMEOUT_POLIC
                                                         Y_OUT Position                                                                            */
#define LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_RDOUT_RX_ACCESS_TIMEOUT_POLICY_OUT_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_RX_ACCESS_TIMEOUT_RDOUT_RX_ACCESS_TIMEOUT_POLICY_OUT_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_RX_ACCESS_TIMEOUT_RDOUT: RX_ACCESS_TIMEOUT_POLIC
                                                         Y_OUT Mask                                                                                */

/* ----------------  LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_RDOUT  ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_RDOUT_DUMY_POLICY0_POLICY_OUT_Pos 0                    /*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY0_RDOUT: DUMY_POLICY0_POLICY_OUT
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_RDOUT_DUMY_POLICY0_POLICY_OUT_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY0_RDOUT_DUMY_POLICY0_POLICY_OUT_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY0_RDOUT: DUMY_POLICY0_POLICY_OUT
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_RDOUT  ---------------- */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_RDOUT_DUMY_POLICY1_POLICY_OUT_Pos 0                    /*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY1_RDOUT: DUMY_POLICY1_POLICY_OUT
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_RDOUT_DUMY_POLICY1_POLICY_OUT_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_DUMY_POLICY1_RDOUT_DUMY_POLICY1_POLICY_OUT_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_DUMY_POLICY1_RDOUT: DUMY_POLICY1_POLICY_OUT
                                                         Mask                                                                                      */

/* -------------------  LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_RDOUT  ------------------ */
#define LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_RDOUT_PDU_REQ_POLICY_OUT_Pos 0                              /*!< LL_FUNC_REG AIRPRO_POLICY_PDU_REQ_RDOUT: PDU_REQ_POLICY_OUT
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_RDOUT_PDU_REQ_POLICY_OUT_Msk (0x01UL << LL_FUNC_REG_AIRPRO_POLICY_PDU_REQ_RDOUT_PDU_REQ_POLICY_OUT_Pos)/*!< LL_FUNC_REG AIRPRO_POLICY_PDU_REQ_RDOUT: PDU_REQ_POLICY_OUT
                                                         Mask                                                                                      */

/* -------------------  LL_FUNC_REG_AIRPRO_FOLLOWER_01_IRQ_DBG  ------------------- */
#define LL_FUNC_REG_AIRPRO_FOLLOWER_01_IRQ_DBG_AIR_PROTOCOL_FOLLOW1_ALARM_TIME_Pos 0                  /*!< LL_FUNC_REG AIRPRO_FOLLOWER_01_IRQ_DBG: AIR_PROTOCOL_FOLLOW1_ALARM_TIME
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_FOLLOWER_01_IRQ_DBG_AIR_PROTOCOL_FOLLOW1_ALARM_TIME_Msk (0x00000fffUL << LL_FUNC_REG_AIRPRO_FOLLOWER_01_IRQ_DBG_AIR_PROTOCOL_FOLLOW1_ALARM_TIME_Pos)/*!< LL_FUNC_REG AIRPRO_FOLLOWER_01_IRQ_DBG: AIR_PROTOCOL_FOLLOW1_ALARM_TIME
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_FOLLOWER_01_IRQ_DBG_AIR_PROTOCOL_FOLLOW1_IRQ_Pos 15                        /*!< LL_FUNC_REG AIRPRO_FOLLOWER_01_IRQ_DBG: AIR_PROTOCOL_FOLLOW1_IRQ
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_FOLLOWER_01_IRQ_DBG_AIR_PROTOCOL_FOLLOW1_IRQ_Msk (0x01UL << LL_FUNC_REG_AIRPRO_FOLLOWER_01_IRQ_DBG_AIR_PROTOCOL_FOLLOW1_IRQ_Pos)/*!< LL_FUNC_REG AIRPRO_FOLLOWER_01_IRQ_DBG: AIR_PROTOCOL_FOLLOW1_IRQ
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_FOLLOWER_01_IRQ_DBG_AIR_PROTOCOL_FOLLOW0_ALARM_TIME_Pos 16                 /*!< LL_FUNC_REG AIRPRO_FOLLOWER_01_IRQ_DBG: AIR_PROTOCOL_FOLLOW0_ALARM_TIME
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_FOLLOWER_01_IRQ_DBG_AIR_PROTOCOL_FOLLOW0_ALARM_TIME_Msk (0x00000fffUL << LL_FUNC_REG_AIRPRO_FOLLOWER_01_IRQ_DBG_AIR_PROTOCOL_FOLLOW0_ALARM_TIME_Pos)/*!< LL_FUNC_REG AIRPRO_FOLLOWER_01_IRQ_DBG: AIR_PROTOCOL_FOLLOW0_ALARM_TIME
                                                         Mask                                                                                      */
#define LL_FUNC_REG_AIRPRO_FOLLOWER_01_IRQ_DBG_AIR_PROTOCOL_FOLLOW0_IRQ_Pos 31                        /*!< LL_FUNC_REG AIRPRO_FOLLOWER_01_IRQ_DBG: AIR_PROTOCOL_FOLLOW0_IRQ
                                                         Position                                                                                  */
#define LL_FUNC_REG_AIRPRO_FOLLOWER_01_IRQ_DBG_AIR_PROTOCOL_FOLLOW0_IRQ_Msk (0x01UL << LL_FUNC_REG_AIRPRO_FOLLOWER_01_IRQ_DBG_AIR_PROTOCOL_FOLLOW0_IRQ_Pos)/*!< LL_FUNC_REG AIRPRO_FOLLOWER_01_IRQ_DBG: AIR_PROTOCOL_FOLLOW0_IRQ
                                                         Mask                                                                                      */

/* ----------------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_0_EN  --------------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_EN_RG_ANCHOR0_ENABLE_Pos 0                                     /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_EN: RG_ANCHOR0_ENABLE Position */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_EN_RG_ANCHOR0_ENABLE_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_0_EN_RG_ANCHOR0_ENABLE_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_EN: RG_ANCHOR0_ENABLE Mask */

/* ---------------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_0_TIME  -------------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_TIME_RG_ANCHOR0_TIME_Pos 0                                     /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_TIME: RG_ANCHOR0_TIME Position */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_TIME_RG_ANCHOR0_TIME_Msk (0x0fffffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_0_TIME_RG_ANCHOR0_TIME_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_TIME: RG_ANCHOR0_TIME Mask */

/* -----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_EARLY  ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_EARLY_RG_ANCHOR0_WINDOW_OFFSET_EARLY_Pos 0              /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_OFFSET_EARLY: RG_ANCHOR0_WINDOW_OFFSET_EARL
                                                         Y Position                                                                                */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_EARLY_RG_ANCHOR0_WINDOW_OFFSET_EARLY_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_EARLY_RG_ANCHOR0_WINDOW_OFFSET_EARLY_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_OFFSET_EARLY: RG_ANCHOR0_WINDOW_OFFSET_EARL
                                                         Y Mask                                                                                    */

/* -----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_LATE  ----------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_LATE_RG_ANCHOR0_WINDOW_OFFSET_LATE_Pos 0                /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_OFFSET_LATE: RG_ANCHOR0_WINDOW_OFFSET_LATE
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_LATE_RG_ANCHOR0_WINDOW_OFFSET_LATE_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_LATE_RG_ANCHOR0_WINDOW_OFFSET_LATE_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_OFFSET_LATE: RG_ANCHOR0_WINDOW_OFFSET_LATE
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY0 ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY0_RG_ANCHOR0_NOTIFY0_OFFSET_Pos 0                 /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY0: RG_ANCHOR0_NOTIFY0_OFFSET
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY0_RG_ANCHOR0_NOTIFY0_OFFSET_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY0_RG_ANCHOR0_NOTIFY0_OFFSET_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY0: RG_ANCHOR0_NOTIFY0_OFFSET
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY1 ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY1_RG_ANCHOR0_NOTIFY1_OFFSET_Pos 0                 /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY1: RG_ANCHOR0_NOTIFY1_OFFSET
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY1_RG_ANCHOR0_NOTIFY1_OFFSET_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY1_RG_ANCHOR0_NOTIFY1_OFFSET_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY1: RG_ANCHOR0_NOTIFY1_OFFSET
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY2 ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY2_RG_ANCHOR0_NOTIFY2_OFFSET_Pos 0                 /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY2: RG_ANCHOR0_NOTIFY2_OFFSET
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY2_RG_ANCHOR0_NOTIFY2_OFFSET_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY2_RG_ANCHOR0_NOTIFY2_OFFSET_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY2: RG_ANCHOR0_NOTIFY2_OFFSET
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY3 ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY3_RG_ANCHOR0_NOTIFY3_OFFSET_Pos 0                 /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY3: RG_ANCHOR0_NOTIFY3_OFFSET
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY3_RG_ANCHOR0_NOTIFY3_OFFSET_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY3_RG_ANCHOR0_NOTIFY3_OFFSET_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY3: RG_ANCHOR0_NOTIFY3_OFFSET
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY4 ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY4_RG_ANCHOR0_NOTIFY4_OFFSET_Pos 0                 /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY4: RG_ANCHOR0_NOTIFY4_OFFSET
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY4_RG_ANCHOR0_NOTIFY4_OFFSET_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY4_RG_ANCHOR0_NOTIFY4_OFFSET_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_OFFSET_NOTIFY4: RG_ANCHOR0_NOTIFY4_OFFSET
                                                         Mask                                                                                      */

/* -------------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_MASK  ------------------ */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_MASK_RG_ANCHOR0_IRQ_MASK_Pos 0                             /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_IRQ_MASK: RG_ANCHOR0_IRQ_MASK
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_MASK_RG_ANCHOR0_IRQ_MASK_Msk (0x000000ffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_MASK_RG_ANCHOR0_IRQ_MASK_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_IRQ_MASK: RG_ANCHOR0_IRQ_MASK
                                                         Mask                                                                                      */

/* ------------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR  ------------------ */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_0_Pos 0                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_IRQ_CLEAR: RG_ANCHOR0_IRQ_CLEAR_0
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_0_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_0_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_IRQ_CLEAR: RG_ANCHOR0_IRQ_CLEAR_0
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_1_Pos 1                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_IRQ_CLEAR: RG_ANCHOR0_IRQ_CLEAR_1
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_1_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_1_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_IRQ_CLEAR: RG_ANCHOR0_IRQ_CLEAR_1
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_2_Pos 2                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_IRQ_CLEAR: RG_ANCHOR0_IRQ_CLEAR_2
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_2_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_2_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_IRQ_CLEAR: RG_ANCHOR0_IRQ_CLEAR_2
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_3_Pos 3                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_IRQ_CLEAR: RG_ANCHOR0_IRQ_CLEAR_3
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_3_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_3_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_IRQ_CLEAR: RG_ANCHOR0_IRQ_CLEAR_3
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_4_Pos 4                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_IRQ_CLEAR: RG_ANCHOR0_IRQ_CLEAR_4
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_4_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_4_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_IRQ_CLEAR: RG_ANCHOR0_IRQ_CLEAR_4
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_5_Pos 5                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_IRQ_CLEAR: RG_ANCHOR0_IRQ_CLEAR_5
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_5_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_5_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_IRQ_CLEAR: RG_ANCHOR0_IRQ_CLEAR_5
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_6_Pos 6                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_IRQ_CLEAR: RG_ANCHOR0_IRQ_CLEAR_6
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_6_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_6_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_IRQ_CLEAR: RG_ANCHOR0_IRQ_CLEAR_6
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_7_Pos 7                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_IRQ_CLEAR: RG_ANCHOR0_IRQ_CLEAR_7
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_7_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_0_IRQ_CLEAR_RG_ANCHOR0_IRQ_CLEAR_7_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_0_IRQ_CLEAR: RG_ANCHOR0_IRQ_CLEAR_7
                                                         Mask                                                                                      */

/* -----------------------  LL_FUNC_REG_ANCHOR_IRQ_REASON_0  ---------------------- */
#define LL_FUNC_REG_ANCHOR_IRQ_REASON_0_ANCHOR0_IRQ_REASON_Pos 0                                      /*!< LL_FUNC_REG ANCHOR_IRQ_REASON_0: ANCHOR0_IRQ_REASON Position */
#define LL_FUNC_REG_ANCHOR_IRQ_REASON_0_ANCHOR0_IRQ_REASON_Msk (0x000000ffUL << LL_FUNC_REG_ANCHOR_IRQ_REASON_0_ANCHOR0_IRQ_REASON_Pos)/*!< LL_FUNC_REG ANCHOR_IRQ_REASON_0: ANCHOR0_IRQ_REASON Mask */
#define LL_FUNC_REG_ANCHOR_IRQ_REASON_0_ANCHOR0_IRQ_Pos 8                                             /*!< LL_FUNC_REG ANCHOR_IRQ_REASON_0: ANCHOR0_IRQ Position */
#define LL_FUNC_REG_ANCHOR_IRQ_REASON_0_ANCHOR0_IRQ_Msk (0x01UL << LL_FUNC_REG_ANCHOR_IRQ_REASON_0_ANCHOR0_IRQ_Pos)/*!< LL_FUNC_REG ANCHOR_IRQ_REASON_0: ANCHOR0_IRQ Mask */

/* ----------------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_1_EN  --------------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_EN_RG_ANCHOR1_ENABLE_Pos 0                                     /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_EN: RG_ANCHOR1_ENABLE Position */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_EN_RG_ANCHOR1_ENABLE_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_1_EN_RG_ANCHOR1_ENABLE_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_EN: RG_ANCHOR1_ENABLE Mask */

/* ---------------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_1_TIME  -------------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_TIME_RG_ANCHOR1_TIME_Pos 0                                     /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_TIME: RG_ANCHOR1_TIME Position */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_TIME_RG_ANCHOR1_TIME_Msk (0x0fffffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_1_TIME_RG_ANCHOR1_TIME_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_TIME: RG_ANCHOR1_TIME Mask */

/* -----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_EARLY  ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_EARLY_RG_ANCHOR1_WINDOW_OFFSET_EARLY_Pos 0              /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_OFFSET_EARLY: RG_ANCHOR1_WINDOW_OFFSET_EARL
                                                         Y Position                                                                                */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_EARLY_RG_ANCHOR1_WINDOW_OFFSET_EARLY_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_EARLY_RG_ANCHOR1_WINDOW_OFFSET_EARLY_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_OFFSET_EARLY: RG_ANCHOR1_WINDOW_OFFSET_EARL
                                                         Y Mask                                                                                    */

/* -----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_LATE  ----------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_LATE_RG_ANCHOR1_WINDOW_OFFSET_LATE_Pos 0                /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_OFFSET_LATE: RG_ANCHOR1_WINDOW_OFFSET_LATE
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_LATE_RG_ANCHOR1_WINDOW_OFFSET_LATE_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_LATE_RG_ANCHOR1_WINDOW_OFFSET_LATE_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_OFFSET_LATE: RG_ANCHOR1_WINDOW_OFFSET_LATE
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY0 ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY0_RG_ANCHOR1_NOTIFY0_OFFSET_Pos 0                 /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY0: RG_ANCHOR1_NOTIFY0_OFFSET
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY0_RG_ANCHOR1_NOTIFY0_OFFSET_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY0_RG_ANCHOR1_NOTIFY0_OFFSET_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY0: RG_ANCHOR1_NOTIFY0_OFFSET
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY1 ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY1_RG_ANCHOR1_NOTIFY1_OFFSET_Pos 0                 /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY1: RG_ANCHOR1_NOTIFY1_OFFSET
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY1_RG_ANCHOR1_NOTIFY1_OFFSET_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY1_RG_ANCHOR1_NOTIFY1_OFFSET_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY1: RG_ANCHOR1_NOTIFY1_OFFSET
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY2 ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY2_RG_ANCHOR1_NOTIFY2_OFFSET_Pos 0                 /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY2: RG_ANCHOR1_NOTIFY2_OFFSET
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY2_RG_ANCHOR1_NOTIFY2_OFFSET_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY2_RG_ANCHOR1_NOTIFY2_OFFSET_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY2: RG_ANCHOR1_NOTIFY2_OFFSET
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY3 ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY3_RG_ANCHOR1_NOTIFY3_OFFSET_Pos 0                 /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY3: RG_ANCHOR1_NOTIFY3_OFFSET
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY3_RG_ANCHOR1_NOTIFY3_OFFSET_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY3_RG_ANCHOR1_NOTIFY3_OFFSET_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY3: RG_ANCHOR1_NOTIFY3_OFFSET
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY4 ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY4_RG_ANCHOR1_NOTIFY4_OFFSET_Pos 0                 /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY4: RG_ANCHOR1_NOTIFY4_OFFSET
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY4_RG_ANCHOR1_NOTIFY4_OFFSET_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY4_RG_ANCHOR1_NOTIFY4_OFFSET_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_OFFSET_NOTIFY4: RG_ANCHOR1_NOTIFY4_OFFSET
                                                         Mask                                                                                      */

/* -------------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_MASK  ------------------ */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_MASK_RG_ANCHOR1_IRQ_MASK_Pos 0                             /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_IRQ_MASK: RG_ANCHOR1_IRQ_MASK
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_MASK_RG_ANCHOR1_IRQ_MASK_Msk (0x000000ffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_MASK_RG_ANCHOR1_IRQ_MASK_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_IRQ_MASK: RG_ANCHOR1_IRQ_MASK
                                                         Mask                                                                                      */

/* ------------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR  ------------------ */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_0_Pos 0                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_IRQ_CLEAR: RG_ANCHOR1_IRQ_CLEAR_0
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_0_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_0_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_IRQ_CLEAR: RG_ANCHOR1_IRQ_CLEAR_0
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_1_Pos 1                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_IRQ_CLEAR: RG_ANCHOR1_IRQ_CLEAR_1
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_1_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_1_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_IRQ_CLEAR: RG_ANCHOR1_IRQ_CLEAR_1
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_2_Pos 2                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_IRQ_CLEAR: RG_ANCHOR1_IRQ_CLEAR_2
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_2_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_2_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_IRQ_CLEAR: RG_ANCHOR1_IRQ_CLEAR_2
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_3_Pos 3                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_IRQ_CLEAR: RG_ANCHOR1_IRQ_CLEAR_3
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_3_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_3_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_IRQ_CLEAR: RG_ANCHOR1_IRQ_CLEAR_3
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_4_Pos 4                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_IRQ_CLEAR: RG_ANCHOR1_IRQ_CLEAR_4
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_4_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_4_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_IRQ_CLEAR: RG_ANCHOR1_IRQ_CLEAR_4
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_5_Pos 5                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_IRQ_CLEAR: RG_ANCHOR1_IRQ_CLEAR_5
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_5_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_5_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_IRQ_CLEAR: RG_ANCHOR1_IRQ_CLEAR_5
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_6_Pos 6                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_IRQ_CLEAR: RG_ANCHOR1_IRQ_CLEAR_6
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_6_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_6_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_IRQ_CLEAR: RG_ANCHOR1_IRQ_CLEAR_6
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_7_Pos 7                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_IRQ_CLEAR: RG_ANCHOR1_IRQ_CLEAR_7
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_7_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_1_IRQ_CLEAR_RG_ANCHOR1_IRQ_CLEAR_7_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_1_IRQ_CLEAR: RG_ANCHOR1_IRQ_CLEAR_7
                                                         Mask                                                                                      */

/* -----------------------  LL_FUNC_REG_ANCHOR_IRQ_REASON_1  ---------------------- */
#define LL_FUNC_REG_ANCHOR_IRQ_REASON_1_ANCHOR1_IRQ_REASON_Pos 0                                      /*!< LL_FUNC_REG ANCHOR_IRQ_REASON_1: ANCHOR1_IRQ_REASON Position */
#define LL_FUNC_REG_ANCHOR_IRQ_REASON_1_ANCHOR1_IRQ_REASON_Msk (0x000000ffUL << LL_FUNC_REG_ANCHOR_IRQ_REASON_1_ANCHOR1_IRQ_REASON_Pos)/*!< LL_FUNC_REG ANCHOR_IRQ_REASON_1: ANCHOR1_IRQ_REASON Mask */
#define LL_FUNC_REG_ANCHOR_IRQ_REASON_1_ANCHOR1_IRQ_Pos 8                                             /*!< LL_FUNC_REG ANCHOR_IRQ_REASON_1: ANCHOR1_IRQ Position */
#define LL_FUNC_REG_ANCHOR_IRQ_REASON_1_ANCHOR1_IRQ_Msk (0x01UL << LL_FUNC_REG_ANCHOR_IRQ_REASON_1_ANCHOR1_IRQ_Pos)/*!< LL_FUNC_REG ANCHOR_IRQ_REASON_1: ANCHOR1_IRQ Mask */

/* ----------------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_2_EN  --------------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_EN_RG_ANCHOR2_ENABLE_Pos 0                                     /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_EN: RG_ANCHOR2_ENABLE Position */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_EN_RG_ANCHOR2_ENABLE_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_2_EN_RG_ANCHOR2_ENABLE_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_EN: RG_ANCHOR2_ENABLE Mask */

/* ---------------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_2_TIME  -------------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_TIME_RG_ANCHOR2_TIME_Pos 0                                     /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_TIME: RG_ANCHOR2_TIME Position */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_TIME_RG_ANCHOR2_TIME_Msk (0x0fffffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_2_TIME_RG_ANCHOR2_TIME_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_TIME: RG_ANCHOR2_TIME Mask */

/* -----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_EARLY  ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_EARLY_RG_ANCHOR2_WINDOW_OFFSET_EARLY_Pos 0              /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_OFFSET_EARLY: RG_ANCHOR2_WINDOW_OFFSET_EARL
                                                         Y Position                                                                                */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_EARLY_RG_ANCHOR2_WINDOW_OFFSET_EARLY_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_EARLY_RG_ANCHOR2_WINDOW_OFFSET_EARLY_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_OFFSET_EARLY: RG_ANCHOR2_WINDOW_OFFSET_EARL
                                                         Y Mask                                                                                    */

/* -----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_LATE  ----------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_LATE_RG_ANCHOR2_WINDOW_OFFSET_LATE_Pos 0                /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_OFFSET_LATE: RG_ANCHOR2_WINDOW_OFFSET_LATE
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_LATE_RG_ANCHOR2_WINDOW_OFFSET_LATE_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_LATE_RG_ANCHOR2_WINDOW_OFFSET_LATE_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_OFFSET_LATE: RG_ANCHOR2_WINDOW_OFFSET_LATE
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY0 ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY0_RG_ANCHOR2_NOTIFY0_OFFSET_Pos 0                 /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY0: RG_ANCHOR2_NOTIFY0_OFFSET
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY0_RG_ANCHOR2_NOTIFY0_OFFSET_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY0_RG_ANCHOR2_NOTIFY0_OFFSET_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY0: RG_ANCHOR2_NOTIFY0_OFFSET
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY1 ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY1_RG_ANCHOR2_NOTIFY1_OFFSET_Pos 0                 /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY1: RG_ANCHOR2_NOTIFY1_OFFSET
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY1_RG_ANCHOR2_NOTIFY1_OFFSET_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY1_RG_ANCHOR2_NOTIFY1_OFFSET_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY1: RG_ANCHOR2_NOTIFY1_OFFSET
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY2 ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY2_RG_ANCHOR2_NOTIFY2_OFFSET_Pos 0                 /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY2: RG_ANCHOR2_NOTIFY2_OFFSET
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY2_RG_ANCHOR2_NOTIFY2_OFFSET_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY2_RG_ANCHOR2_NOTIFY2_OFFSET_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY2: RG_ANCHOR2_NOTIFY2_OFFSET
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY3 ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY3_RG_ANCHOR2_NOTIFY3_OFFSET_Pos 0                 /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY3: RG_ANCHOR2_NOTIFY3_OFFSET
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY3_RG_ANCHOR2_NOTIFY3_OFFSET_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY3_RG_ANCHOR2_NOTIFY3_OFFSET_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY3: RG_ANCHOR2_NOTIFY3_OFFSET
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY4 ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY4_RG_ANCHOR2_NOTIFY4_OFFSET_Pos 0                 /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY4: RG_ANCHOR2_NOTIFY4_OFFSET
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY4_RG_ANCHOR2_NOTIFY4_OFFSET_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY4_RG_ANCHOR2_NOTIFY4_OFFSET_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_OFFSET_NOTIFY4: RG_ANCHOR2_NOTIFY4_OFFSET
                                                         Mask                                                                                      */

/* -------------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_MASK  ------------------ */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_MASK_RG_ANCHOR2_IRQ_MASK_Pos 0                             /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_IRQ_MASK: RG_ANCHOR2_IRQ_MASK
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_MASK_RG_ANCHOR2_IRQ_MASK_Msk (0x000000ffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_MASK_RG_ANCHOR2_IRQ_MASK_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_IRQ_MASK: RG_ANCHOR2_IRQ_MASK
                                                         Mask                                                                                      */

/* ------------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR  ------------------ */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_0_Pos 0                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_IRQ_CLEAR: RG_ANCHOR2_IRQ_CLEAR_0
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_0_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_0_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_IRQ_CLEAR: RG_ANCHOR2_IRQ_CLEAR_0
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_1_Pos 1                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_IRQ_CLEAR: RG_ANCHOR2_IRQ_CLEAR_1
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_1_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_1_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_IRQ_CLEAR: RG_ANCHOR2_IRQ_CLEAR_1
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_2_Pos 2                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_IRQ_CLEAR: RG_ANCHOR2_IRQ_CLEAR_2
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_2_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_2_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_IRQ_CLEAR: RG_ANCHOR2_IRQ_CLEAR_2
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_3_Pos 3                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_IRQ_CLEAR: RG_ANCHOR2_IRQ_CLEAR_3
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_3_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_3_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_IRQ_CLEAR: RG_ANCHOR2_IRQ_CLEAR_3
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_4_Pos 4                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_IRQ_CLEAR: RG_ANCHOR2_IRQ_CLEAR_4
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_4_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_4_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_IRQ_CLEAR: RG_ANCHOR2_IRQ_CLEAR_4
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_5_Pos 5                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_IRQ_CLEAR: RG_ANCHOR2_IRQ_CLEAR_5
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_5_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_5_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_IRQ_CLEAR: RG_ANCHOR2_IRQ_CLEAR_5
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_6_Pos 6                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_IRQ_CLEAR: RG_ANCHOR2_IRQ_CLEAR_6
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_6_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_6_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_IRQ_CLEAR: RG_ANCHOR2_IRQ_CLEAR_6
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_7_Pos 7                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_IRQ_CLEAR: RG_ANCHOR2_IRQ_CLEAR_7
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_7_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_2_IRQ_CLEAR_RG_ANCHOR2_IRQ_CLEAR_7_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_2_IRQ_CLEAR: RG_ANCHOR2_IRQ_CLEAR_7
                                                         Mask                                                                                      */

/* -----------------------  LL_FUNC_REG_ANCHOR_IRQ_REASON_2  ---------------------- */
#define LL_FUNC_REG_ANCHOR_IRQ_REASON_2_ANCHOR2_IRQ_REASON_Pos 0                                      /*!< LL_FUNC_REG ANCHOR_IRQ_REASON_2: ANCHOR2_IRQ_REASON Position */
#define LL_FUNC_REG_ANCHOR_IRQ_REASON_2_ANCHOR2_IRQ_REASON_Msk (0x000000ffUL << LL_FUNC_REG_ANCHOR_IRQ_REASON_2_ANCHOR2_IRQ_REASON_Pos)/*!< LL_FUNC_REG ANCHOR_IRQ_REASON_2: ANCHOR2_IRQ_REASON Mask */
#define LL_FUNC_REG_ANCHOR_IRQ_REASON_2_ANCHOR2_IRQ_Pos 8                                             /*!< LL_FUNC_REG ANCHOR_IRQ_REASON_2: ANCHOR2_IRQ Position */
#define LL_FUNC_REG_ANCHOR_IRQ_REASON_2_ANCHOR2_IRQ_Msk (0x01UL << LL_FUNC_REG_ANCHOR_IRQ_REASON_2_ANCHOR2_IRQ_Pos)/*!< LL_FUNC_REG ANCHOR_IRQ_REASON_2: ANCHOR2_IRQ Mask */

/* ----------------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_3_EN  --------------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_EN_RG_ANCHOR3_ENABLE_Pos 0                                     /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_EN: RG_ANCHOR3_ENABLE Position */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_EN_RG_ANCHOR3_ENABLE_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_3_EN_RG_ANCHOR3_ENABLE_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_EN: RG_ANCHOR3_ENABLE Mask */

/* ---------------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_3_TIME  -------------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_TIME_RG_ANCHOR3_TIME_Pos 0                                     /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_TIME: RG_ANCHOR3_TIME Position */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_TIME_RG_ANCHOR3_TIME_Msk (0x0fffffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_3_TIME_RG_ANCHOR3_TIME_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_TIME: RG_ANCHOR3_TIME Mask */

/* -----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_EARLY  ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_EARLY_RG_ANCHOR3_WINDOW_OFFSET_EARLY_Pos 0              /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_OFFSET_EARLY: RG_ANCHOR3_WINDOW_OFFSET_EARL
                                                         Y Position                                                                                */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_EARLY_RG_ANCHOR3_WINDOW_OFFSET_EARLY_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_EARLY_RG_ANCHOR3_WINDOW_OFFSET_EARLY_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_OFFSET_EARLY: RG_ANCHOR3_WINDOW_OFFSET_EARL
                                                         Y Mask                                                                                    */

/* -----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_LATE  ----------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_LATE_RG_ANCHOR3_WINDOW_OFFSET_LATE_Pos 0                /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_OFFSET_LATE: RG_ANCHOR3_WINDOW_OFFSET_LATE
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_LATE_RG_ANCHOR3_WINDOW_OFFSET_LATE_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_LATE_RG_ANCHOR3_WINDOW_OFFSET_LATE_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_OFFSET_LATE: RG_ANCHOR3_WINDOW_OFFSET_LATE
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY0 ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY0_RG_ANCHOR3_NOTIFY0_OFFSET_Pos 0                 /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY0: RG_ANCHOR3_NOTIFY0_OFFSET
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY0_RG_ANCHOR3_NOTIFY0_OFFSET_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY0_RG_ANCHOR3_NOTIFY0_OFFSET_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY0: RG_ANCHOR3_NOTIFY0_OFFSET
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY1 ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY1_RG_ANCHOR3_NOTIFY1_OFFSET_Pos 0                 /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY1: RG_ANCHOR3_NOTIFY1_OFFSET
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY1_RG_ANCHOR3_NOTIFY1_OFFSET_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY1_RG_ANCHOR3_NOTIFY1_OFFSET_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY1: RG_ANCHOR3_NOTIFY1_OFFSET
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY2 ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY2_RG_ANCHOR3_NOTIFY2_OFFSET_Pos 0                 /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY2: RG_ANCHOR3_NOTIFY2_OFFSET
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY2_RG_ANCHOR3_NOTIFY2_OFFSET_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY2_RG_ANCHOR3_NOTIFY2_OFFSET_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY2: RG_ANCHOR3_NOTIFY2_OFFSET
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY3 ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY3_RG_ANCHOR3_NOTIFY3_OFFSET_Pos 0                 /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY3: RG_ANCHOR3_NOTIFY3_OFFSET
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY3_RG_ANCHOR3_NOTIFY3_OFFSET_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY3_RG_ANCHOR3_NOTIFY3_OFFSET_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY3: RG_ANCHOR3_NOTIFY3_OFFSET
                                                         Mask                                                                                      */

/* ----------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY4 ---------------- */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY4_RG_ANCHOR3_NOTIFY4_OFFSET_Pos 0                 /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY4: RG_ANCHOR3_NOTIFY4_OFFSET
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY4_RG_ANCHOR3_NOTIFY4_OFFSET_Msk (0x000fffffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY4_RG_ANCHOR3_NOTIFY4_OFFSET_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_OFFSET_NOTIFY4: RG_ANCHOR3_NOTIFY4_OFFSET
                                                         Mask                                                                                      */

/* -------------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_MASK  ------------------ */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_MASK_RG_ANCHOR3_IRQ_MASK_Pos 0                             /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_IRQ_MASK: RG_ANCHOR3_IRQ_MASK
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_MASK_RG_ANCHOR3_IRQ_MASK_Msk (0x000000ffUL << LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_MASK_RG_ANCHOR3_IRQ_MASK_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_IRQ_MASK: RG_ANCHOR3_IRQ_MASK
                                                         Mask                                                                                      */

/* ------------------  LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR  ------------------ */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_0_Pos 0                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_IRQ_CLEAR: RG_ANCHOR3_IRQ_CLEAR_0
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_0_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_0_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_IRQ_CLEAR: RG_ANCHOR3_IRQ_CLEAR_0
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_1_Pos 1                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_IRQ_CLEAR: RG_ANCHOR3_IRQ_CLEAR_1
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_1_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_1_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_IRQ_CLEAR: RG_ANCHOR3_IRQ_CLEAR_1
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_2_Pos 2                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_IRQ_CLEAR: RG_ANCHOR3_IRQ_CLEAR_2
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_2_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_2_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_IRQ_CLEAR: RG_ANCHOR3_IRQ_CLEAR_2
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_3_Pos 3                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_IRQ_CLEAR: RG_ANCHOR3_IRQ_CLEAR_3
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_3_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_3_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_IRQ_CLEAR: RG_ANCHOR3_IRQ_CLEAR_3
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_4_Pos 4                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_IRQ_CLEAR: RG_ANCHOR3_IRQ_CLEAR_4
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_4_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_4_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_IRQ_CLEAR: RG_ANCHOR3_IRQ_CLEAR_4
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_5_Pos 5                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_IRQ_CLEAR: RG_ANCHOR3_IRQ_CLEAR_5
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_5_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_5_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_IRQ_CLEAR: RG_ANCHOR3_IRQ_CLEAR_5
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_6_Pos 6                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_IRQ_CLEAR: RG_ANCHOR3_IRQ_CLEAR_6
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_6_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_6_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_IRQ_CLEAR: RG_ANCHOR3_IRQ_CLEAR_6
                                                         Mask                                                                                      */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_7_Pos 7                         /*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_IRQ_CLEAR: RG_ANCHOR3_IRQ_CLEAR_7
                                                         Position                                                                                  */
#define LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_7_Msk (0x01UL << LL_FUNC_REG_CSR_ANCHOR_ALARM_3_IRQ_CLEAR_RG_ANCHOR3_IRQ_CLEAR_7_Pos)/*!< LL_FUNC_REG CSR_ANCHOR_ALARM_3_IRQ_CLEAR: RG_ANCHOR3_IRQ_CLEAR_7
                                                         Mask                                                                                      */

/* -----------------------  LL_FUNC_REG_ANCHOR_IRQ_REASON_3  ---------------------- */
#define LL_FUNC_REG_ANCHOR_IRQ_REASON_3_ANCHOR3_IRQ_REASON_Pos 0                                      /*!< LL_FUNC_REG ANCHOR_IRQ_REASON_3: ANCHOR3_IRQ_REASON Position */
#define LL_FUNC_REG_ANCHOR_IRQ_REASON_3_ANCHOR3_IRQ_REASON_Msk (0x000000ffUL << LL_FUNC_REG_ANCHOR_IRQ_REASON_3_ANCHOR3_IRQ_REASON_Pos)/*!< LL_FUNC_REG ANCHOR_IRQ_REASON_3: ANCHOR3_IRQ_REASON Mask */
#define LL_FUNC_REG_ANCHOR_IRQ_REASON_3_ANCHOR3_IRQ_Pos 8                                             /*!< LL_FUNC_REG ANCHOR_IRQ_REASON_3: ANCHOR3_IRQ Position */
#define LL_FUNC_REG_ANCHOR_IRQ_REASON_3_ANCHOR3_IRQ_Msk (0x01UL << LL_FUNC_REG_ANCHOR_IRQ_REASON_3_ANCHOR3_IRQ_Pos)/*!< LL_FUNC_REG ANCHOR_IRQ_REASON_3: ANCHOR3_IRQ Mask */

/* -------------------------  LL_FUNC_REG_ANCHOR_CONTROL  ------------------------- */
#define LL_FUNC_REG_ANCHOR_CONTROL_RG_CLOCK_ENABLE_Pos 0                                              /*!< LL_FUNC_REG ANCHOR_CONTROL: RG_CLOCK_ENABLE Position */
#define LL_FUNC_REG_ANCHOR_CONTROL_RG_CLOCK_ENABLE_Msk (0x01UL << LL_FUNC_REG_ANCHOR_CONTROL_RG_CLOCK_ENABLE_Pos)/*!< LL_FUNC_REG ANCHOR_CONTROL: RG_CLOCK_ENABLE Mask */

/* -----------------------  LL_FUNC_REG_ANCHOR_ACTIVE_TIME  ----------------------- */
#define LL_FUNC_REG_ANCHOR_ACTIVE_TIME_RG_CLOCK_TIME_Pos 0                                            /*!< LL_FUNC_REG ANCHOR_ACTIVE_TIME: RG_CLOCK_TIME Position */
#define LL_FUNC_REG_ANCHOR_ACTIVE_TIME_RG_CLOCK_TIME_Msk (0x0fffffffUL << LL_FUNC_REG_ANCHOR_ACTIVE_TIME_RG_CLOCK_TIME_Pos)/*!< LL_FUNC_REG ANCHOR_ACTIVE_TIME: RG_CLOCK_TIME Mask */

/* ----------------------  LL_FUNC_REG_ANCHOR_ALARM_PRIORITY  --------------------- */
#define LL_FUNC_REG_ANCHOR_ALARM_PRIORITY_RG_ARBIT_PRIORITY_Pos 0                                     /*!< LL_FUNC_REG ANCHOR_ALARM_PRIORITY: RG_ARBIT_PRIORITY Position */
#define LL_FUNC_REG_ANCHOR_ALARM_PRIORITY_RG_ARBIT_PRIORITY_Msk (0x0fUL << LL_FUNC_REG_ANCHOR_ALARM_PRIORITY_RG_ARBIT_PRIORITY_Pos)/*!< LL_FUNC_REG ANCHOR_ALARM_PRIORITY: RG_ARBIT_PRIORITY Mask */

/* --------------------  LL_FUNC_REG_ANCHOR_ACTIVE_ALARM_INFO  -------------------- */
#define LL_FUNC_REG_ANCHOR_ACTIVE_ALARM_INFO_ACTIVE_ANCHOR_TIME_Pos 0                                 /*!< LL_FUNC_REG ANCHOR_ACTIVE_ALARM_INFO: ACTIVE_ANCHOR_TIME Position */
#define LL_FUNC_REG_ANCHOR_ACTIVE_ALARM_INFO_ACTIVE_ANCHOR_TIME_Msk (0x0fffffffUL << LL_FUNC_REG_ANCHOR_ACTIVE_ALARM_INFO_ACTIVE_ANCHOR_TIME_Pos)/*!< LL_FUNC_REG ANCHOR_ACTIVE_ALARM_INFO: ACTIVE_ANCHOR_TIME Mask */
#define LL_FUNC_REG_ANCHOR_ACTIVE_ALARM_INFO_ACTIVE_ANCHOR_ID_Pos 28                                  /*!< LL_FUNC_REG ANCHOR_ACTIVE_ALARM_INFO: ACTIVE_ANCHOR_ID Position */
#define LL_FUNC_REG_ANCHOR_ACTIVE_ALARM_INFO_ACTIVE_ANCHOR_ID_Msk (0x03UL << LL_FUNC_REG_ANCHOR_ACTIVE_ALARM_INFO_ACTIVE_ANCHOR_ID_Pos)/*!< LL_FUNC_REG ANCHOR_ACTIVE_ALARM_INFO: ACTIVE_ANCHOR_ID Mask */
#define LL_FUNC_REG_ANCHOR_ACTIVE_ALARM_INFO_ACTIVE_ANCHOR_VALID_Pos 30                               /*!< LL_FUNC_REG ANCHOR_ACTIVE_ALARM_INFO: ACTIVE_ANCHOR_VALID Position */
#define LL_FUNC_REG_ANCHOR_ACTIVE_ALARM_INFO_ACTIVE_ANCHOR_VALID_Msk (0x01UL << LL_FUNC_REG_ANCHOR_ACTIVE_ALARM_INFO_ACTIVE_ANCHOR_VALID_Pos)/*!< LL_FUNC_REG ANCHOR_ACTIVE_ALARM_INFO: ACTIVE_ANCHOR_VALID Mask */

/* ---------------------------  LL_FUNC_REG_ANCHOR_DBG  --------------------------- */
#define LL_FUNC_REG_ANCHOR_DBG_DBG_TOUCHLATE_Pos 0                                                    /*!< LL_FUNC_REG ANCHOR_DBG: DBG_TOUCHLATE Position */
#define LL_FUNC_REG_ANCHOR_DBG_DBG_TOUCHLATE_Msk (0x0fUL << LL_FUNC_REG_ANCHOR_DBG_DBG_TOUCHLATE_Pos) /*!< LL_FUNC_REG ANCHOR_DBG: DBG_TOUCHLATE Mask */
#define LL_FUNC_REG_ANCHOR_DBG_DBG_TOUCHEARLY_Pos 4                                                   /*!< LL_FUNC_REG ANCHOR_DBG: DBG_TOUCHEARLY Position */
#define LL_FUNC_REG_ANCHOR_DBG_DBG_TOUCHEARLY_Msk (0x0fUL << LL_FUNC_REG_ANCHOR_DBG_DBG_TOUCHEARLY_Pos)/*!< LL_FUNC_REG ANCHOR_DBG: DBG_TOUCHEARLY Mask */


/* ================================================================================ */
/* ================     struct 'RX_PDU_BUF_REG' Position & Mask    ================ */
/* ================================================================================ */


/* -------------------------  RX_PDU_BUF_REG_RX_PDU_BUF_0  ------------------------ */
#define RX_PDU_BUF_REG_RX_PDU_BUF_0_RX_PDU_TYPE_Pos 0                                                 /*!< RX_PDU_BUF_REG RX_PDU_BUF_0: RX_PDU_TYPE Position */
#define RX_PDU_BUF_REG_RX_PDU_BUF_0_RX_PDU_TYPE_Msk (0x00000fffUL << RX_PDU_BUF_REG_RX_PDU_BUF_0_RX_PDU_TYPE_Pos)/*!< RX_PDU_BUF_REG RX_PDU_BUF_0: RX_PDU_TYPE Mask */
#define RX_PDU_BUF_REG_RX_PDU_BUF_0_RX_CONN_ID_Pos 12                                                 /*!< RX_PDU_BUF_REG RX_PDU_BUF_0: RX_CONN_ID Position */
#define RX_PDU_BUF_REG_RX_PDU_BUF_0_RX_CONN_ID_Msk (0x0fUL << RX_PDU_BUF_REG_RX_PDU_BUF_0_RX_CONN_ID_Pos)/*!< RX_PDU_BUF_REG RX_PDU_BUF_0: RX_CONN_ID Mask */
#define RX_PDU_BUF_REG_RX_PDU_BUF_0_RX_PDU_BUF_RSV0_Pos 16                                            /*!< RX_PDU_BUF_REG RX_PDU_BUF_0: RX_PDU_BUF_RSV0 Position */
#define RX_PDU_BUF_REG_RX_PDU_BUF_0_RX_PDU_BUF_RSV0_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_BUF_0_RX_PDU_BUF_RSV0_Pos)/*!< RX_PDU_BUF_REG RX_PDU_BUF_0: RX_PDU_BUF_RSV0 Mask */
#define RX_PDU_BUF_REG_RX_PDU_BUF_0_RX_PDU_BUF_RSV1_Pos 24                                            /*!< RX_PDU_BUF_REG RX_PDU_BUF_0: RX_PDU_BUF_RSV1 Position */
#define RX_PDU_BUF_REG_RX_PDU_BUF_0_RX_PDU_BUF_RSV1_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_BUF_0_RX_PDU_BUF_RSV1_Pos)/*!< RX_PDU_BUF_REG RX_PDU_BUF_0: RX_PDU_BUF_RSV1 Mask */

/* -------------------------  RX_PDU_BUF_REG_RX_PDU_BUF_1  ------------------------ */
#define RX_PDU_BUF_REG_RX_PDU_BUF_1_RX_RSSI_Pos 0                                                     /*!< RX_PDU_BUF_REG RX_PDU_BUF_1: RX_RSSI Position */
#define RX_PDU_BUF_REG_RX_PDU_BUF_1_RX_RSSI_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_BUF_1_RX_RSSI_Pos)/*!< RX_PDU_BUF_REG RX_PDU_BUF_1: RX_RSSI Mask */
#define RX_PDU_BUF_REG_RX_PDU_BUF_1_RX_ACCESS_TIME_Pos 8                                              /*!< RX_PDU_BUF_REG RX_PDU_BUF_1: RX_ACCESS_TIME Position */
#define RX_PDU_BUF_REG_RX_PDU_BUF_1_RX_ACCESS_TIME_Msk (0x000fffffUL << RX_PDU_BUF_REG_RX_PDU_BUF_1_RX_ACCESS_TIME_Pos)/*!< RX_PDU_BUF_REG RX_PDU_BUF_1: RX_ACCESS_TIME Mask */
#define RX_PDU_BUF_REG_RX_PDU_BUF_1_RX_PDU_BUF_RSV2_Pos 28                                            /*!< RX_PDU_BUF_REG RX_PDU_BUF_1: RX_PDU_BUF_RSV2 Position */
#define RX_PDU_BUF_REG_RX_PDU_BUF_1_RX_PDU_BUF_RSV2_Msk (0x0fUL << RX_PDU_BUF_REG_RX_PDU_BUF_1_RX_PDU_BUF_RSV2_Pos)/*!< RX_PDU_BUF_REG RX_PDU_BUF_1: RX_PDU_BUF_RSV2 Mask */

/* -------------------------  RX_PDU_BUF_REG_RX_PDU_BUF_2  ------------------------ */
#define RX_PDU_BUF_REG_RX_PDU_BUF_2_RX_CH_Pos 0                                                       /*!< RX_PDU_BUF_REG RX_PDU_BUF_2: RX_CH Position */
#define RX_PDU_BUF_REG_RX_PDU_BUF_2_RX_CH_Msk (0x3fUL << RX_PDU_BUF_REG_RX_PDU_BUF_2_RX_CH_Pos)       /*!< RX_PDU_BUF_REG RX_PDU_BUF_2: RX_CH Mask */
#define RX_PDU_BUF_REG_RX_PDU_BUF_2_RX_PDU_BUF_RSV3_Pos 6                                             /*!< RX_PDU_BUF_REG RX_PDU_BUF_2: RX_PDU_BUF_RSV3 Position */
#define RX_PDU_BUF_REG_RX_PDU_BUF_2_RX_PDU_BUF_RSV3_Msk (0x03UL << RX_PDU_BUF_REG_RX_PDU_BUF_2_RX_PDU_BUF_RSV3_Pos)/*!< RX_PDU_BUF_REG RX_PDU_BUF_2: RX_PDU_BUF_RSV3 Mask */
#define RX_PDU_BUF_REG_RX_PDU_BUF_2_RX_INFO_Pos 8                                                     /*!< RX_PDU_BUF_REG RX_PDU_BUF_2: RX_INFO Position */
#define RX_PDU_BUF_REG_RX_PDU_BUF_2_RX_INFO_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_BUF_2_RX_INFO_Pos)/*!< RX_PDU_BUF_REG RX_PDU_BUF_2: RX_INFO Mask */
#define RX_PDU_BUF_REG_RX_PDU_BUF_2_CONN_EVENT_Pos 16                                                 /*!< RX_PDU_BUF_REG RX_PDU_BUF_2: CONN_EVENT Position */
#define RX_PDU_BUF_REG_RX_PDU_BUF_2_CONN_EVENT_Msk (0x0000ffffUL << RX_PDU_BUF_REG_RX_PDU_BUF_2_CONN_EVENT_Pos)/*!< RX_PDU_BUF_REG RX_PDU_BUF_2: CONN_EVENT Mask */

/* -----------------------  RX_PDU_BUF_REG_RX_PDU_PAYLOAD_0  ---------------------- */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_0_RX_PDU_HEADER_Pos 0                                           /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_0: RX_PDU_HEADER Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_0_RX_PDU_HEADER_Msk (0x0000ffffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_0_RX_PDU_HEADER_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_0: RX_PDU_HEADER Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_0_RX_PDU_PAYLOAD_0_Pos 16                                       /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_0: RX_PDU_PAYLOAD_0 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_0_RX_PDU_PAYLOAD_0_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_0_RX_PDU_PAYLOAD_0_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_0: RX_PDU_PAYLOAD_0 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_0_RX_PDU_PAYLOAD_1_Pos 24                                       /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_0: RX_PDU_PAYLOAD_1 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_0_RX_PDU_PAYLOAD_1_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_0_RX_PDU_PAYLOAD_1_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_0: RX_PDU_PAYLOAD_1 Mask */

/* ----------------------  RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_0  --------------------- */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_0_RX_PDU_PAYLOAD_2_Pos 0                                      /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_0: RX_PDU_PAYLOAD_2 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_0_RX_PDU_PAYLOAD_2_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_0_RX_PDU_PAYLOAD_2_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_0: RX_PDU_PAYLOAD_2 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_0_RX_PDU_PAYLOAD_3_Pos 8                                      /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_0: RX_PDU_PAYLOAD_3 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_0_RX_PDU_PAYLOAD_3_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_0_RX_PDU_PAYLOAD_3_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_0: RX_PDU_PAYLOAD_3 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_0_RX_PDU_PAYLOAD_4_Pos 16                                     /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_0: RX_PDU_PAYLOAD_4 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_0_RX_PDU_PAYLOAD_4_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_0_RX_PDU_PAYLOAD_4_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_0: RX_PDU_PAYLOAD_4 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_0_RX_PDU_PAYLOAD_5_Pos 24                                     /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_0: RX_PDU_PAYLOAD_5 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_0_RX_PDU_PAYLOAD_5_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_0_RX_PDU_PAYLOAD_5_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_0: RX_PDU_PAYLOAD_5 Mask */

/* ----------------------  RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_1  --------------------- */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_1_RX_PDU_PAYLOAD_6_Pos 0                                      /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_1: RX_PDU_PAYLOAD_6 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_1_RX_PDU_PAYLOAD_6_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_1_RX_PDU_PAYLOAD_6_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_1: RX_PDU_PAYLOAD_6 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_1_RX_PDU_PAYLOAD_7_Pos 8                                      /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_1: RX_PDU_PAYLOAD_7 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_1_RX_PDU_PAYLOAD_7_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_1_RX_PDU_PAYLOAD_7_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_1: RX_PDU_PAYLOAD_7 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_1_RX_PDU_PAYLOAD_8_Pos 16                                     /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_1: RX_PDU_PAYLOAD_8 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_1_RX_PDU_PAYLOAD_8_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_1_RX_PDU_PAYLOAD_8_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_1: RX_PDU_PAYLOAD_8 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_1_RX_PDU_PAYLOAD_9_Pos 24                                     /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_1: RX_PDU_PAYLOAD_9 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_1_RX_PDU_PAYLOAD_9_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_1_RX_PDU_PAYLOAD_9_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_1: RX_PDU_PAYLOAD_9 Mask */

/* ----------------------  RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_2  --------------------- */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_2_RX_PDU_PAYLOAD_10_Pos 0                                     /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_2: RX_PDU_PAYLOAD_10 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_2_RX_PDU_PAYLOAD_10_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_2_RX_PDU_PAYLOAD_10_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_2: RX_PDU_PAYLOAD_10 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_2_RX_PDU_PAYLOAD_11_Pos 8                                     /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_2: RX_PDU_PAYLOAD_11 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_2_RX_PDU_PAYLOAD_11_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_2_RX_PDU_PAYLOAD_11_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_2: RX_PDU_PAYLOAD_11 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_2_RX_PDU_PAYLOAD_12_Pos 16                                    /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_2: RX_PDU_PAYLOAD_12 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_2_RX_PDU_PAYLOAD_12_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_2_RX_PDU_PAYLOAD_12_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_2: RX_PDU_PAYLOAD_12 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_2_RX_PDU_PAYLOAD_13_Pos 24                                    /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_2: RX_PDU_PAYLOAD_13 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_2_RX_PDU_PAYLOAD_13_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_2_RX_PDU_PAYLOAD_13_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_2: RX_PDU_PAYLOAD_13 Mask */

/* ----------------------  RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_3  --------------------- */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_3_RX_PDU_PAYLOAD_14_Pos 0                                     /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_3: RX_PDU_PAYLOAD_14 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_3_RX_PDU_PAYLOAD_14_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_3_RX_PDU_PAYLOAD_14_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_3: RX_PDU_PAYLOAD_14 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_3_RX_PDU_PAYLOAD_15_Pos 8                                     /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_3: RX_PDU_PAYLOAD_15 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_3_RX_PDU_PAYLOAD_15_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_3_RX_PDU_PAYLOAD_15_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_3: RX_PDU_PAYLOAD_15 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_3_RX_PDU_PAYLOAD_16_Pos 16                                    /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_3: RX_PDU_PAYLOAD_16 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_3_RX_PDU_PAYLOAD_16_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_3_RX_PDU_PAYLOAD_16_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_3: RX_PDU_PAYLOAD_16 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_3_RX_PDU_PAYLOAD_17_Pos 24                                    /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_3: RX_PDU_PAYLOAD_17 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_3_RX_PDU_PAYLOAD_17_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_3_RX_PDU_PAYLOAD_17_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_3: RX_PDU_PAYLOAD_17 Mask */

/* ----------------------  RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_4  --------------------- */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_4_RX_PDU_PAYLOAD_18_Pos 0                                     /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_4: RX_PDU_PAYLOAD_18 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_4_RX_PDU_PAYLOAD_18_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_4_RX_PDU_PAYLOAD_18_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_4: RX_PDU_PAYLOAD_18 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_4_RX_PDU_PAYLOAD_19_Pos 8                                     /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_4: RX_PDU_PAYLOAD_19 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_4_RX_PDU_PAYLOAD_19_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_4_RX_PDU_PAYLOAD_19_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_4: RX_PDU_PAYLOAD_19 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_4_RX_PDU_PAYLOAD_20_Pos 16                                    /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_4: RX_PDU_PAYLOAD_20 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_4_RX_PDU_PAYLOAD_20_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_4_RX_PDU_PAYLOAD_20_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_4: RX_PDU_PAYLOAD_20 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_4_RX_PDU_PAYLOAD_21_Pos 24                                    /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_4: RX_PDU_PAYLOAD_21 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_4_RX_PDU_PAYLOAD_21_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_4_RX_PDU_PAYLOAD_21_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_4: RX_PDU_PAYLOAD_21 Mask */

/* ----------------------  RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_5  --------------------- */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_5_RX_PDU_PAYLOAD_22_Pos 0                                     /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_5: RX_PDU_PAYLOAD_22 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_5_RX_PDU_PAYLOAD_22_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_5_RX_PDU_PAYLOAD_22_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_5: RX_PDU_PAYLOAD_22 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_5_RX_PDU_PAYLOAD_23_Pos 8                                     /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_5: RX_PDU_PAYLOAD_23 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_5_RX_PDU_PAYLOAD_23_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_5_RX_PDU_PAYLOAD_23_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_5: RX_PDU_PAYLOAD_23 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_5_RX_PDU_PAYLOAD_24_Pos 16                                    /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_5: RX_PDU_PAYLOAD_24 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_5_RX_PDU_PAYLOAD_24_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_5_RX_PDU_PAYLOAD_24_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_5: RX_PDU_PAYLOAD_24 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_5_RX_PDU_PAYLOAD_25_Pos 24                                    /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_5: RX_PDU_PAYLOAD_25 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_5_RX_PDU_PAYLOAD_25_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_5_RX_PDU_PAYLOAD_25_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_5: RX_PDU_PAYLOAD_25 Mask */

/* ----------------------  RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_6  --------------------- */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_6_RX_PDU_PAYLOAD_26_Pos 0                                     /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_6: RX_PDU_PAYLOAD_26 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_6_RX_PDU_PAYLOAD_26_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_6_RX_PDU_PAYLOAD_26_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_6: RX_PDU_PAYLOAD_26 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_6_RX_PDU_PAYLOAD_27_Pos 8                                     /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_6: RX_PDU_PAYLOAD_27 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_6_RX_PDU_PAYLOAD_27_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_6_RX_PDU_PAYLOAD_27_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_6: RX_PDU_PAYLOAD_27 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_6_RX_PDU_PAYLOAD_28_Pos 16                                    /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_6: RX_PDU_PAYLOAD_28 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_6_RX_PDU_PAYLOAD_28_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_6_RX_PDU_PAYLOAD_28_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_6: RX_PDU_PAYLOAD_28 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_6_RX_PDU_PAYLOAD_29_Pos 24                                    /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_6: RX_PDU_PAYLOAD_29 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_6_RX_PDU_PAYLOAD_29_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_6_RX_PDU_PAYLOAD_29_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_6: RX_PDU_PAYLOAD_29 Mask */

/* ----------------------  RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_7  --------------------- */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_7_RX_PDU_PAYLOAD_30_Pos 0                                     /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_7: RX_PDU_PAYLOAD_30 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_7_RX_PDU_PAYLOAD_30_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_7_RX_PDU_PAYLOAD_30_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_7: RX_PDU_PAYLOAD_30 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_7_RX_PDU_PAYLOAD_31_Pos 8                                     /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_7: RX_PDU_PAYLOAD_31 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_7_RX_PDU_PAYLOAD_31_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_7_RX_PDU_PAYLOAD_31_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_7: RX_PDU_PAYLOAD_31 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_7_RX_PDU_PAYLOAD_32_Pos 16                                    /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_7: RX_PDU_PAYLOAD_32 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_7_RX_PDU_PAYLOAD_32_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_7_RX_PDU_PAYLOAD_32_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_7: RX_PDU_PAYLOAD_32 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_7_RX_PDU_PAYLOAD_33_Pos 24                                    /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_7: RX_PDU_PAYLOAD_33 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_7_RX_PDU_PAYLOAD_33_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_7_RX_PDU_PAYLOAD_33_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_7: RX_PDU_PAYLOAD_33 Mask */

/* ----------------------  RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_8  --------------------- */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_8_RX_PDU_PAYLOAD_34_Pos 0                                     /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_8: RX_PDU_PAYLOAD_34 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_8_RX_PDU_PAYLOAD_34_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_8_RX_PDU_PAYLOAD_34_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_8: RX_PDU_PAYLOAD_34 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_8_RX_PDU_PAYLOAD_35_Pos 8                                     /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_8: RX_PDU_PAYLOAD_35 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_8_RX_PDU_PAYLOAD_35_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_8_RX_PDU_PAYLOAD_35_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_8: RX_PDU_PAYLOAD_35 Mask */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_8_RX_PDU_PAYLOAD_36_Pos 16                                    /*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_8: RX_PDU_PAYLOAD_36 Position */
#define RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_8_RX_PDU_PAYLOAD_36_Msk (0x000000ffUL << RX_PDU_BUF_REG_RX_PDU_PAYLOAD_1_8_RX_PDU_PAYLOAD_36_Pos)/*!< RX_PDU_BUF_REG RX_PDU_PAYLOAD_1_8: RX_PDU_PAYLOAD_36 Mask */


/* ================================================================================ */
/* ================     struct 'TX_PDU_BUF_REG' Position & Mask    ================ */
/* ================================================================================ */


/* -------------------------  TX_PDU_BUF_REG_TX_PDU_BUF_0  ------------------------ */
#define TX_PDU_BUF_REG_TX_PDU_BUF_0_TX_PDU_TYPE_Pos 0                                                 /*!< TX_PDU_BUF_REG TX_PDU_BUF_0: TX_PDU_TYPE Position */
#define TX_PDU_BUF_REG_TX_PDU_BUF_0_TX_PDU_TYPE_Msk (0x00000fffUL << TX_PDU_BUF_REG_TX_PDU_BUF_0_TX_PDU_TYPE_Pos)/*!< TX_PDU_BUF_REG TX_PDU_BUF_0: TX_PDU_TYPE Mask */
#define TX_PDU_BUF_REG_TX_PDU_BUF_0_TX_CONN_ID_Pos 12                                                 /*!< TX_PDU_BUF_REG TX_PDU_BUF_0: TX_CONN_ID Position */
#define TX_PDU_BUF_REG_TX_PDU_BUF_0_TX_CONN_ID_Msk (0x0fUL << TX_PDU_BUF_REG_TX_PDU_BUF_0_TX_CONN_ID_Pos)/*!< TX_PDU_BUF_REG TX_PDU_BUF_0: TX_CONN_ID Mask */
#define TX_PDU_BUF_REG_TX_PDU_BUF_0_TX_PDU_BUF_RSV0_Pos 16                                            /*!< TX_PDU_BUF_REG TX_PDU_BUF_0: TX_PDU_BUF_RSV0 Position */
#define TX_PDU_BUF_REG_TX_PDU_BUF_0_TX_PDU_BUF_RSV0_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_BUF_0_TX_PDU_BUF_RSV0_Pos)/*!< TX_PDU_BUF_REG TX_PDU_BUF_0: TX_PDU_BUF_RSV0 Mask */
#define TX_PDU_BUF_REG_TX_PDU_BUF_0_TX_PAYLOAD_OFFSET_Pos 24                                          /*!< TX_PDU_BUF_REG TX_PDU_BUF_0: TX_PAYLOAD_OFFSET Position */
#define TX_PDU_BUF_REG_TX_PDU_BUF_0_TX_PAYLOAD_OFFSET_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_BUF_0_TX_PAYLOAD_OFFSET_Pos)/*!< TX_PDU_BUF_REG TX_PDU_BUF_0: TX_PAYLOAD_OFFSET Mask */

/* -------------------------  TX_PDU_BUF_REG_TX_PDU_BUF_1  ------------------------ */
#define TX_PDU_BUF_REG_TX_PDU_BUF_1_TX_PDU_BUF_RSV1_Pos 0                                             /*!< TX_PDU_BUF_REG TX_PDU_BUF_1: TX_PDU_BUF_RSV1 Position */
#define TX_PDU_BUF_REG_TX_PDU_BUF_1_TX_PDU_BUF_RSV1_Msk (0xffffffffUL << TX_PDU_BUF_REG_TX_PDU_BUF_1_TX_PDU_BUF_RSV1_Pos)/*!< TX_PDU_BUF_REG TX_PDU_BUF_1: TX_PDU_BUF_RSV1 Mask */

/* -------------------------  TX_PDU_BUF_REG_TX_PDU_BUF_2  ------------------------ */
#define TX_PDU_BUF_REG_TX_PDU_BUF_2_TX_PDU_BUF_RSV2_Pos 0                                             /*!< TX_PDU_BUF_REG TX_PDU_BUF_2: TX_PDU_BUF_RSV2 Position */
#define TX_PDU_BUF_REG_TX_PDU_BUF_2_TX_PDU_BUF_RSV2_Msk (0xffffffffUL << TX_PDU_BUF_REG_TX_PDU_BUF_2_TX_PDU_BUF_RSV2_Pos)/*!< TX_PDU_BUF_REG TX_PDU_BUF_2: TX_PDU_BUF_RSV2 Mask */

/* -----------------------  TX_PDU_BUF_REG_TX_PDU_PAYLOAD_0  ---------------------- */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_0_TX_PDU_HDR_Pos 0                                              /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_0: TX_PDU_HDR Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_0_TX_PDU_HDR_Msk (0x0000ffffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_0_TX_PDU_HDR_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_0: TX_PDU_HDR Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_0_TX_PDU_PAYLOAD_0_Pos 16                                       /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_0: TX_PDU_PAYLOAD_0 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_0_TX_PDU_PAYLOAD_0_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_0_TX_PDU_PAYLOAD_0_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_0: TX_PDU_PAYLOAD_0 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_0_TX_PDU_PAYLOAD_1_Pos 24                                       /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_0: TX_PDU_PAYLOAD_1 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_0_TX_PDU_PAYLOAD_1_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_0_TX_PDU_PAYLOAD_1_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_0: TX_PDU_PAYLOAD_1 Mask */

/* ----------------------  TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_0  --------------------- */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_0_TX_PDU_PAYLOAD_2_Pos 0                                      /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_0: TX_PDU_PAYLOAD_2 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_0_TX_PDU_PAYLOAD_2_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_0_TX_PDU_PAYLOAD_2_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_0: TX_PDU_PAYLOAD_2 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_0_TX_PDU_PAYLOAD_3_Pos 8                                      /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_0: TX_PDU_PAYLOAD_3 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_0_TX_PDU_PAYLOAD_3_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_0_TX_PDU_PAYLOAD_3_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_0: TX_PDU_PAYLOAD_3 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_0_TX_PDU_PAYLOAD_4_Pos 16                                     /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_0: TX_PDU_PAYLOAD_4 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_0_TX_PDU_PAYLOAD_4_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_0_TX_PDU_PAYLOAD_4_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_0: TX_PDU_PAYLOAD_4 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_0_TX_PDU_PAYLOAD_5_Pos 24                                     /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_0: TX_PDU_PAYLOAD_5 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_0_TX_PDU_PAYLOAD_5_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_0_TX_PDU_PAYLOAD_5_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_0: TX_PDU_PAYLOAD_5 Mask */

/* ----------------------  TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_1  --------------------- */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_1_TX_PDU_PAYLOAD_6_Pos 0                                      /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_1: TX_PDU_PAYLOAD_6 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_1_TX_PDU_PAYLOAD_6_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_1_TX_PDU_PAYLOAD_6_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_1: TX_PDU_PAYLOAD_6 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_1_TX_PDU_PAYLOAD_7_Pos 8                                      /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_1: TX_PDU_PAYLOAD_7 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_1_TX_PDU_PAYLOAD_7_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_1_TX_PDU_PAYLOAD_7_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_1: TX_PDU_PAYLOAD_7 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_1_TX_PDU_PAYLOAD_8_Pos 16                                     /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_1: TX_PDU_PAYLOAD_8 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_1_TX_PDU_PAYLOAD_8_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_1_TX_PDU_PAYLOAD_8_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_1: TX_PDU_PAYLOAD_8 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_1_TX_PDU_PAYLOAD_9_Pos 24                                     /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_1: TX_PDU_PAYLOAD_9 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_1_TX_PDU_PAYLOAD_9_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_1_TX_PDU_PAYLOAD_9_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_1: TX_PDU_PAYLOAD_9 Mask */

/* ----------------------  TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_2  --------------------- */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_2_TX_PDU_PAYLOAD_10_Pos 0                                     /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_2: TX_PDU_PAYLOAD_10 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_2_TX_PDU_PAYLOAD_10_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_2_TX_PDU_PAYLOAD_10_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_2: TX_PDU_PAYLOAD_10 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_2_TX_PDU_PAYLOAD_11_Pos 8                                     /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_2: TX_PDU_PAYLOAD_11 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_2_TX_PDU_PAYLOAD_11_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_2_TX_PDU_PAYLOAD_11_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_2: TX_PDU_PAYLOAD_11 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_2_TX_PDU_PAYLOAD_12_Pos 16                                    /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_2: TX_PDU_PAYLOAD_12 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_2_TX_PDU_PAYLOAD_12_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_2_TX_PDU_PAYLOAD_12_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_2: TX_PDU_PAYLOAD_12 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_2_TX_PDU_PAYLOAD_13_Pos 24                                    /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_2: TX_PDU_PAYLOAD_13 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_2_TX_PDU_PAYLOAD_13_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_2_TX_PDU_PAYLOAD_13_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_2: TX_PDU_PAYLOAD_13 Mask */

/* ----------------------  TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_3  --------------------- */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_3_TX_PDU_PAYLOAD_14_Pos 0                                     /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_3: TX_PDU_PAYLOAD_14 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_3_TX_PDU_PAYLOAD_14_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_3_TX_PDU_PAYLOAD_14_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_3: TX_PDU_PAYLOAD_14 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_3_TX_PDU_PAYLOAD_15_Pos 8                                     /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_3: TX_PDU_PAYLOAD_15 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_3_TX_PDU_PAYLOAD_15_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_3_TX_PDU_PAYLOAD_15_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_3: TX_PDU_PAYLOAD_15 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_3_TX_PDU_PAYLOAD_16_Pos 16                                    /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_3: TX_PDU_PAYLOAD_16 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_3_TX_PDU_PAYLOAD_16_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_3_TX_PDU_PAYLOAD_16_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_3: TX_PDU_PAYLOAD_16 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_3_TX_PDU_PAYLOAD_17_Pos 24                                    /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_3: TX_PDU_PAYLOAD_17 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_3_TX_PDU_PAYLOAD_17_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_3_TX_PDU_PAYLOAD_17_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_3: TX_PDU_PAYLOAD_17 Mask */

/* ----------------------  TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_4  --------------------- */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_4_TX_PDU_PAYLOAD_18_Pos 0                                     /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_4: TX_PDU_PAYLOAD_18 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_4_TX_PDU_PAYLOAD_18_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_4_TX_PDU_PAYLOAD_18_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_4: TX_PDU_PAYLOAD_18 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_4_TX_PDU_PAYLOAD_19_Pos 8                                     /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_4: TX_PDU_PAYLOAD_19 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_4_TX_PDU_PAYLOAD_19_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_4_TX_PDU_PAYLOAD_19_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_4: TX_PDU_PAYLOAD_19 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_4_TX_PDU_PAYLOAD_20_Pos 16                                    /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_4: TX_PDU_PAYLOAD_20 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_4_TX_PDU_PAYLOAD_20_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_4_TX_PDU_PAYLOAD_20_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_4: TX_PDU_PAYLOAD_20 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_4_TX_PDU_PAYLOAD_21_Pos 24                                    /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_4: TX_PDU_PAYLOAD_21 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_4_TX_PDU_PAYLOAD_21_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_4_TX_PDU_PAYLOAD_21_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_4: TX_PDU_PAYLOAD_21 Mask */

/* ----------------------  TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_5  --------------------- */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_5_TX_PDU_PAYLOAD_22_Pos 0                                     /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_5: TX_PDU_PAYLOAD_22 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_5_TX_PDU_PAYLOAD_22_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_5_TX_PDU_PAYLOAD_22_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_5: TX_PDU_PAYLOAD_22 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_5_TX_PDU_PAYLOAD_23_Pos 8                                     /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_5: TX_PDU_PAYLOAD_23 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_5_TX_PDU_PAYLOAD_23_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_5_TX_PDU_PAYLOAD_23_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_5: TX_PDU_PAYLOAD_23 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_5_TX_PDU_PAYLOAD_24_Pos 16                                    /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_5: TX_PDU_PAYLOAD_24 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_5_TX_PDU_PAYLOAD_24_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_5_TX_PDU_PAYLOAD_24_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_5: TX_PDU_PAYLOAD_24 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_5_TX_PDU_PAYLOAD_25_Pos 24                                    /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_5: TX_PDU_PAYLOAD_25 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_5_TX_PDU_PAYLOAD_25_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_5_TX_PDU_PAYLOAD_25_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_5: TX_PDU_PAYLOAD_25 Mask */

/* ----------------------  TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_6  --------------------- */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_6_TX_PDU_PAYLOAD_26_Pos 0                                     /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_6: TX_PDU_PAYLOAD_26 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_6_TX_PDU_PAYLOAD_26_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_6_TX_PDU_PAYLOAD_26_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_6: TX_PDU_PAYLOAD_26 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_6_TX_PDU_PAYLOAD_27_Pos 8                                     /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_6: TX_PDU_PAYLOAD_27 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_6_TX_PDU_PAYLOAD_27_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_6_TX_PDU_PAYLOAD_27_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_6: TX_PDU_PAYLOAD_27 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_6_TX_PDU_PAYLOAD_28_Pos 16                                    /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_6: TX_PDU_PAYLOAD_28 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_6_TX_PDU_PAYLOAD_28_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_6_TX_PDU_PAYLOAD_28_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_6: TX_PDU_PAYLOAD_28 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_6_TX_PDU_PAYLOAD_29_Pos 24                                    /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_6: TX_PDU_PAYLOAD_29 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_6_TX_PDU_PAYLOAD_29_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_6_TX_PDU_PAYLOAD_29_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_6: TX_PDU_PAYLOAD_29 Mask */

/* ----------------------  TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_7  --------------------- */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_7_TX_PDU_PAYLOAD_30_Pos 0                                     /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_7: TX_PDU_PAYLOAD_30 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_7_TX_PDU_PAYLOAD_30_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_7_TX_PDU_PAYLOAD_30_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_7: TX_PDU_PAYLOAD_30 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_7_TX_PDU_PAYLOAD_31_Pos 8                                     /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_7: TX_PDU_PAYLOAD_31 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_7_TX_PDU_PAYLOAD_31_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_7_TX_PDU_PAYLOAD_31_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_7: TX_PDU_PAYLOAD_31 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_7_TX_PDU_PAYLOAD_32_Pos 16                                    /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_7: TX_PDU_PAYLOAD_32 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_7_TX_PDU_PAYLOAD_32_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_7_TX_PDU_PAYLOAD_32_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_7: TX_PDU_PAYLOAD_32 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_7_TX_PDU_PAYLOAD_33_Pos 24                                    /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_7: TX_PDU_PAYLOAD_33 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_7_TX_PDU_PAYLOAD_33_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_7_TX_PDU_PAYLOAD_33_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_7: TX_PDU_PAYLOAD_33 Mask */

/* ----------------------  TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_8  --------------------- */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_8_TX_PDU_PAYLOAD_34_Pos 0                                     /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_8: TX_PDU_PAYLOAD_34 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_8_TX_PDU_PAYLOAD_34_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_8_TX_PDU_PAYLOAD_34_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_8: TX_PDU_PAYLOAD_34 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_8_TX_PDU_PAYLOAD_35_Pos 8                                     /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_8: TX_PDU_PAYLOAD_35 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_8_TX_PDU_PAYLOAD_35_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_8_TX_PDU_PAYLOAD_35_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_8: TX_PDU_PAYLOAD_35 Mask */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_8_TX_PDU_PAYLOAD_36_Pos 16                                    /*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_8: TX_PDU_PAYLOAD_36 Position */
#define TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_8_TX_PDU_PAYLOAD_36_Msk (0x000000ffUL << TX_PDU_BUF_REG_TX_PDU_PAYLOAD_1_8_TX_PDU_PAYLOAD_36_Pos)/*!< TX_PDU_BUF_REG TX_PDU_PAYLOAD_1_8: TX_PDU_PAYLOAD_36 Mask */


/* ================================================================================ */
/* ================        struct 'CSR_PMU' Position & Mask        ================ */
/* ================================================================================ */


/* ----------------------------  CSR_PMU_PMU_WAKE_CNT  ---------------------------- */
#define CSR_PMU_PMU_WAKE_CNT_WAKE_CNT_Pos     0                                                       /*!< CSR_PMU PMU_WAKE_CNT: WAKE_CNT Position */
#define CSR_PMU_PMU_WAKE_CNT_WAKE_CNT_Msk     (0x00ffffffUL << CSR_PMU_PMU_WAKE_CNT_WAKE_CNT_Pos)     /*!< CSR_PMU PMU_WAKE_CNT: WAKE_CNT Mask     */

/* ---------------------------  CSR_PMU_PMU_WAKE_SCALE  --------------------------- */
#define CSR_PMU_PMU_WAKE_SCALE_WAKE_CNT_SCALER_Pos 0                                                  /*!< CSR_PMU PMU_WAKE_SCALE: WAKE_CNT_SCALER Position */
#define CSR_PMU_PMU_WAKE_SCALE_WAKE_CNT_SCALER_Msk (0xffffffffUL << CSR_PMU_PMU_WAKE_SCALE_WAKE_CNT_SCALER_Pos)/*!< CSR_PMU PMU_WAKE_SCALE: WAKE_CNT_SCALER Mask */

/* ------------------------------  CSR_PMU_PMU_SLEEP  ----------------------------- */
#define CSR_PMU_PMU_SLEEP_PMU_ENTER_SLEEP_MODE_Pos 0                                                  /*!< CSR_PMU PMU_SLEEP: PMU_ENTER_SLEEP_MODE Position */
#define CSR_PMU_PMU_SLEEP_PMU_ENTER_SLEEP_MODE_Msk (0x01UL << CSR_PMU_PMU_SLEEP_PMU_ENTER_SLEEP_MODE_Pos)/*!< CSR_PMU PMU_SLEEP: PMU_ENTER_SLEEP_MODE Mask */

/* -------------------------------  CSR_PMU_PMU_HIB  ------------------------------ */
#define CSR_PMU_PMU_HIB_PMU_ENTER_HIBER_MODE_Pos 0                                                    /*!< CSR_PMU PMU_HIB: PMU_ENTER_HIBER_MODE Position */
#define CSR_PMU_PMU_HIB_PMU_ENTER_HIBER_MODE_Msk (0x01UL << CSR_PMU_PMU_HIB_PMU_ENTER_HIBER_MODE_Pos) /*!< CSR_PMU PMU_HIB: PMU_ENTER_HIBER_MODE Mask */

/* -----------------------------  CSR_PMU_PMU_DORMANT  ---------------------------- */
#define CSR_PMU_PMU_DORMANT_PMU_ENTER_DORMANT_MODE_Pos 0                                              /*!< CSR_PMU PMU_DORMANT: PMU_ENTER_DORMANT_MODE Position */
#define CSR_PMU_PMU_DORMANT_PMU_ENTER_DORMANT_MODE_Msk (0x01UL << CSR_PMU_PMU_DORMANT_PMU_ENTER_DORMANT_MODE_Pos)/*!< CSR_PMU PMU_DORMANT: PMU_ENTER_DORMANT_MODE Mask */

/* ---------------------------  CSR_PMU_PMU_MCU_STANDBY  -------------------------- */
#define CSR_PMU_PMU_MCU_STANDBY_PMU_ENTER_MCU_STANDBY_MODE_Pos 0                                      /*!< CSR_PMU PMU_MCU_STANDBY: PMU_ENTER_MCU_STANDBY_MODE Position */
#define CSR_PMU_PMU_MCU_STANDBY_PMU_ENTER_MCU_STANDBY_MODE_Msk (0x01UL << CSR_PMU_PMU_MCU_STANDBY_PMU_ENTER_MCU_STANDBY_MODE_Pos)/*!< CSR_PMU PMU_MCU_STANDBY: PMU_ENTER_MCU_STANDBY_MODE Mask */

/* ------------------------------  CSR_PMU_PMU_SET_0  ----------------------------- */
#define CSR_PMU_PMU_SET_0_PMU_TIME_WAKE_EN_Pos 0                                                      /*!< CSR_PMU PMU_SET_0: PMU_TIME_WAKE_EN Position */
#define CSR_PMU_PMU_SET_0_PMU_TIME_WAKE_EN_Msk (0x01UL << CSR_PMU_PMU_SET_0_PMU_TIME_WAKE_EN_Pos)     /*!< CSR_PMU PMU_SET_0: PMU_TIME_WAKE_EN Mask */

/* ------------------------------  CSR_PMU_PMU_SET_1  ----------------------------- */
#define CSR_PMU_PMU_SET_1_LDO5_EN_CYC_Pos     8                                                       /*!< CSR_PMU PMU_SET_1: LDO5_EN_CYC Position */
#define CSR_PMU_PMU_SET_1_LDO5_EN_CYC_Msk     (0x1fUL << CSR_PMU_PMU_SET_1_LDO5_EN_CYC_Pos)           /*!< CSR_PMU PMU_SET_1: LDO5_EN_CYC Mask     */

/* ------------------------------  CSR_PMU_PMU_IRQ12  ----------------------------- */
#define CSR_PMU_PMU_IRQ12_IRQ12_INT_Pos       0                                                       /*!< CSR_PMU PMU_IRQ12: IRQ12_INT Position   */
#define CSR_PMU_PMU_IRQ12_IRQ12_INT_Msk       (0x01UL << CSR_PMU_PMU_IRQ12_IRQ12_INT_Pos)             /*!< CSR_PMU PMU_IRQ12: IRQ12_INT Mask       */

/* ------------------------------  CSR_PMU_PMU_IRQ33  ----------------------------- */
#define CSR_PMU_PMU_IRQ33_IRQ33_INT_Pos       0                                                       /*!< CSR_PMU PMU_IRQ33: IRQ33_INT Position   */
#define CSR_PMU_PMU_IRQ33_IRQ33_INT_Msk       (0x01UL << CSR_PMU_PMU_IRQ33_IRQ33_INT_Pos)             /*!< CSR_PMU PMU_IRQ33: IRQ33_INT Mask       */

/* --------------------------  CSR_PMU_PMU_REG_HARDWIRE  -------------------------- */
#define CSR_PMU_PMU_REG_HARDWIRE_PMU_MANUAL_EN_Pos 0                                                  /*!< CSR_PMU PMU_REG_HARDWIRE: PMU_MANUAL_EN Position */
#define CSR_PMU_PMU_REG_HARDWIRE_PMU_MANUAL_EN_Msk (0x01UL << CSR_PMU_PMU_REG_HARDWIRE_PMU_MANUAL_EN_Pos)/*!< CSR_PMU PMU_REG_HARDWIRE: PMU_MANUAL_EN Mask */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_SX_XTAL_FREQ_Pos 1                                                /*!< CSR_PMU PMU_REG_HARDWIRE: RG_SX_XTAL_FREQ Position */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_SX_XTAL_FREQ_Msk (0x07UL << CSR_PMU_PMU_REG_HARDWIRE_RG_SX_XTAL_FREQ_Pos)/*!< CSR_PMU PMU_REG_HARDWIRE: RG_SX_XTAL_FREQ Mask */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_EN_DLDO_Pos 6                                                     /*!< CSR_PMU PMU_REG_HARDWIRE: RG_EN_DLDO Position */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_EN_DLDO_Msk (0x01UL << CSR_PMU_PMU_REG_HARDWIRE_RG_EN_DLDO_Pos)   /*!< CSR_PMU PMU_REG_HARDWIRE: RG_EN_DLDO Mask */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_EN_LDO5_Pos 7                                                     /*!< CSR_PMU PMU_REG_HARDWIRE: RG_EN_LDO5 Position */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_EN_LDO5_Msk (0x01UL << CSR_PMU_PMU_REG_HARDWIRE_RG_EN_LDO5_Pos)   /*!< CSR_PMU PMU_REG_HARDWIRE: RG_EN_LDO5 Mask */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_EN_DSW1_Pos 8                                                     /*!< CSR_PMU PMU_REG_HARDWIRE: RG_EN_DSW1 Position */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_EN_DSW1_Msk (0x01UL << CSR_PMU_PMU_REG_HARDWIRE_RG_EN_DSW1_Pos)   /*!< CSR_PMU PMU_REG_HARDWIRE: RG_EN_DSW1 Mask */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_EN_DSW2_Pos 9                                                     /*!< CSR_PMU PMU_REG_HARDWIRE: RG_EN_DSW2 Position */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_EN_DSW2_Msk (0x01UL << CSR_PMU_PMU_REG_HARDWIRE_RG_EN_DSW2_Pos)   /*!< CSR_PMU PMU_REG_HARDWIRE: RG_EN_DSW2 Mask */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_EN_DSW3_Pos 10                                                    /*!< CSR_PMU PMU_REG_HARDWIRE: RG_EN_DSW3 Position */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_EN_DSW3_Msk (0x01UL << CSR_PMU_PMU_REG_HARDWIRE_RG_EN_DSW3_Pos)   /*!< CSR_PMU PMU_REG_HARDWIRE: RG_EN_DSW3 Mask */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_EN_DSW4_Pos 11                                                    /*!< CSR_PMU PMU_REG_HARDWIRE: RG_EN_DSW4 Position */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_EN_DSW4_Msk (0x01UL << CSR_PMU_PMU_REG_HARDWIRE_RG_EN_DSW4_Pos)   /*!< CSR_PMU PMU_REG_HARDWIRE: RG_EN_DSW4 Mask */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_EN_IVSRC_DIG_Pos 12                                               /*!< CSR_PMU PMU_REG_HARDWIRE: RG_EN_IVSRC_DIG Position */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_EN_IVSRC_DIG_Msk (0x01UL << CSR_PMU_PMU_REG_HARDWIRE_RG_EN_IVSRC_DIG_Pos)/*!< CSR_PMU PMU_REG_HARDWIRE: RG_EN_IVSRC_DIG Mask */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_EN_SX_RC32K_Pos 17                                                /*!< CSR_PMU PMU_REG_HARDWIRE: RG_EN_SX_RC32K Position */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_EN_SX_RC32K_Msk (0x01UL << CSR_PMU_PMU_REG_HARDWIRE_RG_EN_SX_RC32K_Pos)/*!< CSR_PMU PMU_REG_HARDWIRE: RG_EN_SX_RC32K Mask */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_EN_SX_XOSC_Pos 18                                                 /*!< CSR_PMU PMU_REG_HARDWIRE: RG_EN_SX_XOSC Position */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_EN_SX_XOSC_Msk (0x01UL << CSR_PMU_PMU_REG_HARDWIRE_RG_EN_SX_XOSC_Pos)/*!< CSR_PMU PMU_REG_HARDWIRE: RG_EN_SX_XOSC Mask */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_SX_FREF_DOUB_Pos 21                                               /*!< CSR_PMU PMU_REG_HARDWIRE: RG_SX_FREF_DOUB Position */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_SX_FREF_DOUB_Msk (0x01UL << CSR_PMU_PMU_REG_HARDWIRE_RG_SX_FREF_DOUB_Pos)/*!< CSR_PMU PMU_REG_HARDWIRE: RG_SX_FREF_DOUB Mask */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_EN_FDB_16M_Pos 27                                                 /*!< CSR_PMU PMU_REG_HARDWIRE: RG_EN_FDB_16M Position */
#define CSR_PMU_PMU_REG_HARDWIRE_RG_EN_FDB_16M_Msk (0x01UL << CSR_PMU_PMU_REG_HARDWIRE_RG_EN_FDB_16M_Pos)/*!< CSR_PMU PMU_REG_HARDWIRE: RG_EN_FDB_16M Mask */

/* ------------------------  CSR_PMU_REG_PMU_XTAL_SETTINGS  ----------------------- */
#define CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_EN_IO01_AIO_Pos 0                                            /*!< CSR_PMU REG_PMU_XTAL_SETTINGS: RG_EN_IO01_AIO Position */
#define CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_EN_IO01_AIO_Msk (0x03UL << CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_EN_IO01_AIO_Pos)/*!< CSR_PMU REG_PMU_XTAL_SETTINGS: RG_EN_IO01_AIO Mask */
#define CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_EN_IO02_AIO_Pos 2                                            /*!< CSR_PMU REG_PMU_XTAL_SETTINGS: RG_EN_IO02_AIO Position */
#define CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_EN_IO02_AIO_Msk (0x01UL << CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_EN_IO02_AIO_Pos)/*!< CSR_PMU REG_PMU_XTAL_SETTINGS: RG_EN_IO02_AIO Mask */
#define CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_EN_IO03_AIO_Pos 3                                            /*!< CSR_PMU REG_PMU_XTAL_SETTINGS: RG_EN_IO03_AIO Position */
#define CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_EN_IO03_AIO_Msk (0x01UL << CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_EN_IO03_AIO_Pos)/*!< CSR_PMU REG_PMU_XTAL_SETTINGS: RG_EN_IO03_AIO Mask */
#define CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_EN_IO04_AIO_Pos 4                                            /*!< CSR_PMU REG_PMU_XTAL_SETTINGS: RG_EN_IO04_AIO Position */
#define CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_EN_IO04_AIO_Msk (0x01UL << CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_EN_IO04_AIO_Pos)/*!< CSR_PMU REG_PMU_XTAL_SETTINGS: RG_EN_IO04_AIO Mask */
#define CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_DLDO_LEVEL_Pos 8                                             /*!< CSR_PMU REG_PMU_XTAL_SETTINGS: RG_DLDO_LEVEL Position */
#define CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_DLDO_LEVEL_Msk (0x03UL << CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_DLDO_LEVEL_Pos)/*!< CSR_PMU REG_PMU_XTAL_SETTINGS: RG_DLDO_LEVEL Mask */
#define CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_RC32K_LEVEL_Pos 10                                           /*!< CSR_PMU REG_PMU_XTAL_SETTINGS: RG_RC32K_LEVEL Position */
#define CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_RC32K_LEVEL_Msk (0x03UL << CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_RC32K_LEVEL_Pos)/*!< CSR_PMU REG_PMU_XTAL_SETTINGS: RG_RC32K_LEVEL Mask */
#define CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_DSF_LEVEL_Pos 12                                             /*!< CSR_PMU REG_PMU_XTAL_SETTINGS: RG_DSF_LEVEL Position */
#define CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_DSF_LEVEL_Msk (0x07UL << CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_DSF_LEVEL_Pos)/*!< CSR_PMU REG_PMU_XTAL_SETTINGS: RG_DSF_LEVEL Mask */
#define CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_DSF_HIDRV_Pos 15                                             /*!< CSR_PMU REG_PMU_XTAL_SETTINGS: RG_DSF_HIDRV Position */
#define CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_DSF_HIDRV_Msk (0x01UL << CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_DSF_HIDRV_Pos)/*!< CSR_PMU REG_PMU_XTAL_SETTINGS: RG_DSF_HIDRV Mask */
#define CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_LDO5X_LEVEL_Pos 16                                           /*!< CSR_PMU REG_PMU_XTAL_SETTINGS: RG_LDO5X_LEVEL Position */
#define CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_LDO5X_LEVEL_Msk (0x07UL << CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_LDO5X_LEVEL_Pos)/*!< CSR_PMU REG_PMU_XTAL_SETTINGS: RG_LDO5X_LEVEL Mask */
#define CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_SX_XOSC_GM_SEL_Pos 24                                        /*!< CSR_PMU REG_PMU_XTAL_SETTINGS: RG_SX_XOSC_GM_SEL Position */
#define CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_SX_XOSC_GM_SEL_Msk (0x1fUL << CSR_PMU_REG_PMU_XTAL_SETTINGS_RG_SX_XOSC_GM_SEL_Pos)/*!< CSR_PMU REG_PMU_XTAL_SETTINGS: RG_SX_XOSC_GM_SEL Mask */

/* --------------------------  CSR_PMU_REG_FDB_SETTINGS  -------------------------- */
#define CSR_PMU_REG_FDB_SETTINGS_FDB_MANUAL_Pos 0                                                     /*!< CSR_PMU REG_FDB_SETTINGS: FDB_MANUAL Position */
#define CSR_PMU_REG_FDB_SETTINGS_FDB_MANUAL_Msk (0x01UL << CSR_PMU_REG_FDB_SETTINGS_FDB_MANUAL_Pos)   /*!< CSR_PMU REG_FDB_SETTINGS: FDB_MANUAL Mask */
#define CSR_PMU_REG_FDB_SETTINGS_RG_EN_FDB_ACC_16M_Pos 1                                              /*!< CSR_PMU REG_FDB_SETTINGS: RG_EN_FDB_ACC_16M Position */
#define CSR_PMU_REG_FDB_SETTINGS_RG_EN_FDB_ACC_16M_Msk (0x01UL << CSR_PMU_REG_FDB_SETTINGS_RG_EN_FDB_ACC_16M_Pos)/*!< CSR_PMU REG_FDB_SETTINGS: RG_EN_FDB_ACC_16M Mask */
#define CSR_PMU_REG_FDB_SETTINGS_RG_SX_FDB_EDGE_SEL_Pos 3                                             /*!< CSR_PMU REG_FDB_SETTINGS: RG_SX_FDB_EDGE_SEL Position */
#define CSR_PMU_REG_FDB_SETTINGS_RG_SX_FDB_EDGE_SEL_Msk (0x01UL << CSR_PMU_REG_FDB_SETTINGS_RG_SX_FDB_EDGE_SEL_Pos)/*!< CSR_PMU REG_FDB_SETTINGS: RG_SX_FDB_EDGE_SEL Mask */
#define CSR_PMU_REG_FDB_SETTINGS_RG_SX_FDB_DUTY_LTH_Pos 14                                            /*!< CSR_PMU REG_FDB_SETTINGS: RG_SX_FDB_DUTY_LTH Position */
#define CSR_PMU_REG_FDB_SETTINGS_RG_SX_FDB_DUTY_LTH_Msk (0x03UL << CSR_PMU_REG_FDB_SETTINGS_RG_SX_FDB_DUTY_LTH_Pos)/*!< CSR_PMU REG_FDB_SETTINGS: RG_SX_FDB_DUTY_LTH Mask */
#define CSR_PMU_REG_FDB_SETTINGS_RG_EN_FDB_ACC_16M_MUAL_Pos 20                                        /*!< CSR_PMU REG_FDB_SETTINGS: RG_EN_FDB_ACC_16M_MUAL Position */
#define CSR_PMU_REG_FDB_SETTINGS_RG_EN_FDB_ACC_16M_MUAL_Msk (0x01UL << CSR_PMU_REG_FDB_SETTINGS_RG_EN_FDB_ACC_16M_MUAL_Pos)/*!< CSR_PMU REG_FDB_SETTINGS: RG_EN_FDB_ACC_16M_MUAL Mask */

/* ------------------------------  CSR_PMU_REG_DPLL  ------------------------------ */
#define CSR_PMU_REG_DPLL_RG_EN_DPL_MAN_Pos    0                                                       /*!< CSR_PMU REG_DPLL: RG_EN_DPL_MAN Position */
#define CSR_PMU_REG_DPLL_RG_EN_DPL_MAN_Msk    (0x01UL << CSR_PMU_REG_DPLL_RG_EN_DPL_MAN_Pos)          /*!< CSR_PMU REG_DPLL: RG_EN_DPL_MAN Mask    */
#define CSR_PMU_REG_DPLL_RG_EN_DPL_Pos        1                                                       /*!< CSR_PMU REG_DPLL: RG_EN_DPL Position    */
#define CSR_PMU_REG_DPLL_RG_EN_DPL_Msk        (0x01UL << CSR_PMU_REG_DPLL_RG_EN_DPL_Pos)              /*!< CSR_PMU REG_DPLL: RG_EN_DPL Mask        */
#define CSR_PMU_REG_DPLL_RG_DPL_MANNUAL_Pos   2                                                       /*!< CSR_PMU REG_DPLL: RG_DPL_MANNUAL Position */
#define CSR_PMU_REG_DPLL_RG_DPL_MANNUAL_Msk   (0x01UL << CSR_PMU_REG_DPLL_RG_DPL_MANNUAL_Pos)         /*!< CSR_PMU REG_DPLL: RG_DPL_MANNUAL Mask   */
#define CSR_PMU_REG_DPLL_RG_DPL_MON_EN_Pos    3                                                       /*!< CSR_PMU REG_DPLL: RG_DPL_MON_EN Position */
#define CSR_PMU_REG_DPLL_RG_DPL_MON_EN_Msk    (0x01UL << CSR_PMU_REG_DPLL_RG_DPL_MON_EN_Pos)          /*!< CSR_PMU REG_DPLL: RG_DPL_MON_EN Mask    */
#define CSR_PMU_REG_DPLL_RG_DPL_2P4G_EN_Pos   4                                                       /*!< CSR_PMU REG_DPLL: RG_DPL_2P4G_EN Position */
#define CSR_PMU_REG_DPLL_RG_DPL_2P4G_EN_Msk   (0x01UL << CSR_PMU_REG_DPLL_RG_DPL_2P4G_EN_Pos)         /*!< CSR_PMU REG_DPLL: RG_DPL_2P4G_EN Mask   */
#define CSR_PMU_REG_DPLL_RG_DPL_VCO_IBOOST_Pos 5                                                      /*!< CSR_PMU REG_DPLL: RG_DPL_VCO_IBOOST Position */
#define CSR_PMU_REG_DPLL_RG_DPL_VCO_IBOOST_Msk (0x01UL << CSR_PMU_REG_DPLL_RG_DPL_VCO_IBOOST_Pos)     /*!< CSR_PMU REG_DPLL: RG_DPL_VCO_IBOOST Mask */
#define CSR_PMU_REG_DPLL_RG_DPL_MON_MUX_Pos   6                                                       /*!< CSR_PMU REG_DPLL: RG_DPL_MON_MUX Position */
#define CSR_PMU_REG_DPLL_RG_DPL_MON_MUX_Msk   (0x01UL << CSR_PMU_REG_DPLL_RG_DPL_MON_MUX_Pos)         /*!< CSR_PMU REG_DPLL: RG_DPL_MON_MUX Mask   */
#define CSR_PMU_REG_DPLL_RG_DPL_ICP_Pos       7                                                       /*!< CSR_PMU REG_DPLL: RG_DPL_ICP Position   */
#define CSR_PMU_REG_DPLL_RG_DPL_ICP_Msk       (0x07UL << CSR_PMU_REG_DPLL_RG_DPL_ICP_Pos)             /*!< CSR_PMU REG_DPLL: RG_DPL_ICP Mask       */
#define CSR_PMU_REG_DPLL_RG_DPL_FBDIV_RESET_Pos 10                                                    /*!< CSR_PMU REG_DPLL: RG_DPL_FBDIV_RESET Position */
#define CSR_PMU_REG_DPLL_RG_DPL_FBDIV_RESET_Msk (0x01UL << CSR_PMU_REG_DPLL_RG_DPL_FBDIV_RESET_Pos)   /*!< CSR_PMU REG_DPLL: RG_DPL_FBDIV_RESET Mask */
#define CSR_PMU_REG_DPLL_RG_DPL_REFDIVBY2_Pos 11                                                      /*!< CSR_PMU REG_DPLL: RG_DPL_REFDIVBY2 Position */
#define CSR_PMU_REG_DPLL_RG_DPL_REFDIVBY2_Msk (0x01UL << CSR_PMU_REG_DPLL_RG_DPL_REFDIVBY2_Pos)       /*!< CSR_PMU REG_DPLL: RG_DPL_REFDIVBY2 Mask */
#define CSR_PMU_REG_DPLL_RG_DPL_FBDIV_Pos     12                                                      /*!< CSR_PMU REG_DPLL: RG_DPL_FBDIV Position */
#define CSR_PMU_REG_DPLL_RG_DPL_FBDIV_Msk     (0x000000ffUL << CSR_PMU_REG_DPLL_RG_DPL_FBDIV_Pos)     /*!< CSR_PMU REG_DPLL: RG_DPL_FBDIV Mask     */
#define CSR_PMU_REG_DPLL_RG_DPL_OUTDIV_Pos    20                                                      /*!< CSR_PMU REG_DPLL: RG_DPL_OUTDIV Position */
#define CSR_PMU_REG_DPLL_RG_DPL_OUTDIV_Msk    (0x3fUL << CSR_PMU_REG_DPLL_RG_DPL_OUTDIV_Pos)          /*!< CSR_PMU REG_DPLL: RG_DPL_OUTDIV Mask    */
#define CSR_PMU_REG_DPLL_RG_DPL_VCO_SUB_Pos   26                                                      /*!< CSR_PMU REG_DPLL: RG_DPL_VCO_SUB Position */
#define CSR_PMU_REG_DPLL_RG_DPL_VCO_SUB_Msk   (0x01UL << CSR_PMU_REG_DPLL_RG_DPL_VCO_SUB_Pos)         /*!< CSR_PMU REG_DPLL: RG_DPL_VCO_SUB Mask   */
#define CSR_PMU_REG_DPLL_RG_EN_DPL_CLK16M_DIG_Pos 27                                                  /*!< CSR_PMU REG_DPLL: RG_EN_DPL_CLK16M_DIG Position */
#define CSR_PMU_REG_DPLL_RG_EN_DPL_CLK16M_DIG_Msk (0x01UL << CSR_PMU_REG_DPLL_RG_EN_DPL_CLK16M_DIG_Pos)/*!< CSR_PMU REG_DPLL: RG_EN_DPL_CLK16M_DIG Mask */
#define CSR_PMU_REG_DPLL_RG_EN_DPL_CLK32M_DIG_Pos 28                                                  /*!< CSR_PMU REG_DPLL: RG_EN_DPL_CLK32M_DIG Position */
#define CSR_PMU_REG_DPLL_RG_EN_DPL_CLK32M_DIG_Msk (0x01UL << CSR_PMU_REG_DPLL_RG_EN_DPL_CLK32M_DIG_Pos)/*!< CSR_PMU REG_DPLL: RG_EN_DPL_CLK32M_DIG Mask */
#define CSR_PMU_REG_DPLL_RG_EN_DPL_CLK64M_DIG_Pos 29                                                  /*!< CSR_PMU REG_DPLL: RG_EN_DPL_CLK64M_DIG Position */
#define CSR_PMU_REG_DPLL_RG_EN_DPL_CLK64M_DIG_Msk (0x01UL << CSR_PMU_REG_DPLL_RG_EN_DPL_CLK64M_DIG_Pos)/*!< CSR_PMU REG_DPLL: RG_EN_DPL_CLK64M_DIG Mask */
#define CSR_PMU_REG_DPLL_RG_DPL_CAPDIV_Pos    30                                                      /*!< CSR_PMU REG_DPLL: RG_DPL_CAPDIV Position */
#define CSR_PMU_REG_DPLL_RG_DPL_CAPDIV_Msk    (0x03UL << CSR_PMU_REG_DPLL_RG_DPL_CAPDIV_Pos)          /*!< CSR_PMU REG_DPLL: RG_DPL_CAPDIV Mask    */

/* ------------------------------  CSR_PMU_REG_RC32K  ----------------------------- */
#define CSR_PMU_REG_RC32K_RG_SX_RC32K_SW1_Pos 0                                                       /*!< CSR_PMU REG_RC32K: RG_SX_RC32K_SW1 Position */
#define CSR_PMU_REG_RC32K_RG_SX_RC32K_SW1_Msk (0x000007ffUL << CSR_PMU_REG_RC32K_RG_SX_RC32K_SW1_Pos) /*!< CSR_PMU REG_RC32K: RG_SX_RC32K_SW1 Mask */
#define CSR_PMU_REG_RC32K_RG_SX_RC32K_SW2_Pos 16                                                      /*!< CSR_PMU REG_RC32K: RG_SX_RC32K_SW2 Position */
#define CSR_PMU_REG_RC32K_RG_SX_RC32K_SW2_Msk (0x000003ffUL << CSR_PMU_REG_RC32K_RG_SX_RC32K_SW2_Pos) /*!< CSR_PMU REG_RC32K: RG_SX_RC32K_SW2 Mask */
#define CSR_PMU_REG_RC32K_RG_SX_RC32K_LOIREF_Pos 31                                                   /*!< CSR_PMU REG_RC32K: RG_SX_RC32K_LOIREF Position */
#define CSR_PMU_REG_RC32K_RG_SX_RC32K_LOIREF_Msk (0x01UL << CSR_PMU_REG_RC32K_RG_SX_RC32K_LOIREF_Pos) /*!< CSR_PMU REG_RC32K: RG_SX_RC32K_LOIREF Mask */

/* -------------------------------  CSR_PMU_REG_XO  ------------------------------- */
#define CSR_PMU_REG_XO_RG_XO_CBANKI_Pos       0                                                       /*!< CSR_PMU REG_XO: RG_XO_CBANKI Position   */
#define CSR_PMU_REG_XO_RG_XO_CBANKI_Msk       (0x000000ffUL << CSR_PMU_REG_XO_RG_XO_CBANKI_Pos)       /*!< CSR_PMU REG_XO: RG_XO_CBANKI Mask       */
#define CSR_PMU_REG_XO_RG_XO_CBANKO_Pos       8                                                       /*!< CSR_PMU REG_XO: RG_XO_CBANKO Position   */
#define CSR_PMU_REG_XO_RG_XO_CBANKO_Msk       (0x000000ffUL << CSR_PMU_REG_XO_RG_XO_CBANKO_Pos)       /*!< CSR_PMU REG_XO: RG_XO_CBANKO Mask       */
#define CSR_PMU_REG_XO_RG_XO_DIV_MAN_Pos      16                                                      /*!< CSR_PMU REG_XO: RG_XO_DIV_MAN Position  */
#define CSR_PMU_REG_XO_RG_XO_DIV_MAN_Msk      (0x01UL << CSR_PMU_REG_XO_RG_XO_DIV_MAN_Pos)            /*!< CSR_PMU REG_XO: RG_XO_DIV_MAN Mask      */
#define CSR_PMU_REG_XO_RG_XO_DIV_Pos          17                                                      /*!< CSR_PMU REG_XO: RG_XO_DIV Position      */
#define CSR_PMU_REG_XO_RG_XO_DIV_Msk          (0x1fUL << CSR_PMU_REG_XO_RG_XO_DIV_Pos)                /*!< CSR_PMU REG_XO: RG_XO_DIV Mask          */

/* ------------------------------  CSR_PMU_REG_RC32M  ----------------------------- */
#define CSR_PMU_REG_RC32M_RG_PMU_DUMY_Pos     16                                                      /*!< CSR_PMU REG_RC32M: RG_PMU_DUMY Position */
#define CSR_PMU_REG_RC32M_RG_PMU_DUMY_Msk     (0x0000ffffUL << CSR_PMU_REG_RC32M_RG_PMU_DUMY_Pos)     /*!< CSR_PMU REG_RC32M: RG_PMU_DUMY Mask     */

/* -----------------------------  CSR_PMU_SEL_32K_CLK  ---------------------------- */
#define CSR_PMU_SEL_32K_CLK_FORCE_32K_RC_CK_EN_Pos 0                                                  /*!< CSR_PMU SEL_32K_CLK: FORCE_32K_RC_CK_EN Position */
#define CSR_PMU_SEL_32K_CLK_FORCE_32K_RC_CK_EN_Msk (0x01UL << CSR_PMU_SEL_32K_CLK_FORCE_32K_RC_CK_EN_Pos)/*!< CSR_PMU SEL_32K_CLK: FORCE_32K_RC_CK_EN Mask */

/* -----------------------------  CSR_PMU_DPL_EN_SET  ----------------------------- */
#define CSR_PMU_DPL_EN_SET_DPL_EN_SET_Pos     0                                                       /*!< CSR_PMU DPL_EN_SET: DPL_EN_SET Position */
#define CSR_PMU_DPL_EN_SET_DPL_EN_SET_Msk     (0x01UL << CSR_PMU_DPL_EN_SET_DPL_EN_SET_Pos)           /*!< CSR_PMU DPL_EN_SET: DPL_EN_SET Mask     */

/* ------------------------------  CSR_PMU_RTC_CNT_0  ----------------------------- */
#define CSR_PMU_RTC_CNT_0_RTC_CNT_Pos         0                                                       /*!< CSR_PMU RTC_CNT_0: RTC_CNT Position     */
#define CSR_PMU_RTC_CNT_0_RTC_CNT_Msk         (0x00ffffffUL << CSR_PMU_RTC_CNT_0_RTC_CNT_Pos)         /*!< CSR_PMU RTC_CNT_0: RTC_CNT Mask         */
#define CSR_PMU_RTC_CNT_0_RTC_CNT_OVRFLW_Pos  24                                                      /*!< CSR_PMU RTC_CNT_0: RTC_CNT_OVRFLW Position */
#define CSR_PMU_RTC_CNT_0_RTC_CNT_OVRFLW_Msk  (0x01UL << CSR_PMU_RTC_CNT_0_RTC_CNT_OVRFLW_Pos)        /*!< CSR_PMU RTC_CNT_0: RTC_CNT_OVRFLW Mask  */

/* ------------------------------  CSR_PMU_RTC_CNT_1  ----------------------------- */
#define CSR_PMU_RTC_CNT_1_RTC_CNT_PRESCALER_Pos 0                                                     /*!< CSR_PMU RTC_CNT_1: RTC_CNT_PRESCALER Position */
#define CSR_PMU_RTC_CNT_1_RTC_CNT_PRESCALER_Msk (0x00000fffUL << CSR_PMU_RTC_CNT_1_RTC_CNT_PRESCALER_Pos)/*!< CSR_PMU RTC_CNT_1: RTC_CNT_PRESCALER Mask */

/* ------------------------------  CSR_PMU_RTC_CNT_2  ----------------------------- */
#define CSR_PMU_RTC_CNT_2_RTC_CNT_START_Pos   0                                                       /*!< CSR_PMU RTC_CNT_2: RTC_CNT_START Position */
#define CSR_PMU_RTC_CNT_2_RTC_CNT_START_Msk   (0x01UL << CSR_PMU_RTC_CNT_2_RTC_CNT_START_Pos)         /*!< CSR_PMU RTC_CNT_2: RTC_CNT_START Mask   */
#define CSR_PMU_RTC_CNT_2_RTC_OVRFLW_SET_Pos  1                                                       /*!< CSR_PMU RTC_CNT_2: RTC_OVRFLW_SET Position */
#define CSR_PMU_RTC_CNT_2_RTC_OVRFLW_SET_Msk  (0x01UL << CSR_PMU_RTC_CNT_2_RTC_OVRFLW_SET_Pos)        /*!< CSR_PMU RTC_CNT_2: RTC_OVRFLW_SET Mask  */

/* ------------------------------  CSR_PMU_RTC_CNT_3  ----------------------------- */
#define CSR_PMU_RTC_CNT_3_RTC_CNT_CLR_Pos     0                                                       /*!< CSR_PMU RTC_CNT_3: RTC_CNT_CLR Position */
#define CSR_PMU_RTC_CNT_3_RTC_CNT_CLR_Msk     (0x01UL << CSR_PMU_RTC_CNT_3_RTC_CNT_CLR_Pos)           /*!< CSR_PMU RTC_CNT_3: RTC_CNT_CLR Mask     */

/* ------------------------------  CSR_PMU_RTC_CNT_4  ----------------------------- */
#define CSR_PMU_RTC_CNT_4_RTC_OVRFLW_CLR_Pos  0                                                       /*!< CSR_PMU RTC_CNT_4: RTC_OVRFLW_CLR Position */
#define CSR_PMU_RTC_CNT_4_RTC_OVRFLW_CLR_Msk  (0x01UL << CSR_PMU_RTC_CNT_4_RTC_OVRFLW_CLR_Pos)        /*!< CSR_PMU RTC_CNT_4: RTC_OVRFLW_CLR Mask  */

/* ------------------------------  CSR_PMU_PMU_INFO  ------------------------------ */
#define CSR_PMU_PMU_INFO_PMU_ST_PRE_Pos       0                                                       /*!< CSR_PMU PMU_INFO: PMU_ST_PRE Position   */
#define CSR_PMU_PMU_INFO_PMU_ST_PRE_Msk       (0x07UL << CSR_PMU_PMU_INFO_PMU_ST_PRE_Pos)             /*!< CSR_PMU PMU_INFO: PMU_ST_PRE Mask       */

/* ----------------------------  CSR_PMU_MANUAL_DSW_1  ---------------------------- */
#define CSR_PMU_MANUAL_DSW_1_DA_EN_DSW1_MANUAL_EN_Pos 0                                               /*!< CSR_PMU MANUAL_DSW_1: DA_EN_DSW1_MANUAL_EN Position */
#define CSR_PMU_MANUAL_DSW_1_DA_EN_DSW1_MANUAL_EN_Msk (0x01UL << CSR_PMU_MANUAL_DSW_1_DA_EN_DSW1_MANUAL_EN_Pos)/*!< CSR_PMU MANUAL_DSW_1: DA_EN_DSW1_MANUAL_EN Mask */
#define CSR_PMU_MANUAL_DSW_1_RG_DA_EN_DSW1_Pos 4                                                      /*!< CSR_PMU MANUAL_DSW_1: RG_DA_EN_DSW1 Position */
#define CSR_PMU_MANUAL_DSW_1_RG_DA_EN_DSW1_Msk (0x01UL << CSR_PMU_MANUAL_DSW_1_RG_DA_EN_DSW1_Pos)     /*!< CSR_PMU MANUAL_DSW_1: RG_DA_EN_DSW1 Mask */

/* -----------------------------  CSR_PMU_MANUAL_DSW2  ---------------------------- */
#define CSR_PMU_MANUAL_DSW2_DA_EN_DSW2_MANUAL_EN_Pos 0                                                /*!< CSR_PMU MANUAL_DSW2: DA_EN_DSW2_MANUAL_EN Position */
#define CSR_PMU_MANUAL_DSW2_DA_EN_DSW2_MANUAL_EN_Msk (0x01UL << CSR_PMU_MANUAL_DSW2_DA_EN_DSW2_MANUAL_EN_Pos)/*!< CSR_PMU MANUAL_DSW2: DA_EN_DSW2_MANUAL_EN Mask */
#define CSR_PMU_MANUAL_DSW2_RG_DA_EN_DSW2_Pos 4                                                       /*!< CSR_PMU MANUAL_DSW2: RG_DA_EN_DSW2 Position */
#define CSR_PMU_MANUAL_DSW2_RG_DA_EN_DSW2_Msk (0x01UL << CSR_PMU_MANUAL_DSW2_RG_DA_EN_DSW2_Pos)       /*!< CSR_PMU MANUAL_DSW2: RG_DA_EN_DSW2 Mask */

/* -----------------------------  CSR_PMU_MANUAL_DSW3  ---------------------------- */
#define CSR_PMU_MANUAL_DSW3_DA_EN_DSW3_MANUAL_EN_Pos 0                                                /*!< CSR_PMU MANUAL_DSW3: DA_EN_DSW3_MANUAL_EN Position */
#define CSR_PMU_MANUAL_DSW3_DA_EN_DSW3_MANUAL_EN_Msk (0x01UL << CSR_PMU_MANUAL_DSW3_DA_EN_DSW3_MANUAL_EN_Pos)/*!< CSR_PMU MANUAL_DSW3: DA_EN_DSW3_MANUAL_EN Mask */
#define CSR_PMU_MANUAL_DSW3_RG_DA_EN_DSW3_Pos 4                                                       /*!< CSR_PMU MANUAL_DSW3: RG_DA_EN_DSW3 Position */
#define CSR_PMU_MANUAL_DSW3_RG_DA_EN_DSW3_Msk (0x01UL << CSR_PMU_MANUAL_DSW3_RG_DA_EN_DSW3_Pos)       /*!< CSR_PMU MANUAL_DSW3: RG_DA_EN_DSW3 Mask */

/* -----------------------------  CSR_PMU_MANUAL_DSW4  ---------------------------- */
#define CSR_PMU_MANUAL_DSW4_DA_EN_DSW4_MANUAL_EN_Pos 0                                                /*!< CSR_PMU MANUAL_DSW4: DA_EN_DSW4_MANUAL_EN Position */
#define CSR_PMU_MANUAL_DSW4_DA_EN_DSW4_MANUAL_EN_Msk (0x01UL << CSR_PMU_MANUAL_DSW4_DA_EN_DSW4_MANUAL_EN_Pos)/*!< CSR_PMU MANUAL_DSW4: DA_EN_DSW4_MANUAL_EN Mask */
#define CSR_PMU_MANUAL_DSW4_RG_DA_EN_DSW4_Pos 4                                                       /*!< CSR_PMU MANUAL_DSW4: RG_DA_EN_DSW4 Position */
#define CSR_PMU_MANUAL_DSW4_RG_DA_EN_DSW4_Msk (0x01UL << CSR_PMU_MANUAL_DSW4_RG_DA_EN_DSW4_Pos)       /*!< CSR_PMU MANUAL_DSW4: RG_DA_EN_DSW4 Mask */

/* --------------------------  CSR_PMU_WAKE_RG_DA_SX_CLK  ------------------------- */
#define CSR_PMU_WAKE_RG_DA_SX_CLK_WAKE_POL_Pos 0                                                      /*!< CSR_PMU WAKE_RG_DA_SX_CLK: WAKE_POL Position */
#define CSR_PMU_WAKE_RG_DA_SX_CLK_WAKE_POL_Msk (0x01UL << CSR_PMU_WAKE_RG_DA_SX_CLK_WAKE_POL_Pos)     /*!< CSR_PMU WAKE_RG_DA_SX_CLK: WAKE_POL Mask */

/* -----------------------------  CSR_PMU_PMU_STATUS0  ---------------------------- */
#define CSR_PMU_PMU_STATUS0_DA_EN_DLDO_V12D_Pos 0                                                     /*!< CSR_PMU PMU_STATUS0: DA_EN_DLDO_V12D Position */
#define CSR_PMU_PMU_STATUS0_DA_EN_DLDO_V12D_Msk (0x01UL << CSR_PMU_PMU_STATUS0_DA_EN_DLDO_V12D_Pos)   /*!< CSR_PMU PMU_STATUS0: DA_EN_DLDO_V12D Mask */
#define CSR_PMU_PMU_STATUS0_DA_EN_DSW1_V12D_Pos 1                                                     /*!< CSR_PMU PMU_STATUS0: DA_EN_DSW1_V12D Position */
#define CSR_PMU_PMU_STATUS0_DA_EN_DSW1_V12D_Msk (0x01UL << CSR_PMU_PMU_STATUS0_DA_EN_DSW1_V12D_Pos)   /*!< CSR_PMU PMU_STATUS0: DA_EN_DSW1_V12D Mask */
#define CSR_PMU_PMU_STATUS0_DA_EN_DSW2_V12D_Pos 2                                                     /*!< CSR_PMU PMU_STATUS0: DA_EN_DSW2_V12D Position */
#define CSR_PMU_PMU_STATUS0_DA_EN_DSW2_V12D_Msk (0x01UL << CSR_PMU_PMU_STATUS0_DA_EN_DSW2_V12D_Pos)   /*!< CSR_PMU PMU_STATUS0: DA_EN_DSW2_V12D Mask */
#define CSR_PMU_PMU_STATUS0_DA_EN_DSW3_V12D_Pos 3                                                     /*!< CSR_PMU PMU_STATUS0: DA_EN_DSW3_V12D Position */
#define CSR_PMU_PMU_STATUS0_DA_EN_DSW3_V12D_Msk (0x01UL << CSR_PMU_PMU_STATUS0_DA_EN_DSW3_V12D_Pos)   /*!< CSR_PMU PMU_STATUS0: DA_EN_DSW3_V12D Mask */
#define CSR_PMU_PMU_STATUS0_DA_EN_DSW4_V12D_Pos 4                                                     /*!< CSR_PMU PMU_STATUS0: DA_EN_DSW4_V12D Position */
#define CSR_PMU_PMU_STATUS0_DA_EN_DSW4_V12D_Msk (0x01UL << CSR_PMU_PMU_STATUS0_DA_EN_DSW4_V12D_Pos)   /*!< CSR_PMU PMU_STATUS0: DA_EN_DSW4_V12D Mask */
#define CSR_PMU_PMU_STATUS0_DA_EN_FDB_16M_V12D_Pos 5                                                  /*!< CSR_PMU PMU_STATUS0: DA_EN_FDB_16M_V12D Position */
#define CSR_PMU_PMU_STATUS0_DA_EN_FDB_16M_V12D_Msk (0x01UL << CSR_PMU_PMU_STATUS0_DA_EN_FDB_16M_V12D_Pos)/*!< CSR_PMU PMU_STATUS0: DA_EN_FDB_16M_V12D Mask */
#define CSR_PMU_PMU_STATUS0_DA_EN_LDO5_V12D_Pos 6                                                     /*!< CSR_PMU PMU_STATUS0: DA_EN_LDO5_V12D Position */
#define CSR_PMU_PMU_STATUS0_DA_EN_LDO5_V12D_Msk (0x01UL << CSR_PMU_PMU_STATUS0_DA_EN_LDO5_V12D_Pos)   /*!< CSR_PMU PMU_STATUS0: DA_EN_LDO5_V12D Mask */
#define CSR_PMU_PMU_STATUS0_DA_EN_SX_XOSC_V12D_Pos 7                                                  /*!< CSR_PMU PMU_STATUS0: DA_EN_SX_XOSC_V12D Position */
#define CSR_PMU_PMU_STATUS0_DA_EN_SX_XOSC_V12D_Msk (0x01UL << CSR_PMU_PMU_STATUS0_DA_EN_SX_XOSC_V12D_Pos)/*!< CSR_PMU PMU_STATUS0: DA_EN_SX_XOSC_V12D Mask */
#define CSR_PMU_PMU_STATUS0_PMU_ST_Pos        8                                                       /*!< CSR_PMU PMU_STATUS0: PMU_ST Position    */
#define CSR_PMU_PMU_STATUS0_PMU_ST_Msk        (0x07UL << CSR_PMU_PMU_STATUS0_PMU_ST_Pos)              /*!< CSR_PMU PMU_STATUS0: PMU_ST Mask        */

/* -----------------------------  CSR_PMU_PMU_STATUS1  ---------------------------- */
#define CSR_PMU_PMU_STATUS1_HF_CLK_RDY_FLAG_Pos 0                                                     /*!< CSR_PMU PMU_STATUS1: HF_CLK_RDY_FLAG Position */
#define CSR_PMU_PMU_STATUS1_HF_CLK_RDY_FLAG_Msk (0x01UL << CSR_PMU_PMU_STATUS1_HF_CLK_RDY_FLAG_Pos)   /*!< CSR_PMU PMU_STATUS1: HF_CLK_RDY_FLAG Mask */

/* ---------------------------  CSR_PMU_SLEEP_WAKE_SRC  --------------------------- */
#define CSR_PMU_SLEEP_WAKE_SRC_SLEEP_WAKEUP_SRC_Pos 0                                                 /*!< CSR_PMU SLEEP_WAKE_SRC: SLEEP_WAKEUP_SRC Position */
#define CSR_PMU_SLEEP_WAKE_SRC_SLEEP_WAKEUP_SRC_Msk (0x03UL << CSR_PMU_SLEEP_WAKE_SRC_SLEEP_WAKEUP_SRC_Pos)/*!< CSR_PMU SLEEP_WAKE_SRC: SLEEP_WAKEUP_SRC Mask */

/* -------------------------  CSR_PMU_PMU_STATE_MANUAL_EN  ------------------------ */
#define CSR_PMU_PMU_STATE_MANUAL_EN_PMU_STATE_MANUAL_EN_Pos 0                                         /*!< CSR_PMU PMU_STATE_MANUAL_EN: PMU_STATE_MANUAL_EN Position */
#define CSR_PMU_PMU_STATE_MANUAL_EN_PMU_STATE_MANUAL_EN_Msk (0x01UL << CSR_PMU_PMU_STATE_MANUAL_EN_PMU_STATE_MANUAL_EN_Pos)/*!< CSR_PMU PMU_STATE_MANUAL_EN: PMU_STATE_MANUAL_EN Mask */

/* --------------------------  CSR_PMU_PMU_STATE_MANUAL  -------------------------- */
#define CSR_PMU_PMU_STATE_MANUAL_PMU_ST_MANUAL_TRIG_Pos 0                                             /*!< CSR_PMU PMU_STATE_MANUAL: PMU_ST_MANUAL_TRIG Position */
#define CSR_PMU_PMU_STATE_MANUAL_PMU_ST_MANUAL_TRIG_Msk (0x01UL << CSR_PMU_PMU_STATE_MANUAL_PMU_ST_MANUAL_TRIG_Pos)/*!< CSR_PMU PMU_STATE_MANUAL: PMU_ST_MANUAL_TRIG Mask */
#define CSR_PMU_PMU_STATE_MANUAL_PMU_MANUAL_ST_Pos 4                                                  /*!< CSR_PMU PMU_STATE_MANUAL: PMU_MANUAL_ST Position */
#define CSR_PMU_PMU_STATE_MANUAL_PMU_MANUAL_ST_Msk (0x07UL << CSR_PMU_PMU_STATE_MANUAL_PMU_MANUAL_ST_Pos)/*!< CSR_PMU PMU_STATE_MANUAL: PMU_MANUAL_ST Mask */

/* -----------------------------  CSR_PMU_SYS_RTC_EN  ----------------------------- */
#define CSR_PMU_SYS_RTC_EN_SYS_RTC_TIMER_EN_Pos 0                                                     /*!< CSR_PMU SYS_RTC_EN: SYS_RTC_TIMER_EN Position */
#define CSR_PMU_SYS_RTC_EN_SYS_RTC_TIMER_EN_Msk (0x01UL << CSR_PMU_SYS_RTC_EN_SYS_RTC_TIMER_EN_Pos)   /*!< CSR_PMU SYS_RTC_EN: SYS_RTC_TIMER_EN Mask */

/* -----------------------------  CSR_PMU_SYS_RTC_CLR  ---------------------------- */
#define CSR_PMU_SYS_RTC_CLR_SYS_RTC_TIMER_CLR_Pos 0                                                   /*!< CSR_PMU SYS_RTC_CLR: SYS_RTC_TIMER_CLR Position */
#define CSR_PMU_SYS_RTC_CLR_SYS_RTC_TIMER_CLR_Msk (0x01UL << CSR_PMU_SYS_RTC_CLR_SYS_RTC_TIMER_CLR_Pos)/*!< CSR_PMU SYS_RTC_CLR: SYS_RTC_TIMER_CLR Mask */

/* ----------------------------  CSR_PMU_SYS_RTC_TIME  ---------------------------- */
#define CSR_PMU_SYS_RTC_TIME_PMU_32K_CLK_Pos  0                                                       /*!< CSR_PMU SYS_RTC_TIME: PMU_32K_CLK Position */
#define CSR_PMU_SYS_RTC_TIME_PMU_32K_CLK_Msk  (0x01UL << CSR_PMU_SYS_RTC_TIME_PMU_32K_CLK_Pos)        /*!< CSR_PMU SYS_RTC_TIME: PMU_32K_CLK Mask  */
#define CSR_PMU_SYS_RTC_TIME_SYS_RTC_TIME_Pos 1                                                       /*!< CSR_PMU SYS_RTC_TIME: SYS_RTC_TIME Position */
#define CSR_PMU_SYS_RTC_TIME_SYS_RTC_TIME_Msk (0x003fffffUL << CSR_PMU_SYS_RTC_TIME_SYS_RTC_TIME_Pos) /*!< CSR_PMU SYS_RTC_TIME: SYS_RTC_TIME Mask */

/* -----------------------------  CSR_PMU_PMUWAK_MASK  ---------------------------- */
#define CSR_PMU_PMUWAK_MASK_PMUWAK_MASK_Pos   0                                                       /*!< CSR_PMU PMUWAK_MASK: PMUWAK_MASK Position */
#define CSR_PMU_PMUWAK_MASK_PMUWAK_MASK_Msk   (0x00000fffUL << CSR_PMU_PMUWAK_MASK_PMUWAK_MASK_Pos)   /*!< CSR_PMU PMUWAK_MASK: PMUWAK_MASK Mask   */


/* ================================================================================ */
/* ================        struct 'CSR_PHY' Position & Mask        ================ */
/* ================================================================================ */


/* ----------------------------  CSR_PHY_PHY_CLK_CTRL  ---------------------------- */
#define CSR_PHY_PHY_CLK_CTRL_RGW_TX_MD_EN_Pos 0                                                       /*!< CSR_PHY PHY_CLK_CTRL: RGW_TX_MD_EN Position */
#define CSR_PHY_PHY_CLK_CTRL_RGW_TX_MD_EN_Msk (0x01UL << CSR_PHY_PHY_CLK_CTRL_RGW_TX_MD_EN_Pos)       /*!< CSR_PHY PHY_CLK_CTRL: RGW_TX_MD_EN Mask */
#define CSR_PHY_PHY_CLK_CTRL_RGW_RX_MD_EN_Pos 1                                                       /*!< CSR_PHY PHY_CLK_CTRL: RGW_RX_MD_EN Position */
#define CSR_PHY_PHY_CLK_CTRL_RGW_RX_MD_EN_Msk (0x01UL << CSR_PHY_PHY_CLK_CTRL_RGW_RX_MD_EN_Pos)       /*!< CSR_PHY PHY_CLK_CTRL: RGW_RX_MD_EN Mask */
#define CSR_PHY_PHY_CLK_CTRL_RGW_TX_PKT_MD_EN_Pos 2                                                   /*!< CSR_PHY PHY_CLK_CTRL: RGW_TX_PKT_MD_EN Position */
#define CSR_PHY_PHY_CLK_CTRL_RGW_TX_PKT_MD_EN_Msk (0x01UL << CSR_PHY_PHY_CLK_CTRL_RGW_TX_PKT_MD_EN_Pos)/*!< CSR_PHY PHY_CLK_CTRL: RGW_TX_PKT_MD_EN Mask */
#define CSR_PHY_PHY_CLK_CTRL_RGW_PHY_MD_EN_Pos 3                                                      /*!< CSR_PHY PHY_CLK_CTRL: RGW_PHY_MD_EN Position */
#define CSR_PHY_PHY_CLK_CTRL_RGW_PHY_MD_EN_Msk (0x01UL << CSR_PHY_PHY_CLK_CTRL_RGW_PHY_MD_EN_Pos)     /*!< CSR_PHY PHY_CLK_CTRL: RGW_PHY_MD_EN Mask */
#define CSR_PHY_PHY_CLK_CTRL_RGW_DIG_SDM_EN_Pos 4                                                     /*!< CSR_PHY PHY_CLK_CTRL: RGW_DIG_SDM_EN Position */
#define CSR_PHY_PHY_CLK_CTRL_RGW_DIG_SDM_EN_Msk (0x01UL << CSR_PHY_PHY_CLK_CTRL_RGW_DIG_SDM_EN_Pos)   /*!< CSR_PHY PHY_CLK_CTRL: RGW_DIG_SDM_EN Mask */
#define CSR_PHY_PHY_CLK_CTRL_RGW_DIG_PLL_EN_Pos 5                                                     /*!< CSR_PHY PHY_CLK_CTRL: RGW_DIG_PLL_EN Position */
#define CSR_PHY_PHY_CLK_CTRL_RGW_DIG_PLL_EN_Msk (0x01UL << CSR_PHY_PHY_CLK_CTRL_RGW_DIG_PLL_EN_Pos)   /*!< CSR_PHY PHY_CLK_CTRL: RGW_DIG_PLL_EN Mask */
#define CSR_PHY_PHY_CLK_CTRL_RGW_ANA_PLL_EN_Pos 6                                                     /*!< CSR_PHY PHY_CLK_CTRL: RGW_ANA_PLL_EN Position */
#define CSR_PHY_PHY_CLK_CTRL_RGW_ANA_PLL_EN_Msk (0x01UL << CSR_PHY_PHY_CLK_CTRL_RGW_ANA_PLL_EN_Pos)   /*!< CSR_PHY PHY_CLK_CTRL: RGW_ANA_PLL_EN Mask */
#define CSR_PHY_PHY_CLK_CTRL_RGW_TBUS_64M_CK_EN_Pos 8                                                 /*!< CSR_PHY PHY_CLK_CTRL: RGW_TBUS_64M_CK_EN Position */
#define CSR_PHY_PHY_CLK_CTRL_RGW_TBUS_64M_CK_EN_Msk (0x01UL << CSR_PHY_PHY_CLK_CTRL_RGW_TBUS_64M_CK_EN_Pos)/*!< CSR_PHY PHY_CLK_CTRL: RGW_TBUS_64M_CK_EN Mask */
#define CSR_PHY_PHY_CLK_CTRL_RGW_TX_LBK_IQ_MD_EN_Pos 11                                               /*!< CSR_PHY PHY_CLK_CTRL: RGW_TX_LBK_IQ_MD_EN Position */
#define CSR_PHY_PHY_CLK_CTRL_RGW_TX_LBK_IQ_MD_EN_Msk (0x01UL << CSR_PHY_PHY_CLK_CTRL_RGW_TX_LBK_IQ_MD_EN_Pos)/*!< CSR_PHY PHY_CLK_CTRL: RGW_TX_LBK_IQ_MD_EN Mask */
#define CSR_PHY_PHY_CLK_CTRL_RGW_TX_GATE_OFF_Pos 16                                                   /*!< CSR_PHY PHY_CLK_CTRL: RGW_TX_GATE_OFF Position */
#define CSR_PHY_PHY_CLK_CTRL_RGW_TX_GATE_OFF_Msk (0x01UL << CSR_PHY_PHY_CLK_CTRL_RGW_TX_GATE_OFF_Pos) /*!< CSR_PHY PHY_CLK_CTRL: RGW_TX_GATE_OFF Mask */
#define CSR_PHY_PHY_CLK_CTRL_RGW_RX_GATE_OFF_Pos 17                                                   /*!< CSR_PHY PHY_CLK_CTRL: RGW_RX_GATE_OFF Position */
#define CSR_PHY_PHY_CLK_CTRL_RGW_RX_GATE_OFF_Msk (0x01UL << CSR_PHY_PHY_CLK_CTRL_RGW_RX_GATE_OFF_Pos) /*!< CSR_PHY PHY_CLK_CTRL: RGW_RX_GATE_OFF Mask */
#define CSR_PHY_PHY_CLK_CTRL_RGW_RF_GATE_OFF_Pos 18                                                   /*!< CSR_PHY PHY_CLK_CTRL: RGW_RF_GATE_OFF Position */
#define CSR_PHY_PHY_CLK_CTRL_RGW_RF_GATE_OFF_Msk (0x01UL << CSR_PHY_PHY_CLK_CTRL_RGW_RF_GATE_OFF_Pos) /*!< CSR_PHY PHY_CLK_CTRL: RGW_RF_GATE_OFF Mask */
#define CSR_PHY_PHY_CLK_CTRL_RGW_RF_PWR_SAVE_OFF_Pos 19                                               /*!< CSR_PHY PHY_CLK_CTRL: RGW_RF_PWR_SAVE_OFF Position */
#define CSR_PHY_PHY_CLK_CTRL_RGW_RF_PWR_SAVE_OFF_Msk (0x01UL << CSR_PHY_PHY_CLK_CTRL_RGW_RF_PWR_SAVE_OFF_Pos)/*!< CSR_PHY PHY_CLK_CTRL: RGW_RF_PWR_SAVE_OFF Mask */
#define CSR_PHY_PHY_CLK_CTRL_RGW_SDM_INV_Pos  24                                                      /*!< CSR_PHY PHY_CLK_CTRL: RGW_SDM_INV Position */
#define CSR_PHY_PHY_CLK_CTRL_RGW_SDM_INV_Msk  (0x01UL << CSR_PHY_PHY_CLK_CTRL_RGW_SDM_INV_Pos)        /*!< CSR_PHY PHY_CLK_CTRL: RGW_SDM_INV Mask  */
#define CSR_PHY_PHY_CLK_CTRL_RGW_64M_RF_INV_Pos 25                                                    /*!< CSR_PHY PHY_CLK_CTRL: RGW_64M_RF_INV Position */
#define CSR_PHY_PHY_CLK_CTRL_RGW_64M_RF_INV_Msk (0x01UL << CSR_PHY_PHY_CLK_CTRL_RGW_64M_RF_INV_Pos)   /*!< CSR_PHY PHY_CLK_CTRL: RGW_64M_RF_INV Mask */
#define CSR_PHY_PHY_CLK_CTRL_RGW_64M_PHY_TX_INV_Pos 26                                                /*!< CSR_PHY PHY_CLK_CTRL: RGW_64M_PHY_TX_INV Position */
#define CSR_PHY_PHY_CLK_CTRL_RGW_64M_PHY_TX_INV_Msk (0x01UL << CSR_PHY_PHY_CLK_CTRL_RGW_64M_PHY_TX_INV_Pos)/*!< CSR_PHY PHY_CLK_CTRL: RGW_64M_PHY_TX_INV Mask */
#define CSR_PHY_PHY_CLK_CTRL_RGW_64M_PHY_RX_INV_Pos 27                                                /*!< CSR_PHY PHY_CLK_CTRL: RGW_64M_PHY_RX_INV Position */
#define CSR_PHY_PHY_CLK_CTRL_RGW_64M_PHY_RX_INV_Msk (0x01UL << CSR_PHY_PHY_CLK_CTRL_RGW_64M_PHY_RX_INV_Pos)/*!< CSR_PHY PHY_CLK_CTRL: RGW_64M_PHY_RX_INV Mask */
#define CSR_PHY_PHY_CLK_CTRL_RGW_32M_OV_Pos   31                                                      /*!< CSR_PHY PHY_CLK_CTRL: RGW_32M_OV Position */
#define CSR_PHY_PHY_CLK_CTRL_RGW_32M_OV_Msk   (0x01UL << CSR_PHY_PHY_CLK_CTRL_RGW_32M_OV_Pos)         /*!< CSR_PHY PHY_CLK_CTRL: RGW_32M_OV Mask   */

/* -----------------------------  CSR_PHY_PHY_RX_CTRL  ---------------------------- */
#define CSR_PHY_PHY_RX_CTRL_RGW_IQ_SIGN_SWAP_Pos 0                                                    /*!< CSR_PHY PHY_RX_CTRL: RGW_IQ_SIGN_SWAP Position */
#define CSR_PHY_PHY_RX_CTRL_RGW_IQ_SIGN_SWAP_Msk (0x01UL << CSR_PHY_PHY_RX_CTRL_RGW_IQ_SIGN_SWAP_Pos) /*!< CSR_PHY PHY_RX_CTRL: RGW_IQ_SIGN_SWAP Mask */
#define CSR_PHY_PHY_RX_CTRL_RGW_IQ_SWAP_Pos   1                                                       /*!< CSR_PHY PHY_RX_CTRL: RGW_IQ_SWAP Position */
#define CSR_PHY_PHY_RX_CTRL_RGW_IQ_SWAP_Msk   (0x01UL << CSR_PHY_PHY_RX_CTRL_RGW_IQ_SWAP_Pos)         /*!< CSR_PHY PHY_RX_CTRL: RGW_IQ_SWAP Mask   */
#define CSR_PHY_PHY_RX_CTRL_RGW_RX_EXT_Pos    2                                                       /*!< CSR_PHY PHY_RX_CTRL: RGW_RX_EXT Position */
#define CSR_PHY_PHY_RX_CTRL_RGW_RX_EXT_Msk    (0x01UL << CSR_PHY_PHY_RX_CTRL_RGW_RX_EXT_Pos)          /*!< CSR_PHY PHY_RX_CTRL: RGW_RX_EXT Mask    */
#define CSR_PHY_PHY_RX_CTRL_RGW_BB_RX_ENA_AUTO_Pos 3                                                  /*!< CSR_PHY PHY_RX_CTRL: RGW_BB_RX_ENA_AUTO Position */
#define CSR_PHY_PHY_RX_CTRL_RGW_BB_RX_ENA_AUTO_Msk (0x01UL << CSR_PHY_PHY_RX_CTRL_RGW_BB_RX_ENA_AUTO_Pos)/*!< CSR_PHY PHY_RX_CTRL: RGW_BB_RX_ENA_AUTO Mask */
#define CSR_PHY_PHY_RX_CTRL_RGW_IQ_EDGE_Pos   16                                                      /*!< CSR_PHY PHY_RX_CTRL: RGW_IQ_EDGE Position */
#define CSR_PHY_PHY_RX_CTRL_RGW_IQ_EDGE_Msk   (0x01UL << CSR_PHY_PHY_RX_CTRL_RGW_IQ_EDGE_Pos)         /*!< CSR_PHY PHY_RX_CTRL: RGW_IQ_EDGE Mask   */
#define CSR_PHY_PHY_RX_CTRL_RGW_RX_CIC_OFF_Pos 20                                                     /*!< CSR_PHY PHY_RX_CTRL: RGW_RX_CIC_OFF Position */
#define CSR_PHY_PHY_RX_CTRL_RGW_RX_CIC_OFF_Msk (0x01UL << CSR_PHY_PHY_RX_CTRL_RGW_RX_CIC_OFF_Pos)     /*!< CSR_PHY PHY_RX_CTRL: RGW_RX_CIC_OFF Mask */
#define CSR_PHY_PHY_RX_CTRL_RGW_RX_CIC_S4_SW_Pos 22                                                   /*!< CSR_PHY PHY_RX_CTRL: RGW_RX_CIC_S4_SW Position */
#define CSR_PHY_PHY_RX_CTRL_RGW_RX_CIC_S4_SW_Msk (0x01UL << CSR_PHY_PHY_RX_CTRL_RGW_RX_CIC_S4_SW_Pos) /*!< CSR_PHY PHY_RX_CTRL: RGW_RX_CIC_S4_SW Mask */
#define CSR_PHY_PHY_RX_CTRL_RGW_RX_CIC_S3_SW_Pos 23                                                   /*!< CSR_PHY PHY_RX_CTRL: RGW_RX_CIC_S3_SW Position */
#define CSR_PHY_PHY_RX_CTRL_RGW_RX_CIC_S3_SW_Msk (0x01UL << CSR_PHY_PHY_RX_CTRL_RGW_RX_CIC_S3_SW_Pos) /*!< CSR_PHY PHY_RX_CTRL: RGW_RX_CIC_S3_SW Mask */

/* --------------------------  CSR_PHY_PHY_TX_PKT_GEN_1  -------------------------- */
#define CSR_PHY_PHY_TX_PKT_GEN_1_RGW_TX_START_Pos 0                                                   /*!< CSR_PHY PHY_TX_PKT_GEN_1: RGW_TX_START Position */
#define CSR_PHY_PHY_TX_PKT_GEN_1_RGW_TX_START_Msk (0x01UL << CSR_PHY_PHY_TX_PKT_GEN_1_RGW_TX_START_Pos)/*!< CSR_PHY PHY_TX_PKT_GEN_1: RGW_TX_START Mask */
#define CSR_PHY_PHY_TX_PKT_GEN_1_RGW_TX_CNT_RST_Pos 1                                                 /*!< CSR_PHY PHY_TX_PKT_GEN_1: RGW_TX_CNT_RST Position */
#define CSR_PHY_PHY_TX_PKT_GEN_1_RGW_TX_CNT_RST_Msk (0x01UL << CSR_PHY_PHY_TX_PKT_GEN_1_RGW_TX_CNT_RST_Pos)/*!< CSR_PHY PHY_TX_PKT_GEN_1: RGW_TX_CNT_RST Mask */
#define CSR_PHY_PHY_TX_PKT_GEN_1_RGW_TX_PKT_CNT_Pos 16                                                /*!< CSR_PHY PHY_TX_PKT_GEN_1: RGW_TX_PKT_CNT Position */
#define CSR_PHY_PHY_TX_PKT_GEN_1_RGW_TX_PKT_CNT_Msk (0x0000ffffUL << CSR_PHY_PHY_TX_PKT_GEN_1_RGW_TX_PKT_CNT_Pos)/*!< CSR_PHY PHY_TX_PKT_GEN_1: RGW_TX_PKT_CNT Mask */

/* --------------------------  CSR_PHY_PHY_TX_PKT_GEN_2  -------------------------- */
#define CSR_PHY_PHY_TX_PKT_GEN_2_RGW_TX_PKT_TYPE_Pos 8                                                /*!< CSR_PHY PHY_TX_PKT_GEN_2: RGW_TX_PKT_TYPE Position */
#define CSR_PHY_PHY_TX_PKT_GEN_2_RGW_TX_PKT_TYPE_Msk (0x0fUL << CSR_PHY_PHY_TX_PKT_GEN_2_RGW_TX_PKT_TYPE_Pos)/*!< CSR_PHY PHY_TX_PKT_GEN_2: RGW_TX_PKT_TYPE Mask */
#define CSR_PHY_PHY_TX_PKT_GEN_2_RGW_TX_PKT_INTERVAL_Pos 16                                           /*!< CSR_PHY PHY_TX_PKT_GEN_2: RGW_TX_PKT_INTERVAL Position */
#define CSR_PHY_PHY_TX_PKT_GEN_2_RGW_TX_PKT_INTERVAL_Msk (0x000003ffUL << CSR_PHY_PHY_TX_PKT_GEN_2_RGW_TX_PKT_INTERVAL_Pos)/*!< CSR_PHY PHY_TX_PKT_GEN_2: RGW_TX_PKT_INTERVAL Mask */
#define CSR_PHY_PHY_TX_PKT_GEN_2_RGW_TX_PKT_PRBS_RSTART_Pos 30                                        /*!< CSR_PHY PHY_TX_PKT_GEN_2: RGW_TX_PKT_PRBS_RSTART Position */
#define CSR_PHY_PHY_TX_PKT_GEN_2_RGW_TX_PKT_PRBS_RSTART_Msk (0x01UL << CSR_PHY_PHY_TX_PKT_GEN_2_RGW_TX_PKT_PRBS_RSTART_Pos)/*!< CSR_PHY PHY_TX_PKT_GEN_2: RGW_TX_PKT_PRBS_RSTART Mask */
#define CSR_PHY_PHY_TX_PKT_GEN_2_RGW_TX_PKT_CONT_Pos 31                                               /*!< CSR_PHY PHY_TX_PKT_GEN_2: RGW_TX_PKT_CONT Position */
#define CSR_PHY_PHY_TX_PKT_GEN_2_RGW_TX_PKT_CONT_Msk (0x01UL << CSR_PHY_PHY_TX_PKT_GEN_2_RGW_TX_PKT_CONT_Pos)/*!< CSR_PHY PHY_TX_PKT_GEN_2: RGW_TX_PKT_CONT Mask */

/* -----------------------------  CSR_PHY_PHY_TX_SET  ----------------------------- */
#define CSR_PHY_PHY_TX_SET_RGW_TX_D_SRC_Pos   0                                                       /*!< CSR_PHY PHY_TX_SET: RGW_TX_D_SRC Position */
#define CSR_PHY_PHY_TX_SET_RGW_TX_D_SRC_Msk   (0x01UL << CSR_PHY_PHY_TX_SET_RGW_TX_D_SRC_Pos)         /*!< CSR_PHY PHY_TX_SET: RGW_TX_D_SRC Mask   */
#define CSR_PHY_PHY_TX_SET_RGW_TX_EXT_Pos     1                                                       /*!< CSR_PHY PHY_TX_SET: RGW_TX_EXT Position */
#define CSR_PHY_PHY_TX_SET_RGW_TX_EXT_Msk     (0x01UL << CSR_PHY_PHY_TX_SET_RGW_TX_EXT_Pos)           /*!< CSR_PHY PHY_TX_SET: RGW_TX_EXT Mask     */
#define CSR_PHY_PHY_TX_SET_RGW_BB_TX_ENA_AUTO_Pos 3                                                   /*!< CSR_PHY PHY_TX_SET: RGW_BB_TX_ENA_AUTO Position */
#define CSR_PHY_PHY_TX_SET_RGW_BB_TX_ENA_AUTO_Msk (0x01UL << CSR_PHY_PHY_TX_SET_RGW_BB_TX_ENA_AUTO_Pos)/*!< CSR_PHY PHY_TX_SET: RGW_BB_TX_ENA_AUTO Mask */
#define CSR_PHY_PHY_TX_SET_RGW_TX_TAIL_LMT_Pos 4                                                      /*!< CSR_PHY PHY_TX_SET: RGW_TX_TAIL_LMT Position */
#define CSR_PHY_PHY_TX_SET_RGW_TX_TAIL_LMT_Msk (0x0fUL << CSR_PHY_PHY_TX_SET_RGW_TX_TAIL_LMT_Pos)     /*!< CSR_PHY PHY_TX_SET: RGW_TX_TAIL_LMT Mask */
#define CSR_PHY_PHY_TX_SET_RGW_MOD_TAIL_LMT_Pos 8                                                     /*!< CSR_PHY PHY_TX_SET: RGW_MOD_TAIL_LMT Position */
#define CSR_PHY_PHY_TX_SET_RGW_MOD_TAIL_LMT_Msk (0x0fUL << CSR_PHY_PHY_TX_SET_RGW_MOD_TAIL_LMT_Pos)   /*!< CSR_PHY PHY_TX_SET: RGW_MOD_TAIL_LMT Mask */
#define CSR_PHY_PHY_TX_SET_RGW_TX_PREAMBLE_FLIP_Pos 12                                                /*!< CSR_PHY PHY_TX_SET: RGW_TX_PREAMBLE_FLIP Position */
#define CSR_PHY_PHY_TX_SET_RGW_TX_PREAMBLE_FLIP_Msk (0x01UL << CSR_PHY_PHY_TX_SET_RGW_TX_PREAMBLE_FLIP_Pos)/*!< CSR_PHY PHY_TX_SET: RGW_TX_PREAMBLE_FLIP Mask */
#define CSR_PHY_PHY_TX_SET_RGW_TX_CRC_CORRUPT_Pos 14                                                  /*!< CSR_PHY PHY_TX_SET: RGW_TX_CRC_CORRUPT Position */
#define CSR_PHY_PHY_TX_SET_RGW_TX_CRC_CORRUPT_Msk (0x01UL << CSR_PHY_PHY_TX_SET_RGW_TX_CRC_CORRUPT_Pos)/*!< CSR_PHY PHY_TX_SET: RGW_TX_CRC_CORRUPT Mask */
#define CSR_PHY_PHY_TX_SET_RGW_TX_PWR_OV_Pos  26                                                      /*!< CSR_PHY PHY_TX_SET: RGW_TX_PWR_OV Position */
#define CSR_PHY_PHY_TX_SET_RGW_TX_PWR_OV_Msk  (0x01UL << CSR_PHY_PHY_TX_SET_RGW_TX_PWR_OV_Pos)        /*!< CSR_PHY PHY_TX_SET: RGW_TX_PWR_OV Mask  */
#define CSR_PHY_PHY_TX_SET_RGW_TX_PLD_LEN_OV_Pos 27                                                   /*!< CSR_PHY PHY_TX_SET: RGW_TX_PLD_LEN_OV Position */
#define CSR_PHY_PHY_TX_SET_RGW_TX_PLD_LEN_OV_Msk (0x01UL << CSR_PHY_PHY_TX_SET_RGW_TX_PLD_LEN_OV_Pos) /*!< CSR_PHY PHY_TX_SET: RGW_TX_PLD_LEN_OV Mask */
#define CSR_PHY_PHY_TX_SET_RGW_TX_CRC_INIT_OV_Pos 28                                                  /*!< CSR_PHY PHY_TX_SET: RGW_TX_CRC_INIT_OV Position */
#define CSR_PHY_PHY_TX_SET_RGW_TX_CRC_INIT_OV_Msk (0x01UL << CSR_PHY_PHY_TX_SET_RGW_TX_CRC_INIT_OV_Pos)/*!< CSR_PHY PHY_TX_SET: RGW_TX_CRC_INIT_OV Mask */
#define CSR_PHY_PHY_TX_SET_RGW_TX_ACC_ADDR_OV_Pos 29                                                  /*!< CSR_PHY PHY_TX_SET: RGW_TX_ACC_ADDR_OV Position */
#define CSR_PHY_PHY_TX_SET_RGW_TX_ACC_ADDR_OV_Msk (0x01UL << CSR_PHY_PHY_TX_SET_RGW_TX_ACC_ADDR_OV_Pos)/*!< CSR_PHY PHY_TX_SET: RGW_TX_ACC_ADDR_OV Mask */
#define CSR_PHY_PHY_TX_SET_RGW_TX_DWLFSR_SEED_OV_Pos 30                                               /*!< CSR_PHY PHY_TX_SET: RGW_TX_DWLFSR_SEED_OV Position */
#define CSR_PHY_PHY_TX_SET_RGW_TX_DWLFSR_SEED_OV_Msk (0x01UL << CSR_PHY_PHY_TX_SET_RGW_TX_DWLFSR_SEED_OV_Pos)/*!< CSR_PHY PHY_TX_SET: RGW_TX_DWLFSR_SEED_OV Mask */
#define CSR_PHY_PHY_TX_SET_RGW_TX_HEADER_OV_Pos 31                                                    /*!< CSR_PHY PHY_TX_SET: RGW_TX_HEADER_OV Position */
#define CSR_PHY_PHY_TX_SET_RGW_TX_HEADER_OV_Msk (0x01UL << CSR_PHY_PHY_TX_SET_RGW_TX_HEADER_OV_Pos)   /*!< CSR_PHY PHY_TX_SET: RGW_TX_HEADER_OV Mask */

/* ---------------------------  CSR_PHY_PHY_TX_ACC_ADD1  -------------------------- */
#define CSR_PHY_PHY_TX_ACC_ADD1_RGW_TX_ACC_ADDR_Pos 0                                                 /*!< CSR_PHY PHY_TX_ACC_ADD1: RGW_TX_ACC_ADDR Position */
#define CSR_PHY_PHY_TX_ACC_ADD1_RGW_TX_ACC_ADDR_Msk (0xffffffffUL << CSR_PHY_PHY_TX_ACC_ADD1_RGW_TX_ACC_ADDR_Pos)/*!< CSR_PHY PHY_TX_ACC_ADD1: RGW_TX_ACC_ADDR Mask */

/* -------------------------  CSR_PHY_PHY_TX_WHITEN_SEED  ------------------------- */
#define CSR_PHY_PHY_TX_WHITEN_SEED_RGW_TX_DWLFSR_SEED_Pos 0                                           /*!< CSR_PHY PHY_TX_WHITEN_SEED: RGW_TX_DWLFSR_SEED Position */
#define CSR_PHY_PHY_TX_WHITEN_SEED_RGW_TX_DWLFSR_SEED_Msk (0x7fUL << CSR_PHY_PHY_TX_WHITEN_SEED_RGW_TX_DWLFSR_SEED_Pos)/*!< CSR_PHY PHY_TX_WHITEN_SEED: RGW_TX_DWLFSR_SEED Mask */

/* ---------------------------  CSR_PHY_PHY_TX_CRC_INIT  -------------------------- */
#define CSR_PHY_PHY_TX_CRC_INIT_RGW_TX_CRC_INIT_Pos 0                                                 /*!< CSR_PHY PHY_TX_CRC_INIT: RGW_TX_CRC_INIT Position */
#define CSR_PHY_PHY_TX_CRC_INIT_RGW_TX_CRC_INIT_Msk (0x00ffffffUL << CSR_PHY_PHY_TX_CRC_INIT_RGW_TX_CRC_INIT_Pos)/*!< CSR_PHY PHY_TX_CRC_INIT: RGW_TX_CRC_INIT Mask */

/* ----------------------------  CSR_PHY_PHY_TX_HEADER  --------------------------- */
#define CSR_PHY_PHY_TX_HEADER_RGW_TX_HEADER_Pos 0                                                     /*!< CSR_PHY PHY_TX_HEADER: RGW_TX_HEADER Position */
#define CSR_PHY_PHY_TX_HEADER_RGW_TX_HEADER_Msk (0x0000ffffUL << CSR_PHY_PHY_TX_HEADER_RGW_TX_HEADER_Pos)/*!< CSR_PHY PHY_TX_HEADER: RGW_TX_HEADER Mask */

/* -----------------------------  CSR_PHY_PHY_TX_MOD  ----------------------------- */
#define CSR_PHY_PHY_TX_MOD_RGW_TX_DEV_Pos     28                                                      /*!< CSR_PHY PHY_TX_MOD: RGW_TX_DEV Position */
#define CSR_PHY_PHY_TX_MOD_RGW_TX_DEV_Msk     (0x07UL << CSR_PHY_PHY_TX_MOD_RGW_TX_DEV_Pos)           /*!< CSR_PHY PHY_TX_MOD: RGW_TX_DEV Mask     */

/* ---------------------------  CSR_PHY_PHY_TX_PRBL_NO  --------------------------- */
#define CSR_PHY_PHY_TX_PRBL_NO_RGW_TX_PRBL_NUM_Pos 0                                                  /*!< CSR_PHY PHY_TX_PRBL_NO: RGW_TX_PRBL_NUM Position */
#define CSR_PHY_PHY_TX_PRBL_NO_RGW_TX_PRBL_NUM_Msk (0x0fUL << CSR_PHY_PHY_TX_PRBL_NO_RGW_TX_PRBL_NUM_Pos)/*!< CSR_PHY PHY_TX_PRBL_NO: RGW_TX_PRBL_NUM Mask */

/* ---------------------------  CSR_PHY_PHY_TX_PLD_LEN  --------------------------- */
#define CSR_PHY_PHY_TX_PLD_LEN_RGW_TX_PLD_LEN_Pos 0                                                   /*!< CSR_PHY PHY_TX_PLD_LEN: RGW_TX_PLD_LEN Position */
#define CSR_PHY_PHY_TX_PLD_LEN_RGW_TX_PLD_LEN_Msk (0x000000ffUL << CSR_PHY_PHY_TX_PLD_LEN_RGW_TX_PLD_LEN_Pos)/*!< CSR_PHY PHY_TX_PLD_LEN: RGW_TX_PLD_LEN Mask */

/* -----------------------------  CSR_PHY_PHY_TX_PWR  ----------------------------- */
#define CSR_PHY_PHY_TX_PWR_RGW_TX_PWR_Pos     0                                                       /*!< CSR_PHY PHY_TX_PWR: RGW_TX_PWR Position */
#define CSR_PHY_PHY_TX_PWR_RGW_TX_PWR_Msk     (0x0000ffffUL << CSR_PHY_PHY_TX_PWR_RGW_TX_PWR_Pos)     /*!< CSR_PHY PHY_TX_PWR: RGW_TX_PWR Mask     */

/* -----------------------------  CSR_PHY_PHY_FSM_SET  ---------------------------- */
#define CSR_PHY_PHY_FSM_SET_RGW_CNT_PWRON_DLY_TH_Pos 0                                                /*!< CSR_PHY PHY_FSM_SET: RGW_CNT_PWRON_DLY_TH Position */
#define CSR_PHY_PHY_FSM_SET_RGW_CNT_PWRON_DLY_TH_Msk (0x1fUL << CSR_PHY_PHY_FSM_SET_RGW_CNT_PWRON_DLY_TH_Pos)/*!< CSR_PHY PHY_FSM_SET: RGW_CNT_PWRON_DLY_TH Mask */

/* -----------------------------  CSR_PHY_PHY_AGC_SET  ---------------------------- */
#define CSR_PHY_PHY_AGC_SET_RGW_CNT_ADDR_MH_TH_Pos 0                                                  /*!< CSR_PHY PHY_AGC_SET: RGW_CNT_ADDR_MH_TH Position */
#define CSR_PHY_PHY_AGC_SET_RGW_CNT_ADDR_MH_TH_Msk (0x3fUL << CSR_PHY_PHY_AGC_SET_RGW_CNT_ADDR_MH_TH_Pos)/*!< CSR_PHY PHY_AGC_SET: RGW_CNT_ADDR_MH_TH Mask */
#define CSR_PHY_PHY_AGC_SET_RGW_AGC_HG_THR_Pos 8                                                      /*!< CSR_PHY PHY_AGC_SET: RGW_AGC_HG_THR Position */
#define CSR_PHY_PHY_AGC_SET_RGW_AGC_HG_THR_Msk (0x0fUL << CSR_PHY_PHY_AGC_SET_RGW_AGC_HG_THR_Pos)     /*!< CSR_PHY PHY_AGC_SET: RGW_AGC_HG_THR Mask */
#define CSR_PHY_PHY_AGC_SET_RGW_AGC_LG_THR_Pos 12                                                     /*!< CSR_PHY PHY_AGC_SET: RGW_AGC_LG_THR Position */
#define CSR_PHY_PHY_AGC_SET_RGW_AGC_LG_THR_Msk (0x0fUL << CSR_PHY_PHY_AGC_SET_RGW_AGC_LG_THR_Pos)     /*!< CSR_PHY PHY_AGC_SET: RGW_AGC_LG_THR Mask */
#define CSR_PHY_PHY_AGC_SET_RGW_LGLNA_SET_Pos 16                                                      /*!< CSR_PHY PHY_AGC_SET: RGW_LGLNA_SET Position */
#define CSR_PHY_PHY_AGC_SET_RGW_LGLNA_SET_Msk (0x03UL << CSR_PHY_PHY_AGC_SET_RGW_LGLNA_SET_Pos)       /*!< CSR_PHY PHY_AGC_SET: RGW_LGLNA_SET Mask */
#define CSR_PHY_PHY_AGC_SET_RGW_HGLNA_SET_Pos 18                                                      /*!< CSR_PHY PHY_AGC_SET: RGW_HGLNA_SET Position */
#define CSR_PHY_PHY_AGC_SET_RGW_HGLNA_SET_Msk (0x03UL << CSR_PHY_PHY_AGC_SET_RGW_HGLNA_SET_Pos)       /*!< CSR_PHY PHY_AGC_SET: RGW_HGLNA_SET Mask */
#define CSR_PHY_PHY_AGC_SET_RGW_LNA_GAIN_Pos  30                                                      /*!< CSR_PHY PHY_AGC_SET: RGW_LNA_GAIN Position */
#define CSR_PHY_PHY_AGC_SET_RGW_LNA_GAIN_Msk  (0x01UL << CSR_PHY_PHY_AGC_SET_RGW_LNA_GAIN_Pos)        /*!< CSR_PHY PHY_AGC_SET: RGW_LNA_GAIN Mask  */
#define CSR_PHY_PHY_AGC_SET_RGW_AGC_OW_Pos    31                                                      /*!< CSR_PHY PHY_AGC_SET: RGW_AGC_OW Position */
#define CSR_PHY_PHY_AGC_SET_RGW_AGC_OW_Msk    (0x01UL << CSR_PHY_PHY_AGC_SET_RGW_AGC_OW_Pos)          /*!< CSR_PHY PHY_AGC_SET: RGW_AGC_OW Mask    */

/* -----------------------------  CSR_PHY_PHY_PKT_CNT  ---------------------------- */
#define CSR_PHY_PHY_PKT_CNT_RO_PKT_CNT_Pos    0                                                       /*!< CSR_PHY PHY_PKT_CNT: RO_PKT_CNT Position */
#define CSR_PHY_PHY_PKT_CNT_RO_PKT_CNT_Msk    (0x0000ffffUL << CSR_PHY_PHY_PKT_CNT_RO_PKT_CNT_Pos)    /*!< CSR_PHY PHY_PKT_CNT: RO_PKT_CNT Mask    */

/* ---------------------------  CSR_PHY_PHY_ERR_PKT_CNT  -------------------------- */
#define CSR_PHY_PHY_ERR_PKT_CNT_RO_PKT_ERR_CNT_Pos 0                                                  /*!< CSR_PHY PHY_ERR_PKT_CNT: RO_PKT_ERR_CNT Position */
#define CSR_PHY_PHY_ERR_PKT_CNT_RO_PKT_ERR_CNT_Msk (0x0000ffffUL << CSR_PHY_PHY_ERR_PKT_CNT_RO_PKT_ERR_CNT_Pos)/*!< CSR_PHY PHY_ERR_PKT_CNT: RO_PKT_ERR_CNT Mask */

/* -----------------------------  CSR_PHY_PHY_PKT_ENA  ---------------------------- */
#define CSR_PHY_PHY_PKT_ENA_RGW_PACKET_STAT_EN_Pos 0                                                  /*!< CSR_PHY PHY_PKT_ENA: RGW_PACKET_STAT_EN Position */
#define CSR_PHY_PHY_PKT_ENA_RGW_PACKET_STAT_EN_Msk (0x01UL << CSR_PHY_PHY_PKT_ENA_RGW_PACKET_STAT_EN_Pos)/*!< CSR_PHY PHY_PKT_ENA: RGW_PACKET_STAT_EN Mask */
#define CSR_PHY_PHY_PKT_ENA_RGW_RX_EN_MAN_Pos 1                                                       /*!< CSR_PHY PHY_PKT_ENA: RGW_RX_EN_MAN Position */
#define CSR_PHY_PHY_PKT_ENA_RGW_RX_EN_MAN_Msk (0x01UL << CSR_PHY_PHY_PKT_ENA_RGW_RX_EN_MAN_Pos)       /*!< CSR_PHY PHY_PKT_ENA: RGW_RX_EN_MAN Mask */
#define CSR_PHY_PHY_PKT_ENA_RGW_TX_EN_MAN_Pos 2                                                       /*!< CSR_PHY PHY_PKT_ENA: RGW_TX_EN_MAN Position */
#define CSR_PHY_PHY_PKT_ENA_RGW_TX_EN_MAN_Msk (0x01UL << CSR_PHY_PHY_PKT_ENA_RGW_TX_EN_MAN_Pos)       /*!< CSR_PHY PHY_PKT_ENA: RGW_TX_EN_MAN Mask */
#define CSR_PHY_PHY_PKT_ENA_RGW_RF_RX_EN_MAN_Pos 3                                                    /*!< CSR_PHY PHY_PKT_ENA: RGW_RF_RX_EN_MAN Position */
#define CSR_PHY_PHY_PKT_ENA_RGW_RF_RX_EN_MAN_Msk (0x01UL << CSR_PHY_PHY_PKT_ENA_RGW_RF_RX_EN_MAN_Pos) /*!< CSR_PHY PHY_PKT_ENA: RGW_RF_RX_EN_MAN Mask */
#define CSR_PHY_PHY_PKT_ENA_RGW_RF_TX_CH_SW_MAN_Pos 4                                                 /*!< CSR_PHY PHY_PKT_ENA: RGW_RF_TX_CH_SW_MAN Position */
#define CSR_PHY_PHY_PKT_ENA_RGW_RF_TX_CH_SW_MAN_Msk (0x01UL << CSR_PHY_PHY_PKT_ENA_RGW_RF_TX_CH_SW_MAN_Pos)/*!< CSR_PHY PHY_PKT_ENA: RGW_RF_TX_CH_SW_MAN Mask */
#define CSR_PHY_PHY_PKT_ENA_RGW_RF_RX_CH_SW_MAN_Pos 5                                                 /*!< CSR_PHY PHY_PKT_ENA: RGW_RF_RX_CH_SW_MAN Position */
#define CSR_PHY_PHY_PKT_ENA_RGW_RF_RX_CH_SW_MAN_Msk (0x01UL << CSR_PHY_PHY_PKT_ENA_RGW_RF_RX_CH_SW_MAN_Pos)/*!< CSR_PHY PHY_PKT_ENA: RGW_RF_RX_CH_SW_MAN Mask */
#define CSR_PHY_PHY_PKT_ENA_RGW_RX_BER_EN_Pos 31                                                      /*!< CSR_PHY PHY_PKT_ENA: RGW_RX_BER_EN Position */
#define CSR_PHY_PHY_PKT_ENA_RGW_RX_BER_EN_Msk (0x01UL << CSR_PHY_PHY_PKT_ENA_RGW_RX_BER_EN_Pos)       /*!< CSR_PHY PHY_PKT_ENA: RGW_RX_BER_EN Mask */

/* ----------------------------  CSR_PHY_PHY_RX_SET_1  ---------------------------- */
#define CSR_PHY_PHY_RX_SET_1_RGW_CRC_BFLIP_TH_Pos 0                                                   /*!< CSR_PHY PHY_RX_SET_1: RGW_CRC_BFLIP_TH Position */
#define CSR_PHY_PHY_RX_SET_1_RGW_CRC_BFLIP_TH_Msk (0x000000ffUL << CSR_PHY_PHY_RX_SET_1_RGW_CRC_BFLIP_TH_Pos)/*!< CSR_PHY PHY_RX_SET_1: RGW_CRC_BFLIP_TH Mask */
#define CSR_PHY_PHY_RX_SET_1_RGW_TCU_DC_AVG_FACTOR_Pos 8                                              /*!< CSR_PHY PHY_RX_SET_1: RGW_TCU_DC_AVG_FACTOR Position */
#define CSR_PHY_PHY_RX_SET_1_RGW_TCU_DC_AVG_FACTOR_Msk (0x0fUL << CSR_PHY_PHY_RX_SET_1_RGW_TCU_DC_AVG_FACTOR_Pos)/*!< CSR_PHY PHY_RX_SET_1: RGW_TCU_DC_AVG_FACTOR Mask */
#define CSR_PHY_PHY_RX_SET_1_RGW_RX_PREAMBLE_FLIP_Pos 12                                              /*!< CSR_PHY PHY_RX_SET_1: RGW_RX_PREAMBLE_FLIP Position */
#define CSR_PHY_PHY_RX_SET_1_RGW_RX_PREAMBLE_FLIP_Msk (0x01UL << CSR_PHY_PHY_RX_SET_1_RGW_RX_PREAMBLE_FLIP_Pos)/*!< CSR_PHY PHY_RX_SET_1: RGW_RX_PREAMBLE_FLIP Mask */
#define CSR_PHY_PHY_RX_SET_1_RGW_RX_PREAMBLE_BIT_NO_Pos 13                                            /*!< CSR_PHY PHY_RX_SET_1: RGW_RX_PREAMBLE_BIT_NO Position */
#define CSR_PHY_PHY_RX_SET_1_RGW_RX_PREAMBLE_BIT_NO_Msk (0x01UL << CSR_PHY_PHY_RX_SET_1_RGW_RX_PREAMBLE_BIT_NO_Pos)/*!< CSR_PHY PHY_RX_SET_1: RGW_RX_PREAMBLE_BIT_NO Mask */
#define CSR_PHY_PHY_RX_SET_1_RGW_RX_PREAMBLE_SAMPLE_REUPDATE_Pos 14                                   /*!< CSR_PHY PHY_RX_SET_1: RGW_RX_PREAMBLE_SAMPLE_REUPDATE Position */
#define CSR_PHY_PHY_RX_SET_1_RGW_RX_PREAMBLE_SAMPLE_REUPDATE_Msk (0x01UL << CSR_PHY_PHY_RX_SET_1_RGW_RX_PREAMBLE_SAMPLE_REUPDATE_Pos)/*!< CSR_PHY PHY_RX_SET_1: RGW_RX_PREAMBLE_SAMPLE_REUPDATE Mask */
#define CSR_PHY_PHY_RX_SET_1_RGW_PT_OFFSET_TH_Pos 24                                                  /*!< CSR_PHY PHY_RX_SET_1: RGW_PT_OFFSET_TH Position */
#define CSR_PHY_PHY_RX_SET_1_RGW_PT_OFFSET_TH_Msk (0x07UL << CSR_PHY_PHY_RX_SET_1_RGW_PT_OFFSET_TH_Pos)/*!< CSR_PHY PHY_RX_SET_1: RGW_PT_OFFSET_TH Mask */
#define CSR_PHY_PHY_RX_SET_1_RGW_PT_OFFSET_EN_Pos 27                                                  /*!< CSR_PHY PHY_RX_SET_1: RGW_PT_OFFSET_EN Position */
#define CSR_PHY_PHY_RX_SET_1_RGW_PT_OFFSET_EN_Msk (0x01UL << CSR_PHY_PHY_RX_SET_1_RGW_PT_OFFSET_EN_Pos)/*!< CSR_PHY PHY_RX_SET_1: RGW_PT_OFFSET_EN Mask */
#define CSR_PHY_PHY_RX_SET_1_RGW_BER_PKT_TYPE_Pos 28                                                  /*!< CSR_PHY PHY_RX_SET_1: RGW_BER_PKT_TYPE Position */
#define CSR_PHY_PHY_RX_SET_1_RGW_BER_PKT_TYPE_Msk (0x0fUL << CSR_PHY_PHY_RX_SET_1_RGW_BER_PKT_TYPE_Pos)/*!< CSR_PHY PHY_RX_SET_1: RGW_BER_PKT_TYPE Mask */

/* ----------------------------  CSR_PHY_PHY_RX_SET_2  ---------------------------- */
#define CSR_PHY_PHY_RX_SET_2_RGW_FM_DEMOD_SW_LMT_Pos 16                                               /*!< CSR_PHY PHY_RX_SET_2: RGW_FM_DEMOD_SW_LMT Position */
#define CSR_PHY_PHY_RX_SET_2_RGW_FM_DEMOD_SW_LMT_Msk (0x0fUL << CSR_PHY_PHY_RX_SET_2_RGW_FM_DEMOD_SW_LMT_Pos)/*!< CSR_PHY PHY_RX_SET_2: RGW_FM_DEMOD_SW_LMT Mask */
#define CSR_PHY_PHY_RX_SET_2_RGW_FM_DEMOD_INV_Pos 20                                                  /*!< CSR_PHY PHY_RX_SET_2: RGW_FM_DEMOD_INV Position */
#define CSR_PHY_PHY_RX_SET_2_RGW_FM_DEMOD_INV_Msk (0x01UL << CSR_PHY_PHY_RX_SET_2_RGW_FM_DEMOD_INV_Pos)/*!< CSR_PHY PHY_RX_SET_2: RGW_FM_DEMOD_INV Mask */
#define CSR_PHY_PHY_RX_SET_2_RGW_RX_TAIL_LMT_Pos 21                                                   /*!< CSR_PHY PHY_RX_SET_2: RGW_RX_TAIL_LMT Position */
#define CSR_PHY_PHY_RX_SET_2_RGW_RX_TAIL_LMT_Msk (0x1fUL << CSR_PHY_PHY_RX_SET_2_RGW_RX_TAIL_LMT_Pos) /*!< CSR_PHY PHY_RX_SET_2: RGW_RX_TAIL_LMT Mask */
#define CSR_PHY_PHY_RX_SET_2_RGW_ADDR_COR_TO_LMT_Pos 26                                               /*!< CSR_PHY PHY_RX_SET_2: RGW_ADDR_COR_TO_LMT Position */
#define CSR_PHY_PHY_RX_SET_2_RGW_ADDR_COR_TO_LMT_Msk (0x1fUL << CSR_PHY_PHY_RX_SET_2_RGW_ADDR_COR_TO_LMT_Pos)/*!< CSR_PHY PHY_RX_SET_2: RGW_ADDR_COR_TO_LMT Mask */

/* --------------------------  CSR_PHY_PHY_RX_ACC_TIMER  -------------------------- */
#define CSR_PHY_PHY_RX_ACC_TIMER_RGW_RX_ACC_TIMER_INIT_Pos 0                                          /*!< CSR_PHY PHY_RX_ACC_TIMER: RGW_RX_ACC_TIMER_INIT Position */
#define CSR_PHY_PHY_RX_ACC_TIMER_RGW_RX_ACC_TIMER_INIT_Msk (0x000fffffUL << CSR_PHY_PHY_RX_ACC_TIMER_RGW_RX_ACC_TIMER_INIT_Pos)/*!< CSR_PHY PHY_RX_ACC_TIMER: RGW_RX_ACC_TIMER_INIT Mask */

/* ---------------------------  CSR_PHY_PHY_RX_ACC_ADDR  -------------------------- */
#define CSR_PHY_PHY_RX_ACC_ADDR_RGW_RX_ACC_ADDR_Pos 0                                                 /*!< CSR_PHY PHY_RX_ACC_ADDR: RGW_RX_ACC_ADDR Position */
#define CSR_PHY_PHY_RX_ACC_ADDR_RGW_RX_ACC_ADDR_Msk (0xffffffffUL << CSR_PHY_PHY_RX_ACC_ADDR_RGW_RX_ACC_ADDR_Pos)/*!< CSR_PHY PHY_RX_ACC_ADDR: RGW_RX_ACC_ADDR Mask */

/* --------------------------  CSR_PHY_PHY_RX_CHNL_TYPE  -------------------------- */
#define CSR_PHY_PHY_RX_CHNL_TYPE_RGW_RX_CHNL_TYPE_Pos 0                                               /*!< CSR_PHY PHY_RX_CHNL_TYPE: RGW_RX_CHNL_TYPE Position */
#define CSR_PHY_PHY_RX_CHNL_TYPE_RGW_RX_CHNL_TYPE_Msk (0x01UL << CSR_PHY_PHY_RX_CHNL_TYPE_RGW_RX_CHNL_TYPE_Pos)/*!< CSR_PHY PHY_RX_CHNL_TYPE: RGW_RX_CHNL_TYPE Mask */

/* ---------------------------  CSR_PHY_PHY_RX_CRC_INIT  -------------------------- */
#define CSR_PHY_PHY_RX_CRC_INIT_RGW_RX_CRC_INIT_Pos 0                                                 /*!< CSR_PHY PHY_RX_CRC_INIT: RGW_RX_CRC_INIT Position */
#define CSR_PHY_PHY_RX_CRC_INIT_RGW_RX_CRC_INIT_Msk (0x00ffffffUL << CSR_PHY_PHY_RX_CRC_INIT_RGW_RX_CRC_INIT_Pos)/*!< CSR_PHY PHY_RX_CRC_INIT: RGW_RX_CRC_INIT Mask */

/* ---------------------------  CSR_PHY_PHY_RX_DW_SEED  --------------------------- */
#define CSR_PHY_PHY_RX_DW_SEED_RGW_RX_DWLFSR_SEED_Pos 0                                               /*!< CSR_PHY PHY_RX_DW_SEED: RGW_RX_DWLFSR_SEED Position */
#define CSR_PHY_PHY_RX_DW_SEED_RGW_RX_DWLFSR_SEED_Msk (0x7fUL << CSR_PHY_PHY_RX_DW_SEED_RGW_RX_DWLFSR_SEED_Pos)/*!< CSR_PHY PHY_RX_DW_SEED: RGW_RX_DWLFSR_SEED Mask */

/* ---------------------------  CSR_PHY_PHY_RX_MAN_SET  --------------------------- */
#define CSR_PHY_PHY_RX_MAN_SET_RGW_RX_DWLFSR_SEED_OV_Pos 0                                            /*!< CSR_PHY PHY_RX_MAN_SET: RGW_RX_DWLFSR_SEED_OV Position */
#define CSR_PHY_PHY_RX_MAN_SET_RGW_RX_DWLFSR_SEED_OV_Msk (0x01UL << CSR_PHY_PHY_RX_MAN_SET_RGW_RX_DWLFSR_SEED_OV_Pos)/*!< CSR_PHY PHY_RX_MAN_SET: RGW_RX_DWLFSR_SEED_OV Mask */
#define CSR_PHY_PHY_RX_MAN_SET_RGW_RX_CRC_INIT_OV_Pos 1                                               /*!< CSR_PHY PHY_RX_MAN_SET: RGW_RX_CRC_INIT_OV Position */
#define CSR_PHY_PHY_RX_MAN_SET_RGW_RX_CRC_INIT_OV_Msk (0x01UL << CSR_PHY_PHY_RX_MAN_SET_RGW_RX_CRC_INIT_OV_Pos)/*!< CSR_PHY PHY_RX_MAN_SET: RGW_RX_CRC_INIT_OV Mask */
#define CSR_PHY_PHY_RX_MAN_SET_RGW_RX_CHNL_TYPE_OV_Pos 2                                              /*!< CSR_PHY PHY_RX_MAN_SET: RGW_RX_CHNL_TYPE_OV Position */
#define CSR_PHY_PHY_RX_MAN_SET_RGW_RX_CHNL_TYPE_OV_Msk (0x01UL << CSR_PHY_PHY_RX_MAN_SET_RGW_RX_CHNL_TYPE_OV_Pos)/*!< CSR_PHY PHY_RX_MAN_SET: RGW_RX_CHNL_TYPE_OV Mask */
#define CSR_PHY_PHY_RX_MAN_SET_RGW_RX_ACC_ADDR_OV_Pos 3                                               /*!< CSR_PHY PHY_RX_MAN_SET: RGW_RX_ACC_ADDR_OV Position */
#define CSR_PHY_PHY_RX_MAN_SET_RGW_RX_ACC_ADDR_OV_Msk (0x01UL << CSR_PHY_PHY_RX_MAN_SET_RGW_RX_ACC_ADDR_OV_Pos)/*!< CSR_PHY PHY_RX_MAN_SET: RGW_RX_ACC_ADDR_OV Mask */
#define CSR_PHY_PHY_RX_MAN_SET_RGW_RX_EN_OV_Pos 4                                                     /*!< CSR_PHY PHY_RX_MAN_SET: RGW_RX_EN_OV Position */
#define CSR_PHY_PHY_RX_MAN_SET_RGW_RX_EN_OV_Msk (0x01UL << CSR_PHY_PHY_RX_MAN_SET_RGW_RX_EN_OV_Pos)   /*!< CSR_PHY PHY_RX_MAN_SET: RGW_RX_EN_OV Mask */
#define CSR_PHY_PHY_RX_MAN_SET_RGW_RF_RX_EN_OV_Pos 5                                                  /*!< CSR_PHY PHY_RX_MAN_SET: RGW_RF_RX_EN_OV Position */
#define CSR_PHY_PHY_RX_MAN_SET_RGW_RF_RX_EN_OV_Msk (0x01UL << CSR_PHY_PHY_RX_MAN_SET_RGW_RF_RX_EN_OV_Pos)/*!< CSR_PHY PHY_RX_MAN_SET: RGW_RF_RX_EN_OV Mask */
#define CSR_PHY_PHY_RX_MAN_SET_RGW_RF_RX_CH_SW_OV_Pos 6                                               /*!< CSR_PHY PHY_RX_MAN_SET: RGW_RF_RX_CH_SW_OV Position */
#define CSR_PHY_PHY_RX_MAN_SET_RGW_RF_RX_CH_SW_OV_Msk (0x01UL << CSR_PHY_PHY_RX_MAN_SET_RGW_RF_RX_CH_SW_OV_Pos)/*!< CSR_PHY PHY_RX_MAN_SET: RGW_RF_RX_CH_SW_OV Mask */
#define CSR_PHY_PHY_RX_MAN_SET_RO_HEADER_Pos  16                                                      /*!< CSR_PHY PHY_RX_MAN_SET: RO_HEADER Position */
#define CSR_PHY_PHY_RX_MAN_SET_RO_HEADER_Msk  (0x0000ffffUL << CSR_PHY_PHY_RX_MAN_SET_RO_HEADER_Pos)  /*!< CSR_PHY PHY_RX_MAN_SET: RO_HEADER Mask  */

/* -----------------------------  CSR_PHY_PHY_ACC_COR  ---------------------------- */
#define CSR_PHY_PHY_ACC_COR_RGW_ADDR_COR_TH_Pos 0                                                     /*!< CSR_PHY PHY_ACC_COR: RGW_ADDR_COR_TH Position */
#define CSR_PHY_PHY_ACC_COR_RGW_ADDR_COR_TH_Msk (0x07UL << CSR_PHY_PHY_ACC_COR_RGW_ADDR_COR_TH_Pos)   /*!< CSR_PHY PHY_ACC_COR: RGW_ADDR_COR_TH Mask */
#define CSR_PHY_PHY_ACC_COR_RGW_ADDR_COR_DET_MAX_Pos 4                                                /*!< CSR_PHY PHY_ACC_COR: RGW_ADDR_COR_DET_MAX Position */
#define CSR_PHY_PHY_ACC_COR_RGW_ADDR_COR_DET_MAX_Msk (0x0fUL << CSR_PHY_PHY_ACC_COR_RGW_ADDR_COR_DET_MAX_Pos)/*!< CSR_PHY PHY_ACC_COR: RGW_ADDR_COR_DET_MAX Mask */
#define CSR_PHY_PHY_ACC_COR_RGW_ADDR_COR_MAX_Pos 8                                                    /*!< CSR_PHY PHY_ACC_COR: RGW_ADDR_COR_MAX Position */
#define CSR_PHY_PHY_ACC_COR_RGW_ADDR_COR_MAX_Msk (0x0fUL << CSR_PHY_PHY_ACC_COR_RGW_ADDR_COR_MAX_Pos) /*!< CSR_PHY PHY_ACC_COR: RGW_ADDR_COR_MAX Mask */
#define CSR_PHY_PHY_ACC_COR_RGW_ACC_COR_IN_TH_Pos 12                                                  /*!< CSR_PHY PHY_ACC_COR: RGW_ACC_COR_IN_TH Position */
#define CSR_PHY_PHY_ACC_COR_RGW_ACC_COR_IN_TH_Msk (0x000000ffUL << CSR_PHY_PHY_ACC_COR_RGW_ACC_COR_IN_TH_Pos)/*!< CSR_PHY PHY_ACC_COR: RGW_ACC_COR_IN_TH Mask */
#define CSR_PHY_PHY_ACC_COR_RGW_ACC_COR_BITS_Pos 20                                                   /*!< CSR_PHY PHY_ACC_COR: RGW_ACC_COR_BITS Position */
#define CSR_PHY_PHY_ACC_COR_RGW_ACC_COR_BITS_Msk (0x3fUL << CSR_PHY_PHY_ACC_COR_RGW_ACC_COR_BITS_Pos) /*!< CSR_PHY PHY_ACC_COR: RGW_ACC_COR_BITS Mask */
#define CSR_PHY_PHY_ACC_COR_RGW_ADDR_COR_TH_4_Pos 29                                                  /*!< CSR_PHY PHY_ACC_COR: RGW_ADDR_COR_TH_4 Position */
#define CSR_PHY_PHY_ACC_COR_RGW_ADDR_COR_TH_4_Msk (0x07UL << CSR_PHY_PHY_ACC_COR_RGW_ADDR_COR_TH_4_Pos)/*!< CSR_PHY PHY_ACC_COR: RGW_ADDR_COR_TH_4 Mask */

/* ---------------------------  CSR_PHY_PHY_TX_DONE_CNT  -------------------------- */
#define CSR_PHY_PHY_TX_DONE_CNT_RO_TX_MOD_CNT_Pos 0                                                   /*!< CSR_PHY PHY_TX_DONE_CNT: RO_TX_MOD_CNT Position */
#define CSR_PHY_PHY_TX_DONE_CNT_RO_TX_MOD_CNT_Msk (0x00007fffUL << CSR_PHY_PHY_TX_DONE_CNT_RO_TX_MOD_CNT_Pos)/*!< CSR_PHY PHY_TX_DONE_CNT: RO_TX_MOD_CNT Mask */
#define CSR_PHY_PHY_TX_DONE_CNT_RGW_TX_MOD_CNT_EN_Pos 15                                              /*!< CSR_PHY PHY_TX_DONE_CNT: RGW_TX_MOD_CNT_EN Position */
#define CSR_PHY_PHY_TX_DONE_CNT_RGW_TX_MOD_CNT_EN_Msk (0x01UL << CSR_PHY_PHY_TX_DONE_CNT_RGW_TX_MOD_CNT_EN_Pos)/*!< CSR_PHY PHY_TX_DONE_CNT: RGW_TX_MOD_CNT_EN Mask */
#define CSR_PHY_PHY_TX_DONE_CNT_RO_TX_ASM_CNT_Pos 16                                                  /*!< CSR_PHY PHY_TX_DONE_CNT: RO_TX_ASM_CNT Position */
#define CSR_PHY_PHY_TX_DONE_CNT_RO_TX_ASM_CNT_Msk (0x00007fffUL << CSR_PHY_PHY_TX_DONE_CNT_RO_TX_ASM_CNT_Pos)/*!< CSR_PHY PHY_TX_DONE_CNT: RO_TX_ASM_CNT Mask */
#define CSR_PHY_PHY_TX_DONE_CNT_RGW_TX_ASM_CNT_EN_Pos 31                                              /*!< CSR_PHY PHY_TX_DONE_CNT: RGW_TX_ASM_CNT_EN Position */
#define CSR_PHY_PHY_TX_DONE_CNT_RGW_TX_ASM_CNT_EN_Msk (0x01UL << CSR_PHY_PHY_TX_DONE_CNT_RGW_TX_ASM_CNT_EN_Pos)/*!< CSR_PHY PHY_TX_DONE_CNT: RGW_TX_ASM_CNT_EN Mask */

/* -----------------------------  CSR_PHY_PHY_BER_CNT  ---------------------------- */
#define CSR_PHY_PHY_BER_CNT_RO_RX_BER_CNT_Pos 0                                                       /*!< CSR_PHY PHY_BER_CNT: RO_RX_BER_CNT Position */
#define CSR_PHY_PHY_BER_CNT_RO_RX_BER_CNT_Msk (0xffffffffUL << CSR_PHY_PHY_BER_CNT_RO_RX_BER_CNT_Pos) /*!< CSR_PHY PHY_BER_CNT: RO_RX_BER_CNT Mask */

/* ------------------------------  CSR_PHY_PHY_TBUS  ------------------------------ */
#define CSR_PHY_PHY_TBUS_RGW_TBUS_SEL_Pos     0                                                       /*!< CSR_PHY PHY_TBUS: RGW_TBUS_SEL Position */
#define CSR_PHY_PHY_TBUS_RGW_TBUS_SEL_Msk     (0x07UL << CSR_PHY_PHY_TBUS_RGW_TBUS_SEL_Pos)           /*!< CSR_PHY PHY_TBUS: RGW_TBUS_SEL Mask     */

/* --------------------------  CSR_PHY_PHY_RX_SPACE_CNT  -------------------------- */
#define CSR_PHY_PHY_RX_SPACE_CNT_RGW_RX_SPACE_CNT_LMT_Pos 0                                           /*!< CSR_PHY PHY_RX_SPACE_CNT: RGW_RX_SPACE_CNT_LMT Position */
#define CSR_PHY_PHY_RX_SPACE_CNT_RGW_RX_SPACE_CNT_LMT_Msk (0x0000ffffUL << CSR_PHY_PHY_RX_SPACE_CNT_RGW_RX_SPACE_CNT_LMT_Pos)/*!< CSR_PHY PHY_RX_SPACE_CNT: RGW_RX_SPACE_CNT_LMT Mask */
#define CSR_PHY_PHY_RX_SPACE_CNT_RO_RX_LOST_CNT_Pos 16                                                /*!< CSR_PHY PHY_RX_SPACE_CNT: RO_RX_LOST_CNT Position */
#define CSR_PHY_PHY_RX_SPACE_CNT_RO_RX_LOST_CNT_Msk (0x0fUL << CSR_PHY_PHY_RX_SPACE_CNT_RO_RX_LOST_CNT_Pos)/*!< CSR_PHY PHY_RX_SPACE_CNT: RO_RX_LOST_CNT Mask */
#define CSR_PHY_PHY_RX_SPACE_CNT_RGW_SPACE_CNT_EN_Pos 31                                              /*!< CSR_PHY PHY_RX_SPACE_CNT: RGW_SPACE_CNT_EN Position */
#define CSR_PHY_PHY_RX_SPACE_CNT_RGW_SPACE_CNT_EN_Msk (0x01UL << CSR_PHY_PHY_RX_SPACE_CNT_RGW_SPACE_CNT_EN_Pos)/*!< CSR_PHY PHY_RX_SPACE_CNT: RGW_SPACE_CNT_EN Mask */

/* ----------------------------  CSR_PHY_PHY_RX_DET_RO  --------------------------- */
#define CSR_PHY_PHY_RX_DET_RO_RO_RX_SPACE_CNT_Pos 16                                                  /*!< CSR_PHY PHY_RX_DET_RO: RO_RX_SPACE_CNT Position */
#define CSR_PHY_PHY_RX_DET_RO_RO_RX_SPACE_CNT_Msk (0x0000ffffUL << CSR_PHY_PHY_RX_DET_RO_RO_RX_SPACE_CNT_Pos)/*!< CSR_PHY PHY_RX_DET_RO: RO_RX_SPACE_CNT Mask */

/* --------------------------  CSR_PHY_PHY_CFO_INIT_SET  -------------------------- */
#define CSR_PHY_PHY_CFO_INIT_SET_RGW_FM_DEMOD_DC_INIT_Pos 0                                           /*!< CSR_PHY PHY_CFO_INIT_SET: RGW_FM_DEMOD_DC_INIT Position */
#define CSR_PHY_PHY_CFO_INIT_SET_RGW_FM_DEMOD_DC_INIT_Msk (0x000003ffUL << CSR_PHY_PHY_CFO_INIT_SET_RGW_FM_DEMOD_DC_INIT_Pos)/*!< CSR_PHY PHY_CFO_INIT_SET: RGW_FM_DEMOD_DC_INIT Mask */
#define CSR_PHY_PHY_CFO_INIT_SET_RGW_ROT_DC_INIT_Pos 12                                               /*!< CSR_PHY PHY_CFO_INIT_SET: RGW_ROT_DC_INIT Position */
#define CSR_PHY_PHY_CFO_INIT_SET_RGW_ROT_DC_INIT_Msk (0x000003ffUL << CSR_PHY_PHY_CFO_INIT_SET_RGW_ROT_DC_INIT_Pos)/*!< CSR_PHY PHY_CFO_INIT_SET: RGW_ROT_DC_INIT Mask */

/* -----------------------------  CSR_PHY_PHY_CFO_EST  ---------------------------- */
#define CSR_PHY_PHY_CFO_EST_RO_PREAMBLE_DC_EST_Pos 0                                                  /*!< CSR_PHY PHY_CFO_EST: RO_PREAMBLE_DC_EST Position */
#define CSR_PHY_PHY_CFO_EST_RO_PREAMBLE_DC_EST_Msk (0x000003ffUL << CSR_PHY_PHY_CFO_EST_RO_PREAMBLE_DC_EST_Pos)/*!< CSR_PHY PHY_CFO_EST: RO_PREAMBLE_DC_EST Mask */
#define CSR_PHY_PHY_CFO_EST_RO_ROT_DC_EST_Pos 12                                                      /*!< CSR_PHY PHY_CFO_EST: RO_ROT_DC_EST Position */
#define CSR_PHY_PHY_CFO_EST_RO_ROT_DC_EST_Msk (0x000003ffUL << CSR_PHY_PHY_CFO_EST_RO_ROT_DC_EST_Pos) /*!< CSR_PHY PHY_CFO_EST: RO_ROT_DC_EST Mask */
#define CSR_PHY_PHY_CFO_EST_RGW_ROT_DC_RO_EN_Pos 29                                                   /*!< CSR_PHY PHY_CFO_EST: RGW_ROT_DC_RO_EN Position */
#define CSR_PHY_PHY_CFO_EST_RGW_ROT_DC_RO_EN_Msk (0x01UL << CSR_PHY_PHY_CFO_EST_RGW_ROT_DC_RO_EN_Pos) /*!< CSR_PHY PHY_CFO_EST: RGW_ROT_DC_RO_EN Mask */
#define CSR_PHY_PHY_CFO_EST_RGW_PREAMBLE_DC_RO_SEL_Pos 30                                             /*!< CSR_PHY PHY_CFO_EST: RGW_PREAMBLE_DC_RO_SEL Position */
#define CSR_PHY_PHY_CFO_EST_RGW_PREAMBLE_DC_RO_SEL_Msk (0x01UL << CSR_PHY_PHY_CFO_EST_RGW_PREAMBLE_DC_RO_SEL_Pos)/*!< CSR_PHY PHY_CFO_EST: RGW_PREAMBLE_DC_RO_SEL Mask */
#define CSR_PHY_PHY_CFO_EST_RGW_PREAMBLE_DC_RO_EN_Pos 31                                              /*!< CSR_PHY PHY_CFO_EST: RGW_PREAMBLE_DC_RO_EN Position */
#define CSR_PHY_PHY_CFO_EST_RGW_PREAMBLE_DC_RO_EN_Msk (0x01UL << CSR_PHY_PHY_CFO_EST_RGW_PREAMBLE_DC_RO_EN_Pos)/*!< CSR_PHY PHY_CFO_EST: RGW_PREAMBLE_DC_RO_EN Mask */

/* ----------------------------  CSR_PHY_RX_DEMOD_DET  ---------------------------- */
#define CSR_PHY_RX_DEMOD_DET_RGW_DET_FLAG_EN_Pos 0                                                    /*!< CSR_PHY RX_DEMOD_DET: RGW_DET_FLAG_EN Position */
#define CSR_PHY_RX_DEMOD_DET_RGW_DET_FLAG_EN_Msk (0x01UL << CSR_PHY_RX_DEMOD_DET_RGW_DET_FLAG_EN_Pos) /*!< CSR_PHY RX_DEMOD_DET: RGW_DET_FLAG_EN Mask */

/* -------------------------  CSR_PHY_RX_DEMOD_SWITH_INIT  ------------------------ */
#define CSR_PHY_RX_DEMOD_SWITH_INIT_RGW_CNT_SWITCH_INIT_1M_Pos 24                                     /*!< CSR_PHY RX_DEMOD_SWITH_INIT: RGW_CNT_SWITCH_INIT_1M Position */
#define CSR_PHY_RX_DEMOD_SWITH_INIT_RGW_CNT_SWITCH_INIT_1M_Msk (0x1fUL << CSR_PHY_RX_DEMOD_SWITH_INIT_RGW_CNT_SWITCH_INIT_1M_Pos)/*!< CSR_PHY RX_DEMOD_SWITH_INIT: RGW_CNT_SWITCH_INIT_1M Mask */

/* --------------------------  CSR_PHY_RX_PREAMBLE_TH_LO  ------------------------- */
#define CSR_PHY_RX_PREAMBLE_TH_LO_RGW_PRBL_METRIC_TH_LO_1M_Pos 24                                     /*!< CSR_PHY RX_PREAMBLE_TH_LO: RGW_PRBL_METRIC_TH_LO_1M Position */
#define CSR_PHY_RX_PREAMBLE_TH_LO_RGW_PRBL_METRIC_TH_LO_1M_Msk (0x000000ffUL << CSR_PHY_RX_PREAMBLE_TH_LO_RGW_PRBL_METRIC_TH_LO_1M_Pos)/*!< CSR_PHY RX_PREAMBLE_TH_LO: RGW_PRBL_METRIC_TH_LO_1M Mask */

/* --------------------------  CSR_PHY_RX_PREAMBLE_TH_HI  ------------------------- */
#define CSR_PHY_RX_PREAMBLE_TH_HI_RGW_PRBL_METRIC_TH_HI_1M_Pos 24                                     /*!< CSR_PHY RX_PREAMBLE_TH_HI: RGW_PRBL_METRIC_TH_HI_1M Position */
#define CSR_PHY_RX_PREAMBLE_TH_HI_RGW_PRBL_METRIC_TH_HI_1M_Msk (0x000000ffUL << CSR_PHY_RX_PREAMBLE_TH_HI_RGW_PRBL_METRIC_TH_HI_1M_Pos)/*!< CSR_PHY RX_PREAMBLE_TH_HI: RGW_PRBL_METRIC_TH_HI_1M Mask */

/* ------------------------------  CSR_PHY_RX_TCU_DC  ----------------------------- */
#define CSR_PHY_RX_TCU_DC_RGW_TCU_DC_UP_CNT_LMT_Pos 0                                                 /*!< CSR_PHY RX_TCU_DC: RGW_TCU_DC_UP_CNT_LMT Position */
#define CSR_PHY_RX_TCU_DC_RGW_TCU_DC_UP_CNT_LMT_Msk (0x07UL << CSR_PHY_RX_TCU_DC_RGW_TCU_DC_UP_CNT_LMT_Pos)/*!< CSR_PHY RX_TCU_DC: RGW_TCU_DC_UP_CNT_LMT Mask */

/* ----------------------------  CSR_PHY_ACC_ADDR_DET  ---------------------------- */
#define CSR_PHY_ACC_ADDR_DET_RGW_ACC_DET_EN_Pos 0                                                     /*!< CSR_PHY ACC_ADDR_DET: RGW_ACC_DET_EN Position */
#define CSR_PHY_ACC_ADDR_DET_RGW_ACC_DET_EN_Msk (0x01UL << CSR_PHY_ACC_ADDR_DET_RGW_ACC_DET_EN_Pos)   /*!< CSR_PHY ACC_ADDR_DET: RGW_ACC_DET_EN Mask */
#define CSR_PHY_ACC_ADDR_DET_RGW_ACC_DET_EN_AUTO_Pos 1                                                /*!< CSR_PHY ACC_ADDR_DET: RGW_ACC_DET_EN_AUTO Position */
#define CSR_PHY_ACC_ADDR_DET_RGW_ACC_DET_EN_AUTO_Msk (0x01UL << CSR_PHY_ACC_ADDR_DET_RGW_ACC_DET_EN_AUTO_Pos)/*!< CSR_PHY ACC_ADDR_DET: RGW_ACC_DET_EN_AUTO Mask */
#define CSR_PHY_ACC_ADDR_DET_RGW_ACC_DET_SLICE_TO_Pos 16                                              /*!< CSR_PHY ACC_ADDR_DET: RGW_ACC_DET_SLICE_TO Position */
#define CSR_PHY_ACC_ADDR_DET_RGW_ACC_DET_SLICE_TO_Msk (0x1fUL << CSR_PHY_ACC_ADDR_DET_RGW_ACC_DET_SLICE_TO_Pos)/*!< CSR_PHY ACC_ADDR_DET: RGW_ACC_DET_SLICE_TO Mask */
#define CSR_PHY_ACC_ADDR_DET_RGW_ACC_BND_BIT_Pos 23                                                   /*!< CSR_PHY ACC_ADDR_DET: RGW_ACC_BND_BIT Position */
#define CSR_PHY_ACC_ADDR_DET_RGW_ACC_BND_BIT_Msk (0x01UL << CSR_PHY_ACC_ADDR_DET_RGW_ACC_BND_BIT_Pos) /*!< CSR_PHY ACC_ADDR_DET: RGW_ACC_BND_BIT Mask */
#define CSR_PHY_ACC_ADDR_DET_RGW_ACC_BND_IDX_Pos 24                                                   /*!< CSR_PHY ACC_ADDR_DET: RGW_ACC_BND_IDX Position */
#define CSR_PHY_ACC_ADDR_DET_RGW_ACC_BND_IDX_Msk (0x3fUL << CSR_PHY_ACC_ADDR_DET_RGW_ACC_BND_IDX_Pos) /*!< CSR_PHY ACC_ADDR_DET: RGW_ACC_BND_IDX Mask */
#define CSR_PHY_ACC_ADDR_DET_RGW_ACC_BND_MOD_Pos 30                                                   /*!< CSR_PHY ACC_ADDR_DET: RGW_ACC_BND_MOD Position */
#define CSR_PHY_ACC_ADDR_DET_RGW_ACC_BND_MOD_Msk (0x01UL << CSR_PHY_ACC_ADDR_DET_RGW_ACC_BND_MOD_Pos) /*!< CSR_PHY ACC_ADDR_DET: RGW_ACC_BND_MOD Mask */
#define CSR_PHY_ACC_ADDR_DET_RGW_ACC_CHK_EN_Pos 31                                                    /*!< CSR_PHY ACC_ADDR_DET: RGW_ACC_CHK_EN Position */
#define CSR_PHY_ACC_ADDR_DET_RGW_ACC_CHK_EN_Msk (0x01UL << CSR_PHY_ACC_ADDR_DET_RGW_ACC_CHK_EN_Pos)   /*!< CSR_PHY ACC_ADDR_DET: RGW_ACC_CHK_EN Mask */

/* ----------------------------  CSR_PHY_PHY_STATE_RO  ---------------------------- */
#define CSR_PHY_PHY_STATE_RO_RO_RX_CSTATE_Pos 0                                                       /*!< CSR_PHY PHY_STATE_RO: RO_RX_CSTATE Position */
#define CSR_PHY_PHY_STATE_RO_RO_RX_CSTATE_Msk (0x0fUL << CSR_PHY_PHY_STATE_RO_RO_RX_CSTATE_Pos)       /*!< CSR_PHY PHY_STATE_RO: RO_RX_CSTATE Mask */
#define CSR_PHY_PHY_STATE_RO_RO_TX_CSTATE_Pos 4                                                       /*!< CSR_PHY PHY_STATE_RO: RO_TX_CSTATE Position */
#define CSR_PHY_PHY_STATE_RO_RO_TX_CSTATE_Msk (0x07UL << CSR_PHY_PHY_STATE_RO_RO_TX_CSTATE_Pos)       /*!< CSR_PHY PHY_STATE_RO: RO_TX_CSTATE Mask */
#define CSR_PHY_PHY_STATE_RO_RGW_RX_CSTATE_RO_EN_Pos 30                                               /*!< CSR_PHY PHY_STATE_RO: RGW_RX_CSTATE_RO_EN Position */
#define CSR_PHY_PHY_STATE_RO_RGW_RX_CSTATE_RO_EN_Msk (0x01UL << CSR_PHY_PHY_STATE_RO_RGW_RX_CSTATE_RO_EN_Pos)/*!< CSR_PHY PHY_STATE_RO: RGW_RX_CSTATE_RO_EN Mask */
#define CSR_PHY_PHY_STATE_RO_RGW_TX_CSTATE_RO_EN_Pos 31                                               /*!< CSR_PHY PHY_STATE_RO: RGW_TX_CSTATE_RO_EN Position */
#define CSR_PHY_PHY_STATE_RO_RGW_TX_CSTATE_RO_EN_Msk (0x01UL << CSR_PHY_PHY_STATE_RO_RGW_TX_CSTATE_RO_EN_Pos)/*!< CSR_PHY PHY_STATE_RO: RGW_TX_CSTATE_RO_EN Mask */

/* -----------------------  CSR_PHY_PHY_ENABLE_COUNTER_RO_1  ---------------------- */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RO_RF_TX_ENA_CNT_Pos 0                                        /*!< CSR_PHY PHY_ENABLE_COUNTER_RO_1: RO_RF_TX_ENA_CNT Position */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RO_RF_TX_ENA_CNT_Msk (0x7fUL << CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RO_RF_TX_ENA_CNT_Pos)/*!< CSR_PHY PHY_ENABLE_COUNTER_RO_1: RO_RF_TX_ENA_CNT Mask */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RGW_RF_TX_ENA_CNT_EN_Pos 7                                    /*!< CSR_PHY PHY_ENABLE_COUNTER_RO_1: RGW_RF_TX_ENA_CNT_EN Position */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RGW_RF_TX_ENA_CNT_EN_Msk (0x01UL << CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RGW_RF_TX_ENA_CNT_EN_Pos)/*!< CSR_PHY PHY_ENABLE_COUNTER_RO_1: RGW_RF_TX_ENA_CNT_EN Mask */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RO_PHY_TX_ENA_CNT_Pos 8                                       /*!< CSR_PHY PHY_ENABLE_COUNTER_RO_1: RO_PHY_TX_ENA_CNT Position */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RO_PHY_TX_ENA_CNT_Msk (0x7fUL << CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RO_PHY_TX_ENA_CNT_Pos)/*!< CSR_PHY PHY_ENABLE_COUNTER_RO_1: RO_PHY_TX_ENA_CNT Mask */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RGW_PHY_TX_ENA_CNT_EN_Pos 15                                  /*!< CSR_PHY PHY_ENABLE_COUNTER_RO_1: RGW_PHY_TX_ENA_CNT_EN Position */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RGW_PHY_TX_ENA_CNT_EN_Msk (0x01UL << CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RGW_PHY_TX_ENA_CNT_EN_Pos)/*!< CSR_PHY PHY_ENABLE_COUNTER_RO_1: RGW_PHY_TX_ENA_CNT_EN Mask */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RO_RF_RX_ENA_CNT_Pos 16                                       /*!< CSR_PHY PHY_ENABLE_COUNTER_RO_1: RO_RF_RX_ENA_CNT Position */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RO_RF_RX_ENA_CNT_Msk (0x7fUL << CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RO_RF_RX_ENA_CNT_Pos)/*!< CSR_PHY PHY_ENABLE_COUNTER_RO_1: RO_RF_RX_ENA_CNT Mask */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RGW_RF_RX_ENA_CNT_EN_Pos 23                                   /*!< CSR_PHY PHY_ENABLE_COUNTER_RO_1: RGW_RF_RX_ENA_CNT_EN Position */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RGW_RF_RX_ENA_CNT_EN_Msk (0x01UL << CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RGW_RF_RX_ENA_CNT_EN_Pos)/*!< CSR_PHY PHY_ENABLE_COUNTER_RO_1: RGW_RF_RX_ENA_CNT_EN Mask */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RO_PHY_RX_ENA_CNT_Pos 24                                      /*!< CSR_PHY PHY_ENABLE_COUNTER_RO_1: RO_PHY_RX_ENA_CNT Position */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RO_PHY_RX_ENA_CNT_Msk (0x7fUL << CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RO_PHY_RX_ENA_CNT_Pos)/*!< CSR_PHY PHY_ENABLE_COUNTER_RO_1: RO_PHY_RX_ENA_CNT Mask */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RGW_PHY_RX_ENA_CNT_EN_Pos 31                                  /*!< CSR_PHY PHY_ENABLE_COUNTER_RO_1: RGW_PHY_RX_ENA_CNT_EN Position */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RGW_PHY_RX_ENA_CNT_EN_Msk (0x01UL << CSR_PHY_PHY_ENABLE_COUNTER_RO_1_RGW_PHY_RX_ENA_CNT_EN_Pos)/*!< CSR_PHY PHY_ENABLE_COUNTER_RO_1: RGW_PHY_RX_ENA_CNT_EN Mask */

/* -----------------------  CSR_PHY_PHY_ENABLE_COUNTER_RO_2  ---------------------- */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_2_RO_PHY_TX_D_RDY_CNT_Pos 0                                     /*!< CSR_PHY PHY_ENABLE_COUNTER_RO_2: RO_PHY_TX_D_RDY_CNT Position */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_2_RO_PHY_TX_D_RDY_CNT_Msk (0x00007fffUL << CSR_PHY_PHY_ENABLE_COUNTER_RO_2_RO_PHY_TX_D_RDY_CNT_Pos)/*!< CSR_PHY PHY_ENABLE_COUNTER_RO_2: RO_PHY_TX_D_RDY_CNT Mask */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_2_RGW_PHY_TX_D_RDY_CNT_EN_Pos 15                                /*!< CSR_PHY PHY_ENABLE_COUNTER_RO_2: RGW_PHY_TX_D_RDY_CNT_EN Position */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_2_RGW_PHY_TX_D_RDY_CNT_EN_Msk (0x01UL << CSR_PHY_PHY_ENABLE_COUNTER_RO_2_RGW_PHY_TX_D_RDY_CNT_EN_Pos)/*!< CSR_PHY PHY_ENABLE_COUNTER_RO_2: RGW_PHY_TX_D_RDY_CNT_EN Mask */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_2_RO_PHY_RX_D_ACK_CNT_Pos 16                                    /*!< CSR_PHY PHY_ENABLE_COUNTER_RO_2: RO_PHY_RX_D_ACK_CNT Position */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_2_RO_PHY_RX_D_ACK_CNT_Msk (0x00007fffUL << CSR_PHY_PHY_ENABLE_COUNTER_RO_2_RO_PHY_RX_D_ACK_CNT_Pos)/*!< CSR_PHY PHY_ENABLE_COUNTER_RO_2: RO_PHY_RX_D_ACK_CNT Mask */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_2_RGW_PHY_RX_D_ACK_CNT_EN_Pos 31                                /*!< CSR_PHY PHY_ENABLE_COUNTER_RO_2: RGW_PHY_RX_D_ACK_CNT_EN Position */
#define CSR_PHY_PHY_ENABLE_COUNTER_RO_2_RGW_PHY_RX_D_ACK_CNT_EN_Msk (0x01UL << CSR_PHY_PHY_ENABLE_COUNTER_RO_2_RGW_PHY_RX_D_ACK_CNT_EN_Pos)/*!< CSR_PHY PHY_ENABLE_COUNTER_RO_2: RGW_PHY_RX_D_ACK_CNT_EN Mask */

/* ---------------------------  CSR_PHY_STATE_COUNTER_1  -------------------------- */
#define CSR_PHY_STATE_COUNTER_1_RO_PHY_STCNT_OUT_1_Pos 0                                              /*!< CSR_PHY STATE_COUNTER_1: RO_PHY_STCNT_OUT_1 Position */
#define CSR_PHY_STATE_COUNTER_1_RO_PHY_STCNT_OUT_1_Msk (0x0000ffffUL << CSR_PHY_STATE_COUNTER_1_RO_PHY_STCNT_OUT_1_Pos)/*!< CSR_PHY STATE_COUNTER_1: RO_PHY_STCNT_OUT_1 Mask */
#define CSR_PHY_STATE_COUNTER_1_RGW_PHY_STCNT_SEL_1_Pos 16                                            /*!< CSR_PHY STATE_COUNTER_1: RGW_PHY_STCNT_SEL_1 Position */
#define CSR_PHY_STATE_COUNTER_1_RGW_PHY_STCNT_SEL_1_Msk (0x1fUL << CSR_PHY_STATE_COUNTER_1_RGW_PHY_STCNT_SEL_1_Pos)/*!< CSR_PHY STATE_COUNTER_1: RGW_PHY_STCNT_SEL_1 Mask */
#define CSR_PHY_STATE_COUNTER_1_RGW_PHY_STCNT_STOP_1_Pos 29                                           /*!< CSR_PHY STATE_COUNTER_1: RGW_PHY_STCNT_STOP_1 Position */
#define CSR_PHY_STATE_COUNTER_1_RGW_PHY_STCNT_STOP_1_Msk (0x01UL << CSR_PHY_STATE_COUNTER_1_RGW_PHY_STCNT_STOP_1_Pos)/*!< CSR_PHY STATE_COUNTER_1: RGW_PHY_STCNT_STOP_1 Mask */
#define CSR_PHY_STATE_COUNTER_1_RGW_PHY_STCNT_EN_1_Pos 30                                             /*!< CSR_PHY STATE_COUNTER_1: RGW_PHY_STCNT_EN_1 Position */
#define CSR_PHY_STATE_COUNTER_1_RGW_PHY_STCNT_EN_1_Msk (0x01UL << CSR_PHY_STATE_COUNTER_1_RGW_PHY_STCNT_EN_1_Pos)/*!< CSR_PHY STATE_COUNTER_1: RGW_PHY_STCNT_EN_1 Mask */
#define CSR_PHY_STATE_COUNTER_1_RGW_PHY_STCNT_ALL_EN_Pos 31                                           /*!< CSR_PHY STATE_COUNTER_1: RGW_PHY_STCNT_ALL_EN Position */
#define CSR_PHY_STATE_COUNTER_1_RGW_PHY_STCNT_ALL_EN_Msk (0x01UL << CSR_PHY_STATE_COUNTER_1_RGW_PHY_STCNT_ALL_EN_Pos)/*!< CSR_PHY STATE_COUNTER_1: RGW_PHY_STCNT_ALL_EN Mask */

/* ---------------------------  CSR_PHY_STATE_COUNTER_2  -------------------------- */
#define CSR_PHY_STATE_COUNTER_2_RO_PHY_STCNT_OUT_2_Pos 0                                              /*!< CSR_PHY STATE_COUNTER_2: RO_PHY_STCNT_OUT_2 Position */
#define CSR_PHY_STATE_COUNTER_2_RO_PHY_STCNT_OUT_2_Msk (0x0000ffffUL << CSR_PHY_STATE_COUNTER_2_RO_PHY_STCNT_OUT_2_Pos)/*!< CSR_PHY STATE_COUNTER_2: RO_PHY_STCNT_OUT_2 Mask */
#define CSR_PHY_STATE_COUNTER_2_RGW_PHY_STCNT_SEL_2_Pos 16                                            /*!< CSR_PHY STATE_COUNTER_2: RGW_PHY_STCNT_SEL_2 Position */
#define CSR_PHY_STATE_COUNTER_2_RGW_PHY_STCNT_SEL_2_Msk (0x1fUL << CSR_PHY_STATE_COUNTER_2_RGW_PHY_STCNT_SEL_2_Pos)/*!< CSR_PHY STATE_COUNTER_2: RGW_PHY_STCNT_SEL_2 Mask */
#define CSR_PHY_STATE_COUNTER_2_RGW_PHY_STCNT_STOP_2_Pos 29                                           /*!< CSR_PHY STATE_COUNTER_2: RGW_PHY_STCNT_STOP_2 Position */
#define CSR_PHY_STATE_COUNTER_2_RGW_PHY_STCNT_STOP_2_Msk (0x01UL << CSR_PHY_STATE_COUNTER_2_RGW_PHY_STCNT_STOP_2_Pos)/*!< CSR_PHY STATE_COUNTER_2: RGW_PHY_STCNT_STOP_2 Mask */
#define CSR_PHY_STATE_COUNTER_2_RGW_PHY_STCNT_EN_2_Pos 30                                             /*!< CSR_PHY STATE_COUNTER_2: RGW_PHY_STCNT_EN_2 Position */
#define CSR_PHY_STATE_COUNTER_2_RGW_PHY_STCNT_EN_2_Msk (0x01UL << CSR_PHY_STATE_COUNTER_2_RGW_PHY_STCNT_EN_2_Pos)/*!< CSR_PHY STATE_COUNTER_2: RGW_PHY_STCNT_EN_2 Mask */

/* ---------------------------  CSR_PHY_STATE_COUNTER_3  -------------------------- */
#define CSR_PHY_STATE_COUNTER_3_RO_PHY_STCNT_OUT_3_Pos 0                                              /*!< CSR_PHY STATE_COUNTER_3: RO_PHY_STCNT_OUT_3 Position */
#define CSR_PHY_STATE_COUNTER_3_RO_PHY_STCNT_OUT_3_Msk (0x0000ffffUL << CSR_PHY_STATE_COUNTER_3_RO_PHY_STCNT_OUT_3_Pos)/*!< CSR_PHY STATE_COUNTER_3: RO_PHY_STCNT_OUT_3 Mask */
#define CSR_PHY_STATE_COUNTER_3_RGW_PHY_STCNT_SEL_3_Pos 16                                            /*!< CSR_PHY STATE_COUNTER_3: RGW_PHY_STCNT_SEL_3 Position */
#define CSR_PHY_STATE_COUNTER_3_RGW_PHY_STCNT_SEL_3_Msk (0x1fUL << CSR_PHY_STATE_COUNTER_3_RGW_PHY_STCNT_SEL_3_Pos)/*!< CSR_PHY STATE_COUNTER_3: RGW_PHY_STCNT_SEL_3 Mask */
#define CSR_PHY_STATE_COUNTER_3_RGW_PHY_STCNT_STOP_3_Pos 29                                           /*!< CSR_PHY STATE_COUNTER_3: RGW_PHY_STCNT_STOP_3 Position */
#define CSR_PHY_STATE_COUNTER_3_RGW_PHY_STCNT_STOP_3_Msk (0x01UL << CSR_PHY_STATE_COUNTER_3_RGW_PHY_STCNT_STOP_3_Pos)/*!< CSR_PHY STATE_COUNTER_3: RGW_PHY_STCNT_STOP_3 Mask */
#define CSR_PHY_STATE_COUNTER_3_RGW_PHY_STCNT_EN_3_Pos 30                                             /*!< CSR_PHY STATE_COUNTER_3: RGW_PHY_STCNT_EN_3 Position */
#define CSR_PHY_STATE_COUNTER_3_RGW_PHY_STCNT_EN_3_Msk (0x01UL << CSR_PHY_STATE_COUNTER_3_RGW_PHY_STCNT_EN_3_Pos)/*!< CSR_PHY STATE_COUNTER_3: RGW_PHY_STCNT_EN_3 Mask */

/* ---------------------------  CSR_PHY_STATE_COUNTER_4  -------------------------- */
#define CSR_PHY_STATE_COUNTER_4_RO_PHY_STCNT_OUT_4_Pos 0                                              /*!< CSR_PHY STATE_COUNTER_4: RO_PHY_STCNT_OUT_4 Position */
#define CSR_PHY_STATE_COUNTER_4_RO_PHY_STCNT_OUT_4_Msk (0x0000ffffUL << CSR_PHY_STATE_COUNTER_4_RO_PHY_STCNT_OUT_4_Pos)/*!< CSR_PHY STATE_COUNTER_4: RO_PHY_STCNT_OUT_4 Mask */
#define CSR_PHY_STATE_COUNTER_4_RGW_PHY_STCNT_SEL_4_Pos 16                                            /*!< CSR_PHY STATE_COUNTER_4: RGW_PHY_STCNT_SEL_4 Position */
#define CSR_PHY_STATE_COUNTER_4_RGW_PHY_STCNT_SEL_4_Msk (0x1fUL << CSR_PHY_STATE_COUNTER_4_RGW_PHY_STCNT_SEL_4_Pos)/*!< CSR_PHY STATE_COUNTER_4: RGW_PHY_STCNT_SEL_4 Mask */
#define CSR_PHY_STATE_COUNTER_4_RGW_PHY_STCNT_STOP_4_Pos 29                                           /*!< CSR_PHY STATE_COUNTER_4: RGW_PHY_STCNT_STOP_4 Position */
#define CSR_PHY_STATE_COUNTER_4_RGW_PHY_STCNT_STOP_4_Msk (0x01UL << CSR_PHY_STATE_COUNTER_4_RGW_PHY_STCNT_STOP_4_Pos)/*!< CSR_PHY STATE_COUNTER_4: RGW_PHY_STCNT_STOP_4 Mask */
#define CSR_PHY_STATE_COUNTER_4_RGW_PHY_STCNT_EN_4_Pos 30                                             /*!< CSR_PHY STATE_COUNTER_4: RGW_PHY_STCNT_EN_4 Position */
#define CSR_PHY_STATE_COUNTER_4_RGW_PHY_STCNT_EN_4_Msk (0x01UL << CSR_PHY_STATE_COUNTER_4_RGW_PHY_STCNT_EN_4_Pos)/*!< CSR_PHY STATE_COUNTER_4: RGW_PHY_STCNT_EN_4 Mask */

/* ----------------------------  CSR_PHY_PHY_ENABLE_RO  --------------------------- */
#define CSR_PHY_PHY_ENABLE_RO_RO_P2RF_TX_ENA_Pos 0                                                    /*!< CSR_PHY PHY_ENABLE_RO: RO_P2RF_TX_ENA Position */
#define CSR_PHY_PHY_ENABLE_RO_RO_P2RF_TX_ENA_Msk (0x01UL << CSR_PHY_PHY_ENABLE_RO_RO_P2RF_TX_ENA_Pos) /*!< CSR_PHY PHY_ENABLE_RO: RO_P2RF_TX_ENA Mask */
#define CSR_PHY_PHY_ENABLE_RO_RO_PHY_RX_STRT_Pos 1                                                    /*!< CSR_PHY PHY_ENABLE_RO: RO_PHY_RX_STRT Position */
#define CSR_PHY_PHY_ENABLE_RO_RO_PHY_RX_STRT_Msk (0x01UL << CSR_PHY_PHY_ENABLE_RO_RO_PHY_RX_STRT_Pos) /*!< CSR_PHY PHY_ENABLE_RO: RO_PHY_RX_STRT Mask */
#define CSR_PHY_PHY_ENABLE_RO_RO_PHY_TX_STRT_Pos 2                                                    /*!< CSR_PHY PHY_ENABLE_RO: RO_PHY_TX_STRT Position */
#define CSR_PHY_PHY_ENABLE_RO_RO_PHY_TX_STRT_Msk (0x01UL << CSR_PHY_PHY_ENABLE_RO_RO_PHY_TX_STRT_Pos) /*!< CSR_PHY PHY_ENABLE_RO: RO_PHY_TX_STRT Mask */
#define CSR_PHY_PHY_ENABLE_RO_RO_P2RF_RX_ENA_Pos 3                                                    /*!< CSR_PHY PHY_ENABLE_RO: RO_P2RF_RX_ENA Position */
#define CSR_PHY_PHY_ENABLE_RO_RO_P2RF_RX_ENA_Msk (0x01UL << CSR_PHY_PHY_ENABLE_RO_RO_P2RF_RX_ENA_Pos) /*!< CSR_PHY PHY_ENABLE_RO: RO_P2RF_RX_ENA Mask */
#define CSR_PHY_PHY_ENABLE_RO_RO_P2RF_TX_CH_SW_Pos 4                                                  /*!< CSR_PHY PHY_ENABLE_RO: RO_P2RF_TX_CH_SW Position */
#define CSR_PHY_PHY_ENABLE_RO_RO_P2RF_TX_CH_SW_Msk (0x01UL << CSR_PHY_PHY_ENABLE_RO_RO_P2RF_TX_CH_SW_Pos)/*!< CSR_PHY PHY_ENABLE_RO: RO_P2RF_TX_CH_SW Mask */
#define CSR_PHY_PHY_ENABLE_RO_RO_P2RF_RX_CH_SW_Pos 5                                                  /*!< CSR_PHY PHY_ENABLE_RO: RO_P2RF_RX_CH_SW Position */
#define CSR_PHY_PHY_ENABLE_RO_RO_P2RF_RX_CH_SW_Msk (0x01UL << CSR_PHY_PHY_ENABLE_RO_RO_P2RF_RX_CH_SW_Pos)/*!< CSR_PHY PHY_ENABLE_RO: RO_P2RF_RX_CH_SW Mask */

/* ----------------------------  CSR_PHY_RX_DEVIATION  ---------------------------- */
#define CSR_PHY_RX_DEVIATION_RO_PHY_RX_DEV_Pos 0                                                      /*!< CSR_PHY RX_DEVIATION: RO_PHY_RX_DEV Position */
#define CSR_PHY_RX_DEVIATION_RO_PHY_RX_DEV_Msk (0x000000ffUL << CSR_PHY_RX_DEVIATION_RO_PHY_RX_DEV_Pos)/*!< CSR_PHY RX_DEVIATION: RO_PHY_RX_DEV Mask */
#define CSR_PHY_RX_DEVIATION_RGW_PHY_RX_DEV_BIT_NO_Pos 8                                              /*!< CSR_PHY RX_DEVIATION: RGW_PHY_RX_DEV_BIT_NO Position */
#define CSR_PHY_RX_DEVIATION_RGW_PHY_RX_DEV_BIT_NO_Msk (0x000007ffUL << CSR_PHY_RX_DEVIATION_RGW_PHY_RX_DEV_BIT_NO_Pos)/*!< CSR_PHY RX_DEVIATION: RGW_PHY_RX_DEV_BIT_NO Mask */
#define CSR_PHY_RX_DEVIATION_RGW_PHY_RX_DEV_ST_Pos 24                                                 /*!< CSR_PHY RX_DEVIATION: RGW_PHY_RX_DEV_ST Position */
#define CSR_PHY_RX_DEVIATION_RGW_PHY_RX_DEV_ST_Msk (0x0fUL << CSR_PHY_RX_DEVIATION_RGW_PHY_RX_DEV_ST_Pos)/*!< CSR_PHY RX_DEVIATION: RGW_PHY_RX_DEV_ST Mask */
#define CSR_PHY_RX_DEVIATION_RGW_PHY_RX_DEV_RO_EN_Pos 31                                              /*!< CSR_PHY RX_DEVIATION: RGW_PHY_RX_DEV_RO_EN Position */
#define CSR_PHY_RX_DEVIATION_RGW_PHY_RX_DEV_RO_EN_Msk (0x01UL << CSR_PHY_RX_DEVIATION_RGW_PHY_RX_DEV_RO_EN_Pos)/*!< CSR_PHY RX_DEVIATION: RGW_PHY_RX_DEV_RO_EN Mask */

/* ----------------------------  CSR_PHY_PHY_FMD_BUF_0  --------------------------- */
#define CSR_PHY_PHY_FMD_BUF_0_RO_PHY_RX_FMD_BUF_Pos 0                                                 /*!< CSR_PHY PHY_FMD_BUF_0: RO_PHY_RX_FMD_BUF Position */
#define CSR_PHY_PHY_FMD_BUF_0_RO_PHY_RX_FMD_BUF_Msk (0x000003ffUL << CSR_PHY_PHY_FMD_BUF_0_RO_PHY_RX_FMD_BUF_Pos)/*!< CSR_PHY PHY_FMD_BUF_0: RO_PHY_RX_FMD_BUF Mask */
#define CSR_PHY_PHY_FMD_BUF_0_RO_PHY_RX_FMD_BUF_ADDR_Pos 10                                           /*!< CSR_PHY PHY_FMD_BUF_0: RO_PHY_RX_FMD_BUF_ADDR Position */
#define CSR_PHY_PHY_FMD_BUF_0_RO_PHY_RX_FMD_BUF_ADDR_Msk (0x3fUL << CSR_PHY_PHY_FMD_BUF_0_RO_PHY_RX_FMD_BUF_ADDR_Pos)/*!< CSR_PHY PHY_FMD_BUF_0: RO_PHY_RX_FMD_BUF_ADDR Mask */
#define CSR_PHY_PHY_FMD_BUF_0_RGW_PHY_RX_FMD_BUF_ADDR_Pos 16                                          /*!< CSR_PHY PHY_FMD_BUF_0: RGW_PHY_RX_FMD_BUF_ADDR Position */
#define CSR_PHY_PHY_FMD_BUF_0_RGW_PHY_RX_FMD_BUF_ADDR_Msk (0x3fUL << CSR_PHY_PHY_FMD_BUF_0_RGW_PHY_RX_FMD_BUF_ADDR_Pos)/*!< CSR_PHY PHY_FMD_BUF_0: RGW_PHY_RX_FMD_BUF_ADDR Mask */
#define CSR_PHY_PHY_FMD_BUF_0_RGW_PHY_RX_FMD_BUF_STOP_PT_Pos 24                                       /*!< CSR_PHY PHY_FMD_BUF_0: RGW_PHY_RX_FMD_BUF_STOP_PT Position */
#define CSR_PHY_PHY_FMD_BUF_0_RGW_PHY_RX_FMD_BUF_STOP_PT_Msk (0x07UL << CSR_PHY_PHY_FMD_BUF_0_RGW_PHY_RX_FMD_BUF_STOP_PT_Pos)/*!< CSR_PHY PHY_FMD_BUF_0: RGW_PHY_RX_FMD_BUF_STOP_PT Mask */
#define CSR_PHY_PHY_FMD_BUF_0_RGW_PHY_RX_FMD_BUF_STOP_MAN_Pos 27                                      /*!< CSR_PHY PHY_FMD_BUF_0: RGW_PHY_RX_FMD_BUF_STOP_MAN Position */
#define CSR_PHY_PHY_FMD_BUF_0_RGW_PHY_RX_FMD_BUF_STOP_MAN_Msk (0x01UL << CSR_PHY_PHY_FMD_BUF_0_RGW_PHY_RX_FMD_BUF_STOP_MAN_Pos)/*!< CSR_PHY PHY_FMD_BUF_0: RGW_PHY_RX_FMD_BUF_STOP_MAN Mask */
#define CSR_PHY_PHY_FMD_BUF_0_RGW_PHY_RX_FMD_BUF_ADDR_AUTO_Pos 28                                     /*!< CSR_PHY PHY_FMD_BUF_0: RGW_PHY_RX_FMD_BUF_ADDR_AUTO Position */
#define CSR_PHY_PHY_FMD_BUF_0_RGW_PHY_RX_FMD_BUF_ADDR_AUTO_Msk (0x01UL << CSR_PHY_PHY_FMD_BUF_0_RGW_PHY_RX_FMD_BUF_ADDR_AUTO_Pos)/*!< CSR_PHY PHY_FMD_BUF_0: RGW_PHY_RX_FMD_BUF_ADDR_AUTO Mask */
#define CSR_PHY_PHY_FMD_BUF_0_RGW_PHY_RX_FMD_BUF_SRC_SEL_Pos 29                                       /*!< CSR_PHY PHY_FMD_BUF_0: RGW_PHY_RX_FMD_BUF_SRC_SEL Position */
#define CSR_PHY_PHY_FMD_BUF_0_RGW_PHY_RX_FMD_BUF_SRC_SEL_Msk (0x01UL << CSR_PHY_PHY_FMD_BUF_0_RGW_PHY_RX_FMD_BUF_SRC_SEL_Pos)/*!< CSR_PHY PHY_FMD_BUF_0: RGW_PHY_RX_FMD_BUF_SRC_SEL Mask */
#define CSR_PHY_PHY_FMD_BUF_0_RO_PHY_RX_FMD_BUF_DONE_Pos 30                                           /*!< CSR_PHY PHY_FMD_BUF_0: RO_PHY_RX_FMD_BUF_DONE Position */
#define CSR_PHY_PHY_FMD_BUF_0_RO_PHY_RX_FMD_BUF_DONE_Msk (0x01UL << CSR_PHY_PHY_FMD_BUF_0_RO_PHY_RX_FMD_BUF_DONE_Pos)/*!< CSR_PHY PHY_FMD_BUF_0: RO_PHY_RX_FMD_BUF_DONE Mask */
#define CSR_PHY_PHY_FMD_BUF_0_RGW_PHY_RX_FMD_BUF_EN_Pos 31                                            /*!< CSR_PHY PHY_FMD_BUF_0: RGW_PHY_RX_FMD_BUF_EN Position */
#define CSR_PHY_PHY_FMD_BUF_0_RGW_PHY_RX_FMD_BUF_EN_Msk (0x01UL << CSR_PHY_PHY_FMD_BUF_0_RGW_PHY_RX_FMD_BUF_EN_Pos)/*!< CSR_PHY PHY_FMD_BUF_0: RGW_PHY_RX_FMD_BUF_EN Mask */

/* ----------------------------  CSR_PHY_PHY_FMD_BUF_1  --------------------------- */
#define CSR_PHY_PHY_FMD_BUF_1_RGW_PHY_RX_FMD_BUF_PSDU_BIT_NO_Pos 0                                    /*!< CSR_PHY PHY_FMD_BUF_1: RGW_PHY_RX_FMD_BUF_PSDU_BIT_NO Position */
#define CSR_PHY_PHY_FMD_BUF_1_RGW_PHY_RX_FMD_BUF_PSDU_BIT_NO_Msk (0x000003ffUL << CSR_PHY_PHY_FMD_BUF_1_RGW_PHY_RX_FMD_BUF_PSDU_BIT_NO_Pos)/*!< CSR_PHY PHY_FMD_BUF_1: RGW_PHY_RX_FMD_BUF_PSDU_BIT_NO Mask */
#define CSR_PHY_PHY_FMD_BUF_1_RGW_PHY_RX_FMD_BUF_LTCH_CNT_LMT_Pos 16                                  /*!< CSR_PHY PHY_FMD_BUF_1: RGW_PHY_RX_FMD_BUF_LTCH_CNT_LMT Position */
#define CSR_PHY_PHY_FMD_BUF_1_RGW_PHY_RX_FMD_BUF_LTCH_CNT_LMT_Msk (0x0000ffffUL << CSR_PHY_PHY_FMD_BUF_1_RGW_PHY_RX_FMD_BUF_LTCH_CNT_LMT_Pos)/*!< CSR_PHY PHY_FMD_BUF_1: RGW_PHY_RX_FMD_BUF_LTCH_CNT_LMT Mask */

/* --------------------------  CSR_PHY_PHY_FREQMETER_SET  ------------------------- */
#define CSR_PHY_PHY_FREQMETER_SET_RGW_FRQMTR_PASS_TRGT_Pos 0                                          /*!< CSR_PHY PHY_FREQMETER_SET: RGW_FRQMTR_PASS_TRGT Position */
#define CSR_PHY_PHY_FREQMETER_SET_RGW_FRQMTR_PASS_TRGT_Msk (0x000001ffUL << CSR_PHY_PHY_FREQMETER_SET_RGW_FRQMTR_PASS_TRGT_Pos)/*!< CSR_PHY PHY_FREQMETER_SET: RGW_FRQMTR_PASS_TRGT Mask */
#define CSR_PHY_PHY_FREQMETER_SET_RGW_FRQMTR_PASS_RGN_Pos 12                                          /*!< CSR_PHY PHY_FREQMETER_SET: RGW_FRQMTR_PASS_RGN Position */
#define CSR_PHY_PHY_FREQMETER_SET_RGW_FRQMTR_PASS_RGN_Msk (0x000001ffUL << CSR_PHY_PHY_FREQMETER_SET_RGW_FRQMTR_PASS_RGN_Pos)/*!< CSR_PHY PHY_FREQMETER_SET: RGW_FRQMTR_PASS_RGN Mask */
#define CSR_PHY_PHY_FREQMETER_SET_RGW_FRQMTR_CCL_Pos 23                                               /*!< CSR_PHY PHY_FREQMETER_SET: RGW_FRQMTR_CCL Position */
#define CSR_PHY_PHY_FREQMETER_SET_RGW_FRQMTR_CCL_Msk (0x07UL << CSR_PHY_PHY_FREQMETER_SET_RGW_FRQMTR_CCL_Pos)/*!< CSR_PHY PHY_FREQMETER_SET: RGW_FRQMTR_CCL Mask */
#define CSR_PHY_PHY_FREQMETER_SET_RGW_FRQMTR_EDGE_Pos 28                                              /*!< CSR_PHY PHY_FREQMETER_SET: RGW_FRQMTR_EDGE Position */
#define CSR_PHY_PHY_FREQMETER_SET_RGW_FRQMTR_EDGE_Msk (0x01UL << CSR_PHY_PHY_FREQMETER_SET_RGW_FRQMTR_EDGE_Pos)/*!< CSR_PHY PHY_FREQMETER_SET: RGW_FRQMTR_EDGE Mask */
#define CSR_PHY_PHY_FREQMETER_SET_RGW_FRQMTR_MODE_Pos 29                                              /*!< CSR_PHY PHY_FREQMETER_SET: RGW_FRQMTR_MODE Position */
#define CSR_PHY_PHY_FREQMETER_SET_RGW_FRQMTR_MODE_Msk (0x01UL << CSR_PHY_PHY_FREQMETER_SET_RGW_FRQMTR_MODE_Pos)/*!< CSR_PHY PHY_FREQMETER_SET: RGW_FRQMTR_MODE Mask */
#define CSR_PHY_PHY_FREQMETER_SET_RGW_FRQMTR_TRIG_Pos 30                                              /*!< CSR_PHY PHY_FREQMETER_SET: RGW_FRQMTR_TRIG Position */
#define CSR_PHY_PHY_FREQMETER_SET_RGW_FRQMTR_TRIG_Msk (0x01UL << CSR_PHY_PHY_FREQMETER_SET_RGW_FRQMTR_TRIG_Pos)/*!< CSR_PHY PHY_FREQMETER_SET: RGW_FRQMTR_TRIG Mask */
#define CSR_PHY_PHY_FREQMETER_SET_RGW_FRQMTR_EN_Pos 31                                                /*!< CSR_PHY PHY_FREQMETER_SET: RGW_FRQMTR_EN Position */
#define CSR_PHY_PHY_FREQMETER_SET_RGW_FRQMTR_EN_Msk (0x01UL << CSR_PHY_PHY_FREQMETER_SET_RGW_FRQMTR_EN_Pos)/*!< CSR_PHY PHY_FREQMETER_SET: RGW_FRQMTR_EN Mask */

/* --------------------------  CSR_PHY_PHY_FREQMETER_RO  -------------------------- */
#define CSR_PHY_PHY_FREQMETER_RO_RO_FRQMTR_OUT_Pos 0                                                  /*!< CSR_PHY PHY_FREQMETER_RO: RO_FRQMTR_OUT Position */
#define CSR_PHY_PHY_FREQMETER_RO_RO_FRQMTR_OUT_Msk (0x000001ffUL << CSR_PHY_PHY_FREQMETER_RO_RO_FRQMTR_OUT_Pos)/*!< CSR_PHY PHY_FREQMETER_RO: RO_FRQMTR_OUT Mask */
#define CSR_PHY_PHY_FREQMETER_RO_RO_FRQMTR_PASS_Pos 12                                                /*!< CSR_PHY PHY_FREQMETER_RO: RO_FRQMTR_PASS Position */
#define CSR_PHY_PHY_FREQMETER_RO_RO_FRQMTR_PASS_Msk (0x01UL << CSR_PHY_PHY_FREQMETER_RO_RO_FRQMTR_PASS_Pos)/*!< CSR_PHY PHY_FREQMETER_RO: RO_FRQMTR_PASS Mask */
#define CSR_PHY_PHY_FREQMETER_RO_RO_FRQMTR_DONE_Pos 31                                                /*!< CSR_PHY PHY_FREQMETER_RO: RO_FRQMTR_DONE Position */
#define CSR_PHY_PHY_FREQMETER_RO_RO_FRQMTR_DONE_Msk (0x01UL << CSR_PHY_PHY_FREQMETER_RO_RO_FRQMTR_DONE_Pos)/*!< CSR_PHY PHY_FREQMETER_RO: RO_FRQMTR_DONE Mask */

/* ---------------------------  CSR_PHY_PHY_TIMER_1_SET  -------------------------- */
#define CSR_PHY_PHY_TIMER_1_SET_RGW_PHY_TMR_END_SEL_1_Pos 16                                          /*!< CSR_PHY PHY_TIMER_1_SET: RGW_PHY_TMR_END_SEL_1 Position */
#define CSR_PHY_PHY_TIMER_1_SET_RGW_PHY_TMR_END_SEL_1_Msk (0x0fUL << CSR_PHY_PHY_TIMER_1_SET_RGW_PHY_TMR_END_SEL_1_Pos)/*!< CSR_PHY PHY_TIMER_1_SET: RGW_PHY_TMR_END_SEL_1 Mask */
#define CSR_PHY_PHY_TIMER_1_SET_RGW_PHY_TMR_END_EDGE_1_Pos 20                                         /*!< CSR_PHY PHY_TIMER_1_SET: RGW_PHY_TMR_END_EDGE_1 Position */
#define CSR_PHY_PHY_TIMER_1_SET_RGW_PHY_TMR_END_EDGE_1_Msk (0x01UL << CSR_PHY_PHY_TIMER_1_SET_RGW_PHY_TMR_END_EDGE_1_Pos)/*!< CSR_PHY PHY_TIMER_1_SET: RGW_PHY_TMR_END_EDGE_1 Mask */
#define CSR_PHY_PHY_TIMER_1_SET_RGW_PHY_TMR_BGN_SEL_1_Pos 24                                          /*!< CSR_PHY PHY_TIMER_1_SET: RGW_PHY_TMR_BGN_SEL_1 Position */
#define CSR_PHY_PHY_TIMER_1_SET_RGW_PHY_TMR_BGN_SEL_1_Msk (0x0fUL << CSR_PHY_PHY_TIMER_1_SET_RGW_PHY_TMR_BGN_SEL_1_Pos)/*!< CSR_PHY PHY_TIMER_1_SET: RGW_PHY_TMR_BGN_SEL_1 Mask */
#define CSR_PHY_PHY_TIMER_1_SET_RGW_PHY_TMR_BGN_EDGE_1_Pos 28                                         /*!< CSR_PHY PHY_TIMER_1_SET: RGW_PHY_TMR_BGN_EDGE_1 Position */
#define CSR_PHY_PHY_TIMER_1_SET_RGW_PHY_TMR_BGN_EDGE_1_Msk (0x01UL << CSR_PHY_PHY_TIMER_1_SET_RGW_PHY_TMR_BGN_EDGE_1_Pos)/*!< CSR_PHY PHY_TIMER_1_SET: RGW_PHY_TMR_BGN_EDGE_1 Mask */
#define CSR_PHY_PHY_TIMER_1_SET_RGW_PHY_TMR_CONT_1_Pos 29                                             /*!< CSR_PHY PHY_TIMER_1_SET: RGW_PHY_TMR_CONT_1 Position */
#define CSR_PHY_PHY_TIMER_1_SET_RGW_PHY_TMR_CONT_1_Msk (0x01UL << CSR_PHY_PHY_TIMER_1_SET_RGW_PHY_TMR_CONT_1_Pos)/*!< CSR_PHY PHY_TIMER_1_SET: RGW_PHY_TMR_CONT_1 Mask */
#define CSR_PHY_PHY_TIMER_1_SET_RGW_PHY_TMR_TRIG_1_Pos 30                                             /*!< CSR_PHY PHY_TIMER_1_SET: RGW_PHY_TMR_TRIG_1 Position */
#define CSR_PHY_PHY_TIMER_1_SET_RGW_PHY_TMR_TRIG_1_Msk (0x01UL << CSR_PHY_PHY_TIMER_1_SET_RGW_PHY_TMR_TRIG_1_Pos)/*!< CSR_PHY PHY_TIMER_1_SET: RGW_PHY_TMR_TRIG_1 Mask */
#define CSR_PHY_PHY_TIMER_1_SET_RGW_PHY_TMR_EN_Pos 31                                                 /*!< CSR_PHY PHY_TIMER_1_SET: RGW_PHY_TMR_EN Position */
#define CSR_PHY_PHY_TIMER_1_SET_RGW_PHY_TMR_EN_Msk (0x01UL << CSR_PHY_PHY_TIMER_1_SET_RGW_PHY_TMR_EN_Pos)/*!< CSR_PHY PHY_TIMER_1_SET: RGW_PHY_TMR_EN Mask */

/* ---------------------------  CSR_PHY_PHY_TIMER_1_RO  --------------------------- */
#define CSR_PHY_PHY_TIMER_1_RO_RO_PHY_TMR_OUT_1_Pos 0                                                 /*!< CSR_PHY PHY_TIMER_1_RO: RO_PHY_TMR_OUT_1 Position */
#define CSR_PHY_PHY_TIMER_1_RO_RO_PHY_TMR_OUT_1_Msk (0x0000ffffUL << CSR_PHY_PHY_TIMER_1_RO_RO_PHY_TMR_OUT_1_Pos)/*!< CSR_PHY PHY_TIMER_1_RO: RO_PHY_TMR_OUT_1 Mask */
#define CSR_PHY_PHY_TIMER_1_RO_RO_PHY_TMR_DONE_1_Pos 16                                               /*!< CSR_PHY PHY_TIMER_1_RO: RO_PHY_TMR_DONE_1 Position */
#define CSR_PHY_PHY_TIMER_1_RO_RO_PHY_TMR_DONE_1_Msk (0x01UL << CSR_PHY_PHY_TIMER_1_RO_RO_PHY_TMR_DONE_1_Pos)/*!< CSR_PHY PHY_TIMER_1_RO: RO_PHY_TMR_DONE_1 Mask */

/* ---------------------------  CSR_PHY_PHY_TIMER_2_SET  -------------------------- */
#define CSR_PHY_PHY_TIMER_2_SET_RGW_PHY_TMR_END_SEL_2_Pos 16                                          /*!< CSR_PHY PHY_TIMER_2_SET: RGW_PHY_TMR_END_SEL_2 Position */
#define CSR_PHY_PHY_TIMER_2_SET_RGW_PHY_TMR_END_SEL_2_Msk (0x0fUL << CSR_PHY_PHY_TIMER_2_SET_RGW_PHY_TMR_END_SEL_2_Pos)/*!< CSR_PHY PHY_TIMER_2_SET: RGW_PHY_TMR_END_SEL_2 Mask */
#define CSR_PHY_PHY_TIMER_2_SET_RGW_PHY_TMR_END_EDGE_2_Pos 20                                         /*!< CSR_PHY PHY_TIMER_2_SET: RGW_PHY_TMR_END_EDGE_2 Position */
#define CSR_PHY_PHY_TIMER_2_SET_RGW_PHY_TMR_END_EDGE_2_Msk (0x01UL << CSR_PHY_PHY_TIMER_2_SET_RGW_PHY_TMR_END_EDGE_2_Pos)/*!< CSR_PHY PHY_TIMER_2_SET: RGW_PHY_TMR_END_EDGE_2 Mask */
#define CSR_PHY_PHY_TIMER_2_SET_RGW_PHY_TMR_BGN_SEL_2_Pos 24                                          /*!< CSR_PHY PHY_TIMER_2_SET: RGW_PHY_TMR_BGN_SEL_2 Position */
#define CSR_PHY_PHY_TIMER_2_SET_RGW_PHY_TMR_BGN_SEL_2_Msk (0x0fUL << CSR_PHY_PHY_TIMER_2_SET_RGW_PHY_TMR_BGN_SEL_2_Pos)/*!< CSR_PHY PHY_TIMER_2_SET: RGW_PHY_TMR_BGN_SEL_2 Mask */
#define CSR_PHY_PHY_TIMER_2_SET_RGW_PHY_TMR_BGN_EDGE_2_Pos 28                                         /*!< CSR_PHY PHY_TIMER_2_SET: RGW_PHY_TMR_BGN_EDGE_2 Position */
#define CSR_PHY_PHY_TIMER_2_SET_RGW_PHY_TMR_BGN_EDGE_2_Msk (0x01UL << CSR_PHY_PHY_TIMER_2_SET_RGW_PHY_TMR_BGN_EDGE_2_Pos)/*!< CSR_PHY PHY_TIMER_2_SET: RGW_PHY_TMR_BGN_EDGE_2 Mask */
#define CSR_PHY_PHY_TIMER_2_SET_RGW_PHY_TMR_CONT_2_Pos 29                                             /*!< CSR_PHY PHY_TIMER_2_SET: RGW_PHY_TMR_CONT_2 Position */
#define CSR_PHY_PHY_TIMER_2_SET_RGW_PHY_TMR_CONT_2_Msk (0x01UL << CSR_PHY_PHY_TIMER_2_SET_RGW_PHY_TMR_CONT_2_Pos)/*!< CSR_PHY PHY_TIMER_2_SET: RGW_PHY_TMR_CONT_2 Mask */
#define CSR_PHY_PHY_TIMER_2_SET_RGW_PHY_TMR_TRIG_2_Pos 30                                             /*!< CSR_PHY PHY_TIMER_2_SET: RGW_PHY_TMR_TRIG_2 Position */
#define CSR_PHY_PHY_TIMER_2_SET_RGW_PHY_TMR_TRIG_2_Msk (0x01UL << CSR_PHY_PHY_TIMER_2_SET_RGW_PHY_TMR_TRIG_2_Pos)/*!< CSR_PHY PHY_TIMER_2_SET: RGW_PHY_TMR_TRIG_2 Mask */

/* ---------------------------  CSR_PHY_PHY_TIMER_2_RO  --------------------------- */
#define CSR_PHY_PHY_TIMER_2_RO_RO_PHY_TMR_OUT_2_Pos 0                                                 /*!< CSR_PHY PHY_TIMER_2_RO: RO_PHY_TMR_OUT_2 Position */
#define CSR_PHY_PHY_TIMER_2_RO_RO_PHY_TMR_OUT_2_Msk (0x0000ffffUL << CSR_PHY_PHY_TIMER_2_RO_RO_PHY_TMR_OUT_2_Pos)/*!< CSR_PHY PHY_TIMER_2_RO: RO_PHY_TMR_OUT_2 Mask */
#define CSR_PHY_PHY_TIMER_2_RO_RO_PHY_TMR_DONE_2_Pos 16                                               /*!< CSR_PHY PHY_TIMER_2_RO: RO_PHY_TMR_DONE_2 Position */
#define CSR_PHY_PHY_TIMER_2_RO_RO_PHY_TMR_DONE_2_Msk (0x01UL << CSR_PHY_PHY_TIMER_2_RO_RO_PHY_TMR_DONE_2_Pos)/*!< CSR_PHY PHY_TIMER_2_RO: RO_PHY_TMR_DONE_2 Mask */

/* -----------------------------  CSR_PHY_SVN_VERSION  ---------------------------- */
#define CSR_PHY_SVN_VERSION_SVN_VERSION_Pos   0                                                       /*!< CSR_PHY SVN_VERSION: SVN_VERSION Position */
#define CSR_PHY_SVN_VERSION_SVN_VERSION_Msk   (0xffffffffUL << CSR_PHY_SVN_VERSION_SVN_VERSION_Pos)   /*!< CSR_PHY SVN_VERSION: SVN_VERSION Mask   */

/* -----------------------------  CSR_PHY_PHY_IQ_LBK  ----------------------------- */
#define CSR_PHY_PHY_IQ_LBK_RGW_IQ_LBK_Pos     0                                                       /*!< CSR_PHY PHY_IQ_LBK: RGW_IQ_LBK Position */
#define CSR_PHY_PHY_IQ_LBK_RGW_IQ_LBK_Msk     (0x01UL << CSR_PHY_PHY_IQ_LBK_RGW_IQ_LBK_Pos)           /*!< CSR_PHY PHY_IQ_LBK: RGW_IQ_LBK Mask     */
#define CSR_PHY_PHY_IQ_LBK_RGW_IQ_UP2M_EN_Pos 1                                                       /*!< CSR_PHY PHY_IQ_LBK: RGW_IQ_UP2M_EN Position */
#define CSR_PHY_PHY_IQ_LBK_RGW_IQ_UP2M_EN_Msk (0x01UL << CSR_PHY_PHY_IQ_LBK_RGW_IQ_UP2M_EN_Pos)       /*!< CSR_PHY PHY_IQ_LBK: RGW_IQ_UP2M_EN Mask */
#define CSR_PHY_PHY_IQ_LBK_RGW_TX_IQ_EN_Pos   2                                                       /*!< CSR_PHY PHY_IQ_LBK: RGW_TX_IQ_EN Position */
#define CSR_PHY_PHY_IQ_LBK_RGW_TX_IQ_EN_Msk   (0x01UL << CSR_PHY_PHY_IQ_LBK_RGW_TX_IQ_EN_Pos)         /*!< CSR_PHY PHY_IQ_LBK: RGW_TX_IQ_EN Mask   */

/* ----------------------------  CSR_PHY_REG_HARDWIRE  ---------------------------- */
#define CSR_PHY_REG_HARDWIRE_RF_MANUAL_EN_Pos 0                                                       /*!< CSR_PHY REG_HARDWIRE: RF_MANUAL_EN Position */
#define CSR_PHY_REG_HARDWIRE_RF_MANUAL_EN_Msk (0x01UL << CSR_PHY_REG_HARDWIRE_RF_MANUAL_EN_Pos)       /*!< CSR_PHY REG_HARDWIRE: RF_MANUAL_EN Mask */
#define CSR_PHY_REG_HARDWIRE_MANUAL_SX_Pos    1                                                       /*!< CSR_PHY REG_HARDWIRE: MANUAL_SX Position */
#define CSR_PHY_REG_HARDWIRE_MANUAL_SX_Msk    (0x01UL << CSR_PHY_REG_HARDWIRE_MANUAL_SX_Pos)          /*!< CSR_PHY REG_HARDWIRE: MANUAL_SX Mask    */
#define CSR_PHY_REG_HARDWIRE_RF_PWR_Pos       16                                                      /*!< CSR_PHY REG_HARDWIRE: RF_PWR Position   */
#define CSR_PHY_REG_HARDWIRE_RF_PWR_Msk       (0x03UL << CSR_PHY_REG_HARDWIRE_RF_PWR_Pos)             /*!< CSR_PHY REG_HARDWIRE: RF_PWR Mask       */
#define CSR_PHY_REG_HARDWIRE_TX_ATTN_Pos      18                                                      /*!< CSR_PHY REG_HARDWIRE: TX_ATTN Position  */
#define CSR_PHY_REG_HARDWIRE_TX_ATTN_Msk      (0x01UL << CSR_PHY_REG_HARDWIRE_TX_ATTN_Pos)            /*!< CSR_PHY REG_HARDWIRE: TX_ATTN Mask      */
#define CSR_PHY_REG_HARDWIRE_EN_RSSI_Pos      19                                                      /*!< CSR_PHY REG_HARDWIRE: EN_RSSI Position  */
#define CSR_PHY_REG_HARDWIRE_EN_RSSI_Msk      (0x01UL << CSR_PHY_REG_HARDWIRE_EN_RSSI_Pos)            /*!< CSR_PHY REG_HARDWIRE: EN_RSSI Mask      */
#define CSR_PHY_REG_HARDWIRE_EN_TSSI_Pos      20                                                      /*!< CSR_PHY REG_HARDWIRE: EN_TSSI Position  */
#define CSR_PHY_REG_HARDWIRE_EN_TSSI_Msk      (0x01UL << CSR_PHY_REG_HARDWIRE_EN_TSSI_Pos)            /*!< CSR_PHY REG_HARDWIRE: EN_TSSI Mask      */

/* -----------------------------  CSR_PHY_REG_MAN_EN  ----------------------------- */
#define CSR_PHY_REG_MAN_EN_RG_EN_LDO15_Pos    4                                                       /*!< CSR_PHY REG_MAN_EN: RG_EN_LDO15 Position */
#define CSR_PHY_REG_MAN_EN_RG_EN_LDO15_Msk    (0x01UL << CSR_PHY_REG_MAN_EN_RG_EN_LDO15_Pos)          /*!< CSR_PHY REG_MAN_EN: RG_EN_LDO15 Mask    */
#define CSR_PHY_REG_MAN_EN_RG_EN_LDOPA_Pos    5                                                       /*!< CSR_PHY REG_MAN_EN: RG_EN_LDOPA Position */
#define CSR_PHY_REG_MAN_EN_RG_EN_LDOPA_Msk    (0x01UL << CSR_PHY_REG_MAN_EN_RG_EN_LDOPA_Pos)          /*!< CSR_PHY REG_MAN_EN: RG_EN_LDOPA Mask    */
#define CSR_PHY_REG_MAN_EN_RG_EN_TX_PA_Pos    6                                                       /*!< CSR_PHY REG_MAN_EN: RG_EN_TX_PA Position */
#define CSR_PHY_REG_MAN_EN_RG_EN_TX_PA_Msk    (0x01UL << CSR_PHY_REG_MAN_EN_RG_EN_TX_PA_Pos)          /*!< CSR_PHY REG_MAN_EN: RG_EN_TX_PA Mask    */
#define CSR_PHY_REG_MAN_EN_RG_EN_TX_TSSI_Pos  7                                                       /*!< CSR_PHY REG_MAN_EN: RG_EN_TX_TSSI Position */
#define CSR_PHY_REG_MAN_EN_RG_EN_TX_TSSI_Msk  (0x01UL << CSR_PHY_REG_MAN_EN_RG_EN_TX_TSSI_Pos)        /*!< CSR_PHY REG_MAN_EN: RG_EN_TX_TSSI Mask  */
#define CSR_PHY_REG_MAN_EN_RG_EN_TX_LOBF_Pos  8                                                       /*!< CSR_PHY REG_MAN_EN: RG_EN_TX_LOBF Position */
#define CSR_PHY_REG_MAN_EN_RG_EN_TX_LOBF_Msk  (0x01UL << CSR_PHY_REG_MAN_EN_RG_EN_TX_LOBF_Pos)        /*!< CSR_PHY REG_MAN_EN: RG_EN_TX_LOBF Mask  */
#define CSR_PHY_REG_MAN_EN_RG_EN_RX_LOBF_Pos  9                                                       /*!< CSR_PHY REG_MAN_EN: RG_EN_RX_LOBF Position */
#define CSR_PHY_REG_MAN_EN_RG_EN_RX_LOBF_Msk  (0x01UL << CSR_PHY_REG_MAN_EN_RG_EN_RX_LOBF_Pos)        /*!< CSR_PHY REG_MAN_EN: RG_EN_RX_LOBF Mask  */
#define CSR_PHY_REG_MAN_EN_RG_EN_RX_LNA_Pos   10                                                      /*!< CSR_PHY REG_MAN_EN: RG_EN_RX_LNA Position */
#define CSR_PHY_REG_MAN_EN_RG_EN_RX_LNA_Msk   (0x01UL << CSR_PHY_REG_MAN_EN_RG_EN_RX_LNA_Pos)         /*!< CSR_PHY REG_MAN_EN: RG_EN_RX_LNA Mask   */
#define CSR_PHY_REG_MAN_EN_RG_RX_LNAGC_Pos    11                                                      /*!< CSR_PHY REG_MAN_EN: RG_RX_LNAGC Position */
#define CSR_PHY_REG_MAN_EN_RG_RX_LNAGC_Msk    (0x03UL << CSR_PHY_REG_MAN_EN_RG_RX_LNAGC_Pos)          /*!< CSR_PHY REG_MAN_EN: RG_RX_LNAGC Mask    */
#define CSR_PHY_REG_MAN_EN_RG_EN_RX_LOGEN_Pos 13                                                      /*!< CSR_PHY REG_MAN_EN: RG_EN_RX_LOGEN Position */
#define CSR_PHY_REG_MAN_EN_RG_EN_RX_LOGEN_Msk (0x01UL << CSR_PHY_REG_MAN_EN_RG_EN_RX_LOGEN_Pos)       /*!< CSR_PHY REG_MAN_EN: RG_EN_RX_LOGEN Mask */
#define CSR_PHY_REG_MAN_EN_RG_EN_RX_MIXER_Pos 14                                                      /*!< CSR_PHY REG_MAN_EN: RG_EN_RX_MIXER Position */
#define CSR_PHY_REG_MAN_EN_RG_EN_RX_MIXER_Msk (0x01UL << CSR_PHY_REG_MAN_EN_RG_EN_RX_MIXER_Pos)       /*!< CSR_PHY REG_MAN_EN: RG_EN_RX_MIXER Mask */
#define CSR_PHY_REG_MAN_EN_RG_EN_RX_BPF_Pos   15                                                      /*!< CSR_PHY REG_MAN_EN: RG_EN_RX_BPF Position */
#define CSR_PHY_REG_MAN_EN_RG_EN_RX_BPF_Msk   (0x01UL << CSR_PHY_REG_MAN_EN_RG_EN_RX_BPF_Pos)         /*!< CSR_PHY REG_MAN_EN: RG_EN_RX_BPF Mask   */
#define CSR_PHY_REG_MAN_EN_RG_EN_RX_LIMITER_Pos 16                                                    /*!< CSR_PHY REG_MAN_EN: RG_EN_RX_LIMITER Position */
#define CSR_PHY_REG_MAN_EN_RG_EN_RX_LIMITER_Msk (0x01UL << CSR_PHY_REG_MAN_EN_RG_EN_RX_LIMITER_Pos)   /*!< CSR_PHY REG_MAN_EN: RG_EN_RX_LIMITER Mask */
#define CSR_PHY_REG_MAN_EN_RG_EN_RX_LIMITER_BUF_Pos 17                                                /*!< CSR_PHY REG_MAN_EN: RG_EN_RX_LIMITER_BUF Position */
#define CSR_PHY_REG_MAN_EN_RG_EN_RX_LIMITER_BUF_Msk (0x01UL << CSR_PHY_REG_MAN_EN_RG_EN_RX_LIMITER_BUF_Pos)/*!< CSR_PHY REG_MAN_EN: RG_EN_RX_LIMITER_BUF Mask */
#define CSR_PHY_REG_MAN_EN_RG_EN_RX_RSSI_Pos  18                                                      /*!< CSR_PHY REG_MAN_EN: RG_EN_RX_RSSI Position */
#define CSR_PHY_REG_MAN_EN_RG_EN_RX_RSSI_Msk  (0x01UL << CSR_PHY_REG_MAN_EN_RG_EN_RX_RSSI_Pos)        /*!< CSR_PHY REG_MAN_EN: RG_EN_RX_RSSI Mask  */
#define CSR_PHY_REG_MAN_EN_RG_EN_RX_MCU_COMP0_Pos 19                                                  /*!< CSR_PHY REG_MAN_EN: RG_EN_RX_MCU_COMP0 Position */
#define CSR_PHY_REG_MAN_EN_RG_EN_RX_MCU_COMP0_Msk (0x01UL << CSR_PHY_REG_MAN_EN_RG_EN_RX_MCU_COMP0_Pos)/*!< CSR_PHY REG_MAN_EN: RG_EN_RX_MCU_COMP0 Mask */
#define CSR_PHY_REG_MAN_EN_RG_EN_RX_MCU_COMP1_Pos 20                                                  /*!< CSR_PHY REG_MAN_EN: RG_EN_RX_MCU_COMP1 Position */
#define CSR_PHY_REG_MAN_EN_RG_EN_RX_MCU_COMP1_Msk (0x01UL << CSR_PHY_REG_MAN_EN_RG_EN_RX_MCU_COMP1_Pos)/*!< CSR_PHY REG_MAN_EN: RG_EN_RX_MCU_COMP1 Mask */
#define CSR_PHY_REG_MAN_EN_RG_EN_RX_BB_COMP_Pos 21                                                    /*!< CSR_PHY REG_MAN_EN: RG_EN_RX_BB_COMP Position */
#define CSR_PHY_REG_MAN_EN_RG_EN_RX_BB_COMP_Msk (0x01UL << CSR_PHY_REG_MAN_EN_RG_EN_RX_BB_COMP_Pos)   /*!< CSR_PHY REG_MAN_EN: RG_EN_RX_BB_COMP Mask */
#define CSR_PHY_REG_MAN_EN_RG_EN_IQPAD_IOSW_Pos 29                                                    /*!< CSR_PHY REG_MAN_EN: RG_EN_IQPAD_IOSW Position */
#define CSR_PHY_REG_MAN_EN_RG_EN_IQPAD_IOSW_Msk (0x01UL << CSR_PHY_REG_MAN_EN_RG_EN_IQPAD_IOSW_Pos)   /*!< CSR_PHY REG_MAN_EN: RG_EN_IQPAD_IOSW Mask */
#define CSR_PHY_REG_MAN_EN_RG_EN_LDO15TEST_Pos 30                                                     /*!< CSR_PHY REG_MAN_EN: RG_EN_LDO15TEST Position */
#define CSR_PHY_REG_MAN_EN_RG_EN_LDO15TEST_Msk (0x01UL << CSR_PHY_REG_MAN_EN_RG_EN_LDO15TEST_Pos)     /*!< CSR_PHY REG_MAN_EN: RG_EN_LDO15TEST Mask */

/* ------------------------  CSR_PHY_REG_LDO_TEST_SETTINGS  ----------------------- */
#define CSR_PHY_REG_LDO_TEST_SETTINGS_RG_LDO15_LEVEL_Pos 0                                            /*!< CSR_PHY REG_LDO_TEST_SETTINGS: RG_LDO15_LEVEL Position */
#define CSR_PHY_REG_LDO_TEST_SETTINGS_RG_LDO15_LEVEL_Msk (0x07UL << CSR_PHY_REG_LDO_TEST_SETTINGS_RG_LDO15_LEVEL_Pos)/*!< CSR_PHY REG_LDO_TEST_SETTINGS: RG_LDO15_LEVEL Mask */
#define CSR_PHY_REG_LDO_TEST_SETTINGS_RG_LDOPA_LEVEL_Pos 3                                            /*!< CSR_PHY REG_LDO_TEST_SETTINGS: RG_LDOPA_LEVEL Position */
#define CSR_PHY_REG_LDO_TEST_SETTINGS_RG_LDOPA_LEVEL_Msk (0x07UL << CSR_PHY_REG_LDO_TEST_SETTINGS_RG_LDOPA_LEVEL_Pos)/*!< CSR_PHY REG_LDO_TEST_SETTINGS: RG_LDOPA_LEVEL Mask */
#define CSR_PHY_REG_LDO_TEST_SETTINGS_RG_LDO5B_LEVEL_Pos 6                                            /*!< CSR_PHY REG_LDO_TEST_SETTINGS: RG_LDO5B_LEVEL Position */
#define CSR_PHY_REG_LDO_TEST_SETTINGS_RG_LDO5B_LEVEL_Msk (0x07UL << CSR_PHY_REG_LDO_TEST_SETTINGS_RG_LDO5B_LEVEL_Pos)/*!< CSR_PHY REG_LDO_TEST_SETTINGS: RG_LDO5B_LEVEL Mask */
#define CSR_PHY_REG_LDO_TEST_SETTINGS_RG_LDO5V_LEVEL_Pos 9                                            /*!< CSR_PHY REG_LDO_TEST_SETTINGS: RG_LDO5V_LEVEL Position */
#define CSR_PHY_REG_LDO_TEST_SETTINGS_RG_LDO5V_LEVEL_Msk (0x07UL << CSR_PHY_REG_LDO_TEST_SETTINGS_RG_LDO5V_LEVEL_Pos)/*!< CSR_PHY REG_LDO_TEST_SETTINGS: RG_LDO5V_LEVEL Mask */
#define CSR_PHY_REG_LDO_TEST_SETTINGS_RG_EN_TESTBUFFER_Pos 18                                         /*!< CSR_PHY REG_LDO_TEST_SETTINGS: RG_EN_TESTBUFFER Position */
#define CSR_PHY_REG_LDO_TEST_SETTINGS_RG_EN_TESTBUFFER_Msk (0x01UL << CSR_PHY_REG_LDO_TEST_SETTINGS_RG_EN_TESTBUFFER_Pos)/*!< CSR_PHY REG_LDO_TEST_SETTINGS: RG_EN_TESTBUFFER Mask */
#define CSR_PHY_REG_LDO_TEST_SETTINGS_RG_EN_TESTBUFFER_BPFI_Pos 19                                    /*!< CSR_PHY REG_LDO_TEST_SETTINGS: RG_EN_TESTBUFFER_BPFI Position */
#define CSR_PHY_REG_LDO_TEST_SETTINGS_RG_EN_TESTBUFFER_BPFI_Msk (0x01UL << CSR_PHY_REG_LDO_TEST_SETTINGS_RG_EN_TESTBUFFER_BPFI_Pos)/*!< CSR_PHY REG_LDO_TEST_SETTINGS: RG_EN_TESTBUFFER_BPFI Mask */
#define CSR_PHY_REG_LDO_TEST_SETTINGS_RG_EN_TESTBUFFER_BPFQ_Pos 20                                    /*!< CSR_PHY REG_LDO_TEST_SETTINGS: RG_EN_TESTBUFFER_BPFQ Position */
#define CSR_PHY_REG_LDO_TEST_SETTINGS_RG_EN_TESTBUFFER_BPFQ_Msk (0x01UL << CSR_PHY_REG_LDO_TEST_SETTINGS_RG_EN_TESTBUFFER_BPFQ_Pos)/*!< CSR_PHY REG_LDO_TEST_SETTINGS: RG_EN_TESTBUFFER_BPFQ Mask */
#define CSR_PHY_REG_LDO_TEST_SETTINGS_RG_EN_TESTBUFFER_LIMITERI_Pos 21                                /*!< CSR_PHY REG_LDO_TEST_SETTINGS: RG_EN_TESTBUFFER_LIMITERI Position */
#define CSR_PHY_REG_LDO_TEST_SETTINGS_RG_EN_TESTBUFFER_LIMITERI_Msk (0x01UL << CSR_PHY_REG_LDO_TEST_SETTINGS_RG_EN_TESTBUFFER_LIMITERI_Pos)/*!< CSR_PHY REG_LDO_TEST_SETTINGS: RG_EN_TESTBUFFER_LIMITERI Mask */
#define CSR_PHY_REG_LDO_TEST_SETTINGS_RG_EN_TESTBUFFER_LIMITERQ_Pos 22                                /*!< CSR_PHY REG_LDO_TEST_SETTINGS: RG_EN_TESTBUFFER_LIMITERQ Position */
#define CSR_PHY_REG_LDO_TEST_SETTINGS_RG_EN_TESTBUFFER_LIMITERQ_Msk (0x01UL << CSR_PHY_REG_LDO_TEST_SETTINGS_RG_EN_TESTBUFFER_LIMITERQ_Pos)/*!< CSR_PHY REG_LDO_TEST_SETTINGS: RG_EN_TESTBUFFER_LIMITERQ Mask */
#define CSR_PHY_REG_LDO_TEST_SETTINGS_RG_TESTBUFFER_TRI_STATE_Pos 23                                  /*!< CSR_PHY REG_LDO_TEST_SETTINGS: RG_TESTBUFFER_TRI_STATE Position */
#define CSR_PHY_REG_LDO_TEST_SETTINGS_RG_TESTBUFFER_TRI_STATE_Msk (0x01UL << CSR_PHY_REG_LDO_TEST_SETTINGS_RG_TESTBUFFER_TRI_STATE_Pos)/*!< CSR_PHY REG_LDO_TEST_SETTINGS: RG_TESTBUFFER_TRI_STATE Mask */
#define CSR_PHY_REG_LDO_TEST_SETTINGS_RG_LDO5C_LEVEL_Pos 24                                           /*!< CSR_PHY REG_LDO_TEST_SETTINGS: RG_LDO5C_LEVEL Position */
#define CSR_PHY_REG_LDO_TEST_SETTINGS_RG_LDO5C_LEVEL_Msk (0x07UL << CSR_PHY_REG_LDO_TEST_SETTINGS_RG_LDO5C_LEVEL_Pos)/*!< CSR_PHY REG_LDO_TEST_SETTINGS: RG_LDO5C_LEVEL Mask */

/* ------------------------------  CSR_PHY_REG_ABB1  ------------------------------ */
#define CSR_PHY_REG_ABB1_RG_RX_FILTERVCM_Pos  0                                                       /*!< CSR_PHY REG_ABB1: RG_RX_FILTERVCM Position */
#define CSR_PHY_REG_ABB1_RG_RX_FILTERVCM_Msk  (0x03UL << CSR_PHY_REG_ABB1_RG_RX_FILTERVCM_Pos)        /*!< CSR_PHY REG_ABB1: RG_RX_FILTERVCM Mask  */
#define CSR_PHY_REG_ABB1_RG_RX_FILTERI_COARSE_Pos 2                                                   /*!< CSR_PHY REG_ABB1: RG_RX_FILTERI_COARSE Position */
#define CSR_PHY_REG_ABB1_RG_RX_FILTERI_COARSE_Msk (0x03UL << CSR_PHY_REG_ABB1_RG_RX_FILTERI_COARSE_Pos)/*!< CSR_PHY REG_ABB1: RG_RX_FILTERI_COARSE Mask */
#define CSR_PHY_REG_ABB1_RG_RX_FILTERI1ST_Pos 4                                                       /*!< CSR_PHY REG_ABB1: RG_RX_FILTERI1ST Position */
#define CSR_PHY_REG_ABB1_RG_RX_FILTERI1ST_Msk (0x03UL << CSR_PHY_REG_ABB1_RG_RX_FILTERI1ST_Pos)       /*!< CSR_PHY REG_ABB1: RG_RX_FILTERI1ST Mask */
#define CSR_PHY_REG_ABB1_RG_RX_FILTERI2ND_Pos 6                                                       /*!< CSR_PHY REG_ABB1: RG_RX_FILTERI2ND Position */
#define CSR_PHY_REG_ABB1_RG_RX_FILTERI2ND_Msk (0x03UL << CSR_PHY_REG_ABB1_RG_RX_FILTERI2ND_Pos)       /*!< CSR_PHY REG_ABB1: RG_RX_FILTERI2ND Mask */
#define CSR_PHY_REG_ABB1_RG_RX_FILTERI3RD_Pos 8                                                       /*!< CSR_PHY REG_ABB1: RG_RX_FILTERI3RD Position */
#define CSR_PHY_REG_ABB1_RG_RX_FILTERI3RD_Msk (0x03UL << CSR_PHY_REG_ABB1_RG_RX_FILTERI3RD_Pos)       /*!< CSR_PHY REG_ABB1: RG_RX_FILTERI3RD Mask */
#define CSR_PHY_REG_ABB1_RG_TESTBUFFERVCM_Pos 10                                                      /*!< CSR_PHY REG_ABB1: RG_TESTBUFFERVCM Position */
#define CSR_PHY_REG_ABB1_RG_TESTBUFFERVCM_Msk (0x03UL << CSR_PHY_REG_ABB1_RG_TESTBUFFERVCM_Pos)       /*!< CSR_PHY REG_ABB1: RG_TESTBUFFERVCM Mask */
#define CSR_PHY_REG_ABB1_RG_TESTBUFI_Pos      12                                                      /*!< CSR_PHY REG_ABB1: RG_TESTBUFI Position  */
#define CSR_PHY_REG_ABB1_RG_TESTBUFI_Msk      (0x03UL << CSR_PHY_REG_ABB1_RG_TESTBUFI_Pos)            /*!< CSR_PHY REG_ABB1: RG_TESTBUFI Mask      */
#define CSR_PHY_REG_ABB1_RG_RX_LIMITER_BIAS_Pos 14                                                    /*!< CSR_PHY REG_ABB1: RG_RX_LIMITER_BIAS Position */
#define CSR_PHY_REG_ABB1_RG_RX_LIMITER_BIAS_Msk (0x07UL << CSR_PHY_REG_ABB1_RG_RX_LIMITER_BIAS_Pos)   /*!< CSR_PHY REG_ABB1: RG_RX_LIMITER_BIAS Mask */
#define CSR_PHY_REG_ABB1_RG_RX_LBUF_BIAS_Pos  17                                                      /*!< CSR_PHY REG_ABB1: RG_RX_LBUF_BIAS Position */
#define CSR_PHY_REG_ABB1_RG_RX_LBUF_BIAS_Msk  (0x07UL << CSR_PHY_REG_ABB1_RG_RX_LBUF_BIAS_Pos)        /*!< CSR_PHY REG_ABB1: RG_RX_LBUF_BIAS Mask  */
#define CSR_PHY_REG_ABB1_RG_RX_FWR_BIAS_Pos   20                                                      /*!< CSR_PHY REG_ABB1: RG_RX_FWR_BIAS Position */
#define CSR_PHY_REG_ABB1_RG_RX_FWR_BIAS_Msk   (0x07UL << CSR_PHY_REG_ABB1_RG_RX_FWR_BIAS_Pos)         /*!< CSR_PHY REG_ABB1: RG_RX_FWR_BIAS Mask   */
#define CSR_PHY_REG_ABB1_RG_RX_RSSI_TESTMODE_Pos 23                                                   /*!< CSR_PHY REG_ABB1: RG_RX_RSSI_TESTMODE Position */
#define CSR_PHY_REG_ABB1_RG_RX_RSSI_TESTMODE_Msk (0x01UL << CSR_PHY_REG_ABB1_RG_RX_RSSI_TESTMODE_Pos) /*!< CSR_PHY REG_ABB1: RG_RX_RSSI_TESTMODE Mask */
#define CSR_PHY_REG_ABB1_RG_RX_VREF1_TESTMODE_Pos 24                                                  /*!< CSR_PHY REG_ABB1: RG_RX_VREF1_TESTMODE Position */
#define CSR_PHY_REG_ABB1_RG_RX_VREF1_TESTMODE_Msk (0x01UL << CSR_PHY_REG_ABB1_RG_RX_VREF1_TESTMODE_Pos)/*!< CSR_PHY REG_ABB1: RG_RX_VREF1_TESTMODE Mask */
#define CSR_PHY_REG_ABB1_RG_RX_BPF_CFIX_HALF_Pos 25                                                   /*!< CSR_PHY REG_ABB1: RG_RX_BPF_CFIX_HALF Position */
#define CSR_PHY_REG_ABB1_RG_RX_BPF_CFIX_HALF_Msk (0x01UL << CSR_PHY_REG_ABB1_RG_RX_BPF_CFIX_HALF_Pos) /*!< CSR_PHY REG_ABB1: RG_RX_BPF_CFIX_HALF Mask */
#define CSR_PHY_REG_ABB1_RG_RX_BPF_CTUNE_HALF_Pos 26                                                  /*!< CSR_PHY REG_ABB1: RG_RX_BPF_CTUNE_HALF Position */
#define CSR_PHY_REG_ABB1_RG_RX_BPF_CTUNE_HALF_Msk (0x01UL << CSR_PHY_REG_ABB1_RG_RX_BPF_CTUNE_HALF_Pos)/*!< CSR_PHY REG_ABB1: RG_RX_BPF_CTUNE_HALF Mask */
#define CSR_PHY_REG_ABB1_RG_RX_BPF_COMP_OPTION_Pos 27                                                 /*!< CSR_PHY REG_ABB1: RG_RX_BPF_COMP_OPTION Position */
#define CSR_PHY_REG_ABB1_RG_RX_BPF_COMP_OPTION_Msk (0x01UL << CSR_PHY_REG_ABB1_RG_RX_BPF_COMP_OPTION_Pos)/*!< CSR_PHY REG_ABB1: RG_RX_BPF_COMP_OPTION Mask */
#define CSR_PHY_REG_ABB1_RG_RX_FILTERI_DOUBLE_Pos 28                                                  /*!< CSR_PHY REG_ABB1: RG_RX_FILTERI_DOUBLE Position */
#define CSR_PHY_REG_ABB1_RG_RX_FILTERI_DOUBLE_Msk (0x01UL << CSR_PHY_REG_ABB1_RG_RX_FILTERI_DOUBLE_Pos)/*!< CSR_PHY REG_ABB1: RG_RX_FILTERI_DOUBLE Mask */
#define CSR_PHY_REG_ABB1_RG_TX_SETUPTIME2_Pos 29                                                      /*!< CSR_PHY REG_ABB1: RG_TX_SETUPTIME2 Position */
#define CSR_PHY_REG_ABB1_RG_TX_SETUPTIME2_Msk (0x07UL << CSR_PHY_REG_ABB1_RG_TX_SETUPTIME2_Pos)       /*!< CSR_PHY REG_ABB1: RG_TX_SETUPTIME2 Mask */

/* ------------------------------  CSR_PHY_REG_RCCAL  ----------------------------- */
#define CSR_PHY_REG_RCCAL_RG_RX_RCCAL_CNN_Pos 0                                                       /*!< CSR_PHY REG_RCCAL: RG_RX_RCCAL_CNN Position */
#define CSR_PHY_REG_RCCAL_RG_RX_RCCAL_CNN_Msk (0x000001ffUL << CSR_PHY_REG_RCCAL_RG_RX_RCCAL_CNN_Pos) /*!< CSR_PHY REG_RCCAL: RG_RX_RCCAL_CNN Mask */
#define CSR_PHY_REG_RCCAL_RG_RX_RCCAL_OST_Pos 9                                                       /*!< CSR_PHY REG_RCCAL: RG_RX_RCCAL_OST Position */
#define CSR_PHY_REG_RCCAL_RG_RX_RCCAL_OST_Msk (0x0fUL << CSR_PHY_REG_RCCAL_RG_RX_RCCAL_OST_Pos)       /*!< CSR_PHY REG_RCCAL: RG_RX_RCCAL_OST Mask */
#define CSR_PHY_REG_RCCAL_RG_RX_RCCAL_TI_Pos  13                                                      /*!< CSR_PHY REG_RCCAL: RG_RX_RCCAL_TI Position */
#define CSR_PHY_REG_RCCAL_RG_RX_RCCAL_TI_Msk  (0x01UL << CSR_PHY_REG_RCCAL_RG_RX_RCCAL_TI_Pos)        /*!< CSR_PHY REG_RCCAL: RG_RX_RCCAL_TI Mask  */
#define CSR_PHY_REG_RCCAL_RG_RX_CTUNE_OST_Pos 14                                                      /*!< CSR_PHY REG_RCCAL: RG_RX_CTUNE_OST Position */
#define CSR_PHY_REG_RCCAL_RG_RX_CTUNE_OST_Msk (0x03UL << CSR_PHY_REG_RCCAL_RG_RX_CTUNE_OST_Pos)       /*!< CSR_PHY REG_RCCAL: RG_RX_CTUNE_OST Mask */
#define CSR_PHY_REG_RCCAL_RG_RX_CTUNE_OST_POL_Pos 16                                                  /*!< CSR_PHY REG_RCCAL: RG_RX_CTUNE_OST_POL Position */
#define CSR_PHY_REG_RCCAL_RG_RX_CTUNE_OST_POL_Msk (0x01UL << CSR_PHY_REG_RCCAL_RG_RX_CTUNE_OST_POL_Pos)/*!< CSR_PHY REG_RCCAL: RG_RX_CTUNE_OST_POL Mask */
#define CSR_PHY_REG_RCCAL_RG_TX_SETUPTIME1_Pos 17                                                     /*!< CSR_PHY REG_RCCAL: RG_TX_SETUPTIME1 Position */
#define CSR_PHY_REG_RCCAL_RG_TX_SETUPTIME1_Msk (0x3fUL << CSR_PHY_REG_RCCAL_RG_TX_SETUPTIME1_Pos)     /*!< CSR_PHY REG_RCCAL: RG_TX_SETUPTIME1 Mask */
#define CSR_PHY_REG_RCCAL_RG_RX_STARTUP_Pos   24                                                      /*!< CSR_PHY REG_RCCAL: RG_RX_STARTUP Position */
#define CSR_PHY_REG_RCCAL_RG_RX_STARTUP_Msk   (0x0fUL << CSR_PHY_REG_RCCAL_RG_RX_STARTUP_Pos)         /*!< CSR_PHY REG_RCCAL: RG_RX_STARTUP Mask   */
#define CSR_PHY_REG_RCCAL_RG_TX_STARTUP_Pos   28                                                      /*!< CSR_PHY REG_RCCAL: RG_TX_STARTUP Position */
#define CSR_PHY_REG_RCCAL_RG_TX_STARTUP_Msk   (0x0fUL << CSR_PHY_REG_RCCAL_RG_TX_STARTUP_Pos)         /*!< CSR_PHY REG_RCCAL: RG_TX_STARTUP Mask   */

/* -------------------------  CSR_PHY_REG_TX_LOBF_TIMING  ------------------------- */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_PA_G1_Pos 0                                                  /*!< CSR_PHY REG_TX_LOBF_TIMING: RG_TX_PA_G1 Position */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_PA_G1_Msk (0x07UL << CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_PA_G1_Pos)/*!< CSR_PHY REG_TX_LOBF_TIMING: RG_TX_PA_G1 Mask */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_PA_G2_Pos 3                                                  /*!< CSR_PHY REG_TX_LOBF_TIMING: RG_TX_PA_G2 Position */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_PA_G2_Msk (0x07UL << CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_PA_G2_Pos)/*!< CSR_PHY REG_TX_LOBF_TIMING: RG_TX_PA_G2 Mask */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_TSSI_VREF_Pos 6                                              /*!< CSR_PHY REG_TX_LOBF_TIMING: RG_TX_TSSI_VREF Position */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_TSSI_VREF_Msk (0x07UL << CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_TSSI_VREF_Pos)/*!< CSR_PHY REG_TX_LOBF_TIMING: RG_TX_TSSI_VREF Mask */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_PABIAS_Pos 9                                                 /*!< CSR_PHY REG_TX_LOBF_TIMING: RG_TX_PABIAS Position */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_PABIAS_Msk (0x0fUL << CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_PABIAS_Pos)/*!< CSR_PHY REG_TX_LOBF_TIMING: RG_TX_PABIAS Mask */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_SX_VCOBFSEL_Pos 13                                              /*!< CSR_PHY REG_TX_LOBF_TIMING: RG_SX_VCOBFSEL Position */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_SX_VCOBFSEL_Msk (0x01UL << CSR_PHY_REG_TX_LOBF_TIMING_RG_SX_VCOBFSEL_Pos)/*!< CSR_PHY REG_TX_LOBF_TIMING: RG_SX_VCOBFSEL Mask */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_SX_DIVBFSEL_Pos 14                                              /*!< CSR_PHY REG_TX_LOBF_TIMING: RG_SX_DIVBFSEL Position */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_SX_DIVBFSEL_Msk (0x01UL << CSR_PHY_REG_TX_LOBF_TIMING_RG_SX_DIVBFSEL_Pos)/*!< CSR_PHY REG_TX_LOBF_TIMING: RG_SX_DIVBFSEL Mask */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_SX_TXBFSEL_Pos 15                                               /*!< CSR_PHY REG_TX_LOBF_TIMING: RG_SX_TXBFSEL Position */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_SX_TXBFSEL_Msk (0x01UL << CSR_PHY_REG_TX_LOBF_TIMING_RG_SX_TXBFSEL_Pos)/*!< CSR_PHY REG_TX_LOBF_TIMING: RG_SX_TXBFSEL Mask */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_SX_RXBFSEL_Pos 16                                               /*!< CSR_PHY REG_TX_LOBF_TIMING: RG_SX_RXBFSEL Position */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_SX_RXBFSEL_Msk (0x01UL << CSR_PHY_REG_TX_LOBF_TIMING_RG_SX_RXBFSEL_Pos)/*!< CSR_PHY REG_TX_LOBF_TIMING: RG_SX_RXBFSEL Mask */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_RAMP_T1_Pos 17                                               /*!< CSR_PHY REG_TX_LOBF_TIMING: RG_TX_RAMP_T1 Position */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_RAMP_T1_Msk (0x03UL << CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_RAMP_T1_Pos)/*!< CSR_PHY REG_TX_LOBF_TIMING: RG_TX_RAMP_T1 Mask */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_RAMP_T2_Pos 19                                               /*!< CSR_PHY REG_TX_LOBF_TIMING: RG_TX_RAMP_T2 Position */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_RAMP_T2_Msk (0x03UL << CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_RAMP_T2_Pos)/*!< CSR_PHY REG_TX_LOBF_TIMING: RG_TX_RAMP_T2 Mask */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_RAMP_T3_Pos 21                                               /*!< CSR_PHY REG_TX_LOBF_TIMING: RG_TX_RAMP_T3 Position */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_RAMP_T3_Msk (0x03UL << CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_RAMP_T3_Pos)/*!< CSR_PHY REG_TX_LOBF_TIMING: RG_TX_RAMP_T3 Mask */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_RAMP_T4_Pos 23                                               /*!< CSR_PHY REG_TX_LOBF_TIMING: RG_TX_RAMP_T4 Position */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_RAMP_T4_Msk (0x03UL << CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_RAMP_T4_Pos)/*!< CSR_PHY REG_TX_LOBF_TIMING: RG_TX_RAMP_T4 Mask */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_PA_ANASW_R_Pos 25                                            /*!< CSR_PHY REG_TX_LOBF_TIMING: RG_TX_PA_ANASW_R Position */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_PA_ANASW_R_Msk (0x03UL << CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_PA_ANASW_R_Pos)/*!< CSR_PHY REG_TX_LOBF_TIMING: RG_TX_PA_ANASW_R Mask */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_PA_ANASW_R_OFF_Pos 27                                        /*!< CSR_PHY REG_TX_LOBF_TIMING: RG_TX_PA_ANASW_R_OFF Position */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_PA_ANASW_R_OFF_Msk (0x03UL << CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_PA_ANASW_R_OFF_Pos)/*!< CSR_PHY REG_TX_LOBF_TIMING: RG_TX_PA_ANASW_R_OFF Mask */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_RX_TURNON_T_Pos 29                                              /*!< CSR_PHY REG_TX_LOBF_TIMING: RG_RX_TURNON_T Position */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_RX_TURNON_T_Msk (0x03UL << CSR_PHY_REG_TX_LOBF_TIMING_RG_RX_TURNON_T_Pos)/*!< CSR_PHY REG_TX_LOBF_TIMING: RG_RX_TURNON_T Mask */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_PA_ANASW_Pos 31                                              /*!< CSR_PHY REG_TX_LOBF_TIMING: RG_TX_PA_ANASW Position */
#define CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_PA_ANASW_Msk (0x01UL << CSR_PHY_REG_TX_LOBF_TIMING_RG_TX_PA_ANASW_Pos)/*!< CSR_PHY REG_TX_LOBF_TIMING: RG_TX_PA_ANASW Mask */

/* -----------------------------  CSR_PHY_REG_RX_FE_1  ---------------------------- */
#define CSR_PHY_REG_RX_FE_1_RG_RX_HG_LNA_BIASN_Pos 0                                                  /*!< CSR_PHY REG_RX_FE_1: RG_RX_HG_LNA_BIASN Position */
#define CSR_PHY_REG_RX_FE_1_RG_RX_HG_LNA_BIASN_Msk (0x0fUL << CSR_PHY_REG_RX_FE_1_RG_RX_HG_LNA_BIASN_Pos)/*!< CSR_PHY REG_RX_FE_1: RG_RX_HG_LNA_BIASN Mask */
#define CSR_PHY_REG_RX_FE_1_RG_RX_HG_LNA_BIASP_Pos 4                                                  /*!< CSR_PHY REG_RX_FE_1: RG_RX_HG_LNA_BIASP Position */
#define CSR_PHY_REG_RX_FE_1_RG_RX_HG_LNA_BIASP_Msk (0x0fUL << CSR_PHY_REG_RX_FE_1_RG_RX_HG_LNA_BIASP_Pos)/*!< CSR_PHY REG_RX_FE_1: RG_RX_HG_LNA_BIASP Mask */
#define CSR_PHY_REG_RX_FE_1_RG_RX_LG_LNA_BIASN_Pos 8                                                  /*!< CSR_PHY REG_RX_FE_1: RG_RX_LG_LNA_BIASN Position */
#define CSR_PHY_REG_RX_FE_1_RG_RX_LG_LNA_BIASN_Msk (0x0fUL << CSR_PHY_REG_RX_FE_1_RG_RX_LG_LNA_BIASN_Pos)/*!< CSR_PHY REG_RX_FE_1: RG_RX_LG_LNA_BIASN Mask */
#define CSR_PHY_REG_RX_FE_1_RG_RX_LG_LNA_ATT_Pos 12                                                   /*!< CSR_PHY REG_RX_FE_1: RG_RX_LG_LNA_ATT Position */
#define CSR_PHY_REG_RX_FE_1_RG_RX_LG_LNA_ATT_Msk (0x07UL << CSR_PHY_REG_RX_FE_1_RG_RX_LG_LNA_ATT_Pos) /*!< CSR_PHY REG_RX_FE_1: RG_RX_LG_LNA_ATT Mask */
#define CSR_PHY_REG_RX_FE_1_RG_RX_MIXER_SQDC_Pos 15                                                   /*!< CSR_PHY REG_RX_FE_1: RG_RX_MIXER_SQDC Position */
#define CSR_PHY_REG_RX_FE_1_RG_RX_MIXER_SQDC_Msk (0x07UL << CSR_PHY_REG_RX_FE_1_RG_RX_MIXER_SQDC_Pos) /*!< CSR_PHY REG_RX_FE_1: RG_RX_MIXER_SQDC Mask */
#define CSR_PHY_REG_RX_FE_1_RG_RX_LOGEN_LEVEL_Pos 18                                                  /*!< CSR_PHY REG_RX_FE_1: RG_RX_LOGEN_LEVEL Position */
#define CSR_PHY_REG_RX_FE_1_RG_RX_LOGEN_LEVEL_Msk (0x03UL << CSR_PHY_REG_RX_FE_1_RG_RX_LOGEN_LEVEL_Pos)/*!< CSR_PHY REG_RX_FE_1: RG_RX_LOGEN_LEVEL Mask */
#define CSR_PHY_REG_RX_FE_1_RG_RX_LOGEN_ICAL_Pos 20                                                   /*!< CSR_PHY REG_RX_FE_1: RG_RX_LOGEN_ICAL Position */
#define CSR_PHY_REG_RX_FE_1_RG_RX_LOGEN_ICAL_Msk (0x03UL << CSR_PHY_REG_RX_FE_1_RG_RX_LOGEN_ICAL_Pos) /*!< CSR_PHY REG_RX_FE_1: RG_RX_LOGEN_ICAL Mask */
#define CSR_PHY_REG_RX_FE_1_RG_RX_LOGEN_QCAL_Pos 22                                                   /*!< CSR_PHY REG_RX_FE_1: RG_RX_LOGEN_QCAL Position */
#define CSR_PHY_REG_RX_FE_1_RG_RX_LOGEN_QCAL_Msk (0x03UL << CSR_PHY_REG_RX_FE_1_RG_RX_LOGEN_QCAL_Pos) /*!< CSR_PHY REG_RX_FE_1: RG_RX_LOGEN_QCAL Mask */
#define CSR_PHY_REG_RX_FE_1_RG_RX_VREF1_SEL_Pos 24                                                    /*!< CSR_PHY REG_RX_FE_1: RG_RX_VREF1_SEL Position */
#define CSR_PHY_REG_RX_FE_1_RG_RX_VREF1_SEL_Msk (0x07UL << CSR_PHY_REG_RX_FE_1_RG_RX_VREF1_SEL_Pos)   /*!< CSR_PHY REG_RX_FE_1: RG_RX_VREF1_SEL Mask */
#define CSR_PHY_REG_RX_FE_1_RG_RX_VREF2_SEL_Pos 27                                                    /*!< CSR_PHY REG_RX_FE_1: RG_RX_VREF2_SEL Position */
#define CSR_PHY_REG_RX_FE_1_RG_RX_VREF2_SEL_Msk (0x07UL << CSR_PHY_REG_RX_FE_1_RG_RX_VREF2_SEL_Pos)   /*!< CSR_PHY REG_RX_FE_1: RG_RX_VREF2_SEL Mask */
#define CSR_PHY_REG_RX_FE_1_RG_RX_VREF3_SEL_Pos 30                                                    /*!< CSR_PHY REG_RX_FE_1: RG_RX_VREF3_SEL Position */
#define CSR_PHY_REG_RX_FE_1_RG_RX_VREF3_SEL_Msk (0x03UL << CSR_PHY_REG_RX_FE_1_RG_RX_VREF3_SEL_Pos)   /*!< CSR_PHY REG_RX_FE_1: RG_RX_VREF3_SEL Mask */

/* ------------------------------  CSR_PHY_REG_SX_EN  ----------------------------- */
#define CSR_PHY_REG_SX_EN_RG_EN_SX_VCO_Pos    0                                                       /*!< CSR_PHY REG_SX_EN: RG_EN_SX_VCO Position */
#define CSR_PHY_REG_SX_EN_RG_EN_SX_VCO_Msk    (0x01UL << CSR_PHY_REG_SX_EN_RG_EN_SX_VCO_Pos)          /*!< CSR_PHY REG_SX_EN: RG_EN_SX_VCO Mask    */
#define CSR_PHY_REG_SX_EN_RG_EN_SX_DIVCK_Pos  1                                                       /*!< CSR_PHY REG_SX_EN: RG_EN_SX_DIVCK Position */
#define CSR_PHY_REG_SX_EN_RG_EN_SX_DIVCK_Msk  (0x01UL << CSR_PHY_REG_SX_EN_RG_EN_SX_DIVCK_Pos)        /*!< CSR_PHY REG_SX_EN: RG_EN_SX_DIVCK Mask  */
#define CSR_PHY_REG_SX_EN_RG_EN_SX_DIV_Pos    3                                                       /*!< CSR_PHY REG_SX_EN: RG_EN_SX_DIV Position */
#define CSR_PHY_REG_SX_EN_RG_EN_SX_DIV_Msk    (0x01UL << CSR_PHY_REG_SX_EN_RG_EN_SX_DIV_Pos)          /*!< CSR_PHY REG_SX_EN: RG_EN_SX_DIV Mask    */
#define CSR_PHY_REG_SX_EN_RG_EN_SX_VCO_MAN_Pos 5                                                      /*!< CSR_PHY REG_SX_EN: RG_EN_SX_VCO_MAN Position */
#define CSR_PHY_REG_SX_EN_RG_EN_SX_VCO_MAN_Msk (0x01UL << CSR_PHY_REG_SX_EN_RG_EN_SX_VCO_MAN_Pos)     /*!< CSR_PHY REG_SX_EN: RG_EN_SX_VCO_MAN Mask */
#define CSR_PHY_REG_SX_EN_RG_EN_SX_VCO_DLY_Pos 6                                                      /*!< CSR_PHY REG_SX_EN: RG_EN_SX_VCO_DLY Position */
#define CSR_PHY_REG_SX_EN_RG_EN_SX_VCO_DLY_Msk (0x07UL << CSR_PHY_REG_SX_EN_RG_EN_SX_VCO_DLY_Pos)     /*!< CSR_PHY REG_SX_EN: RG_EN_SX_VCO_DLY Mask */
#define CSR_PHY_REG_SX_EN_RG_EN_SX_VCOBF_TX_MAN_Pos 10                                                /*!< CSR_PHY REG_SX_EN: RG_EN_SX_VCOBF_TX_MAN Position */
#define CSR_PHY_REG_SX_EN_RG_EN_SX_VCOBF_TX_MAN_Msk (0x01UL << CSR_PHY_REG_SX_EN_RG_EN_SX_VCOBF_TX_MAN_Pos)/*!< CSR_PHY REG_SX_EN: RG_EN_SX_VCOBF_TX_MAN Mask */
#define CSR_PHY_REG_SX_EN_RG_EN_SX_VCOBF_TX_Pos 11                                                    /*!< CSR_PHY REG_SX_EN: RG_EN_SX_VCOBF_TX Position */
#define CSR_PHY_REG_SX_EN_RG_EN_SX_VCOBF_TX_Msk (0x01UL << CSR_PHY_REG_SX_EN_RG_EN_SX_VCOBF_TX_Pos)   /*!< CSR_PHY REG_SX_EN: RG_EN_SX_VCOBF_TX Mask */
#define CSR_PHY_REG_SX_EN_RG_SX_VCO_TXOB_AW_Pos 12                                                    /*!< CSR_PHY REG_SX_EN: RG_SX_VCO_TXOB_AW Position */
#define CSR_PHY_REG_SX_EN_RG_SX_VCO_TXOB_AW_Msk (0x01UL << CSR_PHY_REG_SX_EN_RG_SX_VCO_TXOB_AW_Pos)   /*!< CSR_PHY REG_SX_EN: RG_SX_VCO_TXOB_AW Mask */
#define CSR_PHY_REG_SX_EN_RG_EN_SX_VCOBF_RX_MAN_Pos 13                                                /*!< CSR_PHY REG_SX_EN: RG_EN_SX_VCOBF_RX_MAN Position */
#define CSR_PHY_REG_SX_EN_RG_EN_SX_VCOBF_RX_MAN_Msk (0x01UL << CSR_PHY_REG_SX_EN_RG_EN_SX_VCOBF_RX_MAN_Pos)/*!< CSR_PHY REG_SX_EN: RG_EN_SX_VCOBF_RX_MAN Mask */
#define CSR_PHY_REG_SX_EN_RG_EN_SX_VCOBF_RX_Pos 14                                                    /*!< CSR_PHY REG_SX_EN: RG_EN_SX_VCOBF_RX Position */
#define CSR_PHY_REG_SX_EN_RG_EN_SX_VCOBF_RX_Msk (0x01UL << CSR_PHY_REG_SX_EN_RG_EN_SX_VCOBF_RX_Pos)   /*!< CSR_PHY REG_SX_EN: RG_EN_SX_VCOBF_RX Mask */
#define CSR_PHY_REG_SX_EN_RG_SX_VCO_RXOB_AW_Pos 15                                                    /*!< CSR_PHY REG_SX_EN: RG_SX_VCO_RXOB_AW Position */
#define CSR_PHY_REG_SX_EN_RG_SX_VCO_RXOB_AW_Msk (0x01UL << CSR_PHY_REG_SX_EN_RG_SX_VCO_RXOB_AW_Pos)   /*!< CSR_PHY REG_SX_EN: RG_SX_VCO_RXOB_AW Mask */
#define CSR_PHY_REG_SX_EN_RG_EN_SX_MOD_Pos    16                                                      /*!< CSR_PHY REG_SX_EN: RG_EN_SX_MOD Position */
#define CSR_PHY_REG_SX_EN_RG_EN_SX_MOD_Msk    (0x01UL << CSR_PHY_REG_SX_EN_RG_EN_SX_MOD_Pos)          /*!< CSR_PHY REG_SX_EN: RG_EN_SX_MOD Mask    */
#define CSR_PHY_REG_SX_EN_RG_EN_SX_VCOMON_Pos 18                                                      /*!< CSR_PHY REG_SX_EN: RG_EN_SX_VCOMON Position */
#define CSR_PHY_REG_SX_EN_RG_EN_SX_VCOMON_Msk (0x01UL << CSR_PHY_REG_SX_EN_RG_EN_SX_VCOMON_Pos)       /*!< CSR_PHY REG_SX_EN: RG_EN_SX_VCOMON Mask */
#define CSR_PHY_REG_SX_EN_RG_SX_SXBUF_CAPIMB_POL_Pos 20                                               /*!< CSR_PHY REG_SX_EN: RG_SX_SXBUF_CAPIMB_POL Position */
#define CSR_PHY_REG_SX_EN_RG_SX_SXBUF_CAPIMB_POL_Msk (0x01UL << CSR_PHY_REG_SX_EN_RG_SX_SXBUF_CAPIMB_POL_Pos)/*!< CSR_PHY REG_SX_EN: RG_SX_SXBUF_CAPIMB_POL Mask */
#define CSR_PHY_REG_SX_EN_RG_SX_SXBUF_CAPIMB_Pos 21                                                   /*!< CSR_PHY REG_SX_EN: RG_SX_SXBUF_CAPIMB Position */
#define CSR_PHY_REG_SX_EN_RG_SX_SXBUF_CAPIMB_Msk (0x07UL << CSR_PHY_REG_SX_EN_RG_SX_SXBUF_CAPIMB_Pos) /*!< CSR_PHY REG_SX_EN: RG_SX_SXBUF_CAPIMB Mask */

/* -------------------------------  CSR_PHY_REG_SX1  ------------------------------ */
#define CSR_PHY_REG_SX1_RG_SX_DFM_CAL_MODE_MAN_Pos 0                                                  /*!< CSR_PHY REG_SX1: RG_SX_DFM_CAL_MODE_MAN Position */
#define CSR_PHY_REG_SX1_RG_SX_DFM_CAL_MODE_MAN_Msk (0x01UL << CSR_PHY_REG_SX1_RG_SX_DFM_CAL_MODE_MAN_Pos)/*!< CSR_PHY REG_SX1: RG_SX_DFM_CAL_MODE_MAN Mask */
#define CSR_PHY_REG_SX1_RG_SX_DFM_CAL_MODE_Pos 1                                                      /*!< CSR_PHY REG_SX1: RG_SX_DFM_CAL_MODE Position */
#define CSR_PHY_REG_SX1_RG_SX_DFM_CAL_MODE_Msk (0x07UL << CSR_PHY_REG_SX1_RG_SX_DFM_CAL_MODE_Pos)     /*!< CSR_PHY REG_SX1: RG_SX_DFM_CAL_MODE Mask */
#define CSR_PHY_REG_SX1_RG_SX_DFM_CAL_TI_Pos  4                                                       /*!< CSR_PHY REG_SX1: RG_SX_DFM_CAL_TI Position */
#define CSR_PHY_REG_SX1_RG_SX_DFM_CAL_TI_Msk  (0x01UL << CSR_PHY_REG_SX1_RG_SX_DFM_CAL_TI_Pos)        /*!< CSR_PHY REG_SX1: RG_SX_DFM_CAL_TI Mask  */
#define CSR_PHY_REG_SX1_RG_SX_DFM_CAL_INIT_Pos 5                                                      /*!< CSR_PHY REG_SX1: RG_SX_DFM_CAL_INIT Position */
#define CSR_PHY_REG_SX1_RG_SX_DFM_CAL_INIT_Msk (0x07UL << CSR_PHY_REG_SX1_RG_SX_DFM_CAL_INIT_Pos)     /*!< CSR_PHY REG_SX1: RG_SX_DFM_CAL_INIT Mask */
#define CSR_PHY_REG_SX1_RG_SX_DFM_LGCAL_KVDOUB_Pos 8                                                  /*!< CSR_PHY REG_SX1: RG_SX_DFM_LGCAL_KVDOUB Position */
#define CSR_PHY_REG_SX1_RG_SX_DFM_LGCAL_KVDOUB_Msk (0x01UL << CSR_PHY_REG_SX1_RG_SX_DFM_LGCAL_KVDOUB_Pos)/*!< CSR_PHY REG_SX1: RG_SX_DFM_LGCAL_KVDOUB Mask */
#define CSR_PHY_REG_SX1_RG_EN_SX_CP_MAN_Pos   9                                                       /*!< CSR_PHY REG_SX1: RG_EN_SX_CP_MAN Position */
#define CSR_PHY_REG_SX1_RG_EN_SX_CP_MAN_Msk   (0x01UL << CSR_PHY_REG_SX1_RG_EN_SX_CP_MAN_Pos)         /*!< CSR_PHY REG_SX1: RG_EN_SX_CP_MAN Mask   */
#define CSR_PHY_REG_SX1_RG_EN_SX_CP_Pos       10                                                      /*!< CSR_PHY REG_SX1: RG_EN_SX_CP Position   */
#define CSR_PHY_REG_SX1_RG_EN_SX_CP_Msk       (0x01UL << CSR_PHY_REG_SX1_RG_EN_SX_CP_Pos)             /*!< CSR_PHY REG_SX1: RG_EN_SX_CP Mask       */
#define CSR_PHY_REG_SX1_RG_SX_DFM_UOP_MAN_Pos 11                                                      /*!< CSR_PHY REG_SX1: RG_SX_DFM_UOP_MAN Position */
#define CSR_PHY_REG_SX1_RG_SX_DFM_UOP_MAN_Msk (0x01UL << CSR_PHY_REG_SX1_RG_SX_DFM_UOP_MAN_Pos)       /*!< CSR_PHY REG_SX1: RG_SX_DFM_UOP_MAN Mask */
#define CSR_PHY_REG_SX1_RG_SX_DFM_UOP_EN_Pos  12                                                      /*!< CSR_PHY REG_SX1: RG_SX_DFM_UOP_EN Position */
#define CSR_PHY_REG_SX1_RG_SX_DFM_UOP_EN_Msk  (0x01UL << CSR_PHY_REG_SX1_RG_SX_DFM_UOP_EN_Pos)        /*!< CSR_PHY REG_SX1: RG_SX_DFM_UOP_EN Mask  */
#define CSR_PHY_REG_SX1_RG_EN_SX_DFM_PM_Pos   13                                                      /*!< CSR_PHY REG_SX1: RG_EN_SX_DFM_PM Position */
#define CSR_PHY_REG_SX1_RG_EN_SX_DFM_PM_Msk   (0x01UL << CSR_PHY_REG_SX1_RG_EN_SX_DFM_PM_Pos)         /*!< CSR_PHY REG_SX1: RG_EN_SX_DFM_PM Mask   */
#define CSR_PHY_REG_SX1_RG_SX_RXCHANNEL_MAN_Pos 14                                                    /*!< CSR_PHY REG_SX1: RG_SX_RXCHANNEL_MAN Position */
#define CSR_PHY_REG_SX1_RG_SX_RXCHANNEL_MAN_Msk (0x01UL << CSR_PHY_REG_SX1_RG_SX_RXCHANNEL_MAN_Pos)   /*!< CSR_PHY REG_SX1: RG_SX_RXCHANNEL_MAN Mask */
#define CSR_PHY_REG_SX1_RG_SX_SBCAL_DIS_Pos   16                                                      /*!< CSR_PHY REG_SX1: RG_SX_SBCAL_DIS Position */
#define CSR_PHY_REG_SX1_RG_SX_SBCAL_DIS_Msk   (0x01UL << CSR_PHY_REG_SX1_RG_SX_SBCAL_DIS_Pos)         /*!< CSR_PHY REG_SX1: RG_SX_SBCAL_DIS Mask   */
#define CSR_PHY_REG_SX1_RG_SX_DFM_LGCAL_DIS_Pos 17                                                    /*!< CSR_PHY REG_SX1: RG_SX_DFM_LGCAL_DIS Position */
#define CSR_PHY_REG_SX1_RG_SX_DFM_LGCAL_DIS_Msk (0x01UL << CSR_PHY_REG_SX1_RG_SX_DFM_LGCAL_DIS_Pos)   /*!< CSR_PHY REG_SX1: RG_SX_DFM_LGCAL_DIS Mask */
#define CSR_PHY_REG_SX1_RG_SX_DFM_RCCAL_DIS_Pos 18                                                    /*!< CSR_PHY REG_SX1: RG_SX_DFM_RCCAL_DIS Position */
#define CSR_PHY_REG_SX1_RG_SX_DFM_RCCAL_DIS_Msk (0x01UL << CSR_PHY_REG_SX1_RG_SX_DFM_RCCAL_DIS_Pos)   /*!< CSR_PHY REG_SX1: RG_SX_DFM_RCCAL_DIS Mask */
#define CSR_PHY_REG_SX1_RG_SX_RFCTRL_CH_10_8_Pos 28                                                   /*!< CSR_PHY REG_SX1: RG_SX_RFCTRL_CH_10_8 Position */
#define CSR_PHY_REG_SX1_RG_SX_RFCTRL_CH_10_8_Msk (0x07UL << CSR_PHY_REG_SX1_RG_SX_RFCTRL_CH_10_8_Pos) /*!< CSR_PHY REG_SX1: RG_SX_RFCTRL_CH_10_8 Mask */

/* -------------------------------  CSR_PHY_REG_SX2  ------------------------------ */
#define CSR_PHY_REG_SX2_RG_SX_RFCTRL_F_Pos    0                                                       /*!< CSR_PHY REG_SX2: RG_SX_RFCTRL_F Position */
#define CSR_PHY_REG_SX2_RG_SX_RFCTRL_F_Msk    (0x00ffffffUL << CSR_PHY_REG_SX2_RG_SX_RFCTRL_F_Pos)    /*!< CSR_PHY REG_SX2: RG_SX_RFCTRL_F Mask    */
#define CSR_PHY_REG_SX2_RG_SX_RFCTRL_CH_7_0_Pos 24                                                    /*!< CSR_PHY REG_SX2: RG_SX_RFCTRL_CH_7_0 Position */
#define CSR_PHY_REG_SX2_RG_SX_RFCTRL_CH_7_0_Msk (0x000000ffUL << CSR_PHY_REG_SX2_RG_SX_RFCTRL_CH_7_0_Pos)/*!< CSR_PHY REG_SX2: RG_SX_RFCTRL_CH_7_0 Mask */

/* -------------------------------  CSR_PHY_REG_SX3  ------------------------------ */
#define CSR_PHY_REG_SX3_RG_SX_PCP_ISEL_Pos    0                                                       /*!< CSR_PHY REG_SX3: RG_SX_PCP_ISEL Position */
#define CSR_PHY_REG_SX3_RG_SX_PCP_ISEL_Msk    (0x1fUL << CSR_PHY_REG_SX3_RG_SX_PCP_ISEL_Pos)          /*!< CSR_PHY REG_SX3: RG_SX_PCP_ISEL Mask    */
#define CSR_PHY_REG_SX3_RG_SX_PCP_ISEL4_Pos   5                                                       /*!< CSR_PHY REG_SX3: RG_SX_PCP_ISEL4 Position */
#define CSR_PHY_REG_SX3_RG_SX_PCP_ISEL4_Msk   (0x01UL << CSR_PHY_REG_SX3_RG_SX_PCP_ISEL4_Pos)         /*!< CSR_PHY REG_SX3: RG_SX_PCP_ISEL4 Mask   */
#define CSR_PHY_REG_SX3_RG_SX_PCP_ISEL8_Pos   6                                                       /*!< CSR_PHY REG_SX3: RG_SX_PCP_ISEL8 Position */
#define CSR_PHY_REG_SX3_RG_SX_PCP_ISEL8_Msk   (0x01UL << CSR_PHY_REG_SX3_RG_SX_PCP_ISEL8_Pos)         /*!< CSR_PHY REG_SX3: RG_SX_PCP_ISEL8 Mask   */
#define CSR_PHY_REG_SX3_RG_SX_PCP_KPDOUB_Pos  7                                                       /*!< CSR_PHY REG_SX3: RG_SX_PCP_KPDOUB Position */
#define CSR_PHY_REG_SX3_RG_SX_PCP_KPDOUB_Msk  (0x01UL << CSR_PHY_REG_SX3_RG_SX_PCP_KPDOUB_Pos)        /*!< CSR_PHY REG_SX3: RG_SX_PCP_KPDOUB Mask  */
#define CSR_PHY_REG_SX3_RG_SX_ICP_ISEL_Pos    8                                                       /*!< CSR_PHY REG_SX3: RG_SX_ICP_ISEL Position */
#define CSR_PHY_REG_SX3_RG_SX_ICP_ISEL_Msk    (0x0fUL << CSR_PHY_REG_SX3_RG_SX_ICP_ISEL_Pos)          /*!< CSR_PHY REG_SX3: RG_SX_ICP_ISEL Mask    */
#define CSR_PHY_REG_SX3_RG_SX_ICP_ISEL8_Pos   12                                                      /*!< CSR_PHY REG_SX3: RG_SX_ICP_ISEL8 Position */
#define CSR_PHY_REG_SX3_RG_SX_ICP_ISEL8_Msk   (0x01UL << CSR_PHY_REG_SX3_RG_SX_ICP_ISEL8_Pos)         /*!< CSR_PHY REG_SX3: RG_SX_ICP_ISEL8 Mask   */
#define CSR_PHY_REG_SX3_RG_SX_PFDSEL_Pos      13                                                      /*!< CSR_PHY REG_SX3: RG_SX_PFDSEL Position  */
#define CSR_PHY_REG_SX3_RG_SX_PFDSEL_Msk      (0x01UL << CSR_PHY_REG_SX3_RG_SX_PFDSEL_Pos)            /*!< CSR_PHY REG_SX3: RG_SX_PFDSEL Mask      */
#define CSR_PHY_REG_SX3_RG_SX_PFD_SET_Pos     14                                                      /*!< CSR_PHY REG_SX3: RG_SX_PFD_SET Position */
#define CSR_PHY_REG_SX3_RG_SX_PFD_SET_Msk     (0x01UL << CSR_PHY_REG_SX3_RG_SX_PFD_SET_Pos)           /*!< CSR_PHY REG_SX3: RG_SX_PFD_SET Mask     */
#define CSR_PHY_REG_SX3_RG_SX_PFD_SET1_Pos    15                                                      /*!< CSR_PHY REG_SX3: RG_SX_PFD_SET1 Position */
#define CSR_PHY_REG_SX3_RG_SX_PFD_SET1_Msk    (0x01UL << CSR_PHY_REG_SX3_RG_SX_PFD_SET1_Pos)          /*!< CSR_PHY REG_SX3: RG_SX_PFD_SET1 Mask    */
#define CSR_PHY_REG_SX3_RG_SX_PFD_SET2_Pos    16                                                      /*!< CSR_PHY REG_SX3: RG_SX_PFD_SET2 Position */
#define CSR_PHY_REG_SX3_RG_SX_PFD_SET2_Msk    (0x01UL << CSR_PHY_REG_SX3_RG_SX_PFD_SET2_Pos)          /*!< CSR_PHY REG_SX3: RG_SX_PFD_SET2 Mask    */
#define CSR_PHY_REG_SX3_RG_SX_PFD_RST_Pos     17                                                      /*!< CSR_PHY REG_SX3: RG_SX_PFD_RST Position */
#define CSR_PHY_REG_SX3_RG_SX_PFD_RST_Msk     (0x01UL << CSR_PHY_REG_SX3_RG_SX_PFD_RST_Pos)           /*!< CSR_PHY REG_SX3: RG_SX_PFD_RST Mask     */
#define CSR_PHY_REG_SX3_RG_SX_PFD_VSEL_Pos    18                                                      /*!< CSR_PHY REG_SX3: RG_SX_PFD_VSEL Position */
#define CSR_PHY_REG_SX3_RG_SX_PFD_VSEL_Msk    (0x03UL << CSR_PHY_REG_SX3_RG_SX_PFD_VSEL_Pos)          /*!< CSR_PHY REG_SX3: RG_SX_PFD_VSEL Mask    */
#define CSR_PHY_REG_SX3_RG_SX_PFD_UP_Pos      20                                                      /*!< CSR_PHY REG_SX3: RG_SX_PFD_UP Position  */
#define CSR_PHY_REG_SX3_RG_SX_PFD_UP_Msk      (0x01UL << CSR_PHY_REG_SX3_RG_SX_PFD_UP_Pos)            /*!< CSR_PHY REG_SX3: RG_SX_PFD_UP Mask      */
#define CSR_PHY_REG_SX3_RG_SX_PFD_DN_Pos      21                                                      /*!< CSR_PHY REG_SX3: RG_SX_PFD_DN Position  */
#define CSR_PHY_REG_SX3_RG_SX_PFD_DN_Msk      (0x01UL << CSR_PHY_REG_SX3_RG_SX_PFD_DN_Pos)            /*!< CSR_PHY REG_SX3: RG_SX_PFD_DN Mask      */
#define CSR_PHY_REG_SX3_RG_SX_PFD_RST_MAN_Pos 22                                                      /*!< CSR_PHY REG_SX3: RG_SX_PFD_RST_MAN Position */
#define CSR_PHY_REG_SX3_RG_SX_PFD_RST_MAN_Msk (0x01UL << CSR_PHY_REG_SX3_RG_SX_PFD_RST_MAN_Pos)       /*!< CSR_PHY REG_SX3: RG_SX_PFD_RST_MAN Mask */
#define CSR_PHY_REG_SX3_RG_SX_PFD_REF_EDGE_Pos 23                                                     /*!< CSR_PHY REG_SX3: RG_SX_PFD_REF_EDGE Position */
#define CSR_PHY_REG_SX3_RG_SX_PFD_REF_EDGE_Msk (0x01UL << CSR_PHY_REG_SX3_RG_SX_PFD_REF_EDGE_Pos)     /*!< CSR_PHY REG_SX3: RG_SX_PFD_REF_EDGE Mask */
#define CSR_PHY_REG_SX3_RG_SX_PFD_DIV_EDGE_Pos 24                                                     /*!< CSR_PHY REG_SX3: RG_SX_PFD_DIV_EDGE Position */
#define CSR_PHY_REG_SX3_RG_SX_PFD_DIV_EDGE_Msk (0x01UL << CSR_PHY_REG_SX3_RG_SX_PFD_DIV_EDGE_Pos)     /*!< CSR_PHY REG_SX3: RG_SX_PFD_DIV_EDGE Mask */
#define CSR_PHY_REG_SX3_RG_SX_ILF_CSEL_Pos    26                                                      /*!< CSR_PHY REG_SX3: RG_SX_ILF_CSEL Position */
#define CSR_PHY_REG_SX3_RG_SX_ILF_CSEL_Msk    (0x01UL << CSR_PHY_REG_SX3_RG_SX_ILF_CSEL_Pos)          /*!< CSR_PHY REG_SX3: RG_SX_ILF_CSEL Mask    */
#define CSR_PHY_REG_SX3_RG_SX_PLF_VTUNE_TEST_Pos 27                                                   /*!< CSR_PHY REG_SX3: RG_SX_PLF_VTUNE_TEST Position */
#define CSR_PHY_REG_SX3_RG_SX_PLF_VTUNE_TEST_Msk (0x01UL << CSR_PHY_REG_SX3_RG_SX_PLF_VTUNE_TEST_Pos) /*!< CSR_PHY REG_SX3: RG_SX_PLF_VTUNE_TEST Mask */
#define CSR_PHY_REG_SX3_RG_SX_PLF_VTUNE_EXT_Pos 28                                                    /*!< CSR_PHY REG_SX3: RG_SX_PLF_VTUNE_EXT Position */
#define CSR_PHY_REG_SX3_RG_SX_PLF_VTUNE_EXT_Msk (0x01UL << CSR_PHY_REG_SX3_RG_SX_PLF_VTUNE_EXT_Pos)   /*!< CSR_PHY REG_SX3: RG_SX_PLF_VTUNE_EXT Mask */
#define CSR_PHY_REG_SX3_RG_SX_PLF_VTUNE_SEL_Pos 29                                                    /*!< CSR_PHY REG_SX3: RG_SX_PLF_VTUNE_SEL Position */
#define CSR_PHY_REG_SX3_RG_SX_PLF_VTUNE_SEL_Msk (0x01UL << CSR_PHY_REG_SX3_RG_SX_PLF_VTUNE_SEL_Pos)   /*!< CSR_PHY REG_SX3: RG_SX_PLF_VTUNE_SEL Mask */

/* -------------------------------  CSR_PHY_REG_SX4  ------------------------------ */
#define CSR_PHY_REG_SX4_RG_SX_VCO_ISEL_Pos    0                                                       /*!< CSR_PHY REG_SX4: RG_SX_VCO_ISEL Position */
#define CSR_PHY_REG_SX4_RG_SX_VCO_ISEL_Msk    (0x0fUL << CSR_PHY_REG_SX4_RG_SX_VCO_ISEL_Pos)          /*!< CSR_PHY REG_SX4: RG_SX_VCO_ISEL Mask    */
#define CSR_PHY_REG_SX4_RG_SX_PREVDD_Pos      4                                                       /*!< CSR_PHY REG_SX4: RG_SX_PREVDD Position  */
#define CSR_PHY_REG_SX4_RG_SX_PREVDD_Msk      (0x0fUL << CSR_PHY_REG_SX4_RG_SX_PREVDD_Pos)            /*!< CSR_PHY REG_SX4: RG_SX_PREVDD Mask      */
#define CSR_PHY_REG_SX4_RG_SX_PSCONTERVDD_Pos 8                                                       /*!< CSR_PHY REG_SX4: RG_SX_PSCONTERVDD Position */
#define CSR_PHY_REG_SX4_RG_SX_PSCONTERVDD_Msk (0x0fUL << CSR_PHY_REG_SX4_RG_SX_PSCONTERVDD_Pos)       /*!< CSR_PHY REG_SX4: RG_SX_PSCONTERVDD Mask */
#define CSR_PHY_REG_SX4_RG_SX_PRE_SDM_EDGE_V12D_Pos 12                                                /*!< CSR_PHY REG_SX4: RG_SX_PRE_SDM_EDGE_V12D Position */
#define CSR_PHY_REG_SX4_RG_SX_PRE_SDM_EDGE_V12D_Msk (0x01UL << CSR_PHY_REG_SX4_RG_SX_PRE_SDM_EDGE_V12D_Pos)/*!< CSR_PHY REG_SX4: RG_SX_PRE_SDM_EDGE_V12D Mask */
#define CSR_PHY_REG_SX4_RG_SX_SUB_SEL_Pos     13                                                      /*!< CSR_PHY REG_SX4: RG_SX_SUB_SEL Position */
#define CSR_PHY_REG_SX4_RG_SX_SUB_SEL_Msk     (0x7fUL << CSR_PHY_REG_SX4_RG_SX_SUB_SEL_Pos)           /*!< CSR_PHY REG_SX4: RG_SX_SUB_SEL Mask     */
#define CSR_PHY_REG_SX4_RG_SX_RST_H_DIV_Pos   21                                                      /*!< CSR_PHY REG_SX4: RG_SX_RST_H_DIV Position */
#define CSR_PHY_REG_SX4_RG_SX_RST_H_DIV_Msk   (0x01UL << CSR_PHY_REG_SX4_RG_SX_RST_H_DIV_Pos)         /*!< CSR_PHY REG_SX4: RG_SX_RST_H_DIV Mask   */
#define CSR_PHY_REG_SX4_RG_SX_SDM_EDGE_Pos    22                                                      /*!< CSR_PHY REG_SX4: RG_SX_SDM_EDGE Position */
#define CSR_PHY_REG_SX4_RG_SX_SDM_EDGE_Msk    (0x01UL << CSR_PHY_REG_SX4_RG_SX_SDM_EDGE_Pos)          /*!< CSR_PHY REG_SX4: RG_SX_SDM_EDGE Mask    */
#define CSR_PHY_REG_SX4_RG_SX_VCO_VCCBSEL_Pos 27                                                      /*!< CSR_PHY REG_SX4: RG_SX_VCO_VCCBSEL Position */
#define CSR_PHY_REG_SX4_RG_SX_VCO_VCCBSEL_Msk (0x07UL << CSR_PHY_REG_SX4_RG_SX_VCO_VCCBSEL_Pos)       /*!< CSR_PHY REG_SX4: RG_SX_VCO_VCCBSEL Mask */
#define CSR_PHY_REG_SX4_RG_SX_VCO_FC_Pos      30                                                      /*!< CSR_PHY REG_SX4: RG_SX_VCO_FC Position  */
#define CSR_PHY_REG_SX4_RG_SX_VCO_FC_Msk      (0x01UL << CSR_PHY_REG_SX4_RG_SX_VCO_FC_Pos)            /*!< CSR_PHY REG_SX4: RG_SX_VCO_FC Mask      */

/* -------------------------------  CSR_PHY_REG_SX5  ------------------------------ */
#define CSR_PHY_REG_SX5_RG_SX_VCO_VARBSEL1_Pos 0                                                      /*!< CSR_PHY REG_SX5: RG_SX_VCO_VARBSEL1 Position */
#define CSR_PHY_REG_SX5_RG_SX_VCO_VARBSEL1_Msk (0x0fUL << CSR_PHY_REG_SX5_RG_SX_VCO_VARBSEL1_Pos)     /*!< CSR_PHY REG_SX5: RG_SX_VCO_VARBSEL1 Mask */
#define CSR_PHY_REG_SX5_RG_SX_VCO_VARBSEL2_Pos 4                                                      /*!< CSR_PHY REG_SX5: RG_SX_VCO_VARBSEL2 Position */
#define CSR_PHY_REG_SX5_RG_SX_VCO_VARBSEL2_Msk (0x0fUL << CSR_PHY_REG_SX5_RG_SX_VCO_VARBSEL2_Pos)     /*!< CSR_PHY REG_SX5: RG_SX_VCO_VARBSEL2 Mask */
#define CSR_PHY_REG_SX5_RG_EN_SX_DITHER_Pos   8                                                       /*!< CSR_PHY REG_SX5: RG_EN_SX_DITHER Position */
#define CSR_PHY_REG_SX5_RG_EN_SX_DITHER_Msk   (0x01UL << CSR_PHY_REG_SX5_RG_EN_SX_DITHER_Pos)         /*!< CSR_PHY REG_SX5: RG_EN_SX_DITHER Mask   */
#define CSR_PHY_REG_SX5_RG_SX_DITHER_WEIGHT_Pos 9                                                     /*!< CSR_PHY REG_SX5: RG_SX_DITHER_WEIGHT Position */
#define CSR_PHY_REG_SX5_RG_SX_DITHER_WEIGHT_Msk (0x03UL << CSR_PHY_REG_SX5_RG_SX_DITHER_WEIGHT_Pos)   /*!< CSR_PHY REG_SX5: RG_SX_DITHER_WEIGHT Mask */
#define CSR_PHY_REG_SX5_RG_SX_MOD_ORDER_Pos   11                                                      /*!< CSR_PHY REG_SX5: RG_SX_MOD_ORDER Position */
#define CSR_PHY_REG_SX5_RG_SX_MOD_ORDER_Msk   (0x03UL << CSR_PHY_REG_SX5_RG_SX_MOD_ORDER_Pos)         /*!< CSR_PHY REG_SX5: RG_SX_MOD_ORDER Mask   */

/* ---------------------------  CSR_PHY_REG_SX_VCO_AAC  --------------------------- */
#define CSR_PHY_REG_SX_VCO_AAC_RG_SX_VO_ISEL_MAN_Pos 0                                                /*!< CSR_PHY REG_SX_VCO_AAC: RG_SX_VO_ISEL_MAN Position */
#define CSR_PHY_REG_SX_VCO_AAC_RG_SX_VO_ISEL_MAN_Msk (0x01UL << CSR_PHY_REG_SX_VCO_AAC_RG_SX_VO_ISEL_MAN_Pos)/*!< CSR_PHY REG_SX_VCO_AAC: RG_SX_VO_ISEL_MAN Mask */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_DIS_Pos 1                                                    /*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_DIS Position */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_DIS_Msk (0x01UL << CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_DIS_Pos) /*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_DIS Mask */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_TAR_Pos 4                                                    /*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_TAR Position */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_TAR_Msk (0x0fUL << CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_TAR_Pos) /*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_TAR Mask */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_TEST_EN_Pos 8                                                /*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_TEST_EN Position */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_TEST_EN_Msk (0x01UL << CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_TEST_EN_Pos)/*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_TEST_EN Mask */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_TEST_SEL_Pos 9                                               /*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_TEST_SEL Position */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_TEST_SEL_Msk (0x01UL << CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_TEST_SEL_Pos)/*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_TEST_SEL Mask */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_INIT_Pos 12                                                  /*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_INIT Position */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_INIT_Msk (0x03UL << CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_INIT_Pos)/*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_INIT Mask */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_EVA_TS_Pos 14                                                /*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_EVA_TS Position */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_EVA_TS_Msk (0x03UL << CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_EVA_TS_Pos)/*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_EVA_TS Mask */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_IMAX_Pos 16                                                  /*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_IMAX Position */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_IMAX_Msk (0x0fUL << CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_IMAX_Pos)/*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_IMAX Mask */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_IOST_Pos 20                                                  /*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_IOST Position */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_IOST_Msk (0x03UL << CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_IOST_Pos)/*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_IOST Mask */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_EN_MAN_Pos 24                                                /*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_EN_MAN Position */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_EN_MAN_Msk (0x01UL << CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_EN_MAN_Pos)/*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_EN_MAN Mask */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_EN_Pos 25                                                    /*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_EN Position */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_EN_Msk (0x01UL << CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_EN_Pos)   /*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_EN Mask */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_EVA_MAN_Pos 26                                               /*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_EVA_MAN Position */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_EVA_MAN_Msk (0x01UL << CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_EVA_MAN_Pos)/*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_EVA_MAN Mask */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_EVA_Pos 27                                                   /*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_EVA Position */
#define CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_EVA_Msk (0x01UL << CSR_PHY_REG_SX_VCO_AAC_RG_VO_AAC_EVA_Pos) /*!< CSR_PHY REG_SX_VCO_AAC: RG_VO_AAC_EVA Mask */

/* ----------------------------  CSR_PHY_REG_SX_SBCAL  ---------------------------- */
#define CSR_PHY_REG_SX_SBCAL_RG_SX_SUB_SEL_MAN_Pos 0                                                  /*!< CSR_PHY REG_SX_SBCAL: RG_SX_SUB_SEL_MAN Position */
#define CSR_PHY_REG_SX_SBCAL_RG_SX_SUB_SEL_MAN_Msk (0x01UL << CSR_PHY_REG_SX_SBCAL_RG_SX_SUB_SEL_MAN_Pos)/*!< CSR_PHY REG_SX_SBCAL: RG_SX_SUB_SEL_MAN Mask */
#define CSR_PHY_REG_SX_SBCAL_RG_SX_SBCAL_AW_Pos 1                                                     /*!< CSR_PHY REG_SX_SBCAL: RG_SX_SBCAL_AW Position */
#define CSR_PHY_REG_SX_SBCAL_RG_SX_SBCAL_AW_Msk (0x01UL << CSR_PHY_REG_SX_SBCAL_RG_SX_SBCAL_AW_Pos)   /*!< CSR_PHY REG_SX_SBCAL: RG_SX_SBCAL_AW Mask */
#define CSR_PHY_REG_SX_SBCAL_RG_SX_SBCAL_RX_SIDE_Pos 2                                                /*!< CSR_PHY REG_SX_SBCAL: RG_SX_SBCAL_RX_SIDE Position */
#define CSR_PHY_REG_SX_SBCAL_RG_SX_SBCAL_RX_SIDE_Msk (0x01UL << CSR_PHY_REG_SX_SBCAL_RG_SX_SBCAL_RX_SIDE_Pos)/*!< CSR_PHY REG_SX_SBCAL: RG_SX_SBCAL_RX_SIDE Mask */
#define CSR_PHY_REG_SX_SBCAL_RG_SX_SBCAL_CT_Pos 3                                                     /*!< CSR_PHY REG_SX_SBCAL: RG_SX_SBCAL_CT Position */
#define CSR_PHY_REG_SX_SBCAL_RG_SX_SBCAL_CT_Msk (0x03UL << CSR_PHY_REG_SX_SBCAL_RG_SX_SBCAL_CT_Pos)   /*!< CSR_PHY REG_SX_SBCAL: RG_SX_SBCAL_CT Mask */
#define CSR_PHY_REG_SX_SBCAL_RG_SX_SBCAL_WT_Pos 5                                                     /*!< CSR_PHY REG_SX_SBCAL: RG_SX_SBCAL_WT Position */
#define CSR_PHY_REG_SX_SBCAL_RG_SX_SBCAL_WT_Msk (0x01UL << CSR_PHY_REG_SX_SBCAL_RG_SX_SBCAL_WT_Pos)   /*!< CSR_PHY REG_SX_SBCAL: RG_SX_SBCAL_WT Mask */
#define CSR_PHY_REG_SX_SBCAL_RG_SX_SUB_C0P5_DIS_Pos 6                                                 /*!< CSR_PHY REG_SX_SBCAL: RG_SX_SUB_C0P5_DIS Position */
#define CSR_PHY_REG_SX_SBCAL_RG_SX_SUB_C0P5_DIS_Msk (0x01UL << CSR_PHY_REG_SX_SBCAL_RG_SX_SUB_C0P5_DIS_Pos)/*!< CSR_PHY REG_SX_SBCAL: RG_SX_SUB_C0P5_DIS Mask */
#define CSR_PHY_REG_SX_SBCAL_RG_SX_SBCAL_DIFFMIN_Pos 7                                                /*!< CSR_PHY REG_SX_SBCAL: RG_SX_SBCAL_DIFFMIN Position */
#define CSR_PHY_REG_SX_SBCAL_RG_SX_SBCAL_DIFFMIN_Msk (0x01UL << CSR_PHY_REG_SX_SBCAL_RG_SX_SBCAL_DIFFMIN_Pos)/*!< CSR_PHY REG_SX_SBCAL: RG_SX_SBCAL_DIFFMIN Mask */
#define CSR_PHY_REG_SX_SBCAL_RG_SX_SBCAL_NTARG_MAN_Pos 15                                             /*!< CSR_PHY REG_SX_SBCAL: RG_SX_SBCAL_NTARG_MAN Position */
#define CSR_PHY_REG_SX_SBCAL_RG_SX_SBCAL_NTARG_MAN_Msk (0x01UL << CSR_PHY_REG_SX_SBCAL_RG_SX_SBCAL_NTARG_MAN_Pos)/*!< CSR_PHY REG_SX_SBCAL: RG_SX_SBCAL_NTARG_MAN Mask */
#define CSR_PHY_REG_SX_SBCAL_RG_SX_SBCAL_NTARG_Pos 16                                                 /*!< CSR_PHY REG_SX_SBCAL: RG_SX_SBCAL_NTARG Position */
#define CSR_PHY_REG_SX_SBCAL_RG_SX_SBCAL_NTARG_Msk (0x00007fffUL << CSR_PHY_REG_SX_SBCAL_RG_SX_SBCAL_NTARG_Pos)/*!< CSR_PHY REG_SX_SBCAL: RG_SX_SBCAL_NTARG Mask */

/* ---------------------------  CSR_PHY_REG_DFM_LGCAL_1  -------------------------- */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_PCP_ILGPOL1_Pos 0                                              /*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_PCP_ILGPOL1 Position */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_PCP_ILGPOL1_Msk (0x01UL << CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_PCP_ILGPOL1_Pos)/*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_PCP_ILGPOL1 Mask */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_PCP_ILG1_Pos 1                                                 /*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_PCP_ILG1 Position */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_PCP_ILG1_Msk (0x07UL << CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_PCP_ILG1_Pos)/*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_PCP_ILG1 Mask */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_PCP_ILGPOL2_Pos 4                                              /*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_PCP_ILGPOL2 Position */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_PCP_ILGPOL2_Msk (0x01UL << CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_PCP_ILGPOL2_Pos)/*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_PCP_ILGPOL2 Mask */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_PCP_ILG2_Pos 5                                                 /*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_PCP_ILG2 Position */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_PCP_ILG2_Msk (0x07UL << CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_PCP_ILG2_Pos)/*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_PCP_ILG2 Mask */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_PCP_IOSTPOL_Pos 8                                              /*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_PCP_IOSTPOL Position */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_PCP_IOSTPOL_Msk (0x01UL << CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_PCP_IOSTPOL_Pos)/*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_PCP_IOSTPOL Mask */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_PCP_IOSTTX_Pos 9                                               /*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_PCP_IOSTTX Position */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_PCP_IOSTTX_Msk (0x07UL << CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_PCP_IOSTTX_Pos)/*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_PCP_IOSTTX Mask */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_PCP_IOSTRX_Pos 12                                              /*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_PCP_IOSTRX Position */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_PCP_IOSTRX_Msk (0x07UL << CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_PCP_IOSTRX_Pos)/*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_PCP_IOSTRX Mask */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_ICP_IOSTPOL_Pos 15                                             /*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_ICP_IOSTPOL Position */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_ICP_IOSTPOL_Msk (0x01UL << CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_ICP_IOSTPOL_Pos)/*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_ICP_IOSTPOL Mask */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_ICP_IOSTTX_Pos 16                                              /*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_ICP_IOSTTX Position */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_ICP_IOSTTX_Msk (0x07UL << CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_ICP_IOSTTX_Pos)/*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_ICP_IOSTTX Mask */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_ICP_IOSTRX_Pos 19                                              /*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_ICP_IOSTRX Position */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_ICP_IOSTRX_Msk (0x07UL << CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_ICP_IOSTRX_Pos)/*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_ICP_IOSTRX Mask */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_ICP_ENT_TS_Pos 23                                              /*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_ICP_ENT_TS Position */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_ICP_ENT_TS_Msk (0x07UL << CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_ICP_ENT_TS_Pos)/*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_ICP_ENT_TS Mask */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_ICP_ENT_MAN_Pos 27                                             /*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_ICP_ENT_MAN Position */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_ICP_ENT_MAN_Msk (0x01UL << CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_ICP_ENT_MAN_Pos)/*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_ICP_ENT_MAN Mask */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_ICP_ENT_Pos 28                                                 /*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_ICP_ENT Position */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_ICP_ENT_Msk (0x01UL << CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_ICP_ENT_Pos)/*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_ICP_ENT Mask */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_LGCAL_KPRAT_Pos 30                                             /*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_LGCAL_KPRAT Position */
#define CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_LGCAL_KPRAT_Msk (0x03UL << CSR_PHY_REG_DFM_LGCAL_1_RG_DFM_LGCAL_KPRAT_Pos)/*!< CSR_PHY REG_DFM_LGCAL_1: RG_DFM_LGCAL_KPRAT Mask */

/* ---------------------------  CSR_PHY_REG_DFM_LGCAL_2  -------------------------- */
#define CSR_PHY_REG_DFM_LGCAL_2_RG_DFM_LGCAL_MAN_Pos 0                                                /*!< CSR_PHY REG_DFM_LGCAL_2: RG_DFM_LGCAL_MAN Position */
#define CSR_PHY_REG_DFM_LGCAL_2_RG_DFM_LGCAL_MAN_Msk (0x01UL << CSR_PHY_REG_DFM_LGCAL_2_RG_DFM_LGCAL_MAN_Pos)/*!< CSR_PHY REG_DFM_LGCAL_2: RG_DFM_LGCAL_MAN Mask */
#define CSR_PHY_REG_DFM_LGCAL_2_RG_DFM_LGCAL_CT_Pos 1                                                 /*!< CSR_PHY REG_DFM_LGCAL_2: RG_DFM_LGCAL_CT Position */
#define CSR_PHY_REG_DFM_LGCAL_2_RG_DFM_LGCAL_CT_Msk (0x03UL << CSR_PHY_REG_DFM_LGCAL_2_RG_DFM_LGCAL_CT_Pos)/*!< CSR_PHY REG_DFM_LGCAL_2: RG_DFM_LGCAL_CT Mask */
#define CSR_PHY_REG_DFM_LGCAL_2_RG_DFM_LGCAL1_AW_Pos 3                                                /*!< CSR_PHY REG_DFM_LGCAL_2: RG_DFM_LGCAL1_AW Position */
#define CSR_PHY_REG_DFM_LGCAL_2_RG_DFM_LGCAL1_AW_Msk (0x01UL << CSR_PHY_REG_DFM_LGCAL_2_RG_DFM_LGCAL1_AW_Pos)/*!< CSR_PHY REG_DFM_LGCAL_2: RG_DFM_LGCAL1_AW Mask */
#define CSR_PHY_REG_DFM_LGCAL_2_RG_DFM_LGCAL2_AW_Pos 4                                                /*!< CSR_PHY REG_DFM_LGCAL_2: RG_DFM_LGCAL2_AW Position */
#define CSR_PHY_REG_DFM_LGCAL_2_RG_DFM_LGCAL2_AW_Msk (0x01UL << CSR_PHY_REG_DFM_LGCAL_2_RG_DFM_LGCAL2_AW_Pos)/*!< CSR_PHY REG_DFM_LGCAL_2: RG_DFM_LGCAL2_AW Mask */
#define CSR_PHY_REG_DFM_LGCAL_2_RG_DFM_LGCAL_DNN_Pos 6                                                /*!< CSR_PHY REG_DFM_LGCAL_2: RG_DFM_LGCAL_DNN Position */
#define CSR_PHY_REG_DFM_LGCAL_2_RG_DFM_LGCAL_DNN_Msk (0x00000fffUL << CSR_PHY_REG_DFM_LGCAL_2_RG_DFM_LGCAL_DNN_Pos)/*!< CSR_PHY REG_DFM_LGCAL_2: RG_DFM_LGCAL_DNN Mask */
#define CSR_PHY_REG_DFM_LGCAL_2_RG_DFM_LGCAL_KCAL_Pos 19                                              /*!< CSR_PHY REG_DFM_LGCAL_2: RG_DFM_LGCAL_KCAL Position */
#define CSR_PHY_REG_DFM_LGCAL_2_RG_DFM_LGCAL_KCAL_Msk (0x00001fffUL << CSR_PHY_REG_DFM_LGCAL_2_RG_DFM_LGCAL_KCAL_Pos)/*!< CSR_PHY REG_DFM_LGCAL_2: RG_DFM_LGCAL_KCAL Mask */

/* ----------------------------  CSR_PHY_REG_DFM_RCCAL  --------------------------- */
#define CSR_PHY_REG_DFM_RCCAL_RG_DFM_RCCAL_MAN_Pos 0                                                  /*!< CSR_PHY REG_DFM_RCCAL: RG_DFM_RCCAL_MAN Position */
#define CSR_PHY_REG_DFM_RCCAL_RG_DFM_RCCAL_MAN_Msk (0x01UL << CSR_PHY_REG_DFM_RCCAL_RG_DFM_RCCAL_MAN_Pos)/*!< CSR_PHY REG_DFM_RCCAL: RG_DFM_RCCAL_MAN Mask */
#define CSR_PHY_REG_DFM_RCCAL_RG_DFM_RCCAL_OST_Pos 1                                                  /*!< CSR_PHY REG_DFM_RCCAL: RG_DFM_RCCAL_OST Position */
#define CSR_PHY_REG_DFM_RCCAL_RG_DFM_RCCAL_OST_Msk (0x0fUL << CSR_PHY_REG_DFM_RCCAL_RG_DFM_RCCAL_OST_Pos)/*!< CSR_PHY REG_DFM_RCCAL: RG_DFM_RCCAL_OST Mask */
#define CSR_PHY_REG_DFM_RCCAL_RG_DFM_RCCAL_CNN_Pos 7                                                  /*!< CSR_PHY REG_DFM_RCCAL: RG_DFM_RCCAL_CNN Position */
#define CSR_PHY_REG_DFM_RCCAL_RG_DFM_RCCAL_CNN_Msk (0x000001ffUL << CSR_PHY_REG_DFM_RCCAL_RG_DFM_RCCAL_CNN_Pos)/*!< CSR_PHY REG_DFM_RCCAL: RG_DFM_RCCAL_CNN Mask */
#define CSR_PHY_REG_DFM_RCCAL_RG_DFM_RCCAL_TI_Pos 17                                                  /*!< CSR_PHY REG_DFM_RCCAL: RG_DFM_RCCAL_TI Position */
#define CSR_PHY_REG_DFM_RCCAL_RG_DFM_RCCAL_TI_Msk (0x01UL << CSR_PHY_REG_DFM_RCCAL_RG_DFM_RCCAL_TI_Pos)/*!< CSR_PHY REG_DFM_RCCAL: RG_DFM_RCCAL_TI Mask */
#define CSR_PHY_REG_DFM_RCCAL_RG_DFM_RCCAL_KRC_Pos 20                                                 /*!< CSR_PHY REG_DFM_RCCAL: RG_DFM_RCCAL_KRC Position */
#define CSR_PHY_REG_DFM_RCCAL_RG_DFM_RCCAL_KRC_Msk (0x00000fffUL << CSR_PHY_REG_DFM_RCCAL_RG_DFM_RCCAL_KRC_Pos)/*!< CSR_PHY REG_DFM_RCCAL: RG_DFM_RCCAL_KRC Mask */

/* ------------------------------  CSR_PHY_REG_TRXFE  ----------------------------- */
#define CSR_PHY_REG_TRXFE_RG_RX_GM_IDB_Pos    0                                                       /*!< CSR_PHY REG_TRXFE: RG_RX_GM_IDB Position */
#define CSR_PHY_REG_TRXFE_RG_RX_GM_IDB_Msk    (0x01UL << CSR_PHY_REG_TRXFE_RG_RX_GM_IDB_Pos)          /*!< CSR_PHY REG_TRXFE: RG_RX_GM_IDB Mask    */
#define CSR_PHY_REG_TRXFE_RG_RX_GM_BIAS_V12D_Pos 1                                                    /*!< CSR_PHY REG_TRXFE: RG_RX_GM_BIAS_V12D Position */
#define CSR_PHY_REG_TRXFE_RG_RX_GM_BIAS_V12D_Msk (0x03UL << CSR_PHY_REG_TRXFE_RG_RX_GM_BIAS_V12D_Pos) /*!< CSR_PHY REG_TRXFE: RG_RX_GM_BIAS_V12D Mask */
#define CSR_PHY_REG_TRXFE_RG_EN_RX_RSSI_COMP_Pos 4                                                    /*!< CSR_PHY REG_TRXFE: RG_EN_RX_RSSI_COMP Position */
#define CSR_PHY_REG_TRXFE_RG_EN_RX_RSSI_COMP_Msk (0x01UL << CSR_PHY_REG_TRXFE_RG_EN_RX_RSSI_COMP_Pos) /*!< CSR_PHY REG_TRXFE: RG_EN_RX_RSSI_COMP Mask */
#define CSR_PHY_REG_TRXFE_RG_TX_TSSI_BIAS_Pos 8                                                       /*!< CSR_PHY REG_TRXFE: RG_TX_TSSI_BIAS Position */
#define CSR_PHY_REG_TRXFE_RG_TX_TSSI_BIAS_Msk (0x03UL << CSR_PHY_REG_TRXFE_RG_TX_TSSI_BIAS_Pos)       /*!< CSR_PHY REG_TRXFE: RG_TX_TSSI_BIAS Mask */
#define CSR_PHY_REG_TRXFE_RG_TX_PA_CAS_Pos    10                                                      /*!< CSR_PHY REG_TRXFE: RG_TX_PA_CAS Position */
#define CSR_PHY_REG_TRXFE_RG_TX_PA_CAS_Msk    (0x07UL << CSR_PHY_REG_TRXFE_RG_TX_PA_CAS_Pos)          /*!< CSR_PHY REG_TRXFE: RG_TX_PA_CAS Mask    */
#define CSR_PHY_REG_TRXFE_RG_RX_RCCAL_MAN_Pos 17                                                      /*!< CSR_PHY REG_TRXFE: RG_RX_RCCAL_MAN Position */
#define CSR_PHY_REG_TRXFE_RG_RX_RCCAL_MAN_Msk (0x01UL << CSR_PHY_REG_TRXFE_RG_RX_RCCAL_MAN_Pos)       /*!< CSR_PHY REG_TRXFE: RG_RX_RCCAL_MAN Mask */
#define CSR_PHY_REG_TRXFE_RG_RX_RCCAL_CTUNE_Pos 20                                                    /*!< CSR_PHY REG_TRXFE: RG_RX_RCCAL_CTUNE Position */
#define CSR_PHY_REG_TRXFE_RG_RX_RCCAL_CTUNE_Msk (0x0fUL << CSR_PHY_REG_TRXFE_RG_RX_RCCAL_CTUNE_Pos)   /*!< CSR_PHY REG_TRXFE: RG_RX_RCCAL_CTUNE Mask */

/* -----------------------------  CSR_PHY_REG_TXGAIN  ----------------------------- */
#define CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN3_G2_Pos 0                                                     /*!< CSR_PHY REG_TXGAIN: RG_TX_PAGAIN3_G2 Position */
#define CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN3_G2_Msk (0x0fUL << CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN3_G2_Pos)   /*!< CSR_PHY REG_TXGAIN: RG_TX_PAGAIN3_G2 Mask */
#define CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN3_G1_Pos 4                                                     /*!< CSR_PHY REG_TXGAIN: RG_TX_PAGAIN3_G1 Position */
#define CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN3_G1_Msk (0x0fUL << CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN3_G1_Pos)   /*!< CSR_PHY REG_TXGAIN: RG_TX_PAGAIN3_G1 Mask */
#define CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN2_G2_Pos 8                                                     /*!< CSR_PHY REG_TXGAIN: RG_TX_PAGAIN2_G2 Position */
#define CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN2_G2_Msk (0x0fUL << CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN2_G2_Pos)   /*!< CSR_PHY REG_TXGAIN: RG_TX_PAGAIN2_G2 Mask */
#define CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN2_G1_Pos 12                                                    /*!< CSR_PHY REG_TXGAIN: RG_TX_PAGAIN2_G1 Position */
#define CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN2_G1_Msk (0x0fUL << CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN2_G1_Pos)   /*!< CSR_PHY REG_TXGAIN: RG_TX_PAGAIN2_G1 Mask */
#define CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN1_G2_Pos 16                                                    /*!< CSR_PHY REG_TXGAIN: RG_TX_PAGAIN1_G2 Position */
#define CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN1_G2_Msk (0x0fUL << CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN1_G2_Pos)   /*!< CSR_PHY REG_TXGAIN: RG_TX_PAGAIN1_G2 Mask */
#define CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN1_G1_Pos 20                                                    /*!< CSR_PHY REG_TXGAIN: RG_TX_PAGAIN1_G1 Position */
#define CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN1_G1_Msk (0x0fUL << CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN1_G1_Pos)   /*!< CSR_PHY REG_TXGAIN: RG_TX_PAGAIN1_G1 Mask */
#define CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN0_G2_Pos 24                                                    /*!< CSR_PHY REG_TXGAIN: RG_TX_PAGAIN0_G2 Position */
#define CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN0_G2_Msk (0x0fUL << CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN0_G2_Pos)   /*!< CSR_PHY REG_TXGAIN: RG_TX_PAGAIN0_G2 Mask */
#define CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN0_G1_Pos 28                                                    /*!< CSR_PHY REG_TXGAIN: RG_TX_PAGAIN0_G1 Position */
#define CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN0_G1_Msk (0x0fUL << CSR_PHY_REG_TXGAIN_RG_TX_PAGAIN0_G1_Pos)   /*!< CSR_PHY REG_TXGAIN: RG_TX_PAGAIN0_G1 Mask */

/* -----------------------  CSR_PHY_MISCELLANEOUS_REGISTER  ----------------------- */
#define CSR_PHY_MISCELLANEOUS_REGISTER_RG_TXC_SETUPTIME_Pos 0                                         /*!< CSR_PHY MISCELLANEOUS_REGISTER: RG_TXC_SETUPTIME Position */
#define CSR_PHY_MISCELLANEOUS_REGISTER_RG_TXC_SETUPTIME_Msk (0x0fUL << CSR_PHY_MISCELLANEOUS_REGISTER_RG_TXC_SETUPTIME_Pos)/*!< CSR_PHY MISCELLANEOUS_REGISTER: RG_TXC_SETUPTIME Mask */
#define CSR_PHY_MISCELLANEOUS_REGISTER_RG_TXC_STARTUPTIME_Pos 4                                       /*!< CSR_PHY MISCELLANEOUS_REGISTER: RG_TXC_STARTUPTIME Position */
#define CSR_PHY_MISCELLANEOUS_REGISTER_RG_TXC_STARTUPTIME_Msk (0x0fUL << CSR_PHY_MISCELLANEOUS_REGISTER_RG_TXC_STARTUPTIME_Pos)/*!< CSR_PHY MISCELLANEOUS_REGISTER: RG_TXC_STARTUPTIME Mask */
#define CSR_PHY_MISCELLANEOUS_REGISTER_RG_RXC_STARTUPTIME_Pos 8                                       /*!< CSR_PHY MISCELLANEOUS_REGISTER: RG_RXC_STARTUPTIME Position */
#define CSR_PHY_MISCELLANEOUS_REGISTER_RG_RXC_STARTUPTIME_Msk (0x0fUL << CSR_PHY_MISCELLANEOUS_REGISTER_RG_RXC_STARTUPTIME_Pos)/*!< CSR_PHY MISCELLANEOUS_REGISTER: RG_RXC_STARTUPTIME Mask */

/* --------------------------  CSR_PHY_READ_ONLY_FLAGS_1  ------------------------- */
#define CSR_PHY_READ_ONLY_FLAGS_1_DB_RX_RCCAL_CTUNE_Pos 0                                             /*!< CSR_PHY READ_ONLY_FLAGS_1: DB_RX_RCCAL_CTUNE Position */
#define CSR_PHY_READ_ONLY_FLAGS_1_DB_RX_RCCAL_CTUNE_Msk (0x0fUL << CSR_PHY_READ_ONLY_FLAGS_1_DB_RX_RCCAL_CTUNE_Pos)/*!< CSR_PHY READ_ONLY_FLAGS_1: DB_RX_RCCAL_CTUNE Mask */
#define CSR_PHY_READ_ONLY_FLAGS_1_AD_TX_TSSI_OUT_Pos 4                                                /*!< CSR_PHY READ_ONLY_FLAGS_1: AD_TX_TSSI_OUT Position */
#define CSR_PHY_READ_ONLY_FLAGS_1_AD_TX_TSSI_OUT_Msk (0x01UL << CSR_PHY_READ_ONLY_FLAGS_1_AD_TX_TSSI_OUT_Pos)/*!< CSR_PHY READ_ONLY_FLAGS_1: AD_TX_TSSI_OUT Mask */
#define CSR_PHY_READ_ONLY_FLAGS_1_AD_RX_COMP_MCU_OUT0_Pos 5                                           /*!< CSR_PHY READ_ONLY_FLAGS_1: AD_RX_COMP_MCU_OUT0 Position */
#define CSR_PHY_READ_ONLY_FLAGS_1_AD_RX_COMP_MCU_OUT0_Msk (0x01UL << CSR_PHY_READ_ONLY_FLAGS_1_AD_RX_COMP_MCU_OUT0_Pos)/*!< CSR_PHY READ_ONLY_FLAGS_1: AD_RX_COMP_MCU_OUT0 Mask */
#define CSR_PHY_READ_ONLY_FLAGS_1_AD_RX_COMP_MCU_OUT1_Pos 6                                           /*!< CSR_PHY READ_ONLY_FLAGS_1: AD_RX_COMP_MCU_OUT1 Position */
#define CSR_PHY_READ_ONLY_FLAGS_1_AD_RX_COMP_MCU_OUT1_Msk (0x01UL << CSR_PHY_READ_ONLY_FLAGS_1_AD_RX_COMP_MCU_OUT1_Pos)/*!< CSR_PHY READ_ONLY_FLAGS_1: AD_RX_COMP_MCU_OUT1 Mask */
#define CSR_PHY_READ_ONLY_FLAGS_1_AD_RX_COMP_BB_OUT_Pos 7                                             /*!< CSR_PHY READ_ONLY_FLAGS_1: AD_RX_COMP_BB_OUT Position */
#define CSR_PHY_READ_ONLY_FLAGS_1_AD_RX_COMP_BB_OUT_Msk (0x01UL << CSR_PHY_READ_ONLY_FLAGS_1_AD_RX_COMP_BB_OUT_Pos)/*!< CSR_PHY READ_ONLY_FLAGS_1: AD_RX_COMP_BB_OUT Mask */
#define CSR_PHY_READ_ONLY_FLAGS_1_DB_SX_VO_AAC_COMPOUT_Pos 9                                          /*!< CSR_PHY READ_ONLY_FLAGS_1: DB_SX_VO_AAC_COMPOUT Position */
#define CSR_PHY_READ_ONLY_FLAGS_1_DB_SX_VO_AAC_COMPOUT_Msk (0x01UL << CSR_PHY_READ_ONLY_FLAGS_1_DB_SX_VO_AAC_COMPOUT_Pos)/*!< CSR_PHY READ_ONLY_FLAGS_1: DB_SX_VO_AAC_COMPOUT Mask */
#define CSR_PHY_READ_ONLY_FLAGS_1_DB_SX_VO_ISEL_Pos 10                                                /*!< CSR_PHY READ_ONLY_FLAGS_1: DB_SX_VO_ISEL Position */
#define CSR_PHY_READ_ONLY_FLAGS_1_DB_SX_VO_ISEL_Msk (0x0fUL << CSR_PHY_READ_ONLY_FLAGS_1_DB_SX_VO_ISEL_Pos)/*!< CSR_PHY READ_ONLY_FLAGS_1: DB_SX_VO_ISEL Mask */
#define CSR_PHY_READ_ONLY_FLAGS_1_AD_CKT_VERSION_Pos 28                                               /*!< CSR_PHY READ_ONLY_FLAGS_1: AD_CKT_VERSION Position */
#define CSR_PHY_READ_ONLY_FLAGS_1_AD_CKT_VERSION_Msk (0x0fUL << CSR_PHY_READ_ONLY_FLAGS_1_AD_CKT_VERSION_Pos)/*!< CSR_PHY READ_ONLY_FLAGS_1: AD_CKT_VERSION Mask */

/* --------------------------  CSR_PHY_READ_ONLY_FLAGS_2  ------------------------- */
#define CSR_PHY_READ_ONLY_FLAGS_2_DB_DA_SX_SUB_SEL_Pos 0                                              /*!< CSR_PHY READ_ONLY_FLAGS_2: DB_DA_SX_SUB_SEL Position */
#define CSR_PHY_READ_ONLY_FLAGS_2_DB_DA_SX_SUB_SEL_Msk (0x7fUL << CSR_PHY_READ_ONLY_FLAGS_2_DB_DA_SX_SUB_SEL_Pos)/*!< CSR_PHY READ_ONLY_FLAGS_2: DB_DA_SX_SUB_SEL Mask */
#define CSR_PHY_READ_ONLY_FLAGS_2_DB_SX_SBCAL_NCOUNT_Pos 8                                            /*!< CSR_PHY READ_ONLY_FLAGS_2: DB_SX_SBCAL_NCOUNT Position */
#define CSR_PHY_READ_ONLY_FLAGS_2_DB_SX_SBCAL_NCOUNT_Msk (0x00007fffUL << CSR_PHY_READ_ONLY_FLAGS_2_DB_SX_SBCAL_NCOUNT_Pos)/*!< CSR_PHY READ_ONLY_FLAGS_2: DB_SX_SBCAL_NCOUNT Mask */
#define CSR_PHY_READ_ONLY_FLAGS_2_DB_DFM_RCCAL_CN_Pos 23                                              /*!< CSR_PHY READ_ONLY_FLAGS_2: DB_DFM_RCCAL_CN Position */
#define CSR_PHY_READ_ONLY_FLAGS_2_DB_DFM_RCCAL_CN_Msk (0x000001ffUL << CSR_PHY_READ_ONLY_FLAGS_2_DB_DFM_RCCAL_CN_Pos)/*!< CSR_PHY READ_ONLY_FLAGS_2: DB_DFM_RCCAL_CN Mask */

/* --------------------------  CSR_PHY_READ_ONLY_FLAGS_3  ------------------------- */
#define CSR_PHY_READ_ONLY_FLAGS_3_DB_DFM_LGCAL_N1_Pos 0                                               /*!< CSR_PHY READ_ONLY_FLAGS_3: DB_DFM_LGCAL_N1 Position */
#define CSR_PHY_READ_ONLY_FLAGS_3_DB_DFM_LGCAL_N1_Msk (0x0003ffffUL << CSR_PHY_READ_ONLY_FLAGS_3_DB_DFM_LGCAL_N1_Pos)/*!< CSR_PHY READ_ONLY_FLAGS_3: DB_DFM_LGCAL_N1 Mask */
#define CSR_PHY_READ_ONLY_FLAGS_3_DB_DFM_LGCAL_KCAL_Pos 19                                            /*!< CSR_PHY READ_ONLY_FLAGS_3: DB_DFM_LGCAL_KCAL Position */
#define CSR_PHY_READ_ONLY_FLAGS_3_DB_DFM_LGCAL_KCAL_Msk (0x00001fffUL << CSR_PHY_READ_ONLY_FLAGS_3_DB_DFM_LGCAL_KCAL_Pos)/*!< CSR_PHY READ_ONLY_FLAGS_3: DB_DFM_LGCAL_KCAL Mask */

/* --------------------------  CSR_PHY_READ_ONLY_FLAGS_4  ------------------------- */
#define CSR_PHY_READ_ONLY_FLAGS_4_DB_DFM_LGCAL_N2_Pos 0                                               /*!< CSR_PHY READ_ONLY_FLAGS_4: DB_DFM_LGCAL_N2 Position */
#define CSR_PHY_READ_ONLY_FLAGS_4_DB_DFM_LGCAL_N2_Msk (0x0003ffffUL << CSR_PHY_READ_ONLY_FLAGS_4_DB_DFM_LGCAL_N2_Pos)/*!< CSR_PHY READ_ONLY_FLAGS_4: DB_DFM_LGCAL_N2 Mask */
#define CSR_PHY_READ_ONLY_FLAGS_4_DB_DFM_RCCAL_KRC_Pos 20                                             /*!< CSR_PHY READ_ONLY_FLAGS_4: DB_DFM_RCCAL_KRC Position */
#define CSR_PHY_READ_ONLY_FLAGS_4_DB_DFM_RCCAL_KRC_Msk (0x00000fffUL << CSR_PHY_READ_ONLY_FLAGS_4_DB_DFM_RCCAL_KRC_Pos)/*!< CSR_PHY READ_ONLY_FLAGS_4: DB_DFM_RCCAL_KRC Mask */

/* --------------------------  CSR_PHY_READ_ONLY_FLAGS_5  ------------------------- */
#define CSR_PHY_READ_ONLY_FLAGS_5_DB_SX_SBCAL_NTARG_Pos 0                                             /*!< CSR_PHY READ_ONLY_FLAGS_5: DB_SX_SBCAL_NTARG Position */
#define CSR_PHY_READ_ONLY_FLAGS_5_DB_SX_SBCAL_NTARG_Msk (0x00007fffUL << CSR_PHY_READ_ONLY_FLAGS_5_DB_SX_SBCAL_NTARG_Pos)/*!< CSR_PHY READ_ONLY_FLAGS_5: DB_SX_SBCAL_NTARG Mask */
#define CSR_PHY_READ_ONLY_FLAGS_5_DB_SX_FDB_PHASESWAP_Pos 15                                          /*!< CSR_PHY READ_ONLY_FLAGS_5: DB_SX_FDB_PHASESWAP Position */
#define CSR_PHY_READ_ONLY_FLAGS_5_DB_SX_FDB_PHASESWAP_Msk (0x01UL << CSR_PHY_READ_ONLY_FLAGS_5_DB_SX_FDB_PHASESWAP_Pos)/*!< CSR_PHY READ_ONLY_FLAGS_5: DB_SX_FDB_PHASESWAP Mask */
#define CSR_PHY_READ_ONLY_FLAGS_5_DB_SX_FDB_CDELAY_Pos 16                                             /*!< CSR_PHY READ_ONLY_FLAGS_5: DB_SX_FDB_CDELAY Position */
#define CSR_PHY_READ_ONLY_FLAGS_5_DB_SX_FDB_CDELAY_Msk (0x1fUL << CSR_PHY_READ_ONLY_FLAGS_5_DB_SX_FDB_CDELAY_Pos)/*!< CSR_PHY READ_ONLY_FLAGS_5: DB_SX_FDB_CDELAY Mask */
#define CSR_PHY_READ_ONLY_FLAGS_5_DB_SX_FDB_FDELAY_Pos 24                                             /*!< CSR_PHY READ_ONLY_FLAGS_5: DB_SX_FDB_FDELAY Position */
#define CSR_PHY_READ_ONLY_FLAGS_5_DB_SX_FDB_FDELAY_Msk (0x0fUL << CSR_PHY_READ_ONLY_FLAGS_5_DB_SX_FDB_FDELAY_Pos)/*!< CSR_PHY READ_ONLY_FLAGS_5: DB_SX_FDB_FDELAY Mask */

/* -----------------------------  CSR_PHY_CTADC_ADC2  ----------------------------- */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_CK_64_32_SEL_Pos 0                                                 /*!< CSR_PHY CTADC_ADC2: RG_ADC2_CK_64_32_SEL Position */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_CK_64_32_SEL_Msk (0x01UL << CSR_PHY_CTADC_ADC2_RG_ADC2_CK_64_32_SEL_Pos)/*!< CSR_PHY CTADC_ADC2: RG_ADC2_CK_64_32_SEL Mask */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_EXT_CK_EN_Pos 1                                                    /*!< CSR_PHY CTADC_ADC2: RG_ADC2_EXT_CK_EN Position */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_EXT_CK_EN_Msk (0x01UL << CSR_PHY_CTADC_ADC2_RG_ADC2_EXT_CK_EN_Pos) /*!< CSR_PHY CTADC_ADC2: RG_ADC2_EXT_CK_EN Mask */
#define CSR_PHY_CTADC_ADC2_RG_RESET_CTADC_Pos 2                                                       /*!< CSR_PHY CTADC_ADC2: RG_RESET_CTADC Position */
#define CSR_PHY_CTADC_ADC2_RG_RESET_CTADC_Msk (0x01UL << CSR_PHY_CTADC_ADC2_RG_RESET_CTADC_Pos)       /*!< CSR_PHY CTADC_ADC2: RG_RESET_CTADC Mask */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_CLOCK_EDGE_Pos 3                                                   /*!< CSR_PHY CTADC_ADC2: RG_ADC2_CLOCK_EDGE Position */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_CLOCK_EDGE_Msk (0x01UL << CSR_PHY_CTADC_ADC2_RG_ADC2_CLOCK_EDGE_Pos)/*!< CSR_PHY CTADC_ADC2: RG_ADC2_CLOCK_EDGE Mask */
#define CSR_PHY_CTADC_ADC2_RG_EN_ADC2_EXTVOL_Pos 4                                                    /*!< CSR_PHY CTADC_ADC2: RG_EN_ADC2_EXTVOL Position */
#define CSR_PHY_CTADC_ADC2_RG_EN_ADC2_EXTVOL_Msk (0x01UL << CSR_PHY_CTADC_ADC2_RG_EN_ADC2_EXTVOL_Pos) /*!< CSR_PHY CTADC_ADC2: RG_EN_ADC2_EXTVOL Mask */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_SCALING_Pos 5                                                      /*!< CSR_PHY CTADC_ADC2: RG_ADC2_SCALING Position */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_SCALING_Msk (0x03UL << CSR_PHY_CTADC_ADC2_RG_ADC2_SCALING_Pos)     /*!< CSR_PHY CTADC_ADC2: RG_ADC2_SCALING Mask */
#define CSR_PHY_CTADC_ADC2_RG_EN_ADC2_VBATVOL_Pos 7                                                   /*!< CSR_PHY CTADC_ADC2: RG_EN_ADC2_VBATVOL Position */
#define CSR_PHY_CTADC_ADC2_RG_EN_ADC2_VBATVOL_Msk (0x01UL << CSR_PHY_CTADC_ADC2_RG_EN_ADC2_VBATVOL_Pos)/*!< CSR_PHY CTADC_ADC2: RG_EN_ADC2_VBATVOL Mask */
#define CSR_PHY_CTADC_ADC2_RG_EN_RSSI_Pos     8                                                       /*!< CSR_PHY CTADC_ADC2: RG_EN_RSSI Position */
#define CSR_PHY_CTADC_ADC2_RG_EN_RSSI_Msk     (0x01UL << CSR_PHY_CTADC_ADC2_RG_EN_RSSI_Pos)           /*!< CSR_PHY CTADC_ADC2: RG_EN_RSSI Mask     */
#define CSR_PHY_CTADC_ADC2_RG_EN_TEMP_Pos     9                                                       /*!< CSR_PHY CTADC_ADC2: RG_EN_TEMP Position */
#define CSR_PHY_CTADC_ADC2_RG_EN_TEMP_Msk     (0x01UL << CSR_PHY_CTADC_ADC2_RG_EN_TEMP_Pos)           /*!< CSR_PHY CTADC_ADC2: RG_EN_TEMP Mask     */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_DA_MAN_Pos 10                                                      /*!< CSR_PHY CTADC_ADC2: RG_ADC2_DA_MAN Position */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_DA_MAN_Msk (0x01UL << CSR_PHY_CTADC_ADC2_RG_ADC2_DA_MAN_Pos)       /*!< CSR_PHY CTADC_ADC2: RG_ADC2_DA_MAN Mask */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_DIG_EN_Pos 11                                                      /*!< CSR_PHY CTADC_ADC2: RG_ADC2_DIG_EN Position */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_DIG_EN_Msk (0x01UL << CSR_PHY_CTADC_ADC2_RG_ADC2_DIG_EN_Pos)       /*!< CSR_PHY CTADC_ADC2: RG_ADC2_DIG_EN Mask */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_AUTO_TRIG_SW_Pos 12                                                /*!< CSR_PHY CTADC_ADC2: RG_ADC2_AUTO_TRIG_SW Position */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_AUTO_TRIG_SW_Msk (0x01UL << CSR_PHY_CTADC_ADC2_RG_ADC2_AUTO_TRIG_SW_Pos)/*!< CSR_PHY CTADC_ADC2: RG_ADC2_AUTO_TRIG_SW Mask */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_SETUP_DLY_Pos 13                                                   /*!< CSR_PHY CTADC_ADC2: RG_ADC2_SETUP_DLY Position */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_SETUP_DLY_Msk (0x000000ffUL << CSR_PHY_CTADC_ADC2_RG_ADC2_SETUP_DLY_Pos)/*!< CSR_PHY CTADC_ADC2: RG_ADC2_SETUP_DLY Mask */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_CONT_Pos   22                                                      /*!< CSR_PHY CTADC_ADC2: RG_ADC2_CONT Position */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_CONT_Msk   (0x01UL << CSR_PHY_CTADC_ADC2_RG_ADC2_CONT_Pos)         /*!< CSR_PHY CTADC_ADC2: RG_ADC2_CONT Mask   */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_MAN_PHY_EN_Pos 23                                                  /*!< CSR_PHY CTADC_ADC2: RG_ADC2_MAN_PHY_EN Position */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_MAN_PHY_EN_Msk (0x01UL << CSR_PHY_CTADC_ADC2_RG_ADC2_MAN_PHY_EN_Pos)/*!< CSR_PHY CTADC_ADC2: RG_ADC2_MAN_PHY_EN Mask */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_COARSE_Pos 25                                                      /*!< CSR_PHY CTADC_ADC2: RG_ADC2_COARSE Position */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_COARSE_Msk (0x03UL << CSR_PHY_CTADC_ADC2_RG_ADC2_COARSE_Pos)       /*!< CSR_PHY CTADC_ADC2: RG_ADC2_COARSE Mask */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_QUANTIZER_Pos 27                                                   /*!< CSR_PHY CTADC_ADC2: RG_ADC2_QUANTIZER Position */
#define CSR_PHY_CTADC_ADC2_RG_ADC2_QUANTIZER_Msk (0x03UL << CSR_PHY_CTADC_ADC2_RG_ADC2_QUANTIZER_Pos) /*!< CSR_PHY CTADC_ADC2: RG_ADC2_QUANTIZER Mask */
#define CSR_PHY_CTADC_ADC2_RG_EN_ADC2_Pos     29                                                      /*!< CSR_PHY CTADC_ADC2: RG_EN_ADC2 Position */
#define CSR_PHY_CTADC_ADC2_RG_EN_ADC2_Msk     (0x01UL << CSR_PHY_CTADC_ADC2_RG_EN_ADC2_Pos)           /*!< CSR_PHY CTADC_ADC2: RG_EN_ADC2 Mask     */
#define CSR_PHY_CTADC_ADC2_RG_EN_ADC2_CLK_Pos 30                                                      /*!< CSR_PHY CTADC_ADC2: RG_EN_ADC2_CLK Position */
#define CSR_PHY_CTADC_ADC2_RG_EN_ADC2_CLK_Msk (0x01UL << CSR_PHY_CTADC_ADC2_RG_EN_ADC2_CLK_Pos)       /*!< CSR_PHY CTADC_ADC2: RG_EN_ADC2_CLK Mask */
#define CSR_PHY_CTADC_ADC2_RG_RESET_ADC2_Pos  31                                                      /*!< CSR_PHY CTADC_ADC2: RG_RESET_ADC2 Position */
#define CSR_PHY_CTADC_ADC2_RG_RESET_ADC2_Msk  (0x01UL << CSR_PHY_CTADC_ADC2_RG_RESET_ADC2_Pos)        /*!< CSR_PHY CTADC_ADC2: RG_RESET_ADC2 Mask  */

/* ---------------------------  CSR_PHY__32KRC_COUNTER_  -------------------------- */
#define CSR_PHY__32KRC_COUNTER__RG_EN_RCCOUNT_Pos 0                                                   /*!< CSR_PHY _32KRC_COUNTER_: RG_EN_RCCOUNT Position */
#define CSR_PHY__32KRC_COUNTER__RG_EN_RCCOUNT_Msk (0x01UL << CSR_PHY__32KRC_COUNTER__RG_EN_RCCOUNT_Pos)/*!< CSR_PHY _32KRC_COUNTER_: RG_EN_RCCOUNT Mask */
#define CSR_PHY__32KRC_COUNTER__RG_COUNT_MODE_Pos 2                                                   /*!< CSR_PHY _32KRC_COUNTER_: RG_COUNT_MODE Position */
#define CSR_PHY__32KRC_COUNTER__RG_COUNT_MODE_Msk (0x03UL << CSR_PHY__32KRC_COUNTER__RG_COUNT_MODE_Pos)/*!< CSR_PHY _32KRC_COUNTER_: RG_COUNT_MODE Mask */
#define CSR_PHY__32KRC_COUNTER__RG_COUNT_BEGIN_Pos 4                                                  /*!< CSR_PHY _32KRC_COUNTER_: RG_COUNT_BEGIN Position */
#define CSR_PHY__32KRC_COUNTER__RG_COUNT_BEGIN_Msk (0x01UL << CSR_PHY__32KRC_COUNTER__RG_COUNT_BEGIN_Pos)/*!< CSR_PHY _32KRC_COUNTER_: RG_COUNT_BEGIN Mask */
#define CSR_PHY__32KRC_COUNTER__RG_ADC2_AVERAGE_Pos 6                                                 /*!< CSR_PHY _32KRC_COUNTER_: RG_ADC2_AVERAGE Position */
#define CSR_PHY__32KRC_COUNTER__RG_ADC2_AVERAGE_Msk (0x03UL << CSR_PHY__32KRC_COUNTER__RG_ADC2_AVERAGE_Pos)/*!< CSR_PHY _32KRC_COUNTER_: RG_ADC2_AVERAGE Mask */
#define CSR_PHY__32KRC_COUNTER__RG_CNTCLK_SEL_Pos 14                                                  /*!< CSR_PHY _32KRC_COUNTER_: RG_CNTCLK_SEL Position */
#define CSR_PHY__32KRC_COUNTER__RG_CNTCLK_SEL_Msk (0x03UL << CSR_PHY__32KRC_COUNTER__RG_CNTCLK_SEL_Pos)/*!< CSR_PHY _32KRC_COUNTER_: RG_CNTCLK_SEL Mask */
#define CSR_PHY__32KRC_COUNTER__RG_RC_COUNT_Pos 16                                                    /*!< CSR_PHY _32KRC_COUNTER_: RG_RC_COUNT Position */
#define CSR_PHY__32KRC_COUNTER__RG_RC_COUNT_Msk (0x3fUL << CSR_PHY__32KRC_COUNTER__RG_RC_COUNT_Pos)   /*!< CSR_PHY _32KRC_COUNTER_: RG_RC_COUNT Mask */
#define CSR_PHY__32KRC_COUNTER__RG_32KRC_TRIGGER_Pos 28                                               /*!< CSR_PHY _32KRC_COUNTER_: RG_32KRC_TRIGGER Position */
#define CSR_PHY__32KRC_COUNTER__RG_32KRC_TRIGGER_Msk (0x01UL << CSR_PHY__32KRC_COUNTER__RG_32KRC_TRIGGER_Pos)/*!< CSR_PHY _32KRC_COUNTER_: RG_32KRC_TRIGGER Mask */

/* ---------------------------  CSR_PHY_RC_COUNTER_OUT  --------------------------- */
#define CSR_PHY_RC_COUNTER_OUT_RG_RC_COUNT_OUT_Pos 0                                                  /*!< CSR_PHY RC_COUNTER_OUT: RG_RC_COUNT_OUT Position */
#define CSR_PHY_RC_COUNTER_OUT_RG_RC_COUNT_OUT_Msk (0x0003ffffUL << CSR_PHY_RC_COUNTER_OUT_RG_RC_COUNT_OUT_Pos)/*!< CSR_PHY RC_COUNTER_OUT: RG_RC_COUNT_OUT Mask */
#define CSR_PHY_RC_COUNTER_OUT_DB_EN_RX_RSSI_Pos 29                                                   /*!< CSR_PHY RC_COUNTER_OUT: DB_EN_RX_RSSI Position */
#define CSR_PHY_RC_COUNTER_OUT_DB_EN_RX_RSSI_Msk (0x01UL << CSR_PHY_RC_COUNTER_OUT_DB_EN_RX_RSSI_Pos) /*!< CSR_PHY RC_COUNTER_OUT: DB_EN_RX_RSSI Mask */
#define CSR_PHY_RC_COUNTER_OUT_DB_EN_ADC2_VBATVOL_Pos 30                                              /*!< CSR_PHY RC_COUNTER_OUT: DB_EN_ADC2_VBATVOL Position */
#define CSR_PHY_RC_COUNTER_OUT_DB_EN_ADC2_VBATVOL_Msk (0x01UL << CSR_PHY_RC_COUNTER_OUT_DB_EN_ADC2_VBATVOL_Pos)/*!< CSR_PHY RC_COUNTER_OUT: DB_EN_ADC2_VBATVOL Mask */
#define CSR_PHY_RC_COUNTER_OUT_DB_EN_ADC2_EXTVOL_Pos 31                                               /*!< CSR_PHY RC_COUNTER_OUT: DB_EN_ADC2_EXTVOL Position */
#define CSR_PHY_RC_COUNTER_OUT_DB_EN_ADC2_EXTVOL_Msk (0x01UL << CSR_PHY_RC_COUNTER_OUT_DB_EN_ADC2_EXTVOL_Pos)/*!< CSR_PHY RC_COUNTER_OUT: DB_EN_ADC2_EXTVOL Mask */

/* ---------------------------------  CSR_PHY_FDB  -------------------------------- */
#define CSR_PHY_FDB_RG_FDB_RDELAYF_Pos        0                                                       /*!< CSR_PHY FDB: RG_FDB_RDELAYF Position    */
#define CSR_PHY_FDB_RG_FDB_RDELAYF_Msk        (0x03UL << CSR_PHY_FDB_RG_FDB_RDELAYF_Pos)              /*!< CSR_PHY FDB: RG_FDB_RDELAYF Mask        */
#define CSR_PHY_FDB_RG_FDB_RDELAYS_Pos        2                                                       /*!< CSR_PHY FDB: RG_FDB_RDELAYS Position    */
#define CSR_PHY_FDB_RG_FDB_RDELAYS_Msk        (0x03UL << CSR_PHY_FDB_RG_FDB_RDELAYS_Pos)              /*!< CSR_PHY FDB: RG_FDB_RDELAYS Mask        */
#define CSR_PHY_FDB_RG_SX_FDB_CDELAY_Pos      4                                                       /*!< CSR_PHY FDB: RG_SX_FDB_CDELAY Position  */
#define CSR_PHY_FDB_RG_SX_FDB_CDELAY_Msk      (0x1fUL << CSR_PHY_FDB_RG_SX_FDB_CDELAY_Pos)            /*!< CSR_PHY FDB: RG_SX_FDB_CDELAY Mask      */
#define CSR_PHY_FDB_RG_EN_FDB_CDELAY_MUAL_Pos 9                                                       /*!< CSR_PHY FDB: RG_EN_FDB_CDELAY_MUAL Position */
#define CSR_PHY_FDB_RG_EN_FDB_CDELAY_MUAL_Msk (0x01UL << CSR_PHY_FDB_RG_EN_FDB_CDELAY_MUAL_Pos)       /*!< CSR_PHY FDB: RG_EN_FDB_CDELAY_MUAL Mask */
#define CSR_PHY_FDB_RG_SX_FDB_FDELAY_Pos      11                                                      /*!< CSR_PHY FDB: RG_SX_FDB_FDELAY Position  */
#define CSR_PHY_FDB_RG_SX_FDB_FDELAY_Msk      (0x0fUL << CSR_PHY_FDB_RG_SX_FDB_FDELAY_Pos)            /*!< CSR_PHY FDB: RG_SX_FDB_FDELAY Mask      */
#define CSR_PHY_FDB_RG_EN_FDB_FDELAY_MUAL_Pos 15                                                      /*!< CSR_PHY FDB: RG_EN_FDB_FDELAY_MUAL Position */
#define CSR_PHY_FDB_RG_EN_FDB_FDELAY_MUAL_Msk (0x01UL << CSR_PHY_FDB_RG_EN_FDB_FDELAY_MUAL_Pos)       /*!< CSR_PHY FDB: RG_EN_FDB_FDELAY_MUAL Mask */
#define CSR_PHY_FDB_RG_SX_FDB_PHASESWAP_Pos   17                                                      /*!< CSR_PHY FDB: RG_SX_FDB_PHASESWAP Position */
#define CSR_PHY_FDB_RG_SX_FDB_PHASESWAP_Msk   (0x01UL << CSR_PHY_FDB_RG_SX_FDB_PHASESWAP_Pos)         /*!< CSR_PHY FDB: RG_SX_FDB_PHASESWAP Mask   */
#define CSR_PHY_FDB_RG_EN_FDB_PHASESWAP_MUAL_Pos 18                                                   /*!< CSR_PHY FDB: RG_EN_FDB_PHASESWAP_MUAL Position */
#define CSR_PHY_FDB_RG_EN_FDB_PHASESWAP_MUAL_Msk (0x01UL << CSR_PHY_FDB_RG_EN_FDB_PHASESWAP_MUAL_Pos) /*!< CSR_PHY FDB: RG_EN_FDB_PHASESWAP_MUAL Mask */
#define CSR_PHY_FDB_RG_SX_FDB_HLDUTY_SEL_Pos  20                                                      /*!< CSR_PHY FDB: RG_SX_FDB_HLDUTY_SEL Position */
#define CSR_PHY_FDB_RG_SX_FDB_HLDUTY_SEL_Msk  (0x01UL << CSR_PHY_FDB_RG_SX_FDB_HLDUTY_SEL_Pos)        /*!< CSR_PHY FDB: RG_SX_FDB_HLDUTY_SEL Mask  */
#define CSR_PHY_FDB_RG_EN_FDB_HLDUTY_SEL_MUAL_Pos 21                                                  /*!< CSR_PHY FDB: RG_EN_FDB_HLDUTY_SEL_MUAL Position */
#define CSR_PHY_FDB_RG_EN_FDB_HLDUTY_SEL_MUAL_Msk (0x01UL << CSR_PHY_FDB_RG_EN_FDB_HLDUTY_SEL_MUAL_Pos)/*!< CSR_PHY FDB: RG_EN_FDB_HLDUTY_SEL_MUAL Mask */

/* -----------------------------  CSR_PHY_SCA_SETTING  ---------------------------- */
#define CSR_PHY_SCA_SETTING_RG_TX_XFMR_SCA_Pos 0                                                      /*!< CSR_PHY SCA_SETTING: RG_TX_XFMR_SCA Position */
#define CSR_PHY_SCA_SETTING_RG_TX_XFMR_SCA_Msk (0x07UL << CSR_PHY_SCA_SETTING_RG_TX_XFMR_SCA_Pos)     /*!< CSR_PHY SCA_SETTING: RG_TX_XFMR_SCA Mask */
#define CSR_PHY_SCA_SETTING_RG_RX_XFMR_SCA_Pos 4                                                      /*!< CSR_PHY SCA_SETTING: RG_RX_XFMR_SCA Position */
#define CSR_PHY_SCA_SETTING_RG_RX_XFMR_SCA_Msk (0x07UL << CSR_PHY_SCA_SETTING_RG_RX_XFMR_SCA_Pos)     /*!< CSR_PHY SCA_SETTING: RG_RX_XFMR_SCA Mask */
#define CSR_PHY_SCA_SETTING_RG_XFMR_MANUAL_Pos 8                                                      /*!< CSR_PHY SCA_SETTING: RG_XFMR_MANUAL Position */
#define CSR_PHY_SCA_SETTING_RG_XFMR_MANUAL_Msk (0x01UL << CSR_PHY_SCA_SETTING_RG_XFMR_MANUAL_Pos)     /*!< CSR_PHY SCA_SETTING: RG_XFMR_MANUAL Mask */
#define CSR_PHY_SCA_SETTING_RG_TRX_SCA_Pos    10                                                      /*!< CSR_PHY SCA_SETTING: RG_TRX_SCA Position */
#define CSR_PHY_SCA_SETTING_RG_TRX_SCA_Msk    (0x07UL << CSR_PHY_SCA_SETTING_RG_TRX_SCA_Pos)          /*!< CSR_PHY SCA_SETTING: RG_TRX_SCA Mask    */

/* -------------------------  CSR_PHY_RSSI_NON_RSSI_TSTMP  ------------------------ */
#define CSR_PHY_RSSI_NON_RSSI_TSTMP_DB_ADC2_RSSI_TSTMP_Pos 0                                          /*!< CSR_PHY RSSI_NON_RSSI_TSTMP: DB_ADC2_RSSI_TSTMP Position */
#define CSR_PHY_RSSI_NON_RSSI_TSTMP_DB_ADC2_RSSI_TSTMP_Msk (0x000000ffUL << CSR_PHY_RSSI_NON_RSSI_TSTMP_DB_ADC2_RSSI_TSTMP_Pos)/*!< CSR_PHY RSSI_NON_RSSI_TSTMP: DB_ADC2_RSSI_TSTMP Mask */
#define CSR_PHY_RSSI_NON_RSSI_TSTMP_DB_ADC2_DOUT_RSSI_Pos 8                                           /*!< CSR_PHY RSSI_NON_RSSI_TSTMP: DB_ADC2_DOUT_RSSI Position */
#define CSR_PHY_RSSI_NON_RSSI_TSTMP_DB_ADC2_DOUT_RSSI_Msk (0x000000ffUL << CSR_PHY_RSSI_NON_RSSI_TSTMP_DB_ADC2_DOUT_RSSI_Pos)/*!< CSR_PHY RSSI_NON_RSSI_TSTMP: DB_ADC2_DOUT_RSSI Mask */
#define CSR_PHY_RSSI_NON_RSSI_TSTMP_DB_ADC2_NON_RSSI_TSTMP_Pos 16                                     /*!< CSR_PHY RSSI_NON_RSSI_TSTMP: DB_ADC2_NON_RSSI_TSTMP Position */
#define CSR_PHY_RSSI_NON_RSSI_TSTMP_DB_ADC2_NON_RSSI_TSTMP_Msk (0x000000ffUL << CSR_PHY_RSSI_NON_RSSI_TSTMP_DB_ADC2_NON_RSSI_TSTMP_Pos)/*!< CSR_PHY RSSI_NON_RSSI_TSTMP: DB_ADC2_NON_RSSI_TSTMP Mask */
#define CSR_PHY_RSSI_NON_RSSI_TSTMP_DB_ADC2_DOUT_NON_RSSI_Pos 24                                      /*!< CSR_PHY RSSI_NON_RSSI_TSTMP: DB_ADC2_DOUT_NON_RSSI Position */
#define CSR_PHY_RSSI_NON_RSSI_TSTMP_DB_ADC2_DOUT_NON_RSSI_Msk (0x000000ffUL << CSR_PHY_RSSI_NON_RSSI_TSTMP_DB_ADC2_DOUT_NON_RSSI_Pos)/*!< CSR_PHY RSSI_NON_RSSI_TSTMP: DB_ADC2_DOUT_NON_RSSI Mask */

/* ---------------------------  CSR_PHY_DIGITAL_ADD_ON  --------------------------- */
#define CSR_PHY_DIGITAL_ADD_ON_RG_RCCAL_CNT_OFST_Pos 2                                                /*!< CSR_PHY DIGITAL_ADD_ON: RG_RCCAL_CNT_OFST Position */
#define CSR_PHY_DIGITAL_ADD_ON_RG_RCCAL_CNT_OFST_Msk (0x07UL << CSR_PHY_DIGITAL_ADD_ON_RG_RCCAL_CNT_OFST_Pos)/*!< CSR_PHY DIGITAL_ADD_ON: RG_RCCAL_CNT_OFST Mask */

/* ----------------------------  CSR_PHY_RF_TRX_EN_RO  ---------------------------- */
#define CSR_PHY_RF_TRX_EN_RO_DB_RF_TRXEN_FSM_Pos 0                                                    /*!< CSR_PHY RF_TRX_EN_RO: DB_RF_TRXEN_FSM Position */
#define CSR_PHY_RF_TRX_EN_RO_DB_RF_TRXEN_FSM_Msk (0x00000fffUL << CSR_PHY_RF_TRX_EN_RO_DB_RF_TRXEN_FSM_Pos)/*!< CSR_PHY RF_TRX_EN_RO: DB_RF_TRXEN_FSM Mask */
#define CSR_PHY_RF_TRX_EN_RO_DB_P2RF_TX_ENA_Pos 12                                                    /*!< CSR_PHY RF_TRX_EN_RO: DB_P2RF_TX_ENA Position */
#define CSR_PHY_RF_TRX_EN_RO_DB_P2RF_TX_ENA_Msk (0x01UL << CSR_PHY_RF_TRX_EN_RO_DB_P2RF_TX_ENA_Pos)   /*!< CSR_PHY RF_TRX_EN_RO: DB_P2RF_TX_ENA Mask */
#define CSR_PHY_RF_TRX_EN_RO_DB_P2RF_RX_ENA_Pos 13                                                    /*!< CSR_PHY RF_TRX_EN_RO: DB_P2RF_RX_ENA Position */
#define CSR_PHY_RF_TRX_EN_RO_DB_P2RF_RX_ENA_Msk (0x01UL << CSR_PHY_RF_TRX_EN_RO_DB_P2RF_RX_ENA_Pos)   /*!< CSR_PHY RF_TRX_EN_RO: DB_P2RF_RX_ENA Mask */
#define CSR_PHY_RF_TRX_EN_RO_RG_RF_TRXEN_FSM_RO_EN_Pos 31                                             /*!< CSR_PHY RF_TRX_EN_RO: RG_RF_TRXEN_FSM_RO_EN Position */
#define CSR_PHY_RF_TRX_EN_RO_RG_RF_TRXEN_FSM_RO_EN_Msk (0x01UL << CSR_PHY_RF_TRX_EN_RO_RG_RF_TRXEN_FSM_RO_EN_Pos)/*!< CSR_PHY RF_TRX_EN_RO: RG_RF_TRXEN_FSM_RO_EN Mask */


#define CONDOR_LL_FUNC_REG              ((CONDOR_LL_FUNC_REG_Type *) LL_FUNC_REG_BASE)
#define CONDOR_CSR_LL_REG_A2            ((CONDOR_CSR_LL_REG_A2_Type *) CSR_LL_REG_A2_BASE)

/** @} */ /* End of group Device_Peripheral_Registers */
/** @} */ /* End of group condor */
/** @} */ /* End of group (null) */

#ifdef __cplusplus
}
#endif

#include "core_n7.h"                               /*!< Cortex-M0 processor and core peripherals                              */

#endif  /* condor_H */

